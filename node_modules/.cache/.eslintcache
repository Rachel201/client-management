[{"C:\\Users\\USER\\Desktop\\client-management\\src\\index.tsx":"1","C:\\Users\\USER\\Desktop\\client-management\\src\\reportWebVitals.ts":"2","C:\\Users\\USER\\Desktop\\client-management\\src\\App.tsx":"3","C:\\Users\\USER\\Desktop\\client-management\\src\\store\\store.ts":"4","C:\\Users\\USER\\Desktop\\client-management\\src\\translations\\i18n.tsx":"5","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\AppNav.tsx":"6","C:\\Users\\USER\\Desktop\\client-management\\src\\store\\actions\\authActions.ts":"7","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\Home.tsx":"8","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\auth\\Login.tsx":"9","C:\\Users\\USER\\Desktop\\client-management\\src\\store\\reducers\\index.ts":"10","C:\\Users\\USER\\Desktop\\client-management\\src\\store\\actions\\errorActions.ts":"11","C:\\Users\\USER\\Desktop\\client-management\\src\\store\\actions\\types.ts":"12","C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\config.tsx":"13","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\header\\Header.tsx":"14","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\sidebar\\Sidebar.tsx":"15","C:\\Users\\USER\\Desktop\\client-management\\src\\store\\reducers\\errorReducer.ts":"16","C:\\Users\\USER\\Desktop\\client-management\\src\\store\\reducers\\authReducer.ts":"17","C:\\Users\\USER\\Desktop\\client-management\\src\\store\\reducers\\dataReducer.ts":"18","C:\\Users\\USER\\Desktop\\client-management\\src\\store\\reducers\\customerReducer.ts":"19","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\auth\\Logout.tsx":"20","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\sidebar\\ContentSideCustomers.tsx":"21","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\sidebar\\SideSubCustomers.tsx":"22","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\sidebar\\SideMain.tsx":"23","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\LogChanges.tsx":"24","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\HomePage.tsx":"25","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\ConcentrationOfActions.tsx":"26","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\MoneyLaundering.tsx":"27","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\Documents.tsx":"28","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\Loans.tsx":"29","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\BankAccounts.tsx":"30","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\exampleTable.tsx":"31","C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\tabels\\TableList.tsx":"32","C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\dialog\\Dialog.tsx":"33","C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\TextField.tsx":"34","C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\Option.tsx":"35","C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\Toggle.tsx":"36","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\PriceList.tsx":"37","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\Security.tsx":"38","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\Representatives.tsx":"39","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\Obligo.tsx":"40","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\Contact\\Contact.tsx":"41","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\customerDetails\\CustomerDetails.tsx":"42","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\customerSearch\\CustomerSearch.tsx":"43","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\examplepop.tsx":"44","C:\\Users\\USER\\Desktop\\client-management\\src\\modelsType\\Icon.ts":"45","C:\\Users\\USER\\Desktop\\client-management\\src\\store\\actions\\customerActioin.ts":"46","C:\\Users\\USER\\Desktop\\client-management\\src\\store\\actions\\dataActions.ts":"47","C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\Subtitle.tsx":"48","C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\Title.tsx":"49","C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\Note.tsx":"50","C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\TextSearch.tsx":"51","C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\Pagination\\Pagination.tsx":"52","C:\\Users\\USER\\Desktop\\client-management\\src\\utils\\index.ts":"53"},{"size":726,"mtime":1626011549711,"results":"54","hashOfConfig":"55"},{"size":425,"mtime":1620115718346,"results":"56","hashOfConfig":"55"},{"size":942,"mtime":1626209628742,"results":"57","hashOfConfig":"55"},{"size":522,"mtime":1622115683179,"results":"58","hashOfConfig":"55"},{"size":1506,"mtime":1622632031075,"results":"59","hashOfConfig":"55"},{"size":1173,"mtime":1626208791001,"results":"60","hashOfConfig":"55"},{"size":3414,"mtime":1625586116812,"results":"61","hashOfConfig":"55"},{"size":413,"mtime":1626209391616,"results":"62","hashOfConfig":"55"},{"size":3709,"mtime":1625996923663,"results":"63","hashOfConfig":"55"},{"size":377,"mtime":1625995147291,"results":"64","hashOfConfig":"55"},{"size":356,"mtime":1623780221799,"results":"65","hashOfConfig":"55"},{"size":839,"mtime":1626020381796,"results":"66","hashOfConfig":"55"},{"size":135,"mtime":1626171823146,"results":"67","hashOfConfig":"55"},{"size":1460,"mtime":1625997343812,"results":"68","hashOfConfig":"55"},{"size":545,"mtime":1626209346574,"results":"69","hashOfConfig":"55"},{"size":623,"mtime":1624993183378,"results":"70","hashOfConfig":"55"},{"size":1507,"mtime":1625133060448,"results":"71","hashOfConfig":"55"},{"size":1535,"mtime":1625746989489,"results":"72","hashOfConfig":"55"},{"size":730,"mtime":1626020390945,"results":"73","hashOfConfig":"55"},{"size":1299,"mtime":1625590620192,"results":"74","hashOfConfig":"55"},{"size":5255,"mtime":1626013025196,"results":"75","hashOfConfig":"55"},{"size":1105,"mtime":1626208820546,"results":"76","hashOfConfig":"55"},{"size":1269,"mtime":1624986497869,"results":"77","hashOfConfig":"55"},{"size":134,"mtime":1622128248328,"results":"78","hashOfConfig":"55"},{"size":1203,"mtime":1624009383868,"results":"79","hashOfConfig":"55"},{"size":3119,"mtime":1623842531227,"results":"80","hashOfConfig":"55"},{"size":155,"mtime":1620636804739,"results":"81","hashOfConfig":"55"},{"size":287,"mtime":1625817386540,"results":"82","hashOfConfig":"55"},{"size":122,"mtime":1620636548507,"results":"83","hashOfConfig":"55"},{"size":137,"mtime":1623842857024,"results":"84","hashOfConfig":"55"},{"size":23961,"mtime":1623235432569,"results":"85","hashOfConfig":"55"},{"size":4474,"mtime":1626076431303,"results":"86","hashOfConfig":"55"},{"size":6751,"mtime":1624311546191,"results":"87","hashOfConfig":"55"},{"size":2751,"mtime":1625656161447,"results":"88","hashOfConfig":"55"},{"size":1996,"mtime":1625827260347,"results":"89","hashOfConfig":"55"},{"size":1108,"mtime":1622985402729,"results":"90","hashOfConfig":"55"},{"size":258,"mtime":1623842775811,"results":"91","hashOfConfig":"55"},{"size":132,"mtime":1620636060683,"results":"92","hashOfConfig":"55"},{"size":160,"mtime":1620635803480,"results":"93","hashOfConfig":"55"},{"size":127,"mtime":1620635917379,"results":"94","hashOfConfig":"55"},{"size":2141,"mtime":1624986579245,"results":"95","hashOfConfig":"55"},{"size":15548,"mtime":1626205082351,"results":"96","hashOfConfig":"55"},{"size":6339,"mtime":1626076366821,"results":"97","hashOfConfig":"55"},{"size":1465,"mtime":1624004566536,"results":"98","hashOfConfig":"55"},{"size":691,"mtime":1622102405479,"results":"99","hashOfConfig":"55"},{"size":6856,"mtime":1626174761328,"results":"100","hashOfConfig":"55"},{"size":2627,"mtime":1626071615090,"results":"101","hashOfConfig":"55"},{"size":318,"mtime":1622745589586,"results":"102","hashOfConfig":"55"},{"size":264,"mtime":1625585968067,"results":"103","hashOfConfig":"55"},{"size":739,"mtime":1622985402729,"results":"104","hashOfConfig":"55"},{"size":1219,"mtime":1625585991383,"results":"105","hashOfConfig":"55"},{"size":912,"mtime":1625556578344,"results":"106","hashOfConfig":"55"},{"size":354,"mtime":1624986422920,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"111"},"112lp5k",{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"111"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"111"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"111"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"111"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"111"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"111"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"111"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"111"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"111"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"111"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"111"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"111"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"111"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"111"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"111"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"111"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"111"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"111"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"111"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"111"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"111"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"111"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"111"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"111"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"111"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"111"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"111"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"111"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"111"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"111"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"111"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},"C:\\Users\\USER\\Desktop\\client-management\\src\\index.tsx",["248"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport rootReducer from \"./store/reducers\";\n// import { createStore } from 'redux';\n\n\n\n// const store=createStore(rootReducer)\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n       <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["249","250"],"C:\\Users\\USER\\Desktop\\client-management\\src\\reportWebVitals.ts",[],"C:\\Users\\USER\\Desktop\\client-management\\src\\App.tsx",["251","252","253","254","255","256","257","258","259"],"\r\n\r\n\r\n\r\nimport React, { useEffect }  from 'react';\r\nimport { connect, Provider, useSelector } from 'react-redux'\r\nimport { i18n } from \"./translations/i18n\";\r\nimport AppNav from './components/AppNav';\r\n// import  '../scssPages/base.scss';\r\nimport { useState } from 'react';\r\nimport Home from './components/Home';\r\nimport { createStore } from 'redux';\r\nimport store from './store/store';\r\nimport Logout from './components/auth/Logout';\r\nimport { loadOptions } from './store/actions/dataActions';\r\n\r\n\r\n\r\nfunction App() {\r\n  // useEffect(() => {\r\n  //   store.dispatch(loadOptions()); \r\n  // }, []);\r\n  const handleOnclick = (e: React.ChangeEvent<any>) => {\r\n    e.preventDefault();\r\n    // setLanguage(e.target.value);\r\n    i18n.changeLanguage(e.target.value);\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    <Provider store={store}> \r\n          <AppNav/>\r\n         {/* <Logout/> */}\r\n     \r\n     </Provider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","C:\\Users\\USER\\Desktop\\client-management\\src\\store\\store.ts",[],"C:\\Users\\USER\\Desktop\\client-management\\src\\translations\\i18n.tsx",[],"C:\\Users\\USER\\Desktop\\client-management\\src\\components\\AppNav.tsx",["260","261","262"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// import { IAppNavbar, IAuthReduxProps } from '../Models/type/interface';\r\nimport Home from './Home';\r\nimport Login from './auth/Login';\r\nimport { logout1 } from '../store/actions/authActions';\r\n// import Login from './Login';\r\n\r\n\r\nconst AppNav = () => {\r\n    let check = null;\r\n    const dispatch = useDispatch()\r\n    const isLogin = useSelector((state: any) => {\r\n        check = state.authReducer.isAuthentitcated;\r\n        console.log(check)\r\n        return check\r\n    })\r\n    const [isLog, setIsLog] = useState(isLogin)\r\n\r\n    if (isLog === false) {\r\n        logout1(dispatch)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* <Login/> */}\r\n            {console.log(\"check hoih\", isLogin)}\r\n            <Home/> \r\n            {/* {isLogin ?  <Home /> :<Login />} */}\r\n           \r\n            {/* {auth && auth.isAuthenticated ?<Home/> :<Login/> } */}\r\n        </>\r\n    );\r\n\r\n\r\n};\r\n// const mapStateToProps = (state: IAuthReduxProps) => ({\r\n//     auth: state.auth\r\n//   });\r\nexport default AppNav;\r\n// export default connect(mapStateToProps, null)(AppNav)","C:\\Users\\USER\\Desktop\\client-management\\src\\store\\actions\\authActions.ts",["263","264"],"import axios from 'axios'\r\nimport { returnErrors } from './errorActions'\r\nimport {\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT_SUCCESS,\r\n} from '../actions/types'\r\nimport {IConfigHeaders} from '../../modelsType/type/interface';\r\nimport { User } from '../../modelsType/User';\r\nimport { basicUrl } from '../../shared/config';\r\n//cheack token&load user\r\n// const api=\r\n// export const loadUser = () => (dispatch: Function, getState: Function) => {\r\n//   const entity =\r\n//   {\r\n//     \"id_client \": 45654784,\r\n\r\n//     \"enum_type\": \"class\",\r\n\r\n//     \"id_initiator\": 478541,\r\n\r\n//     \"enum_request_method\": \"read\",\r\n\r\n//     \"category\": \"customer\",\r\n\r\n//     \"user_language\": \"HE\"\r\n//   }\r\n//   const body = JSON.stringify(entity);\r\n\r\n//   //User loading\r\n//   dispatch({ type: USERֹֹ_LOADING });\r\n  \r\n//   axios.post(basicUrl + \"/uspEnum\", body, tokenConfig(getState))\r\n//     .then((res) => {\r\n//       try {\r\n//         console.log(res.data)\r\n//         dispatch({\r\n//           type: USERֹֹ_LOADED,\r\n//           payload: res.data\r\n//         })\r\n//       }\r\n//       catch (e) {\r\n//         console.log(res, e)\r\n//       }\r\n//     })\r\n//     .catch(err => {\r\n//       err.response ? returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL') : returnErrors('the server is down pls try later', 'LOGIN_FAIL')\r\n//       dispatch({\r\n//         type: AUTH_ERROR\r\n//       })\r\n//     })\r\n// }\r\n\r\n\r\n\r\n\r\n// Login User\r\nexport const login = (loginUser: User) => (\r\n  dispatch: Function\r\n) => {\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n  const user = {\r\n    login_request_method: \"login\",\r\n    login_entity_number: loginUser.LoginEntityNumber,\r\n    login_ID: loginUser.LoginID,\r\n    login_password: loginUser.LoginPassword\r\n  }\r\n  // Request body\r\n  const body = JSON.stringify(user);\r\n  console.log(user);\r\n\r\n  axios\r\n    .post(basicUrl + '/login',user , config)\r\n    .then(res =>{\r\n      try{\r\n        \r\n        console.log(\"USERLOGIN\",user);\r\n        if(res.data==\"dont login\")\r\n        {\r\n          console.log(\"dont login\",res.data)\r\n          dispatch({\r\n            type:LOGIN_FAIL ,\r\n            isAuthentitcated:false\r\n          })\r\n        }\r\n        else{\r\n          dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: res.data\r\n          })\r\n        }\r\n      }\r\n      catch{\r\n        dispatch({ type:AUTH_ERROR , isAuthentitcated:false});\r\n      }\r\n    })\r\n    .catch(err => {\r\n      console.log(\"login gui\",err)\r\n      dispatch(\r\n        err.response ? returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL') : returnErrors('the server is down pls try later', 'LOGIN_FAIL')\r\n      );\r\n      dispatch({\r\n        type: LOGIN_FAIL\r\n      });\r\n    });\r\n};\r\n\r\n// Logout User\r\nexport const logout = () => (\r\n  dispatch: Function\r\n) => {\r\n  dispatch({\r\n    type: LOGOUT_SUCCESS\r\n  });\r\n};\r\n\r\nexport const logout1 = (dispatch: any) => {\r\n  dispatch({\r\n    type: LOGOUT_SUCCESS\r\n  });\r\n};\r\n\r\n// Setup config/headers and token\r\nexport const tokenConfig = (getState: Function) => {\r\n  // Get token from localstorage\r\n  const token = getState().auth.token;\r\n\r\n  // Headers\r\n  const config: IConfigHeaders = {\r\n    headers: {\r\n      'Content-type': 'application/json'\r\n    }\r\n  };\r\n\r\n  // If token, add to headers\r\n  if (token) {\r\n    config.headers['x-auth-token'] = token;\r\n  }\r\n  return config;\r\n}\r\n\r\n","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\Home.tsx",["265"],"import React from 'react';\r\nimport Header from './header/Header';\r\nimport Sidebar from './sidebar/Sidebar';\r\nimport  '../scssPages/base.scss';\r\nimport { Route } from 'react-router-dom';\r\n\r\nconst  Home=()=> {\r\n    return( \r\n        <>\r\n\r\n        <Header />\r\n        <Sidebar/>\r\n        {/* <Route path=\"/\" exact component={CustomerDetails}/> */}\r\n    \r\n  \r\n\r\n    </>  \r\n    \r\n    )\r\n    \r\n}\r\n\r\nexport default Home;","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\auth\\Login.tsx",["266","267","268","269","270","271"],"import { useState } from 'react';\r\nimport './login.scss';\r\nimport { connect } from 'react-redux';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { initializeIcons, PrimaryButton } from '@fluentui/react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { login } from '../../store/actions/authActions';\r\nimport { IAuthReduxProps, ILoginModal } from '../../modelsType/type/interface';\r\n// import { clearErrors } from '../store/actions/errorActions';\r\n\r\ninitializeIcons();\r\n\r\n\r\nconst Login = ({\r\n    isAuthenticated,\r\n    error,\r\n    login,\r\n    // clearErrors\r\n  }: ILoginModal) => {\r\n    class User{\r\n        LoginEntityNumber:string;\r\n        LoginPassword:string;\r\n        LoginID:string;\r\n        LoginFingerPrint:string;\r\n        constructor( loginEntityNumber = \"\",loginPassword = \"\",loginID=\"\", loginFingerPrint = \"\" ){\r\n            this.LoginEntityNumber=loginEntityNumber;\r\n            this.LoginPassword=loginPassword;\r\n            this.LoginID=loginID;\r\n            this.LoginFingerPrint=loginFingerPrint\r\n        }\r\n    }\r\n    const [t, i18n] = useTranslation();\r\n    const [msg, setMsg] = useState(null);\r\n    const [modal, setModal] = useState(false);\r\n    const [isClickLogin ,setIsClickLogin]=useState(false)\r\n    const [userLogin, setUserLogin] = useState(new User('') );\r\n\r\n    const updateUserLogin = (key: string, value:any ) => {\r\n        let newUser = { ...userLogin};\r\n        (newUser as any)[key] = value;\r\n        setUserLogin(newUser);\r\n      }\r\n    \r\n    //   const handleToggle = useCallback(() => {\r\n    //     // Clear errors\r\n    //     clearErrors();\r\n    //     setModal(!modal);\r\n    //   }, [clearErrors, modal]);\r\n   \r\n\r\n     function LoginTime(event: any) {\r\n        setIsClickLogin(true);\r\n        login(userLogin)\r\n        event.preventDefault();\r\n    }\r\n    return (\r\n        <div className=\"grid-container-login\">\r\n            <form className=\"login\" onSubmit={(e) => LoginTime(e)}>\r\n                <TextField\r\n                    id='login_entity_number'\r\n                    className=\"text-field-login\"\r\n                    required\r\n                    placeholder={t(\"login.business\")} \r\n                    onChange ={(e: any) => {\r\n                        updateUserLogin('LoginEntityNumber', e.currentTarget.value)\r\n                   }}\r\n                   \r\n                   />\r\n                <TextField\r\n                    id='login_ID'\r\n                    className=\"text-field-login\"\r\n                    required\r\n                    placeholder={t(\"login.userName\")}\r\n                    onChange ={(e: any) => {\r\n                        updateUserLogin('LoginID', e.currentTarget.value)\r\n                   }}                   \r\n                />\r\n                <TextField\r\n                    id='login_password'\r\n                    className=\"text-field-login\"\r\n                    type=\"password\"\r\n                    placeholder={t(\"login.password\")}\r\n                    required\r\n                    canRevealPassword\r\n                    revealPasswordAriaLabel=\"Show password\"\r\n                    onChange ={(e: any) => {\r\n                        updateUserLogin('LoginPassword', e.currentTarget.value)\r\n                   }}                  \r\n                />\r\n                {/* disabled={isClickLogin}  */}\r\n                <PrimaryButton    className='button' checked={false} text={t('login.sigin')} type=\"submit\" />\r\n            </form>\r\n            \r\n        </div >\r\n    );    \r\n};\r\nconst mapStateToProps = (state: IAuthReduxProps) => ({\r\n    isAuthenticated: state.authReducer.isAuthenticated,\r\n    error: state.error\r\n  });\r\n\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n","C:\\Users\\USER\\Desktop\\client-management\\src\\store\\reducers\\index.ts",[],"C:\\Users\\USER\\Desktop\\client-management\\src\\store\\actions\\errorActions.ts",[],"C:\\Users\\USER\\Desktop\\client-management\\src\\store\\actions\\types.ts",[],"C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\config.tsx",[],"C:\\Users\\USER\\Desktop\\client-management\\src\\components\\header\\Header.tsx",["272","273"],"\r\nimport './header.scss';\r\nimport { Logout } from '../auth/Logout';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { connect, useSelector } from 'react-redux';\r\nimport { IAppNavbar } from '../../modelsType/type/interface';\r\n\r\n\r\nconst Header = ({ auth }: IAppNavbar) => {\r\n  const [t, i18n] = useTranslation();\r\n  // const handleLogout = ()=>{\r\n  //   <Link  to=\"/logout\"></Link>\r\n  // }\r\n  \r\n  const isLogin = useSelector((state:any)=>{\r\n    if(state.authReducer.isAuthentitcated){\r\n      console.log(\"islogin:\",state.authReducer.isAuthentitcated)\r\n      let obj = JSON.parse(state.authReducer.user)\r\n      let name = obj.data.user.first_name +\" \"+obj.data.user.last_name;\r\n       return name; \r\n    }\r\n    return \"I8\";\r\n      \r\n  });\r\n  // const isLogin = useSelector((state) => state.auth)\r\n    \r\n  return (\r\n    <>\r\n      <div className=\"header\">\r\n        <div className=\"user\">\r\n          <p className=\"user-name\">{isLogin}</p>\r\n      \r\n         <Logout />\r\n         </div>\r\n         <div className='divider'></div>\r\n         <div className=\"name-company\">\r\n          <p >InSight Systems 2.0</p>\r\n        \r\n      </div>\r\n        \r\n     \r\n        {/* <FontIcon iconName=\"IncreaseIndentArrowMirrored\" className=\"logoutIcon\"/> */}\r\n      </div>\r\n      {/* למה זה לא מופיעה */}\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  auth: state.auth,\r\n\r\n \r\n});\r\n\r\nexport default connect(mapStateToProps, null)(Header);\r\n","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\sidebar\\Sidebar.tsx",[],"C:\\Users\\USER\\Desktop\\client-management\\src\\store\\reducers\\errorReducer.ts",["274"],"import { GET_ERRORS, CLEAR_ERRORS } from '../actions/types';\r\n\r\nconst initialState = {\r\n    msg: {},\r\n    status: null,\r\n    id: null\r\n}\r\n\r\nexport default function (state = initialState, action:any) {\r\n    switch (action.type) {\r\n        case GET_ERRORS:\r\n            return {\r\n                msg: action.payload.msg,\r\n                status: action.payload.status,\r\n                id: action.payload.id\r\n            }\r\n        case CLEAR_ERRORS:\r\n            return {\r\n                msg: {},\r\n                status: null,\r\n                id: null\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}","C:\\Users\\USER\\Desktop\\client-management\\src\\store\\reducers\\authReducer.ts",["275"],"import{USERֹֹ_LOADED,\r\n    USERֹֹ_LOADING,\r\n     AUTH_ERROR,\r\n     LOGIN_SUCCESS,\r\n     LOGIN_FAIL,\r\n     LOGOUT_SUCCESS,\r\n     REGISTER_SUCCESS,\r\n     REGISTER_FAIL}from'../actions/types'\r\n\r\n const initialState={\r\n   token:localStorage.getItem('token'),\r\n   isAuthentitcated:null,\r\n   isLoading:false,\r\n   user:null\r\n };\r\n\r\n export default function(state=initialState,action:any){\r\n    switch(action.type){\r\n        case USERֹֹ_LOADING:\r\n            return{\r\n                ...state,\r\n                isLoading:true\r\n            }\r\n        case USERֹֹ_LOADED:\r\n            return{\r\n                ...state,\r\n                // isAuthenticted:true,  \r\n                isLoading:false,\r\n                user:action.payload\r\n            };\r\n        case LOGIN_SUCCESS:    \r\n        case REGISTER_SUCCESS:\r\n            localStorage.setItem('token', action.payload.token);\r\n            return{\r\n                ...state,\r\n                ...action.payload,\r\n                isAuthentitcated:true,  \r\n                isLoading:false, \r\n            };\r\n            case AUTH_ERROR:\r\n            case LOGIN_FAIL:\r\n            case LOGOUT_SUCCESS:\r\n            case REGISTER_FAIL:\r\n                localStorage.removeItem('token');\r\n                return{\r\n                    ...state,\r\n                    token:null,\r\n                    user:null,  \r\n                    isAuthentitcated:false,\r\n                    isLoading:false\r\n                }    \r\n            default: return state;\r\n    }\r\n}","C:\\Users\\USER\\Desktop\\client-management\\src\\store\\reducers\\dataReducer.ts",["276","277","278","279"],"import {FETCH_PROTECTED_DATA_REQUEST,RECEIVE_PROTECTED_DATA,SET_IS_FETCHING} from '../actions/types';\r\n\r\nconst initialState = {\r\n    data :{\r\n        generalFormOptionsMap:null\r\n               // genders: null\r\n            // ,\r\n            // typeIdentityNumbers:null\r\n            // ,\r\n            // customersStatus:null,\r\n             \r\n            // customersCondition:null,\r\n            \r\n            // customersType:null,\r\n        \r\n        \r\n            \r\n    },\r\n};\r\n\r\nexport default function(state=initialState,action:any ){\r\n    switch(action.type){\r\n        case 'SET_GENERAL_FORM_OPTIONS_MAP':\r\n        return {\r\n            ...state,\r\n            data: {\r\n            ...state.data,\r\n            generalFormOptionsMap: action.optionsMap\r\n            }\r\n        }\r\n        // case RECEIVE_PROTECTED_DATA:\r\n            \r\n        //     return {\r\n        //         ...state,\r\n        //        data:{\r\n        //            ...state.data,\r\n        //            [action.valueType]: action.value\r\n        //        }\r\n\r\n        //       }\r\n        //       // set isLoading true  \r\n        // case  FETCH_PROTECTED_DATA_REQUEST:\r\n        //     console.log(state)\r\n        //     return {\r\n        //         ...state,\r\n        //         isFetching: true\r\n        //     } \r\n            \r\n        // case  SET_IS_FETCHING:\r\n        //     return {\r\n        //         ...state,\r\n        //         isFetching: action.isFetching\r\n        //     } \r\n            \r\n        default: return state;   \r\n    }       \r\n}       \r\n","C:\\Users\\USER\\Desktop\\client-management\\src\\store\\reducers\\customerReducer.ts",["280"],"import {CREATE_CUSTOMER, CREATE_FAIL, READ_CUSTOMER, READ_FAIL} from '../actions/types';\r\n\r\nconst initialState = {\r\n    dataCustomer: null,\r\n    isCreate:null\r\n}\r\n\r\nexport default function(state=initialState,action:any){\r\n    switch(action.type){\r\n        case READ_CUSTOMER:\r\n        case CREATE_CUSTOMER:\r\n            return{\r\n                ...state,\r\n                dataCustomer:action.value,\r\n            }\r\n        case CREATE_FAIL:\r\n            return {\r\n                ...state,\r\n                isCreate :false \r\n            }      \r\n        case READ_FAIL:\r\n             return{\r\n                 ...state,\r\n                 isCreate :false \r\n             }\r\n         default: return state;   \r\n          \r\n    }\r\n\r\n}","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\auth\\Logout.tsx",["281"],"import { IconButton } from '@fluentui/react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDispatch } from 'react-redux';\r\nimport {logout1 } from '../../store/actions/authActions'\r\n\r\n\r\nexport const Logout = ()=>{\r\nconst dispatch = useDispatch()\r\n  const [t, i18n] = useTranslation();\r\n  const  handleLogout = () => {\r\n    console.log('handleLogout')\r\n    logout1(dispatch)\r\n    // logout && logout()\r\n  }\r\n  return(\r\n      <>\r\n      <p className=\"logout\">{t('logout')}</p>\r\n          <IconButton\r\n            onClick={handleLogout}\r\n            iconProps={{ iconName: 'NavigateBack' }}\r\n            className=\"icon\"\r\n            styles={{\r\n              icon: { color: 'white', fontSize: 24 },\r\n              root: {\r\n                selectors: {\r\n                  ':hover .ms-Button-icon': {\r\n                    color: '#FFB400'\r\n                  },\r\n                  ':active .ms-Button-icon': {\r\n                    color: 'yellow'\r\n                  }\r\n                },\r\n              },\r\n              rootHovered: { backgroundColor: '1A1F71' },\r\n              rootPressed: {backgroundColor:'1A1F71' }\r\n            }}\r\n          />\r\n        {/* <PrimaryButton onClick={logout}\r\n         text={'Logout'}\r\n        /> */}   \r\n      </>\r\n    );\r\n};\r\n\r\nexport default Logout  ","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\sidebar\\ContentSideCustomers.tsx",["282","283","284","285","286"],"import React, { useState } from \"react\";\r\nimport { Nav } from \"@fluentui/react/lib/Nav\";\r\nimport \"../../scssPages/sidebar.scss\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {faUniversity } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { INavStyles, INavLinkGroup, INavLink } from \"@fluentui/react/lib/Nav\";\r\nimport { initializeIcons } from \"@fluentui/react/lib/Icons\";\r\nimport { useHistory, useLocation, withRouter } from \"react-router-dom\";\r\nimport '../../scssPages/sidebar.scss'\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { registerIcons } from \"@fluentui/react\";\r\nimport { faFilter } from '@fortawesome/free-solid-svg-icons';\r\nconst navStyles: Partial<INavStyles> = { root: { width: 160 } };\r\ninitializeIcons();\r\n// registerIcons({\r\n//   icons: {\r\n//     university: <FontAwesomeIcon icon='university' />\r\n//   }\r\n// });\r\n\r\n\r\nregisterIcons({\r\n  icons: {\r\n    Filter: <FontAwesomeIcon icon={faFilter} />\r\n  }\r\n});\r\n\r\nconst Sidebar = (props: any) => {\r\n  const [t, i18n] = useTranslation(); ///function of translate\r\n  const [selectedKey,setSelectedKey] = useState()\r\n  const history = useHistory()\r\n  const location =useLocation()\r\n  const handleNavClick = (\r\n    ev?: React.MouseEvent<HTMLElement>,\r\n    item?: INavLink\r\n  ) => {\r\n    ev?.preventDefault();\r\n    props.history.push(item?.url);\r\n    // setSelectedKey=(location.pathname)\r\n  };\r\n  const navLinkGroups: INavLinkGroup[] = [\r\n    {\r\n      links: [\r\n        {\r\n           key:\"home-page\",\r\n           className:\"side-sub\",\r\n           iconProps: { iconName: \"Home\" }\r\n           , styles: {\r\n             icon: { color: '#1A1F71' }\r\n           },\r\n           name: t(\"siderbar.homePage\"),\r\n           url:\"home-page\",\r\n           onClick: handleNavClick\r\n           \r\n        },\r\n        {\r\n          key: \"customer-search\",\r\n          iconProps: { iconName: \"Search\" },\r\n          styles: {\r\n            icon: { color: '#1A1F71' }\r\n          },\r\n          name: t(\"siderbar.customerSearch\"),\r\n          url: \"/customer-search\",\r\n          onClick: handleNavClick\r\n        },\r\n        {\r\n          key: \"customer-details\",\r\n          iconProps: { iconName: \"Search\" },\r\n          styles: {\r\n            icon: { color: '#1A1F71' }\r\n          },\r\n          url: \"/customer-details\",\r\n          name: t(\"siderBar.customerDetails\"),\r\n          \r\n          component: \"CustomerDetails\",\r\n          onClick: handleNavClick\r\n        },\r\n        {\r\n          key: \"3\",\r\n          iconProps: { iconName: \"ContactCard \" },\r\n         \r\n          styles: {\r\n            icon: { color: 'blue' }\r\n          },\r\n          url: \"/contact\",\r\n          component: \"Contact\",\r\n          name: t(\"siderbar.contactInformation\"),\r\n          onClick: handleNavClick\r\n        },\r\n        {\r\n          key: \"4\",\r\n          iconProps: { iconName: \"Sunny\" },\r\n          url: \"/representatives\",\r\n          component: \"Representatives\",\r\n          name: t(\"siderbar.representativesOrInvolvedParties\"),\r\n          onClick: handleNavClick\r\n        },\r\n        {\r\n          key: \"5\",\r\n          iconProps: { iconName: \"Sunny\" },\r\n          url: \"/obligo\",\r\n          component: \"Obligo\",\r\n          name: t(\"siderbar.obligo\"),\r\n          onClick: handleNavClick\r\n        },\r\n        {\r\n          key: \"6\",\r\n          iconProps: { iconName: \"Sunny\" },\r\n          url: \"/security\",\r\n          component: \"Security\",\r\n          name: t(\"siderbar.security\"),\r\n          onClick: handleNavClick\r\n        },\r\n        {\r\n          key: \"7\",\r\n          iconProps: { iconName: \"Sunny\" },\r\n          url: \"/price-list\",\r\n          component: \"PriceList\",\r\n          name: t(\"siderbar.priceList\"),\r\n          onClick: handleNavClick\r\n        },\r\n        {\r\n          key: \"8\",\r\n          \r\n          iconProps:{iconName: 'Filter'} ,\r\n          url: \"/bank-accounts\",\r\n          component: \"BankAccounts\",\r\n          name: t(\"siderbar.bankAccounts\"),\r\n          onClick: handleNavClick\r\n        },\r\n        {\r\n          key: \"9\",\r\n          iconProps: { iconName: \"Sunny\" },\r\n          url: \"/loans\",\r\n          component: \"Loans\",\r\n          name: t(\"siderbar.loans\"),\r\n          onClick: handleNavClick\r\n        },\r\n        {\r\n          key: \"10\",\r\n          iconProps: { iconName: \"Attach\" },\r\n          url: \"/documents\",\r\n          component: \"Documents\",\r\n          name: t(\"siderbar.documents\"),\r\n          onClick: handleNavClick\r\n        },\r\n        {\r\n          key: \"11\",\r\n          url: \"/money-laundering\",\r\n          component: \"MoneyLaundering\",\r\n          name: t(\"siderbar.moneyLaundering\"),\r\n          onClick: handleNavClick\r\n        },\r\n        {\r\n          key: \"12\",\r\n          url: \"/concentration-of-ctions\",\r\n          component: \"ConcentrationOfActions\",\r\n          name: t(\"siderbar.concentrationOfActions\"),\r\n          onClick: handleNavClick\r\n        },\r\n        {\r\n          key: \"13\",\r\n          url: \"/log-changes\",\r\n          component: \"LogChanges\",\r\n          name: t(\"siderbar.logChanges\"),\r\n          onClick: handleNavClick\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n  return (\r\n    \r\n      <Nav className=\"items\" styles={navStyles} groups={navLinkGroups}   selectedKey={history.location.pathname} />\r\n    \r\n  );\r\n};\r\nexport default withRouter(Sidebar);\r\n","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\sidebar\\SideSubCustomers.tsx",["287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302"],"import * as React from 'react';\r\nimport {  Route, Switch,withRouter } from \"react-router-dom\";\r\n//import{navItems,nav} from '../../Models/NavItems';\r\n//import { styled } from '@fluentui/react/lib/Utilities';\r\nimport CustomerLocator from '../customerSearch/CustomerSearch';\r\nimport CustomerDetails from '../customerDetails/CustomerDetails';\r\nimport Contact from '../Contact/Contact';\r\nimport Representatives from '../Representatives';\r\nimport Obligo from '../Obligo';\r\nimport Security from '../Security';\r\nimport PriceList from '../PriceList';\r\nimport BankAccounts from '../BankAccounts';\r\nimport Loans from '../Loans';\r\nimport Documents from '../Documents';\r\nimport MoneyLaundering from '../MoneyLaundering';\r\nimport ConcentrationOfActions from '../ConcentrationOfActions';\r\nimport LogChanges from '../LogChanges';\r\nimport HomePage from '../HomePage';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const SideCustomers: React.FunctionComponent = (props:any) => {\r\n    \r\n    \r\n    return (\r\n        \r\n        <div>\r\n    \r\n       \r\n          \r\n     \r\n       \r\n     \r\n      </div>\r\n    );\r\n  };\r\n  export default withRouter(SideCustomers)","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\sidebar\\SideMain.tsx",["303"],"import * as react from 'react';\r\nimport { Nav, INavLinkGroup } from '@fluentui/react/lib/Nav';\r\nimport '../../scssPages/sidebar.scss';\r\n\r\n const navLinkGroups: INavLinkGroup[] = [\r\n  {\r\n    links: [\r\n      {\r\n        key: 'Breadcrumb',\r\n        iconProps: { iconName: \"Sunny\" },\r\n         name:'aששג',\r\n        //  , // name:{t('a')},///כאן אני רוצה לרשום\r\n        url: '#/examples/button',\r\n        \r\n\r\n        // iconProps={iconProps},\r\n      },\r\n      // {\r\n      //   key: 'Button',\r\n      //   iconProps: { iconName: \"Sunny\" },\r\n      //   name: 'B',\r\n      //   url: '#/examples/buton',\r\n      // },\r\n      // {\r\n      //   key: 'Button',\r\n      //   iconProps: { iconName: \"Sunny\" },\r\n      //   name: 'c',\r\n      //   url: '#/examples/buon',\r\n      // },\r\n      {\r\n        key: 'Button',\r\n        iconProps: { iconName: \"Sunny\" },\r\n        name: 'f',\r\n        url: '#/examples/btton',\r\n      },\r\n    ],\r\n  }]\r\n  export const SideMain: React.FunctionComponent = () => {\r\n   \r\n    function linkClickHandler(event:any){\r\n      event.preventDefault();\r\n     }\r\n     return(\r\n      <Nav className=\"catgory\" onLinkClick={linkClickHandler} ariaLabel=\"Nav example similar to one found in this demo page\" groups={navLinkGroups} />\r\n    );\r\n  };\r\n\r\n\r\n  ","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\LogChanges.tsx",["304"],"import react from 'react';\r\n\r\n\r\nconst LogChanges=()=>{\r\n    return(\r\n        <h1>LogChanges</h1>\r\n    )\r\n}\r\nexport default LogChanges;","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\HomePage.tsx",["305","306","307"],"import * as React from 'react';\r\nimport '../scssPages/form.scss';\r\nimport { IDetailsColumnStyles } from '@fluentui/react';\r\nimport CustemTable, {  } from '../shared/components/tabels/TableList';\r\nimport SubHeader from './SubHeader';\r\n\r\n\r\n\r\nexport interface IDetailsListItem {\r\n    key: number;\r\n    value: number;\r\n    name:string;\r\n  }\r\nconst Documents =()=>{\r\n  const headerStyle = {\r\n    cellTitle: {\r\n      color: \"#1A1F71\",\r\n      background: '#F4F2FF',\r\n    }\r\n  }\r\n \r\n\r\n    const columns = [       \r\n        {key: 'column1', name: 'Name', fieldName: 'name', minWidth: 100, maxWidth: 200},\r\n        {key: 'column2', name: 'Value', fieldName: 'value',minWidth: 100, maxWidth: 200 },\r\n        {key: 'column2', name: 'Value', fieldName: 'value',minWidth: 100, maxWidth: 200},\r\n      ];\r\n     const item:IDetailsListItem[]=[\r\n         {key: 1, name:\"good\",value:1},\r\n         {key:2, name:\"good\",value:12},\r\n         \r\n        ]\r\n    return(\r\n        <>\r\n        \r\n        <h1>Documents</h1>\r\n         <div className=\"content-wrapper\">\r\n          <CustemTable columns={columns} allItems={item} isSelcted={true} isFooter={false} />\r\n          </div>\r\n        </>\r\n\r\n    );\r\n}\r\nexport default Documents;","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\ConcentrationOfActions.tsx",["308","309"],"import { DefaultButton, Dialog, DialogFooter, PrimaryButton, TextField,sizeBoolean} from '@fluentui/react';\r\nimport { ChoiceGroup } from 'office-ui-fabric-react';\r\nimport * as React from 'react';\r\nimport { useBoolean } from '@fluentui/react-hooks';\r\n\r\n\r\nconst modelProps = {\r\n    isBlocking: true,\r\n    topOffsetFixed: true,\r\n  };\r\n  \r\n  const options = [\r\n    {\r\n      key: 'A',\r\n      iconProps: { iconName: 'CalendarDay' },\r\n      text: 'Day',\r\n    },\r\n    {\r\n      key: 'B',\r\n      iconProps: { iconName: 'CalendarWeek' },\r\n      text: 'Week',\r\n    },\r\n    {\r\n      key: 'C',\r\n      iconProps: { iconName: 'Calendar' },\r\n      text: 'Month',\r\n    },\r\n  ];\r\n\r\nconst ConcentrationOfActions=()=>{\r\n\r\n\r\n    const [hideDialog, { toggle: toggleHideDialog }] = useBoolean(true);\r\n    const [optionSelected, setOptionSelected] = React.useState('A');\r\n  \r\n    const onChange = (ev: React.FormEvent<HTMLInputElement>, option: any)=> {\r\n      setOptionSelected(option.key);\r\n    };\r\n    \r\n    return(\r\n        <div className=\"form\">\r\n   \r\n      <h1>hwoirsd</h1>\r\n    <div className=\"content-wrapper\">\r\n      <DefaultButton secondaryText=\"Opens the Sample Dialog\" onClick={toggleHideDialog} text=\"Open Dialogyg879\" />\r\n      <Dialog hidden={hideDialog} onDismiss={toggleHideDialog} modalProps={modelProps}>\r\n        <ChoiceGroup\r\n          label=\"Pick one icon\"\r\n          options={options}\r\n          // eslint-disable-next-line react/jsx-no-bind\r\n        \r\n          required\r\n        />\r\n        {optionSelected === 'A' && (\r\n          <div>\r\n            <h1>Description</h1>\r\n            <div>\r\n              {' '}\r\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et\r\n              dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex\r\n              ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu\r\n              fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt\r\n              mollit anim id est laborum.{' '}\r\n            </div>\r\n          </div>\r\n        )}\r\n        {optionSelected === 'B' && (\r\n          <div>\r\n            <h1>Description</h1>\r\n            <div>\r\n              {' '}\r\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et\r\n              dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex\r\n              ea commodo consequat.{' '}\r\n            </div>\r\n          </div>\r\n        )}\r\n        {optionSelected === 'C' && (\r\n          <div>\r\n            <h1>Description</h1>\r\n          </div>\r\n        )}\r\n        <DialogFooter>\r\n          <TextField/>\r\n          <PrimaryButton onClick={toggleHideDialog} text=\"Save\" />\r\n          <DefaultButton onClick={toggleHideDialog} text=\"Cancel\" />\r\n        </DialogFooter>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n        <h1>ConcentrationOfActions</h1>\r\n        </div>\r\n    )\r\n}\r\nexport default ConcentrationOfActions;","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\MoneyLaundering.tsx",[],"C:\\Users\\USER\\Desktop\\client-management\\src\\components\\Documents.tsx",[],"C:\\Users\\USER\\Desktop\\client-management\\src\\components\\Loans.tsx",[],"C:\\Users\\USER\\Desktop\\client-management\\src\\components\\BankAccounts.tsx",[],"C:\\Users\\USER\\Desktop\\client-management\\src\\components\\exampleTable.tsx",["310","311","312"],"import * as React from 'react';\r\nimport { Link } from '@fluentui/react/lib/Link';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { Text } from '@fluentui/react/lib/Text';\r\nimport { CommandBar, ICommandBarStyles } from '@fluentui/react/lib/CommandBar';\r\nimport { Announced } from '@fluentui/react/lib/Announced';\r\nimport {\r\n  IContextualMenuProps,\r\n  IContextualMenuItem,\r\n  DirectionalHint,\r\n  ContextualMenu,\r\n} from '@fluentui/react/lib/ContextualMenu';\r\nimport {\r\n  CheckboxVisibility,\r\n  ColumnActionsMode,\r\n  ConstrainMode,\r\n  DetailsList,\r\n  DetailsListLayoutMode,\r\n  IColumn,\r\n  IGroup,\r\n  Selection,\r\n  SelectionMode,\r\n  buildColumns,\r\n  IDetailsColumnProps,\r\n} from '@fluentui/react/lib/DetailsList';\r\nimport { createListItems, isGroupable, IExampleItem } from '@fluentui/example-data';\r\nimport { memoizeFunction } from '@fluentui/react/lib/Utilities';\r\nimport { getTheme, mergeStyleSets } from '@fluentui/react/lib/Styling';\r\n\r\nconst theme = getTheme();\r\nconst headerDividerClass = 'DetailsListAdvancedExample-divider';\r\nconst classNames = mergeStyleSets({\r\n  commandBarText: {\r\n    padding: '12px',\r\n  },\r\n  commandBarWrapper: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    flexWrap: 'wrap',\r\n  },\r\n  headerDivider: {\r\n    display: 'inline-block',\r\n    height: '100%',\r\n  },\r\n  headerDividerBar: [\r\n    {\r\n      display: 'none',\r\n      background: theme.palette.themePrimary,\r\n      position: 'absolute',\r\n      top: 16,\r\n      bottom: 0,\r\n      width: '1px',\r\n      zIndex: 5,\r\n    },\r\n    headerDividerClass,\r\n  ],\r\n  linkField: {\r\n    overflow: 'hidden',\r\n    textOverflow: 'ellipsis',\r\n    maxWidth: '100%',\r\n  },\r\n  root: {\r\n    selectors: {\r\n      [`.${headerDividerClass}:hover + .${headerDividerClass}`]: {\r\n        display: 'inline',\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst commandBarStyles: Partial<ICommandBarStyles> = { root: { marginBottom: '40px' } };\r\n\r\nconst DEFAULT_ITEM_LIMIT = 5;\r\nconst PAGING_SIZE = 10;\r\nconst PAGING_DELAY = 2000;\r\nconst ITEMS_COUNT = 5000;\r\n\r\nexport interface IDetailsListAdvancedExampleState {\r\n  canResizeColumns?: boolean;\r\n  checkboxVisibility?: CheckboxVisibility;\r\n  columns: IColumn[];\r\n  constrainMode?: ConstrainMode;\r\n  contextualMenuProps?: IContextualMenuProps;\r\n  groupItemLimit?: number;\r\n  groups?: IGroup[];\r\n  isHeaderVisible?: boolean;\r\n  isLazyLoaded?: boolean;\r\n  isSortedDescending?: boolean;\r\n  items: IExampleItem[];\r\n  layoutMode?: DetailsListLayoutMode;\r\n  selectionMode?: SelectionMode;\r\n  sortedColumnKey?: string;\r\n  selectionCount: number;\r\n  announcedMessage?: string;\r\n}\r\n\r\nexport class DetailsListAdvancedExample extends React.Component<{}, IDetailsListAdvancedExampleState> {\r\n\r\n  private _selection: Selection;\r\n  private _allItems: IExampleItem[];\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this._getCommandItems = memoizeFunction(this._getCommandItems);\r\n\r\n    this._allItems = createListItems(ITEMS_COUNT);\r\n    this._selection = new Selection({\r\n      onSelectionChanged: this._onItemsSelectionChanged,\r\n    });\r\n    this._selection.setItems(this._allItems, false);\r\n\r\n    this.state = {\r\n      items: this._allItems,\r\n      selectionCount: 0,\r\n      groups: undefined,\r\n      groupItemLimit: DEFAULT_ITEM_LIMIT,\r\n      layoutMode: DetailsListLayoutMode.justified,\r\n      constrainMode: ConstrainMode.horizontalConstrained,\r\n      selectionMode: SelectionMode.multiple,\r\n      canResizeColumns: true,\r\n      checkboxVisibility: CheckboxVisibility.onHover,\r\n      columns: this._buildColumns(\r\n        this._allItems,\r\n        true,\r\n        this._onColumnClick,\r\n        '',\r\n        undefined,\r\n        undefined,\r\n        this._onColumnContextMenu,\r\n      ),\r\n      contextualMenuProps: undefined,\r\n      sortedColumnKey: 'name',\r\n      isSortedDescending: false,\r\n      isLazyLoaded: false,\r\n      isHeaderVisible: true,\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      canResizeColumns,\r\n      checkboxVisibility,\r\n      columns,\r\n      constrainMode,\r\n      contextualMenuProps,\r\n      groupItemLimit,\r\n      groups,\r\n      isHeaderVisible,\r\n      isLazyLoaded,\r\n      items,\r\n      layoutMode,\r\n      selectionMode,\r\n      announcedMessage,\r\n    } = this.state;\r\n\r\n    const isGrouped = groups && groups.length > 0;\r\n    const groupProps = {\r\n      getGroupItemLimit: (group: IGroup) => {\r\n        if (group) {\r\n          return group.isShowingAll ? group.count : Math.min(group.count, groupItemLimit as number);\r\n        } else {\r\n          return items.length;\r\n        }\r\n      },\r\n      footerProps: {\r\n        showAllLinkText: 'Show all',\r\n      },\r\n    };\r\n\r\n    return (\r\n      <div className={classNames.root}>\r\n        <div className={classNames.commandBarWrapper}>\r\n          <CommandBar\r\n            styles={commandBarStyles}\r\n            items={this._getCommandItems(\r\n              canResizeColumns,\r\n              checkboxVisibility,\r\n              constrainMode,\r\n              isHeaderVisible,\r\n              isLazyLoaded,\r\n              layoutMode,\r\n              selectionMode,\r\n            )}\r\n          />\r\n          <Text className={classNames.commandBarText}>{`${this.state.selectionCount} selected`}</Text>\r\n        </div>\r\n        <Announced message={`${this.state.selectionCount} selected`} />\r\n\r\n        {/* {isGrouped ? <TextField label=\"Group item limit\" onChange={this._onItemLimitChanged} /> : null} */}\r\n\r\n        {announcedMessage ? <Announced message={announcedMessage} /> : undefined}\r\n\r\n        <DetailsList\r\n          setKey=\"items\"\r\n          items={items}\r\n          selection={this._selection}\r\n          groups={groups}\r\n          columns={columns}\r\n          checkboxVisibility={checkboxVisibility}\r\n          layoutMode={layoutMode}\r\n          isHeaderVisible={isHeaderVisible}\r\n          selectionMode={selectionMode}\r\n          constrainMode={constrainMode}\r\n          groupProps={groupProps}\r\n          enterModalSelectionOnTouch={true}\r\n         \r\n          selectionZoneProps={{\r\n            selection: this._selection,\r\n            disableAutoSelectOnInputElements: true,\r\n            selectionMode: selectionMode,\r\n          }}\r\n          ariaLabelForListHeader=\"Column headers. Click to sort.\"\r\n          ariaLabelForSelectAllCheckbox=\"Toggle selection for all items\"\r\n          ariaLabelForSelectionColumn=\"Toggle selection\"\r\n          checkButtonAriaLabel=\"select row\"\r\n         \r\n        />\r\n\r\n        {contextualMenuProps && <ContextualMenu {...contextualMenuProps} />}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onRenderDivider = (\r\n    columnProps: IDetailsColumnProps,\r\n    defaultRenderer: (props?: IDetailsColumnProps) => JSX.Element | null,\r\n  ): JSX.Element => {\r\n    const { columnIndex } = columnProps;\r\n    return (\r\n      <React.Fragment key={`divider-wrapper-${columnIndex}`}>\r\n        <span className={classNames.headerDivider}>{defaultRenderer(columnProps)}</span>\r\n        <span className={classNames.headerDividerBar} />\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n//   private _onDataMiss(index: number): void {\r\n//     index = Math.floor(index / PAGING_SIZE) * PAGING_SIZE;\r\n\r\n   \r\n//       setTimeout(() => {\r\n        \r\n//         const itemsCopy = [...this.state.items];\r\n\r\n//         itemsCopy.splice(index, PAGING_SIZE).concat(this._allItems.slice(index, index + PAGING_SIZE));\r\n\r\n//         this.setState({\r\n//           items: itemsCopy,\r\n//         });\r\n//       }, PAGING_DELAY);\r\n//     }\r\n//   }\r\n\r\n//   private _onRenderMissingItem = (index: number): null => {\r\n//     this._onDataMiss(index);\r\n//     return null;\r\n//   };\r\n\r\n  private _onToggleLazyLoad = (): void => {\r\n    let { isLazyLoaded } = this.state;\r\n\r\n    isLazyLoaded = !isLazyLoaded;\r\n\r\n    this.setState({\r\n      isLazyLoaded: isLazyLoaded,\r\n      items: isLazyLoaded\r\n        ? this._allItems.slice(0, PAGING_SIZE).concat(new Array(ITEMS_COUNT - PAGING_SIZE))\r\n        : this._allItems,\r\n    });\r\n  };\r\n\r\n  private _onToggleHeaderVisible = (): void => {\r\n    this.setState({ isHeaderVisible: !this.state.isHeaderVisible });\r\n  };\r\n\r\n  private _onToggleResizing = (): void => {\r\n    const { items, sortedColumnKey, isSortedDescending } = this.state;\r\n    let { canResizeColumns } = this.state;\r\n\r\n    canResizeColumns = !canResizeColumns;\r\n\r\n    this.setState({\r\n      canResizeColumns: canResizeColumns,\r\n      columns: this._buildColumns(items, canResizeColumns, this._onColumnClick, sortedColumnKey, isSortedDescending),\r\n    });\r\n  };\r\n\r\n  private _onCheckboxVisibilityChanged = (ev: React.MouseEvent<HTMLElement>, menuItem: IContextualMenuItem): void => {\r\n    this.setState({ checkboxVisibility: menuItem.data });\r\n  };\r\n\r\n  private _onLayoutChanged = (ev: React.MouseEvent<HTMLElement>, menuItem: IContextualMenuItem): void => {\r\n    this.setState({ layoutMode: menuItem.data });\r\n  };\r\n\r\n  private _onConstrainModeChanged = (ev: React.MouseEvent<HTMLElement>, menuItem: IContextualMenuItem): void => {\r\n    this.setState({ constrainMode: menuItem.data });\r\n  };\r\n\r\n  private _onSelectionChanged = (ev: React.MouseEvent<HTMLElement>, menuItem: IContextualMenuItem): void => {\r\n    this.setState({ selectionMode: menuItem.data });\r\n  };\r\n\r\n  private _onItemLimitChanged = (ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, value: string): void => {\r\n    let newValue = parseInt(value, 10);\r\n    if (isNaN(newValue)) {\r\n      newValue = DEFAULT_ITEM_LIMIT;\r\n    }\r\n    this.setState({ groupItemLimit: newValue });\r\n  };\r\n\r\n  private _getCommandItems = (\r\n    canResizeColumns?: boolean,\r\n    checkboxVisibility?: CheckboxVisibility,\r\n    constrainMode?: ConstrainMode,\r\n    isHeaderVisible?: boolean,\r\n    isLazyLoaded?: boolean,\r\n    layoutMode?: DetailsListLayoutMode,\r\n    selectionMode?: SelectionMode,\r\n  ): IContextualMenuItem[] => {\r\n    return [\r\n      {\r\n        key: 'addRow',\r\n        text: 'Insert row',\r\n        iconProps: { iconName: 'Add' },\r\n        onClick: this._onAddRow,\r\n      },\r\n      {\r\n        key: 'deleteRow',\r\n        text: 'Delete row',\r\n        iconProps: { iconName: 'Delete' },\r\n        onClick: this._onDeleteRow,\r\n      },\r\n      {\r\n        key: 'configure',\r\n        text: 'Configure',\r\n        iconProps: { iconName: 'Settings' },\r\n        subMenuProps: {\r\n          items: [\r\n            {\r\n              key: 'resizing',\r\n              text: 'Allow column resizing',\r\n              canCheck: true,\r\n              checked: canResizeColumns,\r\n              onClick: this._onToggleResizing,\r\n            },\r\n            {\r\n              key: 'headerVisible',\r\n              text: 'Is header visible',\r\n              canCheck: true,\r\n              checked: isHeaderVisible,\r\n              onClick: this._onToggleHeaderVisible,\r\n            },\r\n            {\r\n              key: 'lazyload',\r\n              text: 'Simulate async loading',\r\n              canCheck: true,\r\n              checked: isLazyLoaded,\r\n              onClick: this._onToggleLazyLoad,\r\n            },\r\n            {\r\n              key: 'dash',\r\n              text: '-',\r\n            },\r\n            {\r\n              key: 'checkboxVisibility',\r\n              text: 'Checkbox visibility',\r\n              subMenuProps: {\r\n                items: [\r\n                  {\r\n                    key: 'checkboxVisibility.always',\r\n                    text: 'Always',\r\n                    canCheck: true,\r\n                    isChecked: checkboxVisibility === CheckboxVisibility.always,\r\n            \r\n                    data: CheckboxVisibility.always,\r\n                  },\r\n                  {\r\n                    key: 'checkboxVisibility.onHover',\r\n                    text: 'On hover',\r\n                    canCheck: true,\r\n                    isChecked: checkboxVisibility === CheckboxVisibility.onHover,\r\n    \r\n                    data: CheckboxVisibility.onHover,\r\n                  },\r\n                  {\r\n                    key: 'checkboxVisibility.hidden',\r\n                    text: 'Hidden',\r\n                    canCheck: true,\r\n                    isChecked: checkboxVisibility === CheckboxVisibility.hidden,\r\n                    \r\n                    data: CheckboxVisibility.hidden,\r\n                  },\r\n                ],\r\n              },\r\n            },\r\n            {\r\n              key: 'layoutMode',\r\n              text: 'Layout mode',\r\n              subMenuProps: {\r\n                items: [\r\n                  {\r\n                    key: DetailsListLayoutMode[DetailsListLayoutMode.fixedColumns],\r\n                    text: 'Fixed columns',\r\n                    canCheck: true,\r\n                    checked: layoutMode === DetailsListLayoutMode.fixedColumns,\r\n                   \r\n                    data: DetailsListLayoutMode.fixedColumns,\r\n                  },\r\n                  {\r\n                    key: DetailsListLayoutMode[DetailsListLayoutMode.justified],\r\n                    text: 'Justified columns',\r\n                    canCheck: true,\r\n                    checked: layoutMode === DetailsListLayoutMode.justified,\r\n                  \r\n                    data: DetailsListLayoutMode.justified,\r\n                  },\r\n                ],\r\n              },\r\n            },\r\n            {\r\n              key: 'selectionMode',\r\n              text: 'Selection mode',\r\n              subMenuProps: {\r\n                items: [\r\n                  {\r\n                    key: SelectionMode[SelectionMode.none],\r\n                    text: 'None',\r\n                    canCheck: true,\r\n                    checked: selectionMode === SelectionMode.none,\r\n                    data: SelectionMode.none,\r\n                  },\r\n                  {\r\n                    key: SelectionMode[SelectionMode.single],\r\n                    text: 'Single select',\r\n                    canCheck: true,\r\n                    checked: selectionMode === SelectionMode.single,\r\n                   \r\n                    data: SelectionMode.single,\r\n                  },\r\n                  {\r\n                    key: SelectionMode[SelectionMode.multiple],\r\n                    text: 'Multi select',\r\n                    canCheck: true,\r\n                    checked: selectionMode === SelectionMode.multiple,\r\n                \r\n                    data: SelectionMode.multiple,\r\n                  },\r\n                ],\r\n              },\r\n            },\r\n            {\r\n              key: 'constrainMode',\r\n              text: 'Constrain mode',\r\n              subMenuProps: {\r\n                items: [\r\n                  {\r\n                    key: ConstrainMode[ConstrainMode.unconstrained],\r\n                    text: 'Unconstrained',\r\n                    canCheck: true,\r\n                    checked: constrainMode === ConstrainMode.unconstrained,\r\n                    \r\n                    data: ConstrainMode.unconstrained,\r\n                  },\r\n                  {\r\n                    key: ConstrainMode[ConstrainMode.horizontalConstrained],\r\n                    text: 'Horizontal constrained',\r\n                    canCheck: true,\r\n                    checked: constrainMode === ConstrainMode.horizontalConstrained,\r\n                \r\n                    data: ConstrainMode.horizontalConstrained,\r\n                  },\r\n                ],\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    ];\r\n  };\r\n\r\n  private _getContextualMenuProps(ev: React.MouseEvent<HTMLElement>, column: IColumn): IContextualMenuProps {\r\n    const items = [\r\n      {\r\n        key: 'aToZ',\r\n        name: 'A to Z',\r\n        iconProps: { iconName: 'SortUp' },\r\n        canCheck: true,\r\n        checked: column.isSorted && !column.isSortedDescending,\r\n        onClick: () => this._onSortColumn(column.key, false),\r\n      },\r\n      {\r\n        key: 'zToA',\r\n        name: 'Z to A',\r\n        iconProps: { iconName: 'SortDown' },\r\n        canCheck: true,\r\n        checked: column.isSorted && column.isSortedDescending,\r\n        onClick: () => this._onSortColumn(column.key, true),\r\n      },\r\n    ];\r\n    if (isGroupable(column.key)) {\r\n      items.push({\r\n        key: 'groupBy',\r\n        name: 'Group by ' + column.name,\r\n        iconProps: { iconName: 'GroupedDescending' },\r\n        canCheck: true,\r\n        checked: column.isGrouped,\r\n        onClick: () => this._onGroupByColumn(column),\r\n      });\r\n    }\r\n    return {\r\n      items: items,\r\n      target: ev.currentTarget as HTMLElement,\r\n      directionalHint: DirectionalHint.bottomLeftEdge,\r\n      gapSpace: 10,\r\n      isBeakVisible: true,\r\n      onDismiss: this._onContextualMenuDismissed,\r\n    };\r\n  }\r\n\r\n  private _onItemInvoked = (item: IExampleItem, index: number): void => {\r\n    console.log('Item invoked', item, index);\r\n  };\r\n\r\n  private _onItemContextMenu = (item: IExampleItem, index: number, ev: MouseEvent): boolean => {\r\n    const contextualMenuProps: IContextualMenuProps = {\r\n      target: ev.target as HTMLElement,\r\n      items: [\r\n        {\r\n          key: 'text',\r\n          name: `${this._selection.getSelectedCount()} selected`,\r\n        },\r\n      ],\r\n      onDismiss: () => {\r\n        this.setState({\r\n          contextualMenuProps: undefined,\r\n        });\r\n      },\r\n    };\r\n\r\n    if (index > -1) {\r\n      this.setState({\r\n        contextualMenuProps: contextualMenuProps,\r\n      });\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  private _onColumnClick = (ev: React.MouseEvent<HTMLElement>, column: IColumn): void => {\r\n    if (column.columnActionsMode !== ColumnActionsMode.disabled) {\r\n      this.setState({\r\n        contextualMenuProps: this._getContextualMenuProps(ev, column),\r\n      });\r\n    }\r\n  };\r\n\r\n  private _onColumnContextMenu = (column: IColumn, ev: React.MouseEvent<HTMLElement>): void => {\r\n    if (column.columnActionsMode !== ColumnActionsMode.disabled) {\r\n      this.setState({\r\n        contextualMenuProps: this._getContextualMenuProps(ev, column),\r\n      });\r\n    }\r\n  };\r\n\r\n  private _onContextualMenuDismissed = (): void => {\r\n    this.setState({\r\n      contextualMenuProps: undefined,\r\n    });\r\n  };\r\n\r\n  private _onSortColumn = (columnKey: string, isSortedDescending: boolean): void => {\r\n    const sortedItems = _copyAndSort(this._allItems, columnKey, isSortedDescending);\r\n\r\n    this.setState({\r\n      items: sortedItems,\r\n      announcedMessage: `${columnKey} is sorted ${isSortedDescending ? 'descending' : 'ascending'}`,\r\n      groups: undefined,\r\n      columns: this._buildColumns(\r\n        sortedItems,\r\n        true,\r\n        this._onColumnClick,\r\n        columnKey,\r\n        isSortedDescending,\r\n        undefined,\r\n        this._onColumnContextMenu,\r\n      ),\r\n      isSortedDescending: isSortedDescending,\r\n      sortedColumnKey: columnKey,\r\n    });\r\n  };\r\n\r\n  private _onGroupByColumn = (column: IColumn): void => {\r\n    const { key, isGrouped } = column;\r\n    const { sortedColumnKey, isSortedDescending, groups, items, columns } = this.state;\r\n\r\n    if (isGrouped) {\r\n      // ungroup\r\n      this._onSortColumn(sortedColumnKey!, !!isSortedDescending);\r\n    } else {\r\n      let groupedItems = [];\r\n      let newGroups: IGroup[];\r\n      if (groups) {\r\n        newGroups = [...groups];\r\n        groupedItems = this._groupByKey(newGroups, items, key as keyof IExampleItem);\r\n      } else {\r\n        groupedItems = _copyAndSort(items, key);\r\n        newGroups = this._getGroups(groupedItems, key as keyof IExampleItem);\r\n      }\r\n\r\n      for (const c of columns) {\r\n        if (c.key === key) {\r\n          c.isGrouped = true;\r\n          break;\r\n        }\r\n      }\r\n      this.setState({\r\n        items: groupedItems,\r\n        columns: [...columns],\r\n        groups: newGroups,\r\n      });\r\n    }\r\n  };\r\n\r\n  private _groupByKey(groups: IGroup[], items: IExampleItem[], key: keyof IExampleItem): IExampleItem[] {\r\n    let groupedItems: IExampleItem[] = [];\r\n    if (groups) {\r\n      for (const group of groups) {\r\n        if (group.children && group.children.length > 0) {\r\n          const childGroupedItems = this._groupByKey(group.children, items, key);\r\n          groupedItems = groupedItems.concat(childGroupedItems);\r\n        } else {\r\n          const itemsInGroup = items.slice(group.startIndex, group.startIndex + group.count);\r\n          const nextLevelGroupedItems = _copyAndSort(itemsInGroup, key);\r\n          groupedItems = groupedItems.concat(nextLevelGroupedItems);\r\n          group.children = this._getGroups(nextLevelGroupedItems, key, group);\r\n        }\r\n      }\r\n    }\r\n    return groupedItems;\r\n  }\r\n\r\n  private _getGroups(groupedItems: IExampleItem[], key: keyof IExampleItem, parentGroup?: IGroup): IGroup[] {\r\n    const separator = '-';\r\n    const groups = groupedItems.reduce((current: IGroup[], item: IExampleItem, index: number) => {\r\n      const currentGroup = current[current.length - 1];\r\n      const itemColumnValue = item[key];\r\n\r\n      if (!currentGroup || this._getLeafGroupKey(currentGroup.key, separator) !== itemColumnValue) {\r\n        current.push({\r\n          key: (parentGroup ? parentGroup.key + separator : '') + itemColumnValue,\r\n          name: key + ': ' + itemColumnValue,\r\n          startIndex: parentGroup ? parentGroup.startIndex + index : index,\r\n          count: 1,\r\n          level: parentGroup ? parentGroup.level! + 1 : 0,\r\n        });\r\n      } else {\r\n        currentGroup.count++;\r\n      }\r\n      return current;\r\n    }, [] as IGroup[]);\r\n\r\n    return groups;\r\n  }\r\n\r\n  private _getLeafGroupKey(key: string, separator: string): string {\r\n    let leafKey = key;\r\n    if (key.indexOf(separator) !== -1) {\r\n      const arrKeys = key.split(separator);\r\n      leafKey = arrKeys[arrKeys.length - 1];\r\n    }\r\n    return leafKey;\r\n  }\r\n\r\n  private _onAddRow = (): void => {\r\n    this.setState({\r\n      items: createListItems(1).concat(this.state.items),\r\n    });\r\n  };\r\n\r\n  private _onDeleteRow = (): void => {\r\n    if (this._selection.getSelectedCount() > 0) {\r\n      this.setState((previousState: IDetailsListAdvancedExampleState) => {\r\n        return {\r\n          items: previousState.items.filter((item, index) => !this._selection.isIndexSelected(index)),\r\n        };\r\n      });\r\n    } else {\r\n      this.setState({\r\n        items: this.state.items.slice(1),\r\n      });\r\n    }\r\n  };\r\n\r\n  private _onItemsSelectionChanged = () => {\r\n    this.setState({\r\n      selectionCount: this._selection.getSelectedCount(),\r\n    });\r\n  };\r\n\r\n  private _buildColumns(\r\n    items: IExampleItem[],\r\n    canResizeColumns?: boolean,\r\n    onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => any,\r\n    sortedColumnKey?: string,\r\n    isSortedDescending?: boolean,\r\n    groupedColumnKey?: string,\r\n    onColumnContextMenu?: (column: IColumn, ev: React.MouseEvent<HTMLElement>) => any,\r\n  ) {\r\n    const columns = buildColumns(\r\n      items,\r\n      canResizeColumns,\r\n      onColumnClick,\r\n      sortedColumnKey,\r\n      isSortedDescending,\r\n    );\r\n\r\n    columns.forEach(column => {\r\n   \r\n      column.ariaLabel = `Operations for ${column.name}`;\r\n      if (column.key === 'thumbnail') {\r\n        column.iconName = 'Picture';\r\n        column.isIconOnly = true;\r\n      } else if (column.key === 'description') {\r\n        column.isMultiline = true;\r\n        column.minWidth = 200;\r\n      } else if (column.key === 'name') {\r\n        column.onRender = (item: IExampleItem) => (\r\n          <Link href=\"#\" data-selection-invoke={true}>\r\n            {item.name}\r\n          </Link>\r\n        );\r\n      } else if (column.key === 'key') {\r\n        column.columnActionsMode = ColumnActionsMode.disabled;\r\n        column.onRender = (item: IExampleItem) => (\r\n          <Link className={classNames.linkField} href=\"https://microsoft.com\" target=\"_blank\" rel=\"noopener\">\r\n            {item.key}\r\n          </Link>\r\n        );\r\n        column.minWidth = 90;\r\n        column.maxWidth = 90;\r\n      }\r\n    });\r\n\r\n    return columns;\r\n  }\r\n}\r\n\r\nfunction _copyAndSort<T>(items: T[], columnKey: string, isSortedDescending?: boolean): T[] {\r\n  const key = columnKey as keyof T;\r\n  return items.slice(0).sort((a: T, b: T) => ((isSortedDescending ? a[key] < b[key] : a[key] > b[key]) ? 1 : -1));\r\n}\r\n","C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\tabels\\TableList.tsx",["313","314","315","316","317","318","319","320","321","322","323","324"],"import * as React from 'react';\r\nimport { DetailsList, Selection, IColumn, SelectionMode, DetailsRow, IDetailsFooterProps } from '@fluentui/react/lib/DetailsList';\r\nimport { DefaultButton, IRenderFunction } from '@fluentui/react';\r\nimport { useEffect, useState } from 'react';\r\nimport \"./detaiList.scss\"\r\nimport {RouteComponentProps, useHistory } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useBoolean } from '@fluentui/react-hooks';\r\nimport { CustemDialogAddress, CustemDialogEmail, CustemDialogPhone } from '../dialog/Dialog';\r\n\r\n\r\n\r\n\r\nexport interface IDetailsListItem {\r\n  key: number;\r\n  name: string;\r\n  value: number;\r\n}\r\n\r\nexport interface IDetailsListState {\r\n  selectionDetails?: string;\r\n  columns: [] | IColumn[];\r\n  allItems:any[];\r\n  styleHeader?: string\r\n  isSelcted?:boolean;\r\n  isFooter?:boolean;\r\n  rederRow?:string;\r\n  search?:boolean;\r\n  addCustem?:boolean;\r\n  textBottun?:string;\r\n  renderItemColumn?:any\r\n\r\n}\r\ninterface PropsInterface extends RouteComponentProps<any> {}\r\n\r\nconst footerStyle = {\r\n  root: {\r\n      background: '#E1E1E1',\r\n  }\r\n}\r\n// renderItemColumn=()=>{} ,\r\nconst CustemTable: React.FunctionComponent<IDetailsListState> = (props) => {\r\n  const { allItems , columns, isSelcted = false, isFooter=true, rederRow=\"\",search=false, addCustem=false ,textBottun=\"\"} = props\r\n  let isSelection=SelectionMode.none\r\n  if(isSelcted === true){\r\n     isSelection=SelectionMode.single\r\n     \r\n  }\r\n  const renderRow=rederRow;\r\n   \r\n  const [state, setState] = React.useState({\r\n    items: allItems,\r\n    columns: columns,\r\n  });\r\n  // if(search===true)  {\r\n  // columns.map(col:IColumn)=>\r\n  //     {\r\n  //       col.push([onColumnClickk]=)\r\n  //     }\r\n  //   );\r\n  // }\r\n  const [t, i18n] = useTranslation();\r\n  const [hideDialog, { toggle: toggleHideDialog }] = useBoolean(true);\r\n  const [selectedItem, setSelectedItem] = useState<Object | undefined>(undefined)\r\n  const history = useHistory()\r\n  const selection = new Selection({\r\n    onSelectionChanged: () => {\r\n      console.log(selection.getSelection());\r\n      setSelectedItem(selection.getSelection())\r\n    }\r\n  })\r\n  useEffect(() => {\r\n    // Do something with the selected item\r\n    console.log(selectedItem)\r\n  }, [selectedItem])\r\n\r\n  const onChange = (ke: string, val: any) => {\r\n    console.log(\"col\" + ke + \"0\" + val); \r\n   }\r\n \r\n  const renderItemColumn = (item: any, index: any, column: any) => {\r\n   \r\n    let fieldContent = item[column.fieldName];\r\n    console.log(\"fieldContent in culmn\",fieldContent)\r\n    switch (column.fieldName) {\r\n        case renderRow:\r\n          //@ts-ignore\r\n          console.log(\"index in column\",allItems[index].idEntity)\r\n          index = allItems[index].idEntity\r\n          return <DefaultButton text={t('details')}name={index} onClick={()=>history.push(`/customer-details/${index}`)}/> \r\n           \r\n          {/* <Link to={{\r\n                pathname: '/customer-details',\r\n                state: [{id: 1, name: 'Ford', color: 'red'}]\r\n              }}> {t('details')} </Link>  */}\r\n              {/* <Link to={`/customer-details/${index}`}> p</Link> \r\n              </DefaultButton> */}\r\n        default:\r\n            return <span >{fieldContent}</span>;\r\n    }\r\n}\r\n \r\n\r\n  let onRenderDetailsFooter: IRenderFunction<IDetailsFooterProps> = (detailsFooterProps?: IDetailsFooterProps) => {\r\n    if (!props) {\r\n      return null;\r\n    }\r\n    if(isFooter===false){\r\n      return null;\r\n    }\r\n    return (\r\n      <DetailsRow\r\n        {...detailsFooterProps}\r\n        columns={detailsFooterProps?.columns}\r\n        item={{}}\r\n        itemIndex={-1}\r\n        // groupNestingDepth={detailsFooterProps?.groupNestingDepth}\r\n        styles={footerStyle}\r\n    \r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n\r\n    <div>\r\n      {textBottun===\"addAddress\" ?<CustemDialogAddress textButton={t(textBottun)}/>:null}\r\n      {textBottun===\"addPhone\" ? <CustemDialogPhone textButton={t(textBottun)}/> :null}\r\n      {textBottun===\"addEmail\" ? <CustemDialogEmail textButton={t(textBottun)}/> :null}\r\n\r\n   \r\n      <div className=\"continar\">\r\n        <DetailsList\r\n          items={allItems}\r\n          columns={columns}\r\n          selection={selection}\r\n          selectionMode={isSelection}\r\n          // selectionPreservedOnEmptyClick={true}\r\n          onRenderDetailsFooter={onRenderDetailsFooter}\r\n          onRenderItemColumn={renderItemColumn}\r\n        />\r\n      </div>\r\n   </div>\r\n  );\r\n\r\n}\r\n\r\n\r\nexport default CustemTable;\r\n","C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\dialog\\Dialog.tsx",["325","326","327","328","329"],"import { useBoolean } from '@fluentui/react-hooks';\r\nimport { PrimaryButton, Dialog, DialogFooter, TextField, DefaultButton } from 'office-ui-fabric-react';\r\nimport react, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { CustomDropdown } from '../Option';\r\nimport { CustomTextField } from '../TextField';\r\nimport { CustomToggle } from '../Toggle';\r\nimport \"./dialog.scss\";\r\n\r\ninterface Iprop{\r\n    textButton:string\r\n}\r\n\r\n\r\nclass UpdateAddress\r\n{\r\n  TypeAddress:Number;\r\n  Country:string;\r\n  StreetAndNumber:string;\r\n  PostalCode:string;\r\n  City:String;\r\n  AddressDefault:boolean\r\n  constructor(typeAddress:Number = -1, country:string=\"\", streetAndNumber = '', city = '',postalCode ='', addressDefault=false)\r\n  {\r\n    this.TypeAddress=typeAddress;\r\n    this.Country=country;\r\n    this.StreetAndNumber=streetAndNumber;\r\n    this.PostalCode=postalCode;\r\n    this.City=city;\r\n    this.AddressDefault=addressDefault\r\n  }\r\n}\r\n\r\nclass UpdateEmail{\r\n  TypeAddressEmail:string;\r\n  EmailAddress:string\r\n  EmailDefault:boolean\r\n  constructor(typeAddressEmail:string='', emailAddress=\"\",emailDefault=false ){\r\n    this.TypeAddressEmail=typeAddressEmail;\r\n    this.EmailAddress=emailAddress;\r\n    this.EmailDefault=emailDefault;\r\n  }\r\n}\r\n\r\nclass UpdatePhone\r\n{\r\n  TypePhone:Number;\r\n  Phone:String\r\n  PhoneDefault:boolean\r\n  AreaCodeCountry:Number\r\n  constructor(typePhone:Number = -1, phoneDefault=false, phone:string='', areaCodeCountry=0)\r\n  {\r\n    this.TypePhone=typePhone;\r\n    this.PhoneDefault=phoneDefault;\r\n    this.Phone=phone;\r\n    this.AreaCodeCountry = areaCodeCountry;\r\n  }\r\n}\r\nexport const CustemDialogAddress = (props:Iprop) => {\r\n\r\n    const{textButton} = props\r\n    const [t, i18n] = useTranslation();\r\n    const [hideDialog, { toggle: toggleHideDialog }] = useBoolean(true);\r\n\r\n    const genderArray = [{ key: 1, text: t('male') }, { key: 2, text: t('female') }, { key: 3, text: t('other') }];\r\n\r\n\r\n    const dialogContentProps = {\r\n      title: t('updateAddress'),\r\n    };\r\n   \r\n\r\n    const [address,setAddress] = useState(new UpdateAddress());\r\n\r\n    const updateUser = (key: string, value: any) => {\r\n      let newCus = { ...address};\r\n      (newCus as any)[key] = value;\r\n      setAddress(newCus);\r\n    }\r\n  \r\n\r\n    return(\r\n        <>\r\n        <PrimaryButton  text={textButton} onClick={toggleHideDialog} />\r\n       <Dialog hidden={hideDialog} onDismiss={toggleHideDialog} dialogContentProps={dialogContentProps}>\r\n        <DialogFooter >\r\n          <CustomDropdown otherInputId={''} hasOtherValue={false} options={genderArray} label={t('typeAddress')} onChange={updateUser} selectedKey={address.TypeAddress} id={'TypeAddress'} othertextInput={t('')} />\r\n          <CustomTextField  label={t(\"streetAndNumber\")} onChange={updateUser} id={'StreetAndNumber'}/>\r\n          <CustomTextField  label={t(\"city\")} onChange={updateUser} id={'City'}/>\r\n          <CustomTextField  label={t(\"postalCode\")} onChange={updateUser} id={'PostalCode'}/>\r\n          <CustomDropdown otherInputId={''} hasOtherValue={false} options={genderArray} label={t('country')} onChange={updateUser} selectedKey={address.Country} id={'Country'} othertextInput={t('')} />\r\n            <CustomToggle offText={t('addressDefault')} onText={t('addressDefault')} onChange={updateUser} id={'AddressDefault'} defaultChecked={false} />\r\n           <PrimaryButton onClick={toggleHideDialog} text={t(\"update\")} />\r\n           <DefaultButton onClick={toggleHideDialog} text={t(\"Cancel\")} />\r\n         </DialogFooter>\r\n       </Dialog>\r\n      \r\n      </>\r\n    )\r\n\r\n}\r\n\r\n\r\n///add phone number\r\n\r\nexport const CustemDialogPhone = (props:Iprop) => {\r\n\r\n  const{textButton} = props\r\n  const [t, i18n] = useTranslation();\r\n  const [hideDialog, { toggle: toggleHideDialog }] = useBoolean(true);\r\n\r\n  const genderArray = [{ key: 1, text: t('male') }, { key: 2, text: t('female') }, { key: 3, text: t('other') }];\r\n  const dialogContentProps = {\r\n    title: t('updateAddress'),\r\n  };\r\n \r\n  const [phone,setPhone] = useState(new UpdatePhone());\r\n  const updateUser = (key: string, value: any) => {\r\n    let newCus = { ...phone};\r\n    (newCus as any)[key] = value;\r\n    setPhone(newCus);\r\n  }\r\n  return(\r\n      <>\r\n      <PrimaryButton  text={textButton} onClick={toggleHideDialog} />\r\n     <Dialog hidden={hideDialog} onDismiss={toggleHideDialog} dialogContentProps={dialogContentProps}>\r\n      <DialogFooter >\r\n        <CustomDropdown otherInputId={''} hasOtherValue={false} options={genderArray} label={t('TypePhone')} onChange={updateUser} selectedKey={phone.TypePhone} id={'TypePhone'} othertextInput={t('')} />\r\n        <CustomTextField  label={t(\"phone\")} onChange={updateUser} id={'Phone'}/>\r\n        <CustomDropdown otherInputId={''} hasOtherValue={false} options={genderArray} label={t('AreaCodeCountry')} onChange={updateUser} selectedKey={phone.AreaCodeCountry} id={'AreaCodeCountry'} othertextInput={t('')} />\r\n          <CustomToggle offText={t('PhoneDefault')} onText={t('PhoneDefault')} onChange={updateUser} id={'AddressDefault'} defaultChecked={false} />\r\n         <PrimaryButton onClick={toggleHideDialog} text={t(\"update\")} />\r\n         <DefaultButton onClick={toggleHideDialog} text={t(\"Cancel\")} />\r\n       </DialogFooter>\r\n     </Dialog>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport const CustemDialogEmail = (props:Iprop) => {\r\n\r\n  const{textButton} = props\r\n  const [t, i18n] = useTranslation();\r\n  const [hideDialog, { toggle: toggleHideDialog }] = useBoolean(true);\r\n\r\n  const genderArray = [{ key: 1, text: t('male') }, { key: 2, text: t('female') }, { key: 3, text: t('other') }];\r\n  const dialogContentProps = {\r\n    title: t('updateEmail'),\r\n  };\r\n \r\n  const [email,setEmail] = useState(new UpdateEmail());\r\n  const updateUser = (key: string, value: any) => {\r\n    let newCus = { ...email};\r\n    (newCus as any)[key] = value;\r\n    setEmail(newCus);\r\n  }\r\n  return(\r\n      <>\r\n      <PrimaryButton  text={textButton} onClick={toggleHideDialog} />\r\n     <Dialog hidden={hideDialog} onDismiss={toggleHideDialog} dialogContentProps={dialogContentProps}>\r\n      <DialogFooter >\r\n        <CustomDropdown otherInputId={''} hasOtherValue={false} options={genderArray} label={t('TypeEmail')} onChange={updateUser} selectedKey={email.TypeAddressEmail} id={'TypeAddressEmail'} othertextInput={t('')} />\r\n        <CustomTextField  label={t(\"mailAddress\")} onChange={updateUser} id={'EmailAddress'}/>\r\n          <CustomToggle offText={t('mailDefault')} onText={t('mailDefault')} onChange={updateUser} id={'EmailDefault'} defaultChecked={false} />\r\n         <PrimaryButton onClick={toggleHideDialog} text={t(\"update\")} />\r\n         <DefaultButton onClick={toggleHideDialog} text={t(\"cancel\")} />\r\n       </DialogFooter>\r\n     </Dialog>\r\n    </>\r\n  )\r\n}","C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\TextField.tsx",[],"C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\Option.tsx",["330","331","332","333","334","335","336"],"import * as React from 'react';\r\nimport { Dropdown, IDropdown } from '@fluentui/react/lib/Dropdown';\r\nimport ComponenetProps from '../../modelsType/type/interface'\r\nimport { useState } from 'react';\r\nimport \"../../scssPages/form.scss\"\r\nimport { CustomTextField } from './TextField';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface MyProps extends ComponenetProps {\r\n  options: any;\r\n  label: string\r\n  selectedKey: any\r\n  othertextInput: string,\r\n  hasOtherValue:boolean\r\n  otherInputId:any\r\n  readOnly ?:Boolean\r\n}\r\n\r\n\r\n\r\n\r\n// const dropdownStyles = { dropdown: { width: 300 } };\r\n\r\nexport const CustomDropdown: React.FunctionComponent<MyProps> = (props) => {\r\n  const [t, i18n] = useTranslation();\r\n  const dropdownRef = React.createRef<IDropdown>();\r\n  const onSetFocus = () => dropdownRef.current!.focus(true);\r\n\r\n  const {readOnly=false, onChange, options, label, selectedKey, id, othertextInput,hasOtherValue,otherInputId } = props;\r\n  const [selected, setSelected] = useState<String | undefined>(\"\");\r\n  const [selectedIndex, setSelectedIndex] = useState<number | undefined>(0);\r\n  return (\r\n      <div>\r\n        <Dropdown\r\n          // componentRef={dropdownRef}\r\n          label={label}\r\n          selectedKey={selectedKey}\r\n          onChange={(e, selectedOption) => {\r\n            console.log(e + \"\" + selectedOption);\r\n            setSelected(selectedOption?.text);\r\n            onChange(id, selectedOption?.key);\r\n            let getSelectedIndex=options.findIndex((x:any)=>x.text==selectedOption?.text);\r\n            setSelectedIndex(getSelectedIndex);\r\n          }}\r\n          options={options}\r\n          required\r\n          className=\" text-field\"\r\n          aria-readonly ={false}\r\n          // styles={dropdownStyles}\r\n        ></Dropdown>\r\n        {selectedIndex == options.length-1 && hasOtherValue ? <CustomTextField  label={othertextInput} onChange={onChange} id={otherInputId} /> : false}\r\n      </div>   \r\n  );\r\n};\r\n// ,onclick:()=>console.log(\"i0i0\")\r\n\r\n\r\n","C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\Toggle.tsx",["337"],"import { Toggle } from \"@fluentui/react\";\r\nimport React from \"react\";\r\n// import { useId, useBoolean } from '@fluentui/react-hooks';\r\nimport ComponenetProps from \"../../modelsType/type/interface\";\r\nimport \"../../scssPages/form.scss\"\r\n\r\n// const dialogStyles = { main: { maxWidth: 450 } };\r\ninterface MyProps extends ComponenetProps {\r\n  onText:string,\r\n  defaultChecked:boolean\r\n  nameOfClasStyle?:string\r\n  offText:string\r\n}\r\n\r\nexport const CustomToggle: React.FunctionComponent<MyProps>= (props) => {\r\n  \r\n  // const [isDraggable, { toggle: toggleIsDraggable }] = useBoolean(false);\r\n  // const labelId: string = useId('dialogLabel');\r\n  // const subTextId: string = useId('subTextLabel');\r\n  \r\n  const {onChange,id,onText,defaultChecked,nameOfClasStyle='toggle',offText}=props; \r\n  return (   \r\n      <Toggle\r\n      defaultChecked= {defaultChecked?true:undefined}\r\n       onText={onText}\r\n       offText={offText}\r\n       onChange ={(ev: React.MouseEvent<HTMLElement>, checked?: boolean ) => {\r\n      //  const className={nameOfClasStyle}\r\n         onChange(id,checked )\r\n    }} \r\n    />  \r\n  );\r\n};\r\n\r\n\r\n","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\PriceList.tsx",[],"C:\\Users\\USER\\Desktop\\client-management\\src\\components\\Security.tsx",[],"C:\\Users\\USER\\Desktop\\client-management\\src\\components\\Representatives.tsx",[],"C:\\Users\\USER\\Desktop\\client-management\\src\\components\\Obligo.tsx",[],"C:\\Users\\USER\\Desktop\\client-management\\src\\components\\Contact\\Contact.tsx",["338","339"],"import * as React from 'react';\r\nimport \"./contact.scss\";\r\nimport \"../../scssPages/form.scss\";\r\nimport CustemTable, {  } from '../../shared/components/tabels/TableList';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Subtitle from '../../shared/components/Subtitle';\r\n\r\n\r\n\r\nexport interface IDetailsListItem {\r\n    key: number;\r\n    value: number;\r\n    name:string;\r\n  }\r\nconst Contact =()=>{\r\n  \r\n  const [t, i18n] = useTranslation();\r\n\r\n\r\n  const headerStyle = {\r\n    cellTitle: {\r\n      color: \"#1A1F71\",\r\n      background: '#F4F2FF',\r\n      border: '8px'\r\n    }\r\n  }\r\n    const columns = [       \r\n        {key: 'column1', name: 'Name', fieldName: 'name', minWidth: 100, maxWidth: 200},\r\n        { key: 'column2', name: 'Value', fieldName: 'value', minWidth: 100, maxWidth: 200},\r\n        { key: 'column2', name: 'Value', fieldName: 'value', minWidth: 100, maxWidth: 200},\r\n      ];\r\n     const items=[\r\n         {key: 1, name:\"good\",value:1},\r\n         {key:2, name:\"good\",value:12},\r\n         {key: 3, name:\"goo\",value:12},\r\n         {key:4, name:\"good\",value:12},\r\n         {key:5, name:\"good\",value:12}\r\n        ]\r\n    return(\r\n        <>\r\n\r\n        <div className=\"content-wrapper\">\r\n          <Subtitle title={t('customerSearch')}/>\r\n    \r\n           <label className=\"\">{t('addresses')}</label>\r\n            <CustemTable columns={columns} allItems={items} textBottun={'addAddress'} addCustem={true} />\r\n        \r\n          <label className=\" contact-text\">{t('email')}</label>\r\n          <CustemTable columns={columns} allItems={items} textBottun={t('addEmail')} addCustem={true} />\r\n\r\n          <label className=\" contact-text\">{t('phones')}</label>\r\n          <CustemTable columns={columns} allItems={items} textBottun={t('addPhone')} addCustem={true} />\r\n\r\n          {/* <DetailsListBasicExample columns={columns} allItems={item} />\r\n         \r\n          <p></p>\r\n          <DetailsListBasicExample columns={columns} allItems={item} />\r\n          <p></p>\r\n          <DetailsListBasicExample columns={columns} allItems={item} />\r\n           */}\r\n           </div>\r\n        </>\r\n\r\n    );\r\n}\r\nexport default Contact;\r\n\r\n","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\customerDetails\\CustomerDetails.tsx",["340","341","342","343","344","345","346","347","348","349"],"import { useEffect, useState } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { CustomDropdown } from \"../../shared/components/Option\";\r\nimport { CustomTextField, CustomTextFieldAddInput } from \"../../shared/components/TextField\";\r\nimport { TextFeildNote } from \"../../shared/components/Note\";\r\nimport { CustomToggle } from \"../../shared/components/Toggle\";\r\nimport './customerDetails.scss'\r\nimport { Icons } from \"../../modelsType/Icon\";\r\nimport Subtitle from \"../../shared/components/Subtitle\";\r\nimport '../../scssPages/sub-header.scss';\r\nimport { DefaultButton, IconButton, List, PrimaryButton } from \"@fluentui/react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Title from \"../../shared/components/Title\";\r\nimport { createCustomer, readCustomerId } from \"../../store/actions/customerActioin\"\r\nimport { loadOptions } from \"../../store/actions/dataActions\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { isNullishCoalesce } from \"typescript\";\r\n\r\n\r\n\r\n\r\n//form's object\r\nexport interface ICustomer {\r\n  [x: string]: any;\r\n  gender: Number;\r\n  otherGender: String;\r\n  otherCustomerStatus: string;\r\n  entityStatusId: Number;\r\n  firstName: string;\r\n  lastName: string;\r\n  isLocked: boolean;\r\n  note: string;\r\n  dateBirth: string;\r\n  middleName: string;\r\n  classId: Number;\r\n  entitySubTypeId: Number;\r\n  ViewNoteWhenPerformingAction: boolean;\r\n  industryId: Number;\r\n  CreditGroup: Number;\r\n  idAffiliate: Number;\r\n  idNumber: string;\r\n  idTypeId: string;\r\n  idTypeOther: string;\r\n  addressCountryCode: string;\r\n  idIdentifier: Number;\r\n  address: string;\r\n  addressNumber: string;\r\n  addressCity: string\r\n  iDCountryCode: string;\r\n  telephone: string;\r\n  telephoneCountryCode: Number;\r\n  email: string;\r\n  entityNumber: string;\r\n}\r\n\r\nconst blankCustomer: ICustomer = {\r\n  gender: 1,\r\n  otherGender: \"\",\r\n  CustomerStatus: 0,\r\n  entityStatusId: 0,\r\n  firstName: \"\",\r\n  note: \"\",\r\n  lastName: \"\",\r\n  isLocked: false,\r\n  dateBirth: \"\",\r\n  genderOther: \"\",\r\n  middleName: \"\",\r\n  otherCustomerStatus: \"\",\r\n  classId: 1,\r\n  entitySubTypeId: 1,\r\n  ViewNoteWhenPerformingAction: false,\r\n  industryId: 0,\r\n  CreditGroup: 0,\r\n  idAffiliate: 0,\r\n  idTypeId: \"\",\r\n  idNumber: \"\",\r\n  idTypeOther: \"\",\r\n  addressCountryCode: \"\",\r\n  idIdentifier: 0,\r\n  address: \"\",\r\n  addressNumber: \"\",\r\n  addressCity: \"\",\r\n  iDCountryCode: \"\",\r\n  telephone: \"\",\r\n  telephoneCountryCode: 0,\r\n  email: \"\",\r\n  entityNumber: \"\",\r\n}\r\n\r\n\r\n\r\ninterface Iparms {\r\n  userId: string\r\n}\r\n\r\nexport interface IUserCredentials{\r\n  \"idInitiator\":any,\r\n  \"idClient\":any,\r\n  \"idBranch\":any\r\n}\r\nconst CustomerDetails = () => {\r\n\r\n  const options = {\r\n    genders: [],\r\n    typeIdentityNumbers: [],\r\n    customersStatus: [],\r\n    customersCondition: [],\r\n    customersType: []\r\n  }\r\n\r\n  const [t, i18n] = useTranslation();\r\n  const dispatch = useDispatch()\r\n  const [readOnly, setReadOnly] = useState(false)\r\n  const [update, setUpdate] = useState(true)\r\n  const [typeButton, setTypeButton] = useState()\r\n  const [customer, setCustomer] = useState(blankCustomer)\r\n  const [optionsForm, setOptionsForm] = useState(options)\r\n  // const [fieldsOptionsMap,setFieldsOptionsMap]=useState(null)\r\n  const [msgIsCreated, setMsgIsCreated] = useState(\"\")\r\n  const { dataCustomer } = useSelector(({ customerReducer }: any) => customerReducer)\r\n  const fieldsOptionsMapFromReducer = useSelector(({ dataReducer }: any) => dataReducer)\r\n   const [userCredentials,setUserCredentials] = useState<IUserCredentials|null>(null)\r\n  const { user } = useSelector(({ authReducer }: any) => authReducer)\r\n  const params = useParams<Iparms>()\r\n\r\n  //details of user login\r\n  useEffect(() => {\r\n    if (!user) return\r\n    const userObj = JSON.parse(user)\r\n    if (!userObj) return\r\n    console.log(\"userObj: \", userObj)\r\n    setUserCredentials({\"idInitiator\":userObj.data.user.id_entity,\r\n                       \"idClient\":userObj.data.client.id_entity,\r\n                        \"idBranch\": userObj.data.branch.id_entity \r\n    })\r\n    console.log(\"UserCredentials : \",userCredentials)\r\n  }, []);\r\n\r\n  //id of customer frrom search\r\n  useEffect(() => {\r\n    console.log(\"params : \", params);\r\n    if (params?.userId) {\r\n      const userId = params.userId\r\n      callReadCustomer(userId, userCredentials)\r\n    }\r\n  }, [params])\r\n\r\n  const callReadCustomer = async (userId: string, listIdUser: any) => {\r\n    dispatch(readCustomerId(userId, listIdUser))\r\n  }\r\n\r\n  //call to option in dropDwan  \r\n  useEffect(() => {\r\n    if (!fieldsOptionsMapFromReducer?.data?.generalFormOptionsMa) {\r\n      callLoadOptions()\r\n    }\r\n  }, [])\r\n\r\n  const callLoadOptions = async () => {\r\n    try {\r\n      await dispatch(loadOptions())\r\n      console.log(\"good\")\r\n\r\n    } catch (error) {\r\n      console.log(\"error in call load options\", error)\r\n    }\r\n  }\r\n\r\n  //build the option in dropdwan\r\n  const buildObjecOptions = (nameOption: string) => {\r\n    fieldsOptionsMapFromReducer.data.generalFormOptionsMap[nameOption].map((objOptin: { key: string | number; }, index: string | number) => {\r\n      //@ts-ignore\r\n      options[nameOption][index] = { key: objOptin.enum_id, text: objOptin.enum_value }\r\n    });\r\n  }\r\n\r\n  //update the object  option \r\n  useEffect(() => {\r\n    if (!fieldsOptionsMapFromReducer?.data?.generalFormOptionsMap) return\r\n    const nameOptions = [\"customersCondition\", \"customersType\", \"genders\", \"typeIdentityNumbers\", \"customersStatus\"]\r\n    for (let value of nameOptions) {\r\n      buildObjecOptions(value)\r\n    }\r\n    console.log(\"option customer before state\", options)\r\n    setOptionsForm({ ...options })\r\n  }, [fieldsOptionsMapFromReducer])\r\n\r\n\r\n  //function called to options\r\n\r\n\r\n  //function created customer\r\n  useEffect(() => {\r\n\r\n    if (dataCustomer?.err_code === 0) {\r\n      setUpdate(false)\r\n      console.log(\"typeButton\",typeButton)\r\n      if (typeButton === \"creat\") {\r\n        setMsgIsCreated(\"Customer created successfully\")\r\n      }\r\n      else {\r\n        if (dataCustomer?.err_code) {\r\n          if (dataCustomer?.err_code !== 0)\r\n            setMsgIsCreated(\"The customer's details are incorrect  try again\")\r\n        }\r\n        else {\r\n          setMsgIsCreated(\"\")\r\n        }\r\n      }\r\n    }\r\n    if (!dataCustomer?.data) return\r\n    setCustomer({\r\n      ...customer,\r\n      classId: dataCustomer.data.class.class_id,\r\n      dateBirth: dataCustomer.data.properties.date_birth,\r\n      firstName: dataCustomer.data.properties.first_name,\r\n      lastName: dataCustomer.data.properties.last_name,\r\n      entitySubTypeId: dataCustomer.data.types.entity_sub_type_id,\r\n      isLocked: dataCustomer.data.properties.is_locked,\r\n      note: dataCustomer.data.properties.note,\r\n      gender: dataCustomer.data.gender.gender_id,\r\n      CustomerStatus: dataCustomer.data.status.status_id,\r\n      // address: dataCustomer.data.addresses.address_name,\r\n      telephone: dataCustomer.data.telephones.telephone_number,\r\n      email: dataCustomer.data.emails.email_address,\r\n      entityNumber: dataCustomer.data.id_entity\r\n    })\r\n    setReadOnly(true)\r\n   \r\n    console.log(\"customer : \",customer)\r\n  }, [dataCustomer])\r\n\r\n\r\n  //check what event in button\r\n  const activeButton = (e: any) => {\r\n    const { name } = e.target;\r\n    setTypeButton(name)\r\n    if (name === \"read\" || name === \"creat\") {\r\n      setReadOnly(false)\r\n    }\r\n  }\r\n\r\n  //send the update on customer\r\n  const handleSubmit = (e: any) => {\r\n    const { name } = e.target;\r\n    setTypeButton(name)\r\n    const requestMethod = typeButton;\r\n    e.preventDefault()\r\n    console.log(\"listIdUser : \", userCredentials)\r\n    if(userCredentials){\r\n      dispatch(createCustomer(customer, userCredentials))\r\n    }\r\n   \r\n    //TODO: fill the entire function\r\n  }\r\n\r\n  //update sate customer in form\r\n  const updateCustomer = (key: string, value: any) => {\r\n    setCustomer({\r\n      ...customer,\r\n      [key]: value\r\n    });\r\n  }\r\n\r\n\r\n  return (\r\n    <form onSubmit={(e) => handleSubmit(e)}>\r\n      <div className=\"sub-header\">\r\n        <Title\r\n          title={t(\"customers\")} />\r\n        <div className=\"divider\"></div>\r\n        <PrimaryButton className='button' onClick={activeButton} checked={false} text={t('createCustomer')} iconProps={Icons.addFriend} name=\"create\" />\r\n        <DefaultButton className='button edit-button' onClick={activeButton} checked={false} text={t('editing')} iconProps={Icons.editContact} disabled={update} name=\"update\" />\r\n        <DefaultButton className='button delete-button' checked={false} iconProps={Icons.userRemove} text={t('deletion')} id={'Deletion'} name=\"delete\" />\r\n        <DefaultButton className='button save-upload' type=\"submit\" checked={false} text={t('save')} iconProps={Icons.cloudUpload} />\r\n        <IconButton\r\n          iconProps={Icons.pdf}\r\n          styles={{\r\n            icon: { color: 'red', fontSize: 36 }\r\n          }}\r\n          className=\"button\"\r\n        />\r\n        <IconButton\r\n          iconProps={Icons.print}\r\n          styles={{\r\n            icon: { color: 'black', fontSize: 36 }\r\n          }}\r\n          className=\"button\"\r\n        />\r\n        <IconButton\r\n          iconProps={Icons.print}\r\n          styles={{\r\n            icon: { color: 'black', fontSize: 36 }\r\n          }}\r\n          className=\"button\"\r\n        />\r\n      </div>\r\n      <hr className=\"hr\"></hr>\r\n      <div className=\"content-wrapper customerDetail-wrapper\">\r\n        <Subtitle title={t(\"customerDetails\")} />\r\n        <p className=\"title-text\">{msgIsCreated}</p>\r\n        <p className=\"title-text\">{t('personalDetails')}</p>\r\n        <CustomToggle onText={t('customerLock')} onChange={updateCustomer} id={'isLocked'} defaultChecked={customer.isLocked} offText={t('customerLock')} />\r\n        <hr className=\"hr\"></hr>\r\n        <hr className=\"hr text-width\"></hr>\r\n        <div>\r\n          <CustomDropdown otherInputId={''} hasOtherValue={false} options={optionsForm.customersType} label={t('customerType')} onChange={updateCustomer} selectedKey={customer.entitySubTypeId} id={'entitySubTypeId'} othertextInput={t('')} />\r\n        </div>\r\n        <div></div>\r\n        <div>\r\n          <CustomTextFieldAddInput value={customer.firstName} readOnly={readOnly} required={true} label={t('firstName')} onChange={updateCustomer} id={'firstName'} iconProps={Icons.add} otherInputId={'MiddleName'} othertextItnput={t(\"middleName\")} />\r\n          <CustomTextField value={customer.lastName} required={true} label={t('lastName')} onChange={updateCustomer} id={'lastName'} />\r\n          <CustomTextField value={customer.dateBirth} type=\"date\" required={true} label={t('dateOfBirth')} onChange={updateCustomer} id={'dateBirth'} iconProps={Icons.calendar} />\r\n          <CustomDropdown otherInputId={'OtherGender'} hasOtherValue={true} options={optionsForm.genders} label={t('gander')} onChange={updateCustomer} selectedKey={customer.gender} id={'gender'} othertextInput={t('other')} />\r\n          <p className=\"title-text\">{t('contactInformation')}</p>\r\n        </div>\r\n        <div>\r\n          <CustomTextField value={customer.idNumber} required={true} label={t('identityNumber')} onChange={updateCustomer} id={'idNumber'} />\r\n          <CustomDropdown otherInputId={''} hasOtherValue={false} options={[]} label={t('countryIdentityNumber')} onChange={updateCustomer} selectedKey={customer.iDCountryCode} id={'iDCountryCode'} othertextInput={t('')} />\r\n          <CustomDropdown otherInputId={'idTypeOther'} hasOtherValue={true} options={optionsForm.typeIdentityNumbers} label={t('typeIdentityNumber')} onChange={updateCustomer} selectedKey={customer.idTypeId} id={'idTypeId'} othertextInput={t('typeIdentityNumberOther')} />\r\n        </div>\r\n        <hr className=\"hr\"></hr>\r\n        <hr className=\"hr text-width\"></hr>\r\n\r\n        <div>\r\n          <p className=\"title-text\">{t('address')}</p>\r\n          <hr className=\"hr text-width\"></hr>\r\n          <CustomTextField value={customer.address} readOnly={readOnly} required={true} label={t('address')} onChange={updateCustomer} id={'address'} />\r\n          <CustomTextField value={customer.addressNumber} readOnly={readOnly} label={t('houseNumber')} onChange={updateCustomer} id={'addressNumber'} />\r\n          <CustomDropdown readOnly={readOnly} otherInputId={''} hasOtherValue={false} options={[]} label={t('city')} onChange={updateCustomer} selectedKey={customer.addressCity} id={'addressCity'} othertextInput={t('')} />\r\n          <CustomDropdown readOnly={readOnly} otherInputId={''} hasOtherValue={false} options={[]} label={t('country')} onChange={updateCustomer} selectedKey={customer.addressCountryCode} id={'addressCountryCode'} othertextInput={t('')} />\r\n\r\n          <p className=\"title-text\">{t('moreDetails')}</p>\r\n        </div>\r\n        <div>\r\n          <p className=\"title-text\">{t('phone')}</p>\r\n          <hr className=\"hr text-width\"></hr>\r\n          <CustomTextField readOnly={readOnly} value={customer.telephone} required={true} label={t('phone')} onChange={updateCustomer} id={'telephone'} />\r\n          <CustomDropdown readOnly={readOnly} otherInputId={''} hasOtherValue={false} options={[]} label={t('countryPhone')} onChange={updateCustomer} selectedKey={customer.telephoneCountryCode} id={'telephoneCountryCode'} othertextInput={t('')} />\r\n          <p className=\"title-text\">{t('email')}</p>\r\n          <hr className=\"hr text-width\"></hr>\r\n          <CustomTextField value={customer.email} readOnly={readOnly} required={true} label={t('emailAddress')} onChange={updateCustomer} id={'email'} type='email' />\r\n\r\n        </div>\r\n\r\n        <hr className=\"hr\"></hr>\r\n        <hr className=\"hr text-width\"></hr>\r\n        <div>\r\n          <CustomDropdown otherInputId={''} readOnly={readOnly} hasOtherValue={false} options={optionsForm.customersStatus} label={t('customerStatus')} onChange={updateCustomer} selectedKey={customer.entityStatusId} id={'entityStatusId'} othertextInput={t('')} />\r\n          <CustomTextField value={customer.entityNumber} readOnly={readOnly} label={t('customerNumber')} onChange={updateCustomer} id={'entityNumber'} />\r\n          <CustomDropdown otherInputId={''} hasOtherValue={false} options={[]} label={t('nameIDEmployee')} onChange={updateCustomer} selectedKey={customer.idIdentifier} id={'idIdentifier'} othertextInput={t('')} />\r\n        </div>\r\n\r\n        <div>\r\n          <CustomDropdown otherInputId={''} readOnly={readOnly} hasOtherValue={false} options={[]} label={t('areaOfPracticeOrIndustry')} onChange={updateCustomer} selectedKey={customer.industryId} id={'industryId'} othertextInput={t('')} />\r\n          <CustomDropdown otherInputId={''} readOnly={readOnly} hasOtherValue={false} options={[]} label={t('creditGroup')} onChange={updateCustomer} selectedKey={customer.CreditGroup} id={'CreditGroup'} othertextInput={t('')} />\r\n          <CustomDropdown otherInputId={''} readOnly={readOnly} hasOtherValue={false} options={[]} label={t('agent')} onChange={updateCustomer} selectedKey={customer.idAffiliate} id={'idAffiliate'} othertextInput={t('')} />\r\n\r\n        </div>\r\n        <p className=\"title-text\">{t('note')}</p>\r\n        <div>\r\n          <p></p>\r\n          <CustomToggle onText={t('viewNoteWhenPerformingAction')} onChange={updateCustomer} id={'ViewNoteWhenPerformingAnAction'} defaultChecked={true} offText={t('viewNoteWhenPerformingAction')} />\r\n        </div>\r\n        <hr className=\"hr\"></hr>\r\n        <hr className=\"hr text-width\"></hr>\r\n      </div>\r\n      <TextFeildNote label={t('')} onChange={updateCustomer} id={'note'} />\r\n    </form>\r\n  );\r\n}\r\n\r\n\r\nexport default CustomerDetails;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//send to detail customer to save\r\n\r\n\r\n\r\n","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\customerSearch\\CustomerSearch.tsx",["350","351","352","353","354","355","356","357","358","359","360","361","362","363","364"],"import { DefaultButton, Link, PrimaryButton } from \"@fluentui/react\";\r\nimport axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport \"./customerSearch.scss\"\r\nimport { IssuePagination, OnPageChangeCallback } from \"../../shared/components/Pagination/Pagination\";\r\nimport SearchBoxSmall from \"../../shared/components/TextSearch\";\r\nimport Subtitle from \"../../shared/components/Subtitle\";\r\nimport CustemTable from \"../../shared/components/tabels/TableList\";\r\nimport { basicUrl } from \"../../shared/config\";\r\n\r\n\r\nexport interface Iitem {\r\n  key: Number;\r\n  name: string;\r\n  phone: string;\r\n  address: string\r\n}\r\nexport interface IitemList {\r\n  item: Iitem[]\r\n}\r\n\r\nconst CustomerSearch = () => {\r\n\r\n  const [data, setData] = useState([]);\r\n  const [allResult, setAllResult] = useState(0)\r\n  const [curentPage, setCurentPage] = useState(1);\r\n  const [pageCount, setPageCount] = useState(0);\r\n  const [customerSearch, setCutomerSearch] = useState(\"אברהם\");\r\n  const [isLoading, setIsLoading] = useState<boolean>(false)\r\n  const [searchDetail, setSearchDetail] = useState('')\r\n  const [t, i18n] = useTranslation();\r\n  const [item, setItem] = useState<any>()\r\n\r\n\r\n//   const renderItemColumn = (item: any, index: any, column: any) => {\r\n\r\n//     let fieldContent = item[column.fieldName];\r\n//     switch (column.fieldName) {\r\n//         case \"link\":\r\n//           console.log(\"index in column\",index)\r\n//             return <DefaultButton> <Link to={{\r\n//                 pathname: '/customer-details',\r\n//                 state: [{id: 1, name: 'Ford', color: 'red'}]\r\n//               }}> {t('details')} </Link> </DefaultButton>\r\n//         default:\r\n//             return <span >{fieldContent}</span>;\r\n//     }\r\n// }\r\n  // useEffect(() => {\r\n  //   getData();\r\n  // }, [])\r\n\r\n  let result: number;\r\n\r\n  const columns = [\r\n    { key: '1', name: t('name'), fieldName: \"name\", entity_name: \"name\", minWidth: 100, maxWidth: 200 },\r\n    { key: '2', name: t('address'), fieldName: \"address\", minWidth: 100, maxWidth: 200 },\r\n    { key: '3', name: t('phone'), fieldName: \"phone\", minWidth: 100, maxWidth: 200 },\r\n    { key: '4', name: '', fieldName: \"link\", minWidth: 100, maxWidth: 200 },\r\n\r\n  ];\r\n\r\n  let objectItem:any[]=[];\r\n\r\n  const paginationData = {\r\n    lines: 5,\r\n    numVisiblePages: 5,\r\n  }\r\n  const getDataPage = () => {\r\n    //API call\r\n    //   const body = JSON.stringify(pageCount,login);\r\n    // const res = await axios.get(baseUrl+'/table',body)\r\n    // const data = res.data;         \r\n    //           setData(data)\r\n  }\r\n\r\n  //load and get data from search\r\n  const getData = async () => {\r\n\r\n      const search = {\r\n        \"id_initiator\": 1,\r\n\r\n        \"id_client\": 3,\r\n\r\n        \"search_fields\": [\r\n\r\n          \"name\",\r\n\r\n          \"address\",\r\n\r\n          \"thelephone\"\r\n\r\n        ],\r\n\r\n        \"search_type\": \"like\",\r\n\r\n        \"search_entity_type_id\": [\r\n\r\n          \"customer\",\r\n\r\n          \"user\"\r\n\r\n        ],\r\n\r\n        \"order_by\": \"DESC\",\r\n\r\n        \"page_size\": 10,\r\n\r\n        \"page_index\": curentPage,\r\n\r\n        \"search_value\": customerSearch\r\n      }\r\n      console.log(\"object search\",search);\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      };\r\n      const res = await axios.post(basicUrl + \"/search\", search, config)\r\n      const objactData = res.data.search_results;\r\n      setPageCount(res.data.page_size);\r\n      setCurentPage(res.data.page_index)\r\n      setAllResult(res.data.records_count)\r\n      objactData.map((obj: any, index: number) => {\r\n        const phoneObject = obj.telephones\r\n        const resultPhone = phoneObject.find(({ is_default }: any) => is_default === true);\r\n        const phoneNumber = resultPhone.telephone_number.substring(0,11)\r\n        const idEntity = obj.id_entity\r\n        const addressObject = obj.addresses\r\n        const resultAddress = addressObject.find(({ is_default }: any) => is_default === true);\r\n        let address = resultAddress.address_name\r\n        let cityAddress = resultAddress.address_city\r\n        const addressFull = address + \" \" + cityAddress;\r\n        objectItem.push({ key: ++index, name: obj.entity_name, phone: phoneNumber, address: addressFull ,idEntity:idEntity})\r\n          // setItem([...item, { key: index, name: obj.entity_name, phone: phoneNumber, address: addressFull }])\r\n          // console.log(\"items \",item)  \r\n    });\r\n  \r\n      setItem(objectItem);\r\n    }\r\n   \r\n      // const emailObject = obj.emails\r\n      // const resultEmail= emailObject.find( ({ is_default  }:any) =>  is_default=== true );\r\n      // const mail=resultEmail.email_address\r\n\r\n\r\n      //   const addressObject = res.data.search_results[0].addresses\r\n      //   const resultAddress= addressObject.find( ({ is_default  }:any) =>  is_default=== true );\r\n      //  console.log(resultAddress)\r\n      //  let address=resultAddress.address_name\r\n      // let cityAdress = resultAddress.address_city\r\n      // address = address + \" \" + cityAdress;\r\n\r\n     \r\n\r\n    useEffect(() => {\r\n      getData();\r\n    }, [curentPage]);\r\n\r\n    const onPageChanged  :OnPageChangeCallback= selectedItem => {\r\n      const newPage = ++selectedItem.selected;\r\n      setCurentPage(newPage);\r\n    }\r\n    // const onLoadCustomerClicked =()=>{   \r\n    //   // setSearchDetail(customer)\r\n\r\n    // }\r\n    const onCustomerChanged = (key: string, value: any) => {\r\n      setCutomerSearch(value);\r\n    }\r\n    return (\r\n      <div>\r\n        <Subtitle title={t('customerSearch')} />\r\n        <div className=\"content-search\">\r\n          <SearchBoxSmall onChange={onCustomerChanged} label={t('search')} />\r\n          <PrimaryButton className=\"bottun\" onClick={getData} text={t(\"searchCustomer\")} />\r\n        </div>\r\n        {item?<CustemTable columns={columns} allItems={item}  renderItemColumn rederRow={\"link\"} isFooter={false} />:null}\r\n        <IssuePagination\r\n          onPageChange={onPageChanged}\r\n          pageCount={pageCount}\r\n          currentPage={curentPage}\r\n        />\r\n      </div>\r\n\r\n    );\r\n  }\r\n  export default CustomerSearch;\r\n\r\n\r\n\r\n  // [{\"id_initiator\":1,\"date_modified\":\"2021-06-16 15:51:51.8612688\",\"entity_sub_type_id\":\"1\",\"entity_sub_type_name\":\"יחיד\",\"entity_type_id\":\"customer\",\"entity_type_name\":\"לקוח\",\"is_deleted\":0,\"is_default\":1}]","C:\\Users\\USER\\Desktop\\client-management\\src\\components\\examplepop.tsx",["365","366"],"import * as React from 'react';\r\nimport { Dialog, DialogFooter } from '@fluentui/react/lib/Dialog';\r\nimport { DefaultButton, PrimaryButton } from '@fluentui/react/lib/Button';\r\nimport { ChoiceGroup } from '@fluentui/react/lib/ChoiceGroup';\r\nimport { useBoolean } from '@fluentui/react-hooks';\r\nimport { TextField } from '@fluentui/react';\r\n\r\nconst modelProps = {\r\n  isBlocking: true,\r\n  topOffsetFixed: true,\r\n};\r\n\r\nconst options = [\r\n  {\r\n    key: 'A',\r\n    iconProps: { iconName: 'CalendarDay' },\r\n    text: 'Day',\r\n  },\r\n  {\r\n    key: 'B',\r\n    iconProps: { iconName: 'CalendarWeek' },\r\n    text: 'Week',\r\n  },\r\n  {\r\n    key: 'C',\r\n    iconProps: { iconName: 'Calendar' },\r\n    text: 'Month',\r\n  },\r\n];\r\n\r\nexport const DialogTopOffsetFixedExample: React.FunctionComponent = () => {\r\n  const [hideDialog, { toggle: toggleHideDialog }] = useBoolean(true);\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <DefaultButton secondaryText=\"Opens the Sample Dialog\" onClick={toggleHideDialog} text=\"Open Dialog\" />\r\n      <Dialog hidden={hideDialog} onDismiss={toggleHideDialog} modalProps={modelProps}>\r\n       \r\n        <DialogFooter>\r\n            <TextField/>\r\n            <TextField/>\r\n            <TextField/>\r\n            <TextField/>\r\n          <PrimaryButton onClick={toggleHideDialog} text=\"Save\" />\r\n          <DefaultButton onClick={toggleHideDialog} text=\"Cancel\" />\r\n        </DialogFooter>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DialogTopOffsetFixedExample;","C:\\Users\\USER\\Desktop\\client-management\\src\\modelsType\\Icon.ts",["367"],"import { IIconProps } from '@fluentui/react';\r\nimport react from 'react';\r\n\r\n\r\nexport  class Icons{ \r\n  static readonly add: IIconProps = { iconName: 'Add' };\r\n  static readonly addFriend:IIconProps={ iconName: 'AddFriend' }\r\n  static readonly editContact: IIconProps = { iconName: 'EditContact' };\r\n  static readonly userRemove: IIconProps = { iconName: 'UserRemove' }\r\n  static readonly calendar : IIconProps = { iconName: 'Calendar' };\r\n  static readonly cloudUpload: IIconProps = { iconName: 'CloudUpload' }; \r\n  static readonly pdf: IIconProps = { iconName: 'PDF' };\r\n  static readonly print: IIconProps ={ iconName: 'Print' };\r\n  static readonly redEye = { iconName: 'RedEye' };\r\n}\r\n\r\n","C:\\Users\\USER\\Desktop\\client-management\\src\\store\\actions\\customerActioin.ts",["368","369","370","371","372","373"],"import axios from \"axios\";\r\nimport { Dispatch } from \"react\";\r\nimport { ICustomer, IUserCredentials } from \"../../components/customerDetails/CustomerDetails\";\r\nimport { basicUrl } from \"../../shared/config\";\r\nimport { checkHttpStatus } from \"../../utils\";\r\nimport { CREATE_CUSTOMER, LOGIN_FAIL, READ_CUSTOMER } from '../actions/types';\r\nimport { returnErrors } from \"./errorActions\";\r\n\r\nlet currUserCredentials: IUserCredentials|null=null\r\nexport const createCustomer = (customer: ICustomer, userCredentials:IUserCredentials) => async (dispatch: any,) => {\r\n   currUserCredentials = userCredentials\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n  console.log(\"intiator and client\", currUserCredentials)\r\n\r\n  let isCreate = false;\r\n  const createCustomer = {\r\n    id_initiator: currUserCredentials[\"idInitiator\"],\r\n\r\n    id_client: currUserCredentials[\"idClient\"],\r\n\r\n    id_branch: currUserCredentials[\"idBranch\"],\r\n\r\n    entity_request_method: \"create\",\r\n\r\n    ID_country_code: \"IL\",\r\n\r\n    ID_number: customer.identityNumber,\r\n\r\n    ID_type_id: customer.idTypeId,\r\n\r\n    status_id: customer.classId,\r\n\r\n    class_id: 1,\r\n\r\n    entity_type_id: \"customer\",\r\n\r\n    entity_sub_type_id: customer.entitySubTypeId,\r\n\r\n    first_name: customer.firstName,\r\n\r\n    last_name: customer.lastName,\r\n\r\n    entity_name: (customer.lastName + \" \" + customer.firstName),\r\n\r\n    first_name_en: \"Amit\",\r\n\r\n    last_name_en: \"Keresanty\",\r\n\r\n    entity_name_en: \"Amit Keresanty\",\r\n\r\n    date_birth: new Date(customer.dateBirth + \"Z\"),\r\n\r\n    gender_id: customer.gender,\r\n\r\n    id_identifier: 1,\r\n\r\n    is_identified: true,\r\n\r\n    is_loaded_documentation: false,\r\n\r\n    is_locked: customer.isLocked,\r\n\r\n    note: customer.note,\r\n\r\n    permission_group_id: 1,\r\n\r\n    return_entity: true,\r\n\r\n    user_language: \"HE\",\r\n\r\n    user_time_zone: \"Israel Standard Time\"\r\n\r\n  }\r\n  const body = JSON.stringify(createCustomer);\r\n  console.log(\"body has json\", body)\r\n\r\n  let res = await axios.post(basicUrl + '/uspEntity', body, config)\r\n    .then(checkHttpStatus)\r\n    .then((res) => {\r\n      try {\r\n        if (res.status == 200) {\r\n          console.log(\"THE DATA recive is cool\", res.data)\r\n          dispatch({\r\n            type: CREATE_CUSTOMER,\r\n            value: res.data\r\n          })\r\n          CreateAddress(customer);\r\n          CreatePhone(customer);\r\n          let isCreate = CreateEmail(customer)\r\n          return isCreate;\r\n        }\r\n\r\n        console.log(\"res sucsees\", res)\r\n      }\r\n      catch (e) {\r\n        console.log(\"errordata\", res, e)\r\n      }\r\n    })\r\n    .catch(err => {\r\n      console.log(\"dataerror\", err)\r\n      err.response ? returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL') : returnErrors('the server is down pls try later', 'LOGIN_FAIL')\r\n      dispatch({\r\n        type: LOGIN_FAIL\r\n      })\r\n      console.warn('error in login component', err)\r\n      alert(\"login failed\")\r\n    })\r\n  return true;\r\n}\r\n\r\nconst CreateAddress = async (customer: ICustomer) => {\r\n  const address = {\r\n    //@ts-ignore\r\n    id_initiator: currUserCredentials.idInitiator,\r\n//@ts-ignore\r\n    id_client: currUserCredentials.idClient,\r\n\r\n    id_entity: 3,\r\n\r\n    return_entity: true,\r\n\r\n    attribute_request_method: \"create\",\r\n\r\n    entity_request_method: \"create\",\r\n\r\n    attribute: \"address\",\r\n\r\n    address_type_id: 2,\r\n\r\n    address_name: customer.address,\r\n\r\n    address_number: customer.addressNumber,\r\n\r\n    address_city: customer.addressCity,\r\n\r\n    address_country_code: \"IL\",\r\n\r\n    address_zip_code: \"98765\",\r\n\r\n    is_deleted: 0,\r\n\r\n    is_default: 1\r\n\r\n  }\r\n\r\n  const body = JSON.stringify(address);\r\n  console.log(\"create address\", body)\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  let res = await axios.post(basicUrl + '/uspEntity', body, config)\r\n\r\n  console.log(\"address\" + res)\r\n\r\n}\r\n\r\nconst CreatePhone = async (customer: ICustomer) => {\r\n\r\n\r\n  const phone = {\r\n    \"id_initiator\": 1,\r\n\r\n    \"id_client\": 2,\r\n\r\n    \"id_entity\": 3,\r\n\r\n    \"return_entity\": true,\r\n\r\n    \"attribute_request_method\": \"create\",\r\n\r\n    \"attribute\": \"telephone\",\r\n\r\n    \"entity_type_id\": \"customer\",\r\n\r\n    \"telephone_number\": customer.telephone,\r\n\r\n    \"telephone_country_code\": \"IL\",\r\n\r\n    \"telephone_type_id\": \"972\",\r\n\r\n    \"is_deleted\": 0,\r\n\r\n    \"is_default\": 1\r\n  }\r\n  const body = JSON.stringify(phone);\r\n  console.log(\"create phone\", body)\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  let res = await axios.post(basicUrl + '/uspEntity', body, config)\r\n\r\n  console.log(\"phone\" + res)\r\n\r\n}\r\n\r\nconst CreateEmail = async (customer: ICustomer) => {\r\n  const email = {\r\n    \"id_initiator\": 1,\r\n\r\n    \"id_client\": 2,\r\n\r\n    \"id_entity\": 3,\r\n\r\n    \"return_entity\": true,\r\n\r\n    \"attribute_request_method\": \"create\",\r\n\r\n    \"attribute\": \"email\",\r\n\r\n    \"entity_type_id\": \"customer\",\r\n\r\n    \"email_type_id\": 1,\r\n\r\n    \"email_address\": customer.email,\r\n\r\n    \"is_deleted\": 0,\r\n\r\n    \"is_default\": 1\r\n\r\n  }\r\n  const body = JSON.stringify(email);\r\n  console.log(\"create email \", email)\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  let res = await axios.post(basicUrl + '/uspEntity', body, config)\r\n  try {\r\n    if (res.status === 200) {\r\n      if (res.data[\"err_code\"] === 0) {\r\n        return true\r\n\r\n      }\r\n    }\r\n  }\r\n  catch (err) {\r\n    console.log(res.status)\r\n    console.warn('error in login component', err)\r\n    alert(\"login failed\")\r\n    throw (\"the Customer dont created  \")\r\n  }\r\n  return false;\r\n}\r\n\r\n\r\nexport const readCustomerId = (idEntity:string,userCredentials:any) => async (dispatch: Function) => {\r\n  \r\n  //@ts-ignore\r\n  console.log(\"listIdEntity[0].value\",userCredentials)\r\n  const updateCustomer = {\r\n    \"entity_request_method\": \"read\",\r\n    \"id_initiator\":1,\r\n    \"id_client\": 3,\r\n    \"id_entity\": idEntity\r\n  }\r\n  const body = JSON.stringify(updateCustomer);\r\n  console.log(\"create updateCustomer \", updateCustomer)\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  axios.post(basicUrl + '/uspEntity', body, config)\r\n    .then(res => {\r\n      try {\r\n        if (res.status === 200) {\r\n          if (res.data[\"err_code\"] === 0) {\r\n            dispatch({\r\n              type: READ_CUSTOMER,\r\n              value: res.data\r\n            })\r\n\r\n          }\r\n        }\r\n      }\r\n      catch (err) {\r\n        console.log(res.status)\r\n        console.warn('error in login component', err)\r\n        throw (\"the Customer dont created  \")\r\n      }\r\n    })\r\n  .catch(err => {\r\n        dispatch(\r\n          err.response ? returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL') : returnErrors('the server is down pls try later', 'LOGIN_FAIL')\r\n        );\r\n      })\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","C:\\Users\\USER\\Desktop\\client-management\\src\\store\\actions\\dataActions.ts",["374"],"import axios from 'axios';\r\nimport { basicUrl } from '../../shared/config';\r\nimport {FETCH_PROTECTED_DATA_REQUEST,LOGIN_FAIL,RECEIVE_PROTECTED_DATA,SET_IS_FETCHING}from './types'\r\nimport { checkHttpStatus} from '../../utils';\r\nimport { tokenConfig } from './authActions';\r\nimport { returnErrors } from './errorActions';\r\nimport { IConfigHeaders } from '../../modelsType/type/interface';\r\n\r\nconst blankOptionsMap = {\r\n  customersCondition: null,\r\n  customersType:null,\r\n  genders:null,\r\n  typeIdentityNumbers:null,\r\n  customersStatus: null\r\n}\r\n\r\nconst objectData = [{\"enumType\":\"class\",\"category\":\"customer\",\"name\":\"customersCondition\"},\r\n{\"enumType\": \"entity_sub_type\" ,\"category\":\"customer\",\"name\" :\"customersType\"},\r\n{\"enumType\":\"gender\" ,\"category\":\"customer\",\"name\":\"genders\"},\r\n{\"enumType\": \"type\" ,\"category\":\"customer\",\"name\" :\"typeIdentityNumbers\"},\r\n{\"enumType\": \"status\" ,\"category\":\"customer\",\"name\" :\"customersStatus\"},\r\n]\r\n\r\nexport function receiveProtectedData(data:any) {\r\n    return {\r\n        type: RECEIVE_PROTECTED_DATA,\r\n        payload: {\r\n            data: data\r\n        }\r\n    }\r\n}\r\n\r\nexport function fetchProtectedDataRequest() {\r\n  return {\r\n    type: FETCH_PROTECTED_DATA_REQUEST\r\n  }\r\n}\r\n\r\nconst config: IConfigHeaders = {\r\n  headers: {\r\n    'Content-type': 'application/json'\r\n  }\r\n};\r\n\r\nexport const loadOptions = () => async (dispatch: Function, getState:Function ) => {\r\n  const optionsPrm = objectData.map( async currObj =>{\r\n  const entity =\r\n    {\r\n      \"id_client \": 45654784,\r\n  \r\n      \"enum_type\": currObj.enumType,\r\n  \r\n      \"id_initiator\": 478541,\r\n  \r\n      \"enum_request_method\": \"read\",\r\n  \r\n      \"category\": currObj.category,\r\n  \r\n      \"user_language\": \"HE\"\r\n    } \r\n    const res =await axios.post(basicUrl + \"/uspEnum\", entity, config)\r\n        .then(checkHttpStatus)\r\n        //if failed:\r\n        .catch(err => {\r\n          console.log(\"dataerror\",err)\r\n          err.response ? returnErrors(err.response.data, err.response.status, 'GET_ERRORS') : returnErrors('the server is down pls try later', 'LOGIN_FAIL')\r\n          dispatch({\r\n            type: LOGIN_FAIL\r\n          })\r\n          dispatch({ type:SET_IS_FETCHING , isFetching:true});\r\n          // return \"\";\r\n        })\r\n        return res.data;\r\n        \r\n    });\r\n     console.log(optionsPrm)\r\n      const options = await Promise.all(optionsPrm)\r\n      const optionsMap = {...blankOptionsMap}\r\n      objectData.forEach(({name}, idx)=> {\r\n        //@ts-ignore\r\n        optionsMap[name] = options[idx]\r\n      })\r\n   \r\n      dispatch({type: 'SET_GENERAL_FORM_OPTIONS_MAP', optionsMap})\r\n      \r\n    }\r\n    \r\n    \r\n    ","C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\Subtitle.tsx",[],"C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\Title.tsx",["375"],"\r\nimport '../../scssPages/sub-header.scss';\r\n \r\ninterface Title{\r\n    title:string\r\n}\r\n\r\nconst Title=(prop:Title)=>{\r\n    return(\r\n      \r\n        <h1  className=\"title\">{prop.title}</h1>\r\n       \r\n        // className=\"subBar\"\r\n    );\r\n} \r\n\r\nexport default Title;","C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\Note.tsx",["376","377","378"],"import * as React from 'react';\r\nimport { Stack, IStackTokens, IStackStyles, TextField } from '@fluentui/react';\r\nimport ComponenetProps from '../../modelsType/type/interface';\r\nimport \"../../scssPages/form.scss\"\r\n\r\ninterface MyProps extends ComponenetProps {\r\n    \r\n  label: string\r\n}\r\n\r\n\r\nexport const TextFeildNote: React.FunctionComponent<MyProps> = (props) => {\r\n  const { onChange, label, id } = props;\r\n  return (\r\n    \r\n      <TextField\r\n          label={label} multiline rows={3} \r\n          className=\"note\"\r\n          onChange ={(e: any) => {\r\n               onChange(id, e.currentTarget.value)\r\n          }}\r\n    \r\n      // onChange={(e: any) => setLogin_entity_number(e.target.value)}\r\n      />\r\n    \r\n  );\r\n\r\n}\r\n\r\n\r\n\r\n \r\n\r\n\r\n","C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\TextSearch.tsx",["379","380"],"import { IIconProps, ISearchBoxStyles, SearchBox } from '@fluentui/react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n\r\ninterface MyProps  {\r\n    onChange ?: any\r\n    label?: string,\r\n    required?:boolean,\r\n    iconProps ?: IIconProps,\r\n    type?:string,\r\n    nameOfClassStyle?:string\r\n    // ?:IIconProps\r\n}\r\n\r\nconst searchBoxStyles: Partial<ISearchBoxStyles> = { root: { width: 280 } };\r\n\r\nconst  SearchBoxSmall= (props:MyProps) =>{\r\n    const [t, i18n] = useTranslation();\r\n    const { onChange, label} = props;    \r\n    return(\r\n\r\n       /* eslint-disable react/jsx-no-bind */\r\n      <SearchBox\r\n        styles={searchBoxStyles}\r\n        placeholder={label}\r\n        // onEscape={ev => {\r\n        //   console.log('Custom onEscape Called');\r\n        // }}\r\n        // onClear={ev:any => {\r\n        //   console.log('Custom onClear Called');\r\n        // }}\r\n        onChange={onChange}\r\n        // onSearch={newValue => console.log('SearchBox onSearch fired: ' + newValue)}\r\n      />\r\n    );\r\n\r\n    // return(\r\n    // <>\r\n    //     <h1>tojrhj</h1>\r\n    //     <CustomTextField required={true} label={t('lastName')} onChange={onChange} id={'LastName'} />\r\n    // </>\r\n    \r\n}\r\nexport default SearchBoxSmall","C:\\Users\\USER\\Desktop\\client-management\\src\\shared\\components\\Pagination\\Pagination.tsx",[],"C:\\Users\\USER\\Desktop\\client-management\\src\\utils\\index.ts",[],{"ruleId":"381","severity":1,"message":"382","line":7,"column":8,"nodeType":"383","messageId":"384","endLine":7,"endColumn":19},{"ruleId":"385","replacedBy":"386"},{"ruleId":"387","replacedBy":"388"},{"ruleId":"381","severity":1,"message":"389","line":5,"column":17,"nodeType":"383","messageId":"384","endLine":5,"endColumn":26},{"ruleId":"381","severity":1,"message":"390","line":6,"column":10,"nodeType":"383","messageId":"384","endLine":6,"endColumn":17},{"ruleId":"381","severity":1,"message":"391","line":6,"column":29,"nodeType":"383","messageId":"384","endLine":6,"endColumn":40},{"ruleId":"381","severity":1,"message":"392","line":10,"column":10,"nodeType":"383","messageId":"384","endLine":10,"endColumn":18},{"ruleId":"381","severity":1,"message":"393","line":11,"column":8,"nodeType":"383","messageId":"384","endLine":11,"endColumn":12},{"ruleId":"381","severity":1,"message":"394","line":12,"column":10,"nodeType":"383","messageId":"384","endLine":12,"endColumn":21},{"ruleId":"381","severity":1,"message":"395","line":14,"column":8,"nodeType":"383","messageId":"384","endLine":14,"endColumn":14},{"ruleId":"381","severity":1,"message":"396","line":15,"column":10,"nodeType":"383","messageId":"384","endLine":15,"endColumn":21},{"ruleId":"381","severity":1,"message":"397","line":23,"column":9,"nodeType":"383","messageId":"384","endLine":23,"endColumn":22},{"ruleId":"381","severity":1,"message":"389","line":1,"column":17,"nodeType":"383","messageId":"384","endLine":1,"endColumn":26},{"ruleId":"381","severity":1,"message":"398","line":5,"column":8,"nodeType":"383","messageId":"384","endLine":5,"endColumn":13},{"ruleId":"381","severity":1,"message":"399","line":18,"column":19,"nodeType":"383","messageId":"384","endLine":18,"endColumn":27},{"ruleId":"381","severity":1,"message":"400","line":75,"column":9,"nodeType":"383","messageId":"384","endLine":75,"endColumn":13},{"ruleId":"401","severity":1,"message":"402","line":84,"column":20,"nodeType":"403","messageId":"404","endLine":84,"endColumn":22},{"ruleId":"381","severity":1,"message":"405","line":5,"column":10,"nodeType":"383","messageId":"384","endLine":5,"endColumn":15},{"ruleId":"381","severity":1,"message":"406","line":32,"column":15,"nodeType":"383","messageId":"384","endLine":32,"endColumn":19},{"ruleId":"381","severity":1,"message":"407","line":33,"column":12,"nodeType":"383","messageId":"384","endLine":33,"endColumn":15},{"ruleId":"381","severity":1,"message":"408","line":33,"column":17,"nodeType":"383","messageId":"384","endLine":33,"endColumn":23},{"ruleId":"381","severity":1,"message":"409","line":34,"column":12,"nodeType":"383","messageId":"384","endLine":34,"endColumn":17},{"ruleId":"381","severity":1,"message":"410","line":34,"column":19,"nodeType":"383","messageId":"384","endLine":34,"endColumn":27},{"ruleId":"381","severity":1,"message":"411","line":35,"column":12,"nodeType":"383","messageId":"384","endLine":35,"endColumn":24},{"ruleId":"381","severity":1,"message":"412","line":10,"column":10,"nodeType":"383","messageId":"384","endLine":10,"endColumn":11},{"ruleId":"381","severity":1,"message":"406","line":10,"column":13,"nodeType":"383","messageId":"384","endLine":10,"endColumn":17},{"ruleId":"413","severity":1,"message":"414","line":9,"column":1,"nodeType":"415","endLine":26,"endColumn":2},{"ruleId":"413","severity":1,"message":"414","line":17,"column":2,"nodeType":"415","endLine":54,"endColumn":2},{"ruleId":"381","severity":1,"message":"416","line":1,"column":9,"nodeType":"383","messageId":"384","endLine":1,"endColumn":37},{"ruleId":"381","severity":1,"message":"417","line":1,"column":38,"nodeType":"383","messageId":"384","endLine":1,"endColumn":60},{"ruleId":"381","severity":1,"message":"418","line":1,"column":61,"nodeType":"383","messageId":"384","endLine":1,"endColumn":76},{"ruleId":"413","severity":1,"message":"414","line":21,"column":1,"nodeType":"415","endLine":57,"endColumn":2},{"ruleId":"413","severity":1,"message":"414","line":8,"column":1,"nodeType":"415","endLine":30,"endColumn":2},{"ruleId":"381","severity":1,"message":"406","line":9,"column":13,"nodeType":"383","messageId":"384","endLine":9,"endColumn":17},{"ruleId":"381","severity":1,"message":"419","line":5,"column":9,"nodeType":"383","messageId":"384","endLine":5,"endColumn":21},{"ruleId":"381","severity":1,"message":"406","line":30,"column":13,"nodeType":"383","messageId":"384","endLine":30,"endColumn":17},{"ruleId":"381","severity":1,"message":"420","line":31,"column":10,"nodeType":"383","messageId":"384","endLine":31,"endColumn":21},{"ruleId":"381","severity":1,"message":"421","line":31,"column":22,"nodeType":"383","messageId":"384","endLine":31,"endColumn":36},{"ruleId":"381","severity":1,"message":"422","line":33,"column":9,"nodeType":"383","messageId":"384","endLine":33,"endColumn":17},{"ruleId":"381","severity":1,"message":"405","line":2,"column":11,"nodeType":"383","messageId":"384","endLine":2,"endColumn":16},{"ruleId":"381","severity":1,"message":"423","line":2,"column":18,"nodeType":"383","messageId":"384","endLine":2,"endColumn":24},{"ruleId":"381","severity":1,"message":"424","line":5,"column":8,"nodeType":"383","messageId":"384","endLine":5,"endColumn":23},{"ruleId":"381","severity":1,"message":"425","line":6,"column":8,"nodeType":"383","messageId":"384","endLine":6,"endColumn":23},{"ruleId":"381","severity":1,"message":"426","line":7,"column":8,"nodeType":"383","messageId":"384","endLine":7,"endColumn":15},{"ruleId":"381","severity":1,"message":"427","line":8,"column":8,"nodeType":"383","messageId":"384","endLine":8,"endColumn":23},{"ruleId":"381","severity":1,"message":"428","line":9,"column":8,"nodeType":"383","messageId":"384","endLine":9,"endColumn":14},{"ruleId":"381","severity":1,"message":"429","line":10,"column":8,"nodeType":"383","messageId":"384","endLine":10,"endColumn":16},{"ruleId":"381","severity":1,"message":"430","line":11,"column":8,"nodeType":"383","messageId":"384","endLine":11,"endColumn":17},{"ruleId":"381","severity":1,"message":"431","line":12,"column":8,"nodeType":"383","messageId":"384","endLine":12,"endColumn":20},{"ruleId":"381","severity":1,"message":"432","line":13,"column":8,"nodeType":"383","messageId":"384","endLine":13,"endColumn":13},{"ruleId":"381","severity":1,"message":"433","line":14,"column":8,"nodeType":"383","messageId":"384","endLine":14,"endColumn":17},{"ruleId":"381","severity":1,"message":"434","line":15,"column":8,"nodeType":"383","messageId":"384","endLine":15,"endColumn":23},{"ruleId":"381","severity":1,"message":"435","line":16,"column":8,"nodeType":"383","messageId":"384","endLine":16,"endColumn":30},{"ruleId":"381","severity":1,"message":"436","line":17,"column":8,"nodeType":"383","messageId":"384","endLine":17,"endColumn":18},{"ruleId":"381","severity":1,"message":"437","line":18,"column":8,"nodeType":"383","messageId":"384","endLine":18,"endColumn":16},{"ruleId":"381","severity":1,"message":"438","line":1,"column":13,"nodeType":"383","messageId":"384","endLine":1,"endColumn":18},{"ruleId":"381","severity":1,"message":"438","line":1,"column":8,"nodeType":"383","messageId":"384","endLine":1,"endColumn":13},{"ruleId":"381","severity":1,"message":"439","line":3,"column":10,"nodeType":"383","messageId":"384","endLine":3,"endColumn":30},{"ruleId":"381","severity":1,"message":"440","line":5,"column":8,"nodeType":"383","messageId":"384","endLine":5,"endColumn":17},{"ruleId":"381","severity":1,"message":"441","line":15,"column":9,"nodeType":"383","messageId":"384","endLine":15,"endColumn":20},{"ruleId":"381","severity":1,"message":"442","line":1,"column":72,"nodeType":"383","messageId":"384","endLine":1,"endColumn":83},{"ruleId":"381","severity":1,"message":"443","line":36,"column":11,"nodeType":"383","messageId":"384","endLine":36,"endColumn":19},{"ruleId":"381","severity":1,"message":"444","line":3,"column":10,"nodeType":"383","messageId":"384","endLine":3,"endColumn":19},{"ruleId":"381","severity":1,"message":"445","line":75,"column":7,"nodeType":"383","messageId":"384","endLine":75,"endColumn":19},{"ruleId":"381","severity":1,"message":"446","line":157,"column":11,"nodeType":"383","messageId":"384","endLine":157,"endColumn":20},{"ruleId":"381","severity":1,"message":"447","line":34,"column":11,"nodeType":"383","messageId":"384","endLine":34,"endColumn":25},{"ruleId":"381","severity":1,"message":"448","line":43,"column":77,"nodeType":"383","messageId":"384","endLine":43,"endColumn":83},{"ruleId":"381","severity":1,"message":"449","line":43,"column":91,"nodeType":"383","messageId":"384","endLine":43,"endColumn":100},{"ruleId":"381","severity":1,"message":"450","line":51,"column":10,"nodeType":"383","messageId":"384","endLine":51,"endColumn":15},{"ruleId":"381","severity":1,"message":"451","line":51,"column":17,"nodeType":"383","messageId":"384","endLine":51,"endColumn":25},{"ruleId":"381","severity":1,"message":"406","line":62,"column":13,"nodeType":"383","messageId":"384","endLine":62,"endColumn":17},{"ruleId":"381","severity":1,"message":"452","line":63,"column":10,"nodeType":"383","messageId":"384","endLine":63,"endColumn":20},{"ruleId":"381","severity":1,"message":"453","line":63,"column":32,"nodeType":"383","messageId":"384","endLine":63,"endColumn":48},{"ruleId":"381","severity":1,"message":"443","line":77,"column":9,"nodeType":"383","messageId":"384","endLine":77,"endColumn":17},{"ruleId":"454","severity":1,"message":"455","line":92,"column":11,"nodeType":"456","messageId":"457","endLine":95,"endColumn":46},{"ruleId":"458","severity":1,"message":"459","line":92,"column":11,"nodeType":"456","messageId":"460","endLine":97,"endColumn":35},{"ruleId":"454","severity":1,"message":"455","line":96,"column":15,"nodeType":"456","messageId":"457","endLine":97,"endColumn":35},{"ruleId":"381","severity":1,"message":"444","line":2,"column":47,"nodeType":"383","messageId":"384","endLine":2,"endColumn":56},{"ruleId":"381","severity":1,"message":"438","line":3,"column":8,"nodeType":"383","messageId":"384","endLine":3,"endColumn":13},{"ruleId":"381","severity":1,"message":"406","line":62,"column":15,"nodeType":"383","messageId":"384","endLine":62,"endColumn":19},{"ruleId":"381","severity":1,"message":"406","line":109,"column":13,"nodeType":"383","messageId":"384","endLine":109,"endColumn":17},{"ruleId":"381","severity":1,"message":"406","line":145,"column":13,"nodeType":"383","messageId":"384","endLine":145,"endColumn":17},{"ruleId":"381","severity":1,"message":"412","line":25,"column":10,"nodeType":"383","messageId":"384","endLine":25,"endColumn":11},{"ruleId":"381","severity":1,"message":"406","line":25,"column":13,"nodeType":"383","messageId":"384","endLine":25,"endColumn":17},{"ruleId":"381","severity":1,"message":"461","line":27,"column":9,"nodeType":"383","messageId":"384","endLine":27,"endColumn":19},{"ruleId":"381","severity":1,"message":"462","line":29,"column":10,"nodeType":"383","messageId":"384","endLine":29,"endColumn":18},{"ruleId":"381","severity":1,"message":"463","line":30,"column":10,"nodeType":"383","messageId":"384","endLine":30,"endColumn":18},{"ruleId":"401","severity":1,"message":"402","line":42,"column":67,"nodeType":"403","messageId":"404","endLine":42,"endColumn":69},{"ruleId":"401","severity":1,"message":"402","line":51,"column":24,"nodeType":"403","messageId":"404","endLine":51,"endColumn":26},{"ruleId":"381","severity":1,"message":"464","line":21,"column":44,"nodeType":"383","messageId":"384","endLine":21,"endColumn":59},{"ruleId":"381","severity":1,"message":"406","line":17,"column":13,"nodeType":"383","messageId":"384","endLine":17,"endColumn":17},{"ruleId":"381","severity":1,"message":"441","line":20,"column":9,"nodeType":"383","messageId":"384","endLine":20,"endColumn":20},{"ruleId":"381","severity":1,"message":"465","line":11,"column":37,"nodeType":"383","messageId":"384","endLine":11,"endColumn":41},{"ruleId":"381","severity":1,"message":"466","line":17,"column":10,"nodeType":"383","messageId":"384","endLine":17,"endColumn":27},{"ruleId":"381","severity":1,"message":"406","line":111,"column":13,"nodeType":"383","messageId":"384","endLine":111,"endColumn":17},{"ruleId":"467","severity":1,"message":"468","line":137,"column":6,"nodeType":"469","endLine":137,"endColumn":8,"suggestions":"470"},{"ruleId":"467","severity":1,"message":"471","line":146,"column":6,"nodeType":"469","endLine":146,"endColumn":14,"suggestions":"472"},{"ruleId":"467","severity":1,"message":"473","line":157,"column":6,"nodeType":"469","endLine":157,"endColumn":8,"suggestions":"474"},{"ruleId":"475","severity":1,"message":"476","line":171,"column":138,"nodeType":"477","messageId":"478","endLine":171,"endColumn":140},{"ruleId":"467","severity":1,"message":"479","line":186,"column":6,"nodeType":"469","endLine":186,"endColumn":35,"suggestions":"480"},{"ruleId":"467","severity":1,"message":"481","line":231,"column":6,"nodeType":"469","endLine":231,"endColumn":20,"suggestions":"482"},{"ruleId":"381","severity":1,"message":"483","line":247,"column":11,"nodeType":"383","messageId":"384","endLine":247,"endColumn":24},{"ruleId":"381","severity":1,"message":"484","line":1,"column":10,"nodeType":"383","messageId":"384","endLine":1,"endColumn":23},{"ruleId":"381","severity":1,"message":"485","line":1,"column":25,"nodeType":"383","messageId":"384","endLine":1,"endColumn":29},{"ruleId":"381","severity":1,"message":"486","line":25,"column":10,"nodeType":"383","messageId":"384","endLine":25,"endColumn":14},{"ruleId":"381","severity":1,"message":"487","line":25,"column":16,"nodeType":"383","messageId":"384","endLine":25,"endColumn":23},{"ruleId":"381","severity":1,"message":"488","line":26,"column":10,"nodeType":"383","messageId":"384","endLine":26,"endColumn":19},{"ruleId":"381","severity":1,"message":"489","line":30,"column":10,"nodeType":"383","messageId":"384","endLine":30,"endColumn":19},{"ruleId":"381","severity":1,"message":"490","line":30,"column":21,"nodeType":"383","messageId":"384","endLine":30,"endColumn":33},{"ruleId":"381","severity":1,"message":"491","line":31,"column":10,"nodeType":"383","messageId":"384","endLine":31,"endColumn":22},{"ruleId":"381","severity":1,"message":"492","line":31,"column":24,"nodeType":"383","messageId":"384","endLine":31,"endColumn":39},{"ruleId":"381","severity":1,"message":"406","line":32,"column":13,"nodeType":"383","messageId":"384","endLine":32,"endColumn":17},{"ruleId":"381","severity":1,"message":"493","line":54,"column":7,"nodeType":"383","messageId":"384","endLine":54,"endColumn":21},{"ruleId":"381","severity":1,"message":"494","line":66,"column":9,"nodeType":"383","messageId":"384","endLine":66,"endColumn":23},{"ruleId":"381","severity":1,"message":"495","line":70,"column":9,"nodeType":"383","messageId":"384","endLine":70,"endColumn":20},{"ruleId":"475","severity":1,"message":"476","line":125,"column":48,"nodeType":"477","messageId":"478","endLine":125,"endColumn":50},{"ruleId":"467","severity":1,"message":"496","line":159,"column":8,"nodeType":"469","endLine":159,"endColumn":20,"suggestions":"497"},{"ruleId":"381","severity":1,"message":"498","line":4,"column":10,"nodeType":"383","messageId":"384","endLine":4,"endColumn":21},{"ruleId":"381","severity":1,"message":"499","line":13,"column":7,"nodeType":"383","messageId":"384","endLine":13,"endColumn":14},{"ruleId":"381","severity":1,"message":"438","line":2,"column":8,"nodeType":"383","messageId":"384","endLine":2,"endColumn":13},{"ruleId":"381","severity":1,"message":"500","line":2,"column":10,"nodeType":"383","messageId":"384","endLine":2,"endColumn":18},{"ruleId":"381","severity":1,"message":"501","line":20,"column":7,"nodeType":"383","messageId":"384","endLine":20,"endColumn":15},{"ruleId":"381","severity":1,"message":"502","line":82,"column":7,"nodeType":"383","messageId":"384","endLine":82,"endColumn":10},{"ruleId":"401","severity":1,"message":"402","line":86,"column":24,"nodeType":"403","messageId":"404","endLine":86,"endColumn":26},{"ruleId":"503","severity":1,"message":"504","line":253,"column":5,"nodeType":"505","messageId":"506","endLine":253,"endColumn":42},{"ruleId":"503","severity":1,"message":"504","line":293,"column":9,"nodeType":"505","messageId":"506","endLine":293,"endColumn":46},{"ruleId":"381","severity":1,"message":"507","line":5,"column":10,"nodeType":"383","messageId":"384","endLine":5,"endColumn":21},{"ruleId":"508","severity":1,"message":"509","line":8,"column":7,"nodeType":"383","messageId":"510","endLine":8,"endColumn":12},{"ruleId":"381","severity":1,"message":"511","line":2,"column":10,"nodeType":"383","messageId":"384","endLine":2,"endColumn":15},{"ruleId":"381","severity":1,"message":"512","line":2,"column":17,"nodeType":"383","messageId":"384","endLine":2,"endColumn":29},{"ruleId":"381","severity":1,"message":"513","line":2,"column":31,"nodeType":"383","messageId":"384","endLine":2,"endColumn":43},{"ruleId":"381","severity":1,"message":"412","line":18,"column":12,"nodeType":"383","messageId":"384","endLine":18,"endColumn":13},{"ruleId":"381","severity":1,"message":"406","line":18,"column":15,"nodeType":"383","messageId":"384","endLine":18,"endColumn":19},"@typescript-eslint/no-unused-vars","'rootReducer' is defined but never used.","Identifier","unusedVar","no-native-reassign",["514"],"no-negated-in-lhs",["515"],"'useEffect' is defined but never used.","'connect' is defined but never used.","'useSelector' is defined but never used.","'useState' is defined but never used.","'Home' is defined but never used.","'createStore' is defined but never used.","'Logout' is defined but never used.","'loadOptions' is defined but never used.","'handleOnclick' is assigned a value but never used.","'Login' is defined but never used.","'setIsLog' is assigned a value but never used.","'body' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Route' is defined but never used.","'i18n' is assigned a value but never used.","'msg' is assigned a value but never used.","'setMsg' is assigned a value but never used.","'modal' is assigned a value but never used.","'setModal' is assigned a value but never used.","'isClickLogin' is assigned a value but never used.","'t' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'FETCH_PROTECTED_DATA_REQUEST' is defined but never used.","'RECEIVE_PROTECTED_DATA' is defined but never used.","'SET_IS_FETCHING' is defined but never used.","'faUniversity' is defined but never used.","'selectedKey' is assigned a value but never used.","'setSelectedKey' is assigned a value but never used.","'location' is assigned a value but never used.","'Switch' is defined but never used.","'CustomerLocator' is defined but never used.","'CustomerDetails' is defined but never used.","'Contact' is defined but never used.","'Representatives' is defined but never used.","'Obligo' is defined but never used.","'Security' is defined but never used.","'PriceList' is defined but never used.","'BankAccounts' is defined but never used.","'Loans' is defined but never used.","'Documents' is defined but never used.","'MoneyLaundering' is defined but never used.","'ConcentrationOfActions' is defined but never used.","'LogChanges' is defined but never used.","'HomePage' is defined but never used.","'react' is defined but never used.","'IDetailsColumnStyles' is defined but never used.","'SubHeader' is defined but never used.","'headerStyle' is assigned a value but never used.","'sizeBoolean' is defined but never used.","'onChange' is assigned a value but never used.","'TextField' is defined but never used.","'PAGING_DELAY' is assigned a value but never used.","'isGrouped' is assigned a value but never used.","'PropsInterface' is defined but never used.","'search' is assigned a value but never used.","'addCustem' is assigned a value but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'hideDialog' is assigned a value but never used.","'toggleHideDialog' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-unreachable","Unreachable code.","unreachableCode","'onSetFocus' is assigned a value but never used.","'readOnly' is assigned a value but never used.","'selected' is assigned a value but never used.","'nameOfClasStyle' is assigned a value but never used.","'List' is defined but never used.","'isNullishCoalesce' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'user' and 'userCredentials'. Either include them or remove the dependency array.","ArrayExpression",["516"],"React Hook useEffect has missing dependencies: 'callReadCustomer' and 'userCredentials'. Either include them or remove the dependency array.",["517"],"React Hook useEffect has missing dependencies: 'callLoadOptions' and 'fieldsOptionsMapFromReducer?.data?.generalFormOptionsMa'. Either include them or remove the dependency array.",["518"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'buildObjecOptions' and 'options'. Either include them or remove the dependency array.",["519"],"React Hook useEffect has missing dependencies: 'customer' and 'typeButton'. Either include them or remove the dependency array. You can also do a functional update 'setCustomer(c => ...)' if you only need 'customer' in the 'setCustomer' call.",["520"],"'requestMethod' is assigned a value but never used.","'DefaultButton' is defined but never used.","'Link' is defined but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","'allResult' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","'searchDetail' is assigned a value but never used.","'setSearchDetail' is assigned a value but never used.","'result' is defined but never used.","'paginationData' is assigned a value but never used.","'getDataPage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["521"],"'ChoiceGroup' is defined but never used.","'options' is assigned a value but never used.","'Dispatch' is defined but never used.","'isCreate' is assigned a value but never used.","'res' is assigned a value but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'tokenConfig' is defined but never used.","@typescript-eslint/no-redeclare","'Title' is already defined.","redeclared","'Stack' is defined but never used.","'IStackTokens' is defined but never used.","'IStackStyles' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"522","fix":"523"},{"desc":"524","fix":"525"},{"desc":"526","fix":"527"},{"desc":"528","fix":"529"},{"desc":"530","fix":"531"},{"desc":"532","fix":"533"},"Update the dependencies array to be: [user, userCredentials]",{"range":"534","text":"535"},"Update the dependencies array to be: [callReadCustomer, params, userCredentials]",{"range":"536","text":"537"},"Update the dependencies array to be: [callLoadOptions, fieldsOptionsMapFromReducer?.data?.generalFormOptionsMa]",{"range":"538","text":"539"},"Update the dependencies array to be: [buildObjecOptions, fieldsOptionsMapFromReducer, options]",{"range":"540","text":"541"},"Update the dependencies array to be: [customer, dataCustomer, typeButton]",{"range":"542","text":"543"},"Update the dependencies array to be: [curentPage, getData]",{"range":"544","text":"545"},[4070,4072],"[user, userCredentials]",[4295,4303],"[callReadCustomer, params, userCredentials]",[4599,4601],"[callLoadOptions, fieldsOptionsMapFromReducer?.data?.generalFormOptionsMa]",[5596,5625],"[buildObjecOptions, fieldsOptionsMapFromReducer, options]",[7093,7107],"[customer, dataCustomer, typeButton]",[5100,5112],"[curentPage, getData]"]