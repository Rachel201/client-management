{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\client-management\\\\src\\\\components\\\\customerSearch\\\\CustomerSearch.tsx\",\n    _s = $RefreshSig$();\n\nimport { PrimaryButton } from \"@fluentui/react\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./customerSearch.scss\";\nimport { IssuePagination } from \"../../shared/components/Pagination/Pagination\";\nimport SearchBoxSmall from \"../../shared/components/TextSearch\";\nimport Subtitle from \"../../shared/components/Subtitle\";\nimport CustemTable from \"../../shared/components/tabels/TableList\";\nimport { basicUrl } from \"../../shared/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CustomerSearch = () => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [allResult, setAllResult] = useState(0);\n  const [curentPage, setCurentPage] = useState(1);\n  const [pageCount, setPageCount] = useState(0);\n  const [customerSearch, setCutomerSearch] = useState(\"אברהם\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchDetail, setSearchDetail] = useState('');\n  const [t, i18n] = useTranslation();\n  const [item, setItem] = useState(); //   const renderItemColumn = (item: any, index: any, column: any) => {\n  //     let fieldContent = item[column.fieldName];\n  //     switch (column.fieldName) {\n  //         case \"link\":\n  //           console.log(\"index in column\",index)\n  //             return <DefaultButton> <Link to={{\n  //                 pathname: '/customer-details',\n  //                 state: [{id: 1, name: 'Ford', color: 'red'}]\n  //               }}> {t('details')} </Link> </DefaultButton>\n  //         default:\n  //             return <span >{fieldContent}</span>;\n  //     }\n  // }\n  // useEffect(() => {\n  //   getData();\n  // }, [])\n\n  let result;\n  const columns = [{\n    key: '1',\n    name: t('name'),\n    fieldName: \"name\",\n    entity_name: \"name\",\n    minWidth: 100,\n    maxWidth: 200\n  }, {\n    key: '2',\n    name: t('address'),\n    fieldName: \"address\",\n    minWidth: 100,\n    maxWidth: 200\n  }, {\n    key: '3',\n    name: t('phone'),\n    fieldName: \"phone\",\n    minWidth: 100,\n    maxWidth: 200\n  }, {\n    key: '4',\n    name: '',\n    fieldName: \"link\",\n    minWidth: 100,\n    maxWidth: 200\n  }];\n  let objectItem = [];\n  const paginationData = {\n    lines: 5,\n    numVisiblePages: 5\n  };\n\n  const getDataPage = () => {//API call\n    //   const body = JSON.stringify(pageCount,login);\n    // const res = await axios.get(baseUrl+'/table',body)\n    // const data = res.data;         \n    //           setData(data)\n  }; //load and get data from search\n\n\n  const getData = async () => {\n    const search = {\n      \"id_initiator\": 1,\n      \"id_client\": 3,\n      \"search_fields\": [\"name\", \"address\", \"thelephone\"],\n      \"search_type\": \"like\",\n      \"search_entity_type_id\": [\"customer\", \"user\"],\n      \"order_by\": \"DESC\",\n      \"page_size\": 10,\n      \"page_index\": curentPage,\n      \"search_value\": customerSearch\n    };\n    console.log(\"object search\", search);\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post(basicUrl + \"/search\", search, config);\n    const objactData = res.data.search_results;\n    setPageCount(res.data.page_size);\n    setCurentPage(res.data.page_index);\n    setAllResult(res.data.records_count);\n    objactData.map((obj, index) => {\n      const phoneObject = obj.telephones;\n      const resultPhone = phoneObject.find(({\n        is_default\n      }) => is_default === true);\n      const phoneNumber = resultPhone.telephone_number.substring(0, 11);\n      const idEntity = obj.id_entity;\n      const addressObject = obj.addresses;\n      const resultAddress = addressObject.find(({\n        is_default\n      }) => is_default === true);\n      let address = resultAddress.address_name;\n      let cityAddress = resultAddress.address_city;\n      const addressFull = address + \" \" + cityAddress;\n      objectItem.push({\n        key: ++index,\n        name: obj.entity_name,\n        phone: phoneNumber,\n        address: addressFull,\n        idEntity: idEntity\n      }); // setItem([...item, { key: index, name: obj.entity_name, phone: phoneNumber, address: addressFull }])\n      // console.log(\"items \",item)  \n    });\n    setItem(objectItem);\n  }; // const emailObject = obj.emails\n  // const resultEmail= emailObject.find( ({ is_default  }:any) =>  is_default=== true );\n  // const mail=resultEmail.email_address\n  //   const addressObject = res.data.search_results[0].addresses\n  //   const resultAddress= addressObject.find( ({ is_default  }:any) =>  is_default=== true );\n  //  console.log(resultAddress)\n  //  let address=resultAddress.address_name\n  // let cityAdress = resultAddress.address_city\n  // address = address + \" \" + cityAdress;\n\n\n  useEffect(() => {\n    getData();\n  }, [curentPage]);\n\n  const onPageChanged = selectedItem => {\n    const newPage = ++selectedItem.selected;\n    setCurentPage(newPage);\n  }; // const onLoadCustomerClicked =()=>{   \n  //   // setSearchDetail(customer)\n  // }\n\n\n  const onCustomerChanged = (key, value) => {\n    setCutomerSearch(value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Subtitle, {\n      title: t('customerSearch')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-search\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBoxSmall, {\n        onChange: onCustomerChanged,\n        label: t('search')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(PrimaryButton, {\n        className: \"bottun\",\n        onClick: getData,\n        text: t(\"searchCustomer\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }, this), item ? /*#__PURE__*/_jsxDEV(CustemTable, {\n      columns: columns,\n      allItems: item,\n      renderItemColumn: true,\n      rederRow: \"link\",\n      isFooter: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 15\n    }, this) : null, /*#__PURE__*/_jsxDEV(IssuePagination, {\n      onPageChange: onPageChanged,\n      pageCount: pageCount,\n      currentPage: curentPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 7\n  }, this);\n};\n\n_s(CustomerSearch, \"IE2B+eIEul786owiEA8wChf5hy4=\", false, function () {\n  return [useTranslation];\n});\n\n_c = CustomerSearch;\nexport default CustomerSearch; // [{\"id_initiator\":1,\"date_modified\":\"2021-06-16 15:51:51.8612688\",\"entity_sub_type_id\":\"1\",\"entity_sub_type_name\":\"יחיד\",\"entity_type_id\":\"customer\",\"entity_type_name\":\"לקוח\",\"is_deleted\":0,\"is_default\":1}]\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomerSearch\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/client-management/src/components/customerSearch/CustomerSearch.tsx"],"names":["PrimaryButton","axios","useState","useEffect","useTranslation","IssuePagination","SearchBoxSmall","Subtitle","CustemTable","basicUrl","CustomerSearch","data","setData","allResult","setAllResult","curentPage","setCurentPage","pageCount","setPageCount","customerSearch","setCutomerSearch","isLoading","setIsLoading","searchDetail","setSearchDetail","t","i18n","item","setItem","result","columns","key","name","fieldName","entity_name","minWidth","maxWidth","objectItem","paginationData","lines","numVisiblePages","getDataPage","getData","search","console","log","config","headers","res","post","objactData","search_results","page_size","page_index","records_count","map","obj","index","phoneObject","telephones","resultPhone","find","is_default","phoneNumber","telephone_number","substring","idEntity","id_entity","addressObject","addresses","resultAddress","address","address_name","cityAddress","address_city","addressFull","push","phone","onPageChanged","selectedItem","newPage","selected","onCustomerChanged","value"],"mappings":"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","sourcesContent":["import { DefaultButton, Link, PrimaryButton } from \"@fluentui/react\";\r\nimport axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport \"./customerSearch.scss\"\r\nimport { IssuePagination, OnPageChangeCallback } from \"../../shared/components/Pagination/Pagination\";\r\nimport SearchBoxSmall from \"../../shared/components/TextSearch\";\r\nimport Subtitle from \"../../shared/components/Subtitle\";\r\nimport CustemTable from \"../../shared/components/tabels/TableList\";\r\nimport { basicUrl } from \"../../shared/config\";\r\n\r\n\r\nexport interface Iitem {\r\n  key: Number;\r\n  name: string;\r\n  phone: string;\r\n  address: string\r\n}\r\nexport interface IitemList {\r\n  item: Iitem[]\r\n}\r\n\r\nconst CustomerSearch = () => {\r\n\r\n  const [data, setData] = useState([]);\r\n  const [allResult, setAllResult] = useState(0)\r\n  const [curentPage, setCurentPage] = useState(1);\r\n  const [pageCount, setPageCount] = useState(0);\r\n  const [customerSearch, setCutomerSearch] = useState(\"אברהם\");\r\n  const [isLoading, setIsLoading] = useState<boolean>(false)\r\n  const [searchDetail, setSearchDetail] = useState('')\r\n  const [t, i18n] = useTranslation();\r\n  const [item, setItem] = useState<any>()\r\n\r\n\r\n//   const renderItemColumn = (item: any, index: any, column: any) => {\r\n\r\n//     let fieldContent = item[column.fieldName];\r\n//     switch (column.fieldName) {\r\n//         case \"link\":\r\n//           console.log(\"index in column\",index)\r\n//             return <DefaultButton> <Link to={{\r\n//                 pathname: '/customer-details',\r\n//                 state: [{id: 1, name: 'Ford', color: 'red'}]\r\n//               }}> {t('details')} </Link> </DefaultButton>\r\n//         default:\r\n//             return <span >{fieldContent}</span>;\r\n//     }\r\n// }\r\n  // useEffect(() => {\r\n  //   getData();\r\n  // }, [])\r\n\r\n  let result: number;\r\n\r\n  const columns = [\r\n    { key: '1', name: t('name'), fieldName: \"name\", entity_name: \"name\", minWidth: 100, maxWidth: 200 },\r\n    { key: '2', name: t('address'), fieldName: \"address\", minWidth: 100, maxWidth: 200 },\r\n    { key: '3', name: t('phone'), fieldName: \"phone\", minWidth: 100, maxWidth: 200 },\r\n    { key: '4', name: '', fieldName: \"link\", minWidth: 100, maxWidth: 200 },\r\n\r\n  ];\r\n\r\n  let objectItem:any[]=[];\r\n\r\n  const paginationData = {\r\n    lines: 5,\r\n    numVisiblePages: 5,\r\n  }\r\n  const getDataPage = () => {\r\n    //API call\r\n    //   const body = JSON.stringify(pageCount,login);\r\n    // const res = await axios.get(baseUrl+'/table',body)\r\n    // const data = res.data;         \r\n    //           setData(data)\r\n  }\r\n\r\n  //load and get data from search\r\n  const getData = async () => {\r\n\r\n      const search = {\r\n        \"id_initiator\": 1,\r\n\r\n        \"id_client\": 3,\r\n\r\n        \"search_fields\": [\r\n\r\n          \"name\",\r\n\r\n          \"address\",\r\n\r\n          \"thelephone\"\r\n\r\n        ],\r\n\r\n        \"search_type\": \"like\",\r\n\r\n        \"search_entity_type_id\": [\r\n\r\n          \"customer\",\r\n\r\n          \"user\"\r\n\r\n        ],\r\n\r\n        \"order_by\": \"DESC\",\r\n\r\n        \"page_size\": 10,\r\n\r\n        \"page_index\": curentPage,\r\n\r\n        \"search_value\": customerSearch\r\n      }\r\n      console.log(\"object search\",search);\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      };\r\n      const res = await axios.post(basicUrl + \"/search\", search, config)\r\n      const objactData = res.data.search_results;\r\n      setPageCount(res.data.page_size);\r\n      setCurentPage(res.data.page_index)\r\n      setAllResult(res.data.records_count)\r\n      objactData.map((obj: any, index: number) => {\r\n        const phoneObject = obj.telephones\r\n        const resultPhone = phoneObject.find(({ is_default }: any) => is_default === true);\r\n        const phoneNumber = resultPhone.telephone_number.substring(0,11)\r\n        const idEntity = obj.id_entity\r\n        const addressObject = obj.addresses\r\n        const resultAddress = addressObject.find(({ is_default }: any) => is_default === true);\r\n        let address = resultAddress.address_name\r\n        let cityAddress = resultAddress.address_city\r\n        const addressFull = address + \" \" + cityAddress;\r\n        objectItem.push({ key: ++index, name: obj.entity_name, phone: phoneNumber, address: addressFull ,idEntity:idEntity})\r\n          // setItem([...item, { key: index, name: obj.entity_name, phone: phoneNumber, address: addressFull }])\r\n          // console.log(\"items \",item)  \r\n    });\r\n  \r\n      setItem(objectItem);\r\n    }\r\n   \r\n      // const emailObject = obj.emails\r\n      // const resultEmail= emailObject.find( ({ is_default  }:any) =>  is_default=== true );\r\n      // const mail=resultEmail.email_address\r\n\r\n\r\n      //   const addressObject = res.data.search_results[0].addresses\r\n      //   const resultAddress= addressObject.find( ({ is_default  }:any) =>  is_default=== true );\r\n      //  console.log(resultAddress)\r\n      //  let address=resultAddress.address_name\r\n      // let cityAdress = resultAddress.address_city\r\n      // address = address + \" \" + cityAdress;\r\n\r\n     \r\n\r\n    useEffect(() => {\r\n      getData();\r\n    }, [curentPage]);\r\n\r\n    const onPageChanged  :OnPageChangeCallback= selectedItem => {\r\n      const newPage = ++selectedItem.selected;\r\n      setCurentPage(newPage);\r\n    }\r\n    // const onLoadCustomerClicked =()=>{   \r\n    //   // setSearchDetail(customer)\r\n\r\n    // }\r\n    const onCustomerChanged = (key: string, value: any) => {\r\n      setCutomerSearch(value);\r\n    }\r\n    return (\r\n      <div>\r\n        <Subtitle title={t('customerSearch')} />\r\n        <div className=\"content-search\">\r\n          <SearchBoxSmall onChange={onCustomerChanged} label={t('search')} />\r\n          <PrimaryButton className=\"bottun\" onClick={getData} text={t(\"searchCustomer\")} />\r\n        </div>\r\n        {item?<CustemTable columns={columns} allItems={item}  renderItemColumn rederRow={\"link\"} isFooter={false} />:null}\r\n        <IssuePagination\r\n          onPageChange={onPageChanged}\r\n          pageCount={pageCount}\r\n          currentPage={curentPage}\r\n        />\r\n      </div>\r\n\r\n    );\r\n  }\r\n  export default CustomerSearch;\r\n\r\n\r\n\r\n  // [{\"id_initiator\":1,\"date_modified\":\"2021-06-16 15:51:51.8612688\",\"entity_sub_type_id\":\"1\",\"entity_sub_type_name\":\"יחיד\",\"entity_type_id\":\"customer\",\"entity_type_name\":\"לקוח\",\"is_deleted\":0,\"is_default\":1}]"]},"metadata":{},"sourceType":"module"}