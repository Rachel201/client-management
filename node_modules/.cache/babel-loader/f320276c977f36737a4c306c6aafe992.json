{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\client-management\\\\src\\\\components\\\\exampleTable.tsx\";\nimport * as React from 'react';\nimport { Link } from '@fluentui/react/lib/Link';\nimport { Text } from '@fluentui/react/lib/Text';\nimport { CommandBar } from '@fluentui/react/lib/CommandBar';\nimport { Announced } from '@fluentui/react/lib/Announced';\nimport { DirectionalHint, ContextualMenu } from '@fluentui/react/lib/ContextualMenu';\nimport { CheckboxVisibility, ColumnActionsMode, ConstrainMode, DetailsList, DetailsListLayoutMode, Selection, SelectionMode, buildColumns } from '@fluentui/react/lib/DetailsList';\nimport { createListItems, isGroupable } from '@fluentui/example-data';\nimport { memoizeFunction } from '@fluentui/react/lib/Utilities';\nimport { getTheme, mergeStyleSets } from '@fluentui/react/lib/Styling';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = getTheme();\nconst headerDividerClass = 'DetailsListAdvancedExample-divider';\nconst classNames = mergeStyleSets({\n  commandBarText: {\n    padding: '12px'\n  },\n  commandBarWrapper: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    flexWrap: 'wrap'\n  },\n  headerDivider: {\n    display: 'inline-block',\n    height: '100%'\n  },\n  headerDividerBar: [{\n    display: 'none',\n    background: theme.palette.themePrimary,\n    position: 'absolute',\n    top: 16,\n    bottom: 0,\n    width: '1px',\n    zIndex: 5\n  }, headerDividerClass],\n  linkField: {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    maxWidth: '100%'\n  },\n  root: {\n    selectors: {\n      [`.${headerDividerClass}:hover + .${headerDividerClass}`]: {\n        display: 'inline'\n      }\n    }\n  }\n});\nconst commandBarStyles = {\n  root: {\n    marginBottom: '40px'\n  }\n};\nconst DEFAULT_ITEM_LIMIT = 5;\nconst PAGING_SIZE = 10;\nconst PAGING_DELAY = 2000;\nconst ITEMS_COUNT = 5000;\nexport class DetailsListAdvancedExample extends React.Component {\n  constructor(props) {\n    super(props);\n    this._selection = void 0;\n    this._allItems = void 0;\n\n    this._onRenderDivider = (columnProps, defaultRenderer) => {\n      const {\n        columnIndex\n      } = columnProps;\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: classNames.headerDivider,\n          children: defaultRenderer(columnProps)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: classNames.headerDividerBar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 9\n        }, this)]\n      }, `divider-wrapper-${columnIndex}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 7\n      }, this);\n    };\n\n    this._onToggleLazyLoad = () => {\n      let {\n        isLazyLoaded\n      } = this.state;\n      isLazyLoaded = !isLazyLoaded;\n      this.setState({\n        isLazyLoaded: isLazyLoaded,\n        items: isLazyLoaded ? this._allItems.slice(0, PAGING_SIZE).concat(new Array(ITEMS_COUNT - PAGING_SIZE)) : this._allItems\n      });\n    };\n\n    this._onToggleHeaderVisible = () => {\n      this.setState({\n        isHeaderVisible: !this.state.isHeaderVisible\n      });\n    };\n\n    this._onToggleResizing = () => {\n      const {\n        items,\n        sortedColumnKey,\n        isSortedDescending\n      } = this.state;\n      let {\n        canResizeColumns\n      } = this.state;\n      canResizeColumns = !canResizeColumns;\n      this.setState({\n        canResizeColumns: canResizeColumns,\n        columns: this._buildColumns(items, canResizeColumns, this._onColumnClick, sortedColumnKey, isSortedDescending)\n      });\n    };\n\n    this._onCheckboxVisibilityChanged = (ev, menuItem) => {\n      this.setState({\n        checkboxVisibility: menuItem.data\n      });\n    };\n\n    this._onLayoutChanged = (ev, menuItem) => {\n      this.setState({\n        layoutMode: menuItem.data\n      });\n    };\n\n    this._onConstrainModeChanged = (ev, menuItem) => {\n      this.setState({\n        constrainMode: menuItem.data\n      });\n    };\n\n    this._onSelectionChanged = (ev, menuItem) => {\n      this.setState({\n        selectionMode: menuItem.data\n      });\n    };\n\n    this._onItemLimitChanged = (ev, value) => {\n      let newValue = parseInt(value, 10);\n\n      if (isNaN(newValue)) {\n        newValue = DEFAULT_ITEM_LIMIT;\n      }\n\n      this.setState({\n        groupItemLimit: newValue\n      });\n    };\n\n    this._getCommandItems = (canResizeColumns, checkboxVisibility, constrainMode, isHeaderVisible, isLazyLoaded, layoutMode, selectionMode) => {\n      return [{\n        key: 'addRow',\n        text: 'Insert row',\n        iconProps: {\n          iconName: 'Add'\n        },\n        onClick: this._onAddRow\n      }, {\n        key: 'deleteRow',\n        text: 'Delete row',\n        iconProps: {\n          iconName: 'Delete'\n        },\n        onClick: this._onDeleteRow\n      }, {\n        key: 'configure',\n        text: 'Configure',\n        iconProps: {\n          iconName: 'Settings'\n        },\n        subMenuProps: {\n          items: [{\n            key: 'resizing',\n            text: 'Allow column resizing',\n            canCheck: true,\n            checked: canResizeColumns,\n            onClick: this._onToggleResizing\n          }, {\n            key: 'headerVisible',\n            text: 'Is header visible',\n            canCheck: true,\n            checked: isHeaderVisible,\n            onClick: this._onToggleHeaderVisible\n          }, {\n            key: 'lazyload',\n            text: 'Simulate async loading',\n            canCheck: true,\n            checked: isLazyLoaded,\n            onClick: this._onToggleLazyLoad\n          }, {\n            key: 'dash',\n            text: '-'\n          }, {\n            key: 'checkboxVisibility',\n            text: 'Checkbox visibility',\n            subMenuProps: {\n              items: [{\n                key: 'checkboxVisibility.always',\n                text: 'Always',\n                canCheck: true,\n                isChecked: checkboxVisibility === CheckboxVisibility.always,\n                data: CheckboxVisibility.always\n              }, {\n                key: 'checkboxVisibility.onHover',\n                text: 'On hover',\n                canCheck: true,\n                isChecked: checkboxVisibility === CheckboxVisibility.onHover,\n                data: CheckboxVisibility.onHover\n              }, {\n                key: 'checkboxVisibility.hidden',\n                text: 'Hidden',\n                canCheck: true,\n                isChecked: checkboxVisibility === CheckboxVisibility.hidden,\n                data: CheckboxVisibility.hidden\n              }]\n            }\n          }, {\n            key: 'layoutMode',\n            text: 'Layout mode',\n            subMenuProps: {\n              items: [{\n                key: DetailsListLayoutMode[DetailsListLayoutMode.fixedColumns],\n                text: 'Fixed columns',\n                canCheck: true,\n                checked: layoutMode === DetailsListLayoutMode.fixedColumns,\n                data: DetailsListLayoutMode.fixedColumns\n              }, {\n                key: DetailsListLayoutMode[DetailsListLayoutMode.justified],\n                text: 'Justified columns',\n                canCheck: true,\n                checked: layoutMode === DetailsListLayoutMode.justified,\n                data: DetailsListLayoutMode.justified\n              }]\n            }\n          }, {\n            key: 'selectionMode',\n            text: 'Selection mode',\n            subMenuProps: {\n              items: [{\n                key: SelectionMode[SelectionMode.none],\n                text: 'None',\n                canCheck: true,\n                checked: selectionMode === SelectionMode.none,\n                data: SelectionMode.none\n              }, {\n                key: SelectionMode[SelectionMode.single],\n                text: 'Single select',\n                canCheck: true,\n                checked: selectionMode === SelectionMode.single,\n                data: SelectionMode.single\n              }, {\n                key: SelectionMode[SelectionMode.multiple],\n                text: 'Multi select',\n                canCheck: true,\n                checked: selectionMode === SelectionMode.multiple,\n                data: SelectionMode.multiple\n              }]\n            }\n          }, {\n            key: 'constrainMode',\n            text: 'Constrain mode',\n            subMenuProps: {\n              items: [{\n                key: ConstrainMode[ConstrainMode.unconstrained],\n                text: 'Unconstrained',\n                canCheck: true,\n                checked: constrainMode === ConstrainMode.unconstrained,\n                data: ConstrainMode.unconstrained\n              }, {\n                key: ConstrainMode[ConstrainMode.horizontalConstrained],\n                text: 'Horizontal constrained',\n                canCheck: true,\n                checked: constrainMode === ConstrainMode.horizontalConstrained,\n                data: ConstrainMode.horizontalConstrained\n              }]\n            }\n          }]\n        }\n      }];\n    };\n\n    this._onItemInvoked = (item, index) => {\n      console.log('Item invoked', item, index);\n    };\n\n    this._onItemContextMenu = (item, index, ev) => {\n      const contextualMenuProps = {\n        target: ev.target,\n        items: [{\n          key: 'text',\n          name: `${this._selection.getSelectedCount()} selected`\n        }],\n        onDismiss: () => {\n          this.setState({\n            contextualMenuProps: undefined\n          });\n        }\n      };\n\n      if (index > -1) {\n        this.setState({\n          contextualMenuProps: contextualMenuProps\n        });\n      }\n\n      return false;\n    };\n\n    this._onColumnClick = (ev, column) => {\n      if (column.columnActionsMode !== ColumnActionsMode.disabled) {\n        this.setState({\n          contextualMenuProps: this._getContextualMenuProps(ev, column)\n        });\n      }\n    };\n\n    this._onColumnContextMenu = (column, ev) => {\n      if (column.columnActionsMode !== ColumnActionsMode.disabled) {\n        this.setState({\n          contextualMenuProps: this._getContextualMenuProps(ev, column)\n        });\n      }\n    };\n\n    this._onContextualMenuDismissed = () => {\n      this.setState({\n        contextualMenuProps: undefined\n      });\n    };\n\n    this._onSortColumn = (columnKey, isSortedDescending) => {\n      const sortedItems = _copyAndSort(this._allItems, columnKey, isSortedDescending);\n\n      this.setState({\n        items: sortedItems,\n        announcedMessage: `${columnKey} is sorted ${isSortedDescending ? 'descending' : 'ascending'}`,\n        groups: undefined,\n        columns: this._buildColumns(sortedItems, true, this._onColumnClick, columnKey, isSortedDescending, undefined, this._onColumnContextMenu),\n        isSortedDescending: isSortedDescending,\n        sortedColumnKey: columnKey\n      });\n    };\n\n    this._onGroupByColumn = column => {\n      const {\n        key,\n        isGrouped\n      } = column;\n      const {\n        sortedColumnKey,\n        isSortedDescending,\n        groups,\n        items,\n        columns\n      } = this.state;\n\n      if (isGrouped) {\n        // ungroup\n        this._onSortColumn(sortedColumnKey, !!isSortedDescending);\n      } else {\n        let groupedItems = [];\n        let newGroups;\n\n        if (groups) {\n          newGroups = [...groups];\n          groupedItems = this._groupByKey(newGroups, items, key);\n        } else {\n          groupedItems = _copyAndSort(items, key);\n          newGroups = this._getGroups(groupedItems, key);\n        }\n\n        for (const c of columns) {\n          if (c.key === key) {\n            c.isGrouped = true;\n            break;\n          }\n        }\n\n        this.setState({\n          items: groupedItems,\n          columns: [...columns],\n          groups: newGroups\n        });\n      }\n    };\n\n    this._onAddRow = () => {\n      this.setState({\n        items: createListItems(1).concat(this.state.items)\n      });\n    };\n\n    this._onDeleteRow = () => {\n      if (this._selection.getSelectedCount() > 0) {\n        this.setState(previousState => {\n          return {\n            items: previousState.items.filter((item, index) => !this._selection.isIndexSelected(index))\n          };\n        });\n      } else {\n        this.setState({\n          items: this.state.items.slice(1)\n        });\n      }\n    };\n\n    this._onItemsSelectionChanged = () => {\n      this.setState({\n        selectionCount: this._selection.getSelectedCount()\n      });\n    };\n\n    this._getCommandItems = memoizeFunction(this._getCommandItems);\n    this._allItems = createListItems(ITEMS_COUNT);\n    this._selection = new Selection({\n      onSelectionChanged: this._onItemsSelectionChanged\n    });\n\n    this._selection.setItems(this._allItems, false);\n\n    this.state = {\n      items: this._allItems,\n      selectionCount: 0,\n      groups: undefined,\n      groupItemLimit: DEFAULT_ITEM_LIMIT,\n      layoutMode: DetailsListLayoutMode.justified,\n      constrainMode: ConstrainMode.horizontalConstrained,\n      selectionMode: SelectionMode.multiple,\n      canResizeColumns: true,\n      checkboxVisibility: CheckboxVisibility.onHover,\n      columns: this._buildColumns(this._allItems, true, this._onColumnClick, '', undefined, undefined, this._onColumnContextMenu),\n      contextualMenuProps: undefined,\n      sortedColumnKey: 'name',\n      isSortedDescending: false,\n      isLazyLoaded: false,\n      isHeaderVisible: true\n    };\n  }\n\n  render() {\n    const {\n      canResizeColumns,\n      checkboxVisibility,\n      columns,\n      constrainMode,\n      contextualMenuProps,\n      groupItemLimit,\n      groups,\n      isHeaderVisible,\n      isLazyLoaded,\n      items,\n      layoutMode,\n      selectionMode,\n      announcedMessage\n    } = this.state;\n    const isGrouped = groups && groups.length > 0;\n    const groupProps = {\n      getGroupItemLimit: group => {\n        if (group) {\n          return group.isShowingAll ? group.count : Math.min(group.count, groupItemLimit);\n        } else {\n          return items.length;\n        }\n      },\n      footerProps: {\n        showAllLinkText: 'Show all'\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classNames.root,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classNames.commandBarWrapper,\n        children: [/*#__PURE__*/_jsxDEV(CommandBar, {\n          styles: commandBarStyles,\n          items: this._getCommandItems(canResizeColumns, checkboxVisibility, constrainMode, isHeaderVisible, isLazyLoaded, layoutMode, selectionMode)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          className: classNames.commandBarText,\n          children: `${this.state.selectionCount} selected`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Announced, {\n        message: `${this.state.selectionCount} selected`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), announcedMessage ? /*#__PURE__*/_jsxDEV(Announced, {\n        message: announcedMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 29\n      }, this) : undefined, /*#__PURE__*/_jsxDEV(DetailsList, {\n        setKey: \"items\",\n        items: items,\n        selection: this._selection,\n        groups: groups,\n        columns: columns,\n        checkboxVisibility: checkboxVisibility,\n        layoutMode: layoutMode,\n        isHeaderVisible: isHeaderVisible,\n        selectionMode: selectionMode,\n        constrainMode: constrainMode,\n        groupProps: groupProps,\n        enterModalSelectionOnTouch: true,\n        selectionZoneProps: {\n          selection: this._selection,\n          disableAutoSelectOnInputElements: true,\n          selectionMode: selectionMode\n        },\n        ariaLabelForListHeader: \"Column headers. Click to sort.\",\n        ariaLabelForSelectAllCheckbox: \"Toggle selection for all items\",\n        ariaLabelForSelectionColumn: \"Toggle selection\",\n        checkButtonAriaLabel: \"select row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), contextualMenuProps && /*#__PURE__*/_jsxDEV(ContextualMenu, { ...contextualMenuProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this);\n  }\n\n  _getContextualMenuProps(ev, column) {\n    const items = [{\n      key: 'aToZ',\n      name: 'A to Z',\n      iconProps: {\n        iconName: 'SortUp'\n      },\n      canCheck: true,\n      checked: column.isSorted && !column.isSortedDescending,\n      onClick: () => this._onSortColumn(column.key, false)\n    }, {\n      key: 'zToA',\n      name: 'Z to A',\n      iconProps: {\n        iconName: 'SortDown'\n      },\n      canCheck: true,\n      checked: column.isSorted && column.isSortedDescending,\n      onClick: () => this._onSortColumn(column.key, true)\n    }];\n\n    if (isGroupable(column.key)) {\n      items.push({\n        key: 'groupBy',\n        name: 'Group by ' + column.name,\n        iconProps: {\n          iconName: 'GroupedDescending'\n        },\n        canCheck: true,\n        checked: column.isGrouped,\n        onClick: () => this._onGroupByColumn(column)\n      });\n    }\n\n    return {\n      items: items,\n      target: ev.currentTarget,\n      directionalHint: DirectionalHint.bottomLeftEdge,\n      gapSpace: 10,\n      isBeakVisible: true,\n      onDismiss: this._onContextualMenuDismissed\n    };\n  }\n\n  _groupByKey(groups, items, key) {\n    let groupedItems = [];\n\n    if (groups) {\n      for (const group of groups) {\n        if (group.children && group.children.length > 0) {\n          const childGroupedItems = this._groupByKey(group.children, items, key);\n\n          groupedItems = groupedItems.concat(childGroupedItems);\n        } else {\n          const itemsInGroup = items.slice(group.startIndex, group.startIndex + group.count);\n\n          const nextLevelGroupedItems = _copyAndSort(itemsInGroup, key);\n\n          groupedItems = groupedItems.concat(nextLevelGroupedItems);\n          group.children = this._getGroups(nextLevelGroupedItems, key, group);\n        }\n      }\n    }\n\n    return groupedItems;\n  }\n\n  _getGroups(groupedItems, key, parentGroup) {\n    const separator = '-';\n    const groups = groupedItems.reduce((current, item, index) => {\n      const currentGroup = current[current.length - 1];\n      const itemColumnValue = item[key];\n\n      if (!currentGroup || this._getLeafGroupKey(currentGroup.key, separator) !== itemColumnValue) {\n        current.push({\n          key: (parentGroup ? parentGroup.key + separator : '') + itemColumnValue,\n          name: key + ': ' + itemColumnValue,\n          startIndex: parentGroup ? parentGroup.startIndex + index : index,\n          count: 1,\n          level: parentGroup ? parentGroup.level + 1 : 0\n        });\n      } else {\n        currentGroup.count++;\n      }\n\n      return current;\n    }, []);\n    return groups;\n  }\n\n  _getLeafGroupKey(key, separator) {\n    let leafKey = key;\n\n    if (key.indexOf(separator) !== -1) {\n      const arrKeys = key.split(separator);\n      leafKey = arrKeys[arrKeys.length - 1];\n    }\n\n    return leafKey;\n  }\n\n  _buildColumns(items, canResizeColumns, onColumnClick, sortedColumnKey, isSortedDescending, groupedColumnKey, onColumnContextMenu) {\n    const columns = buildColumns(items, canResizeColumns, onColumnClick, sortedColumnKey, isSortedDescending);\n    columns.forEach(column => {\n      column.ariaLabel = `Operations for ${column.name}`;\n\n      if (column.key === 'thumbnail') {\n        column.iconName = 'Picture';\n        column.isIconOnly = true;\n      } else if (column.key === 'description') {\n        column.isMultiline = true;\n        column.minWidth = 200;\n      } else if (column.key === 'name') {\n        column.onRender = item => /*#__PURE__*/_jsxDEV(Link, {\n          href: \"#\",\n          \"data-selection-invoke\": true,\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 11\n        }, this);\n      } else if (column.key === 'key') {\n        column.columnActionsMode = ColumnActionsMode.disabled;\n\n        column.onRender = item => /*#__PURE__*/_jsxDEV(Link, {\n          className: classNames.linkField,\n          href: \"https://microsoft.com\",\n          target: \"_blank\",\n          rel: \"noopener\",\n          children: item.key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 11\n        }, this);\n\n        column.minWidth = 90;\n        column.maxWidth = 90;\n      }\n    });\n    return columns;\n  }\n\n}\n\nfunction _copyAndSort(items, columnKey, isSortedDescending) {\n  const key = columnKey;\n  return items.slice(0).sort((a, b) => (isSortedDescending ? a[key] < b[key] : a[key] > b[key]) ? 1 : -1);\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/client-management/src/components/exampleTable.tsx"],"names":["React","Link","Text","CommandBar","Announced","DirectionalHint","ContextualMenu","CheckboxVisibility","ColumnActionsMode","ConstrainMode","DetailsList","DetailsListLayoutMode","Selection","SelectionMode","buildColumns","createListItems","isGroupable","memoizeFunction","getTheme","mergeStyleSets","theme","headerDividerClass","classNames","commandBarText","padding","commandBarWrapper","display","justifyContent","flexWrap","headerDivider","height","headerDividerBar","background","palette","themePrimary","position","top","bottom","width","zIndex","linkField","overflow","textOverflow","maxWidth","root","selectors","commandBarStyles","marginBottom","DEFAULT_ITEM_LIMIT","PAGING_SIZE","PAGING_DELAY","ITEMS_COUNT","DetailsListAdvancedExample","Component","constructor","props","_selection","_allItems","_onRenderDivider","columnProps","defaultRenderer","columnIndex","_onToggleLazyLoad","isLazyLoaded","state","setState","items","slice","concat","Array","_onToggleHeaderVisible","isHeaderVisible","_onToggleResizing","sortedColumnKey","isSortedDescending","canResizeColumns","columns","_buildColumns","_onColumnClick","_onCheckboxVisibilityChanged","ev","menuItem","checkboxVisibility","data","_onLayoutChanged","layoutMode","_onConstrainModeChanged","constrainMode","_onSelectionChanged","selectionMode","_onItemLimitChanged","value","newValue","parseInt","isNaN","groupItemLimit","_getCommandItems","key","text","iconProps","iconName","onClick","_onAddRow","_onDeleteRow","subMenuProps","canCheck","checked","isChecked","always","onHover","hidden","fixedColumns","justified","none","single","multiple","unconstrained","horizontalConstrained","_onItemInvoked","item","index","console","log","_onItemContextMenu","contextualMenuProps","target","name","getSelectedCount","onDismiss","undefined","column","columnActionsMode","disabled","_getContextualMenuProps","_onColumnContextMenu","_onContextualMenuDismissed","_onSortColumn","columnKey","sortedItems","_copyAndSort","announcedMessage","groups","_onGroupByColumn","isGrouped","groupedItems","newGroups","_groupByKey","_getGroups","c","previousState","filter","isIndexSelected","_onItemsSelectionChanged","selectionCount","onSelectionChanged","setItems","render","length","groupProps","getGroupItemLimit","group","isShowingAll","count","Math","min","footerProps","showAllLinkText","selection","disableAutoSelectOnInputElements","isSorted","push","currentTarget","directionalHint","bottomLeftEdge","gapSpace","isBeakVisible","children","childGroupedItems","itemsInGroup","startIndex","nextLevelGroupedItems","parentGroup","separator","reduce","current","currentGroup","itemColumnValue","_getLeafGroupKey","level","leafKey","indexOf","arrKeys","split","onColumnClick","groupedColumnKey","onColumnContextMenu","forEach","ariaLabel","isIconOnly","isMultiline","minWidth","onRender","sort","a","b"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Link } from '@fluentui/react/lib/Link';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { Text } from '@fluentui/react/lib/Text';\r\nimport { CommandBar, ICommandBarStyles } from '@fluentui/react/lib/CommandBar';\r\nimport { Announced } from '@fluentui/react/lib/Announced';\r\nimport {\r\n  IContextualMenuProps,\r\n  IContextualMenuItem,\r\n  DirectionalHint,\r\n  ContextualMenu,\r\n} from '@fluentui/react/lib/ContextualMenu';\r\nimport {\r\n  CheckboxVisibility,\r\n  ColumnActionsMode,\r\n  ConstrainMode,\r\n  DetailsList,\r\n  DetailsListLayoutMode,\r\n  IColumn,\r\n  IGroup,\r\n  Selection,\r\n  SelectionMode,\r\n  buildColumns,\r\n  IDetailsColumnProps,\r\n} from '@fluentui/react/lib/DetailsList';\r\nimport { createListItems, isGroupable, IExampleItem } from '@fluentui/example-data';\r\nimport { memoizeFunction } from '@fluentui/react/lib/Utilities';\r\nimport { getTheme, mergeStyleSets } from '@fluentui/react/lib/Styling';\r\n\r\nconst theme = getTheme();\r\nconst headerDividerClass = 'DetailsListAdvancedExample-divider';\r\nconst classNames = mergeStyleSets({\r\n  commandBarText: {\r\n    padding: '12px',\r\n  },\r\n  commandBarWrapper: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    flexWrap: 'wrap',\r\n  },\r\n  headerDivider: {\r\n    display: 'inline-block',\r\n    height: '100%',\r\n  },\r\n  headerDividerBar: [\r\n    {\r\n      display: 'none',\r\n      background: theme.palette.themePrimary,\r\n      position: 'absolute',\r\n      top: 16,\r\n      bottom: 0,\r\n      width: '1px',\r\n      zIndex: 5,\r\n    },\r\n    headerDividerClass,\r\n  ],\r\n  linkField: {\r\n    overflow: 'hidden',\r\n    textOverflow: 'ellipsis',\r\n    maxWidth: '100%',\r\n  },\r\n  root: {\r\n    selectors: {\r\n      [`.${headerDividerClass}:hover + .${headerDividerClass}`]: {\r\n        display: 'inline',\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst commandBarStyles: Partial<ICommandBarStyles> = { root: { marginBottom: '40px' } };\r\n\r\nconst DEFAULT_ITEM_LIMIT = 5;\r\nconst PAGING_SIZE = 10;\r\nconst PAGING_DELAY = 2000;\r\nconst ITEMS_COUNT = 5000;\r\n\r\nexport interface IDetailsListAdvancedExampleState {\r\n  canResizeColumns?: boolean;\r\n  checkboxVisibility?: CheckboxVisibility;\r\n  columns: IColumn[];\r\n  constrainMode?: ConstrainMode;\r\n  contextualMenuProps?: IContextualMenuProps;\r\n  groupItemLimit?: number;\r\n  groups?: IGroup[];\r\n  isHeaderVisible?: boolean;\r\n  isLazyLoaded?: boolean;\r\n  isSortedDescending?: boolean;\r\n  items: IExampleItem[];\r\n  layoutMode?: DetailsListLayoutMode;\r\n  selectionMode?: SelectionMode;\r\n  sortedColumnKey?: string;\r\n  selectionCount: number;\r\n  announcedMessage?: string;\r\n}\r\n\r\nexport class DetailsListAdvancedExample extends React.Component<{}, IDetailsListAdvancedExampleState> {\r\n\r\n  private _selection: Selection;\r\n  private _allItems: IExampleItem[];\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this._getCommandItems = memoizeFunction(this._getCommandItems);\r\n\r\n    this._allItems = createListItems(ITEMS_COUNT);\r\n    this._selection = new Selection({\r\n      onSelectionChanged: this._onItemsSelectionChanged,\r\n    });\r\n    this._selection.setItems(this._allItems, false);\r\n\r\n    this.state = {\r\n      items: this._allItems,\r\n      selectionCount: 0,\r\n      groups: undefined,\r\n      groupItemLimit: DEFAULT_ITEM_LIMIT,\r\n      layoutMode: DetailsListLayoutMode.justified,\r\n      constrainMode: ConstrainMode.horizontalConstrained,\r\n      selectionMode: SelectionMode.multiple,\r\n      canResizeColumns: true,\r\n      checkboxVisibility: CheckboxVisibility.onHover,\r\n      columns: this._buildColumns(\r\n        this._allItems,\r\n        true,\r\n        this._onColumnClick,\r\n        '',\r\n        undefined,\r\n        undefined,\r\n        this._onColumnContextMenu,\r\n      ),\r\n      contextualMenuProps: undefined,\r\n      sortedColumnKey: 'name',\r\n      isSortedDescending: false,\r\n      isLazyLoaded: false,\r\n      isHeaderVisible: true,\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      canResizeColumns,\r\n      checkboxVisibility,\r\n      columns,\r\n      constrainMode,\r\n      contextualMenuProps,\r\n      groupItemLimit,\r\n      groups,\r\n      isHeaderVisible,\r\n      isLazyLoaded,\r\n      items,\r\n      layoutMode,\r\n      selectionMode,\r\n      announcedMessage,\r\n    } = this.state;\r\n\r\n    const isGrouped = groups && groups.length > 0;\r\n    const groupProps = {\r\n      getGroupItemLimit: (group: IGroup) => {\r\n        if (group) {\r\n          return group.isShowingAll ? group.count : Math.min(group.count, groupItemLimit as number);\r\n        } else {\r\n          return items.length;\r\n        }\r\n      },\r\n      footerProps: {\r\n        showAllLinkText: 'Show all',\r\n      },\r\n    };\r\n\r\n    return (\r\n      <div className={classNames.root}>\r\n        <div className={classNames.commandBarWrapper}>\r\n          <CommandBar\r\n            styles={commandBarStyles}\r\n            items={this._getCommandItems(\r\n              canResizeColumns,\r\n              checkboxVisibility,\r\n              constrainMode,\r\n              isHeaderVisible,\r\n              isLazyLoaded,\r\n              layoutMode,\r\n              selectionMode,\r\n            )}\r\n          />\r\n          <Text className={classNames.commandBarText}>{`${this.state.selectionCount} selected`}</Text>\r\n        </div>\r\n        <Announced message={`${this.state.selectionCount} selected`} />\r\n\r\n        {/* {isGrouped ? <TextField label=\"Group item limit\" onChange={this._onItemLimitChanged} /> : null} */}\r\n\r\n        {announcedMessage ? <Announced message={announcedMessage} /> : undefined}\r\n\r\n        <DetailsList\r\n          setKey=\"items\"\r\n          items={items}\r\n          selection={this._selection}\r\n          groups={groups}\r\n          columns={columns}\r\n          checkboxVisibility={checkboxVisibility}\r\n          layoutMode={layoutMode}\r\n          isHeaderVisible={isHeaderVisible}\r\n          selectionMode={selectionMode}\r\n          constrainMode={constrainMode}\r\n          groupProps={groupProps}\r\n          enterModalSelectionOnTouch={true}\r\n         \r\n          selectionZoneProps={{\r\n            selection: this._selection,\r\n            disableAutoSelectOnInputElements: true,\r\n            selectionMode: selectionMode,\r\n          }}\r\n          ariaLabelForListHeader=\"Column headers. Click to sort.\"\r\n          ariaLabelForSelectAllCheckbox=\"Toggle selection for all items\"\r\n          ariaLabelForSelectionColumn=\"Toggle selection\"\r\n          checkButtonAriaLabel=\"select row\"\r\n         \r\n        />\r\n\r\n        {contextualMenuProps && <ContextualMenu {...contextualMenuProps} />}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onRenderDivider = (\r\n    columnProps: IDetailsColumnProps,\r\n    defaultRenderer: (props?: IDetailsColumnProps) => JSX.Element | null,\r\n  ): JSX.Element => {\r\n    const { columnIndex } = columnProps;\r\n    return (\r\n      <React.Fragment key={`divider-wrapper-${columnIndex}`}>\r\n        <span className={classNames.headerDivider}>{defaultRenderer(columnProps)}</span>\r\n        <span className={classNames.headerDividerBar} />\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n//   private _onDataMiss(index: number): void {\r\n//     index = Math.floor(index / PAGING_SIZE) * PAGING_SIZE;\r\n\r\n   \r\n//       setTimeout(() => {\r\n        \r\n//         const itemsCopy = [...this.state.items];\r\n\r\n//         itemsCopy.splice(index, PAGING_SIZE).concat(this._allItems.slice(index, index + PAGING_SIZE));\r\n\r\n//         this.setState({\r\n//           items: itemsCopy,\r\n//         });\r\n//       }, PAGING_DELAY);\r\n//     }\r\n//   }\r\n\r\n//   private _onRenderMissingItem = (index: number): null => {\r\n//     this._onDataMiss(index);\r\n//     return null;\r\n//   };\r\n\r\n  private _onToggleLazyLoad = (): void => {\r\n    let { isLazyLoaded } = this.state;\r\n\r\n    isLazyLoaded = !isLazyLoaded;\r\n\r\n    this.setState({\r\n      isLazyLoaded: isLazyLoaded,\r\n      items: isLazyLoaded\r\n        ? this._allItems.slice(0, PAGING_SIZE).concat(new Array(ITEMS_COUNT - PAGING_SIZE))\r\n        : this._allItems,\r\n    });\r\n  };\r\n\r\n  private _onToggleHeaderVisible = (): void => {\r\n    this.setState({ isHeaderVisible: !this.state.isHeaderVisible });\r\n  };\r\n\r\n  private _onToggleResizing = (): void => {\r\n    const { items, sortedColumnKey, isSortedDescending } = this.state;\r\n    let { canResizeColumns } = this.state;\r\n\r\n    canResizeColumns = !canResizeColumns;\r\n\r\n    this.setState({\r\n      canResizeColumns: canResizeColumns,\r\n      columns: this._buildColumns(items, canResizeColumns, this._onColumnClick, sortedColumnKey, isSortedDescending),\r\n    });\r\n  };\r\n\r\n  private _onCheckboxVisibilityChanged = (ev: React.MouseEvent<HTMLElement>, menuItem: IContextualMenuItem): void => {\r\n    this.setState({ checkboxVisibility: menuItem.data });\r\n  };\r\n\r\n  private _onLayoutChanged = (ev: React.MouseEvent<HTMLElement>, menuItem: IContextualMenuItem): void => {\r\n    this.setState({ layoutMode: menuItem.data });\r\n  };\r\n\r\n  private _onConstrainModeChanged = (ev: React.MouseEvent<HTMLElement>, menuItem: IContextualMenuItem): void => {\r\n    this.setState({ constrainMode: menuItem.data });\r\n  };\r\n\r\n  private _onSelectionChanged = (ev: React.MouseEvent<HTMLElement>, menuItem: IContextualMenuItem): void => {\r\n    this.setState({ selectionMode: menuItem.data });\r\n  };\r\n\r\n  private _onItemLimitChanged = (ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, value: string): void => {\r\n    let newValue = parseInt(value, 10);\r\n    if (isNaN(newValue)) {\r\n      newValue = DEFAULT_ITEM_LIMIT;\r\n    }\r\n    this.setState({ groupItemLimit: newValue });\r\n  };\r\n\r\n  private _getCommandItems = (\r\n    canResizeColumns?: boolean,\r\n    checkboxVisibility?: CheckboxVisibility,\r\n    constrainMode?: ConstrainMode,\r\n    isHeaderVisible?: boolean,\r\n    isLazyLoaded?: boolean,\r\n    layoutMode?: DetailsListLayoutMode,\r\n    selectionMode?: SelectionMode,\r\n  ): IContextualMenuItem[] => {\r\n    return [\r\n      {\r\n        key: 'addRow',\r\n        text: 'Insert row',\r\n        iconProps: { iconName: 'Add' },\r\n        onClick: this._onAddRow,\r\n      },\r\n      {\r\n        key: 'deleteRow',\r\n        text: 'Delete row',\r\n        iconProps: { iconName: 'Delete' },\r\n        onClick: this._onDeleteRow,\r\n      },\r\n      {\r\n        key: 'configure',\r\n        text: 'Configure',\r\n        iconProps: { iconName: 'Settings' },\r\n        subMenuProps: {\r\n          items: [\r\n            {\r\n              key: 'resizing',\r\n              text: 'Allow column resizing',\r\n              canCheck: true,\r\n              checked: canResizeColumns,\r\n              onClick: this._onToggleResizing,\r\n            },\r\n            {\r\n              key: 'headerVisible',\r\n              text: 'Is header visible',\r\n              canCheck: true,\r\n              checked: isHeaderVisible,\r\n              onClick: this._onToggleHeaderVisible,\r\n            },\r\n            {\r\n              key: 'lazyload',\r\n              text: 'Simulate async loading',\r\n              canCheck: true,\r\n              checked: isLazyLoaded,\r\n              onClick: this._onToggleLazyLoad,\r\n            },\r\n            {\r\n              key: 'dash',\r\n              text: '-',\r\n            },\r\n            {\r\n              key: 'checkboxVisibility',\r\n              text: 'Checkbox visibility',\r\n              subMenuProps: {\r\n                items: [\r\n                  {\r\n                    key: 'checkboxVisibility.always',\r\n                    text: 'Always',\r\n                    canCheck: true,\r\n                    isChecked: checkboxVisibility === CheckboxVisibility.always,\r\n            \r\n                    data: CheckboxVisibility.always,\r\n                  },\r\n                  {\r\n                    key: 'checkboxVisibility.onHover',\r\n                    text: 'On hover',\r\n                    canCheck: true,\r\n                    isChecked: checkboxVisibility === CheckboxVisibility.onHover,\r\n    \r\n                    data: CheckboxVisibility.onHover,\r\n                  },\r\n                  {\r\n                    key: 'checkboxVisibility.hidden',\r\n                    text: 'Hidden',\r\n                    canCheck: true,\r\n                    isChecked: checkboxVisibility === CheckboxVisibility.hidden,\r\n                    \r\n                    data: CheckboxVisibility.hidden,\r\n                  },\r\n                ],\r\n              },\r\n            },\r\n            {\r\n              key: 'layoutMode',\r\n              text: 'Layout mode',\r\n              subMenuProps: {\r\n                items: [\r\n                  {\r\n                    key: DetailsListLayoutMode[DetailsListLayoutMode.fixedColumns],\r\n                    text: 'Fixed columns',\r\n                    canCheck: true,\r\n                    checked: layoutMode === DetailsListLayoutMode.fixedColumns,\r\n                   \r\n                    data: DetailsListLayoutMode.fixedColumns,\r\n                  },\r\n                  {\r\n                    key: DetailsListLayoutMode[DetailsListLayoutMode.justified],\r\n                    text: 'Justified columns',\r\n                    canCheck: true,\r\n                    checked: layoutMode === DetailsListLayoutMode.justified,\r\n                  \r\n                    data: DetailsListLayoutMode.justified,\r\n                  },\r\n                ],\r\n              },\r\n            },\r\n            {\r\n              key: 'selectionMode',\r\n              text: 'Selection mode',\r\n              subMenuProps: {\r\n                items: [\r\n                  {\r\n                    key: SelectionMode[SelectionMode.none],\r\n                    text: 'None',\r\n                    canCheck: true,\r\n                    checked: selectionMode === SelectionMode.none,\r\n                    data: SelectionMode.none,\r\n                  },\r\n                  {\r\n                    key: SelectionMode[SelectionMode.single],\r\n                    text: 'Single select',\r\n                    canCheck: true,\r\n                    checked: selectionMode === SelectionMode.single,\r\n                   \r\n                    data: SelectionMode.single,\r\n                  },\r\n                  {\r\n                    key: SelectionMode[SelectionMode.multiple],\r\n                    text: 'Multi select',\r\n                    canCheck: true,\r\n                    checked: selectionMode === SelectionMode.multiple,\r\n                \r\n                    data: SelectionMode.multiple,\r\n                  },\r\n                ],\r\n              },\r\n            },\r\n            {\r\n              key: 'constrainMode',\r\n              text: 'Constrain mode',\r\n              subMenuProps: {\r\n                items: [\r\n                  {\r\n                    key: ConstrainMode[ConstrainMode.unconstrained],\r\n                    text: 'Unconstrained',\r\n                    canCheck: true,\r\n                    checked: constrainMode === ConstrainMode.unconstrained,\r\n                    \r\n                    data: ConstrainMode.unconstrained,\r\n                  },\r\n                  {\r\n                    key: ConstrainMode[ConstrainMode.horizontalConstrained],\r\n                    text: 'Horizontal constrained',\r\n                    canCheck: true,\r\n                    checked: constrainMode === ConstrainMode.horizontalConstrained,\r\n                \r\n                    data: ConstrainMode.horizontalConstrained,\r\n                  },\r\n                ],\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    ];\r\n  };\r\n\r\n  private _getContextualMenuProps(ev: React.MouseEvent<HTMLElement>, column: IColumn): IContextualMenuProps {\r\n    const items = [\r\n      {\r\n        key: 'aToZ',\r\n        name: 'A to Z',\r\n        iconProps: { iconName: 'SortUp' },\r\n        canCheck: true,\r\n        checked: column.isSorted && !column.isSortedDescending,\r\n        onClick: () => this._onSortColumn(column.key, false),\r\n      },\r\n      {\r\n        key: 'zToA',\r\n        name: 'Z to A',\r\n        iconProps: { iconName: 'SortDown' },\r\n        canCheck: true,\r\n        checked: column.isSorted && column.isSortedDescending,\r\n        onClick: () => this._onSortColumn(column.key, true),\r\n      },\r\n    ];\r\n    if (isGroupable(column.key)) {\r\n      items.push({\r\n        key: 'groupBy',\r\n        name: 'Group by ' + column.name,\r\n        iconProps: { iconName: 'GroupedDescending' },\r\n        canCheck: true,\r\n        checked: column.isGrouped,\r\n        onClick: () => this._onGroupByColumn(column),\r\n      });\r\n    }\r\n    return {\r\n      items: items,\r\n      target: ev.currentTarget as HTMLElement,\r\n      directionalHint: DirectionalHint.bottomLeftEdge,\r\n      gapSpace: 10,\r\n      isBeakVisible: true,\r\n      onDismiss: this._onContextualMenuDismissed,\r\n    };\r\n  }\r\n\r\n  private _onItemInvoked = (item: IExampleItem, index: number): void => {\r\n    console.log('Item invoked', item, index);\r\n  };\r\n\r\n  private _onItemContextMenu = (item: IExampleItem, index: number, ev: MouseEvent): boolean => {\r\n    const contextualMenuProps: IContextualMenuProps = {\r\n      target: ev.target as HTMLElement,\r\n      items: [\r\n        {\r\n          key: 'text',\r\n          name: `${this._selection.getSelectedCount()} selected`,\r\n        },\r\n      ],\r\n      onDismiss: () => {\r\n        this.setState({\r\n          contextualMenuProps: undefined,\r\n        });\r\n      },\r\n    };\r\n\r\n    if (index > -1) {\r\n      this.setState({\r\n        contextualMenuProps: contextualMenuProps,\r\n      });\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  private _onColumnClick = (ev: React.MouseEvent<HTMLElement>, column: IColumn): void => {\r\n    if (column.columnActionsMode !== ColumnActionsMode.disabled) {\r\n      this.setState({\r\n        contextualMenuProps: this._getContextualMenuProps(ev, column),\r\n      });\r\n    }\r\n  };\r\n\r\n  private _onColumnContextMenu = (column: IColumn, ev: React.MouseEvent<HTMLElement>): void => {\r\n    if (column.columnActionsMode !== ColumnActionsMode.disabled) {\r\n      this.setState({\r\n        contextualMenuProps: this._getContextualMenuProps(ev, column),\r\n      });\r\n    }\r\n  };\r\n\r\n  private _onContextualMenuDismissed = (): void => {\r\n    this.setState({\r\n      contextualMenuProps: undefined,\r\n    });\r\n  };\r\n\r\n  private _onSortColumn = (columnKey: string, isSortedDescending: boolean): void => {\r\n    const sortedItems = _copyAndSort(this._allItems, columnKey, isSortedDescending);\r\n\r\n    this.setState({\r\n      items: sortedItems,\r\n      announcedMessage: `${columnKey} is sorted ${isSortedDescending ? 'descending' : 'ascending'}`,\r\n      groups: undefined,\r\n      columns: this._buildColumns(\r\n        sortedItems,\r\n        true,\r\n        this._onColumnClick,\r\n        columnKey,\r\n        isSortedDescending,\r\n        undefined,\r\n        this._onColumnContextMenu,\r\n      ),\r\n      isSortedDescending: isSortedDescending,\r\n      sortedColumnKey: columnKey,\r\n    });\r\n  };\r\n\r\n  private _onGroupByColumn = (column: IColumn): void => {\r\n    const { key, isGrouped } = column;\r\n    const { sortedColumnKey, isSortedDescending, groups, items, columns } = this.state;\r\n\r\n    if (isGrouped) {\r\n      // ungroup\r\n      this._onSortColumn(sortedColumnKey!, !!isSortedDescending);\r\n    } else {\r\n      let groupedItems = [];\r\n      let newGroups: IGroup[];\r\n      if (groups) {\r\n        newGroups = [...groups];\r\n        groupedItems = this._groupByKey(newGroups, items, key as keyof IExampleItem);\r\n      } else {\r\n        groupedItems = _copyAndSort(items, key);\r\n        newGroups = this._getGroups(groupedItems, key as keyof IExampleItem);\r\n      }\r\n\r\n      for (const c of columns) {\r\n        if (c.key === key) {\r\n          c.isGrouped = true;\r\n          break;\r\n        }\r\n      }\r\n      this.setState({\r\n        items: groupedItems,\r\n        columns: [...columns],\r\n        groups: newGroups,\r\n      });\r\n    }\r\n  };\r\n\r\n  private _groupByKey(groups: IGroup[], items: IExampleItem[], key: keyof IExampleItem): IExampleItem[] {\r\n    let groupedItems: IExampleItem[] = [];\r\n    if (groups) {\r\n      for (const group of groups) {\r\n        if (group.children && group.children.length > 0) {\r\n          const childGroupedItems = this._groupByKey(group.children, items, key);\r\n          groupedItems = groupedItems.concat(childGroupedItems);\r\n        } else {\r\n          const itemsInGroup = items.slice(group.startIndex, group.startIndex + group.count);\r\n          const nextLevelGroupedItems = _copyAndSort(itemsInGroup, key);\r\n          groupedItems = groupedItems.concat(nextLevelGroupedItems);\r\n          group.children = this._getGroups(nextLevelGroupedItems, key, group);\r\n        }\r\n      }\r\n    }\r\n    return groupedItems;\r\n  }\r\n\r\n  private _getGroups(groupedItems: IExampleItem[], key: keyof IExampleItem, parentGroup?: IGroup): IGroup[] {\r\n    const separator = '-';\r\n    const groups = groupedItems.reduce((current: IGroup[], item: IExampleItem, index: number) => {\r\n      const currentGroup = current[current.length - 1];\r\n      const itemColumnValue = item[key];\r\n\r\n      if (!currentGroup || this._getLeafGroupKey(currentGroup.key, separator) !== itemColumnValue) {\r\n        current.push({\r\n          key: (parentGroup ? parentGroup.key + separator : '') + itemColumnValue,\r\n          name: key + ': ' + itemColumnValue,\r\n          startIndex: parentGroup ? parentGroup.startIndex + index : index,\r\n          count: 1,\r\n          level: parentGroup ? parentGroup.level! + 1 : 0,\r\n        });\r\n      } else {\r\n        currentGroup.count++;\r\n      }\r\n      return current;\r\n    }, [] as IGroup[]);\r\n\r\n    return groups;\r\n  }\r\n\r\n  private _getLeafGroupKey(key: string, separator: string): string {\r\n    let leafKey = key;\r\n    if (key.indexOf(separator) !== -1) {\r\n      const arrKeys = key.split(separator);\r\n      leafKey = arrKeys[arrKeys.length - 1];\r\n    }\r\n    return leafKey;\r\n  }\r\n\r\n  private _onAddRow = (): void => {\r\n    this.setState({\r\n      items: createListItems(1).concat(this.state.items),\r\n    });\r\n  };\r\n\r\n  private _onDeleteRow = (): void => {\r\n    if (this._selection.getSelectedCount() > 0) {\r\n      this.setState((previousState: IDetailsListAdvancedExampleState) => {\r\n        return {\r\n          items: previousState.items.filter((item, index) => !this._selection.isIndexSelected(index)),\r\n        };\r\n      });\r\n    } else {\r\n      this.setState({\r\n        items: this.state.items.slice(1),\r\n      });\r\n    }\r\n  };\r\n\r\n  private _onItemsSelectionChanged = () => {\r\n    this.setState({\r\n      selectionCount: this._selection.getSelectedCount(),\r\n    });\r\n  };\r\n\r\n  private _buildColumns(\r\n    items: IExampleItem[],\r\n    canResizeColumns?: boolean,\r\n    onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => any,\r\n    sortedColumnKey?: string,\r\n    isSortedDescending?: boolean,\r\n    groupedColumnKey?: string,\r\n    onColumnContextMenu?: (column: IColumn, ev: React.MouseEvent<HTMLElement>) => any,\r\n  ) {\r\n    const columns = buildColumns(\r\n      items,\r\n      canResizeColumns,\r\n      onColumnClick,\r\n      sortedColumnKey,\r\n      isSortedDescending,\r\n    );\r\n\r\n    columns.forEach(column => {\r\n   \r\n      column.ariaLabel = `Operations for ${column.name}`;\r\n      if (column.key === 'thumbnail') {\r\n        column.iconName = 'Picture';\r\n        column.isIconOnly = true;\r\n      } else if (column.key === 'description') {\r\n        column.isMultiline = true;\r\n        column.minWidth = 200;\r\n      } else if (column.key === 'name') {\r\n        column.onRender = (item: IExampleItem) => (\r\n          <Link href=\"#\" data-selection-invoke={true}>\r\n            {item.name}\r\n          </Link>\r\n        );\r\n      } else if (column.key === 'key') {\r\n        column.columnActionsMode = ColumnActionsMode.disabled;\r\n        column.onRender = (item: IExampleItem) => (\r\n          <Link className={classNames.linkField} href=\"https://microsoft.com\" target=\"_blank\" rel=\"noopener\">\r\n            {item.key}\r\n          </Link>\r\n        );\r\n        column.minWidth = 90;\r\n        column.maxWidth = 90;\r\n      }\r\n    });\r\n\r\n    return columns;\r\n  }\r\n}\r\n\r\nfunction _copyAndSort<T>(items: T[], columnKey: string, isSortedDescending?: boolean): T[] {\r\n  const key = columnKey as keyof T;\r\n  return items.slice(0).sort((a: T, b: T) => ((isSortedDescending ? a[key] < b[key] : a[key] > b[key]) ? 1 : -1));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}