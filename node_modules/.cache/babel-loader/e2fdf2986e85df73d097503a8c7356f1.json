{"ast":null,"code":"import axios from \"axios\";\nimport { basicUrl } from \"../../shared/config\";\nimport { checkHttpStatus } from \"../../utils\";\nimport { CREATE_CUSTOMER, LOGIN_FAIL, READ_CUSTOMER } from '../actions/types';\nimport { returnErrors } from \"./errorActions\";\nlet currUserCredentials = null;\nexport const createCustomer = (customer, userCredentials) => async dispatch => {\n  currUserCredentials = userCredentials; // Headers\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  console.log(\"intiator and client\", currUserCredentials);\n  let isCreate = false;\n  const createCustomer = {\n    id_initiator: currUserCredentials[\"idInitiator\"],\n    id_client: currUserCredentials[\"idClient\"],\n    id_branch: currUserCredentials[\"idBranch\"],\n    entity_request_method: \"create\",\n    ID_country_code: \"IL\",\n    ID_number: customer.identityNumber,\n    ID_type_id: customer.idTypeId,\n    status_id: customer.classId,\n    class_id: 1,\n    entity_type_id: \"customer\",\n    entity_sub_type_id: customer.entitySubTypeId,\n    first_name: customer.firstName,\n    last_name: customer.lastName,\n    entity_name: customer.lastName + \" \" + customer.firstName,\n    first_name_en: \"Amit\",\n    last_name_en: \"Keresanty\",\n    entity_name_en: \"Amit Keresanty\",\n    date_birth: new Date(customer.dateBirth + \"Z\"),\n    gender_id: customer.gender,\n    id_identifier: 1,\n    is_identified: true,\n    is_loaded_documentation: false,\n    is_locked: customer.isLocked,\n    note: customer.note,\n    permission_group_id: 1,\n    return_entity: true,\n    user_language: \"HE\",\n    user_time_zone: \"Israel Standard Time\"\n  };\n  const body = JSON.stringify(createCustomer);\n  console.log(\"body has json\", body);\n  let res = await axios.post(basicUrl + '/uspEntity', body, config).then(checkHttpStatus).then(res => {\n    try {\n      if (res.status == 200) {\n        console.log(\"THE DATA recive is cool\", res.data);\n        dispatch({\n          type: CREATE_CUSTOMER,\n          value: res.data\n        });\n        CreateAddress(customer);\n        CreatePhone(customer);\n        let isCreate = CreateEmail(customer);\n        return isCreate;\n      }\n\n      console.log(\"res sucsees\", res);\n    } catch (e) {\n      console.log(\"errordata\", res, e);\n    }\n  }).catch(err => {\n    console.log(\"dataerror\", err);\n    err.response ? returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL') : returnErrors('the server is down pls try later', 'LOGIN_FAIL');\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    console.warn('error in login component', err);\n    alert(\"login failed\");\n  });\n  return true;\n};\n\nconst CreateAddress = async customer => {\n  const address = {\n    //@ts-ignore\n    id_initiator: currUserCredentials.idInitiator,\n    //@ts-ignore\n    id_client: currUserCredentials.idClient,\n    id_entity: 3,\n    return_entity: true,\n    attribute_request_method: \"create\",\n    entity_request_method: \"create\",\n    attribute: \"address\",\n    address_type_id: 2,\n    address_name: customer.address,\n    address_number: customer.addressNumber,\n    address_city: customer.addressCity,\n    address_country_code: \"IL\",\n    address_zip_code: \"98765\",\n    is_deleted: 0,\n    is_default: 1\n  };\n  const body = JSON.stringify(address);\n  console.log(\"create address\", body);\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  let res = await axios.post(basicUrl + '/uspEntity', body, config);\n  console.log(\"address\" + res);\n};\n\n_c = CreateAddress;\n\nconst CreatePhone = async customer => {\n  const phone = {\n    \"id_initiator\": 1,\n    \"id_client\": 2,\n    \"id_entity\": 3,\n    \"return_entity\": true,\n    \"attribute_request_method\": \"create\",\n    \"attribute\": \"telephone\",\n    \"entity_type_id\": \"customer\",\n    \"telephone_number\": customer.telephone,\n    \"telephone_country_code\": \"IL\",\n    \"telephone_type_id\": \"972\",\n    \"is_deleted\": 0,\n    \"is_default\": 1\n  };\n  const body = JSON.stringify(phone);\n  console.log(\"create phone\", body);\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  let res = await axios.post(basicUrl + '/uspEntity', body, config);\n  console.log(\"phone\" + res);\n};\n\n_c2 = CreatePhone;\n\nconst CreateEmail = async customer => {\n  const email = {\n    \"id_initiator\": 1,\n    \"id_client\": 2,\n    \"id_entity\": 3,\n    \"return_entity\": true,\n    \"attribute_request_method\": \"create\",\n    \"attribute\": \"email\",\n    \"entity_type_id\": \"customer\",\n    \"email_type_id\": 1,\n    \"email_address\": customer.email,\n    \"is_deleted\": 0,\n    \"is_default\": 1\n  };\n  const body = JSON.stringify(email);\n  console.log(\"create email \", email);\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  let res = await axios.post(basicUrl + '/uspEntity', body, config);\n\n  try {\n    if (res.status === 200) {\n      if (res.data[\"err_code\"] === 0) {\n        return true;\n      }\n    }\n  } catch (err) {\n    console.log(res.status);\n    console.warn('error in login component', err);\n    alert(\"login failed\");\n    throw \"the Customer dont created  \";\n  }\n\n  return false;\n};\n\n_c3 = CreateEmail;\nexport const readCustomerId = (idEntity, userCredentials) => async dispatch => {\n  //@ts-ignore\n  console.log(\"listIdEntity[0].value\", userCredentials);\n  const updateCustomer = {\n    \"entity_request_method\": \"read\",\n    \"id_initiator\": 1,\n    \"id_client\": 3,\n    \"id_entity\": idEntity\n  };\n  const body = JSON.stringify(updateCustomer);\n  console.log(\"create updateCustomer \", updateCustomer);\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  axios.post(basicUrl + '/uspEntity', body, config).then(res => {\n    try {\n      if (res.status === 200) {\n        if (res.data[\"err_code\"] === 0) {\n          dispatch({\n            type: READ_CUSTOMER,\n            value: res.data\n          });\n        }\n      }\n    } catch (err) {\n      console.log(res.status);\n      console.warn('error in login component', err);\n      throw \"the Customer dont created  \";\n    }\n  }).catch(err => {\n    dispatch(err.response ? returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL') : returnErrors('the server is down pls try later', 'LOGIN_FAIL'));\n  });\n};\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CreateAddress\");\n$RefreshReg$(_c2, \"CreatePhone\");\n$RefreshReg$(_c3, \"CreateEmail\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/client-management/src/store/actions/customerActioin.ts"],"names":["axios","basicUrl","checkHttpStatus","CREATE_CUSTOMER","LOGIN_FAIL","READ_CUSTOMER","returnErrors","currUserCredentials","createCustomer","customer","userCredentials","dispatch","config","headers","console","log","isCreate","id_initiator","id_client","id_branch","entity_request_method","ID_country_code","ID_number","identityNumber","ID_type_id","idTypeId","status_id","classId","class_id","entity_type_id","entity_sub_type_id","entitySubTypeId","first_name","firstName","last_name","lastName","entity_name","first_name_en","last_name_en","entity_name_en","date_birth","Date","dateBirth","gender_id","gender","id_identifier","is_identified","is_loaded_documentation","is_locked","isLocked","note","permission_group_id","return_entity","user_language","user_time_zone","body","JSON","stringify","res","post","then","status","data","type","value","CreateAddress","CreatePhone","CreateEmail","e","catch","err","response","warn","alert","address","idInitiator","idClient","id_entity","attribute_request_method","attribute","address_type_id","address_name","address_number","addressNumber","address_city","addressCity","address_country_code","address_zip_code","is_deleted","is_default","phone","telephone","email","readCustomerId","idEntity","updateCustomer"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { Dispatch } from \"react\";\r\nimport { ICustomer, IUserCredentials } from \"../../components/customerDetails/CustomerDetails\";\r\nimport { basicUrl } from \"../../shared/config\";\r\nimport { checkHttpStatus } from \"../../utils\";\r\nimport { CREATE_CUSTOMER, LOGIN_FAIL, READ_CUSTOMER } from '../actions/types';\r\nimport { returnErrors } from \"./errorActions\";\r\n\r\nlet currUserCredentials: IUserCredentials|null=null\r\nexport const createCustomer = (customer: ICustomer, userCredentials:IUserCredentials) => async (dispatch: any,) => {\r\n   currUserCredentials = userCredentials\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n  console.log(\"intiator and client\", currUserCredentials)\r\n\r\n  let isCreate = false;\r\n  const createCustomer = {\r\n    id_initiator: currUserCredentials[\"idInitiator\"],\r\n\r\n    id_client: currUserCredentials[\"idClient\"],\r\n\r\n    id_branch: currUserCredentials[\"idBranch\"],\r\n\r\n    entity_request_method: \"create\",\r\n\r\n    ID_country_code: \"IL\",\r\n\r\n    ID_number: customer.identityNumber,\r\n\r\n    ID_type_id: customer.idTypeId,\r\n\r\n    status_id: customer.classId,\r\n\r\n    class_id: 1,\r\n\r\n    entity_type_id: \"customer\",\r\n\r\n    entity_sub_type_id: customer.entitySubTypeId,\r\n\r\n    first_name: customer.firstName,\r\n\r\n    last_name: customer.lastName,\r\n\r\n    entity_name: (customer.lastName + \" \" + customer.firstName),\r\n\r\n    first_name_en: \"Amit\",\r\n\r\n    last_name_en: \"Keresanty\",\r\n\r\n    entity_name_en: \"Amit Keresanty\",\r\n\r\n    date_birth: new Date(customer.dateBirth + \"Z\"),\r\n\r\n    gender_id: customer.gender,\r\n\r\n    id_identifier: 1,\r\n\r\n    is_identified: true,\r\n\r\n    is_loaded_documentation: false,\r\n\r\n    is_locked: customer.isLocked,\r\n\r\n    note: customer.note,\r\n\r\n    permission_group_id: 1,\r\n\r\n    return_entity: true,\r\n\r\n    user_language: \"HE\",\r\n\r\n    user_time_zone: \"Israel Standard Time\"\r\n\r\n  }\r\n  const body = JSON.stringify(createCustomer);\r\n  console.log(\"body has json\", body)\r\n\r\n  let res = await axios.post(basicUrl + '/uspEntity', body, config)\r\n    .then(checkHttpStatus)\r\n    .then((res) => {\r\n      try {\r\n        if (res.status == 200) {\r\n          console.log(\"THE DATA recive is cool\", res.data)\r\n          dispatch({\r\n            type: CREATE_CUSTOMER,\r\n            value: res.data\r\n          })\r\n          CreateAddress(customer);\r\n          CreatePhone(customer);\r\n          let isCreate = CreateEmail(customer)\r\n          return isCreate;\r\n        }\r\n\r\n        console.log(\"res sucsees\", res)\r\n      }\r\n      catch (e) {\r\n        console.log(\"errordata\", res, e)\r\n      }\r\n    })\r\n    .catch(err => {\r\n      console.log(\"dataerror\", err)\r\n      err.response ? returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL') : returnErrors('the server is down pls try later', 'LOGIN_FAIL')\r\n      dispatch({\r\n        type: LOGIN_FAIL\r\n      })\r\n      console.warn('error in login component', err)\r\n      alert(\"login failed\")\r\n    })\r\n  return true;\r\n}\r\n\r\nconst CreateAddress = async (customer: ICustomer) => {\r\n  const address = {\r\n    //@ts-ignore\r\n    id_initiator: currUserCredentials.idInitiator,\r\n//@ts-ignore\r\n    id_client: currUserCredentials.idClient,\r\n\r\n    id_entity: 3,\r\n\r\n    return_entity: true,\r\n\r\n    attribute_request_method: \"create\",\r\n\r\n    entity_request_method: \"create\",\r\n\r\n    attribute: \"address\",\r\n\r\n    address_type_id: 2,\r\n\r\n    address_name: customer.address,\r\n\r\n    address_number: customer.addressNumber,\r\n\r\n    address_city: customer.addressCity,\r\n\r\n    address_country_code: \"IL\",\r\n\r\n    address_zip_code: \"98765\",\r\n\r\n    is_deleted: 0,\r\n\r\n    is_default: 1\r\n\r\n  }\r\n\r\n  const body = JSON.stringify(address);\r\n  console.log(\"create address\", body)\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  let res = await axios.post(basicUrl + '/uspEntity', body, config)\r\n\r\n  console.log(\"address\" + res)\r\n\r\n}\r\n\r\nconst CreatePhone = async (customer: ICustomer) => {\r\n\r\n\r\n  const phone = {\r\n    \"id_initiator\": 1,\r\n\r\n    \"id_client\": 2,\r\n\r\n    \"id_entity\": 3,\r\n\r\n    \"return_entity\": true,\r\n\r\n    \"attribute_request_method\": \"create\",\r\n\r\n    \"attribute\": \"telephone\",\r\n\r\n    \"entity_type_id\": \"customer\",\r\n\r\n    \"telephone_number\": customer.telephone,\r\n\r\n    \"telephone_country_code\": \"IL\",\r\n\r\n    \"telephone_type_id\": \"972\",\r\n\r\n    \"is_deleted\": 0,\r\n\r\n    \"is_default\": 1\r\n  }\r\n  const body = JSON.stringify(phone);\r\n  console.log(\"create phone\", body)\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  let res = await axios.post(basicUrl + '/uspEntity', body, config)\r\n\r\n  console.log(\"phone\" + res)\r\n\r\n}\r\n\r\nconst CreateEmail = async (customer: ICustomer) => {\r\n  const email = {\r\n    \"id_initiator\": 1,\r\n\r\n    \"id_client\": 2,\r\n\r\n    \"id_entity\": 3,\r\n\r\n    \"return_entity\": true,\r\n\r\n    \"attribute_request_method\": \"create\",\r\n\r\n    \"attribute\": \"email\",\r\n\r\n    \"entity_type_id\": \"customer\",\r\n\r\n    \"email_type_id\": 1,\r\n\r\n    \"email_address\": customer.email,\r\n\r\n    \"is_deleted\": 0,\r\n\r\n    \"is_default\": 1\r\n\r\n  }\r\n  const body = JSON.stringify(email);\r\n  console.log(\"create email \", email)\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  let res = await axios.post(basicUrl + '/uspEntity', body, config)\r\n  try {\r\n    if (res.status === 200) {\r\n      if (res.data[\"err_code\"] === 0) {\r\n        return true\r\n\r\n      }\r\n    }\r\n  }\r\n  catch (err) {\r\n    console.log(res.status)\r\n    console.warn('error in login component', err)\r\n    alert(\"login failed\")\r\n    throw (\"the Customer dont created  \")\r\n  }\r\n  return false;\r\n}\r\n\r\n\r\nexport const readCustomerId = (idEntity:string,userCredentials:any) => async (dispatch: Function) => {\r\n  \r\n  //@ts-ignore\r\n  console.log(\"listIdEntity[0].value\",userCredentials)\r\n  const updateCustomer = {\r\n    \"entity_request_method\": \"read\",\r\n    \"id_initiator\":1,\r\n    \"id_client\": 3,\r\n    \"id_entity\": idEntity\r\n  }\r\n  const body = JSON.stringify(updateCustomer);\r\n  console.log(\"create updateCustomer \", updateCustomer)\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  axios.post(basicUrl + '/uspEntity', body, config)\r\n    .then(res => {\r\n      try {\r\n        if (res.status === 200) {\r\n          if (res.data[\"err_code\"] === 0) {\r\n            dispatch({\r\n              type: READ_CUSTOMER,\r\n              value: res.data\r\n            })\r\n\r\n          }\r\n        }\r\n      }\r\n      catch (err) {\r\n        console.log(res.status)\r\n        console.warn('error in login component', err)\r\n        throw (\"the Customer dont created  \")\r\n      }\r\n    })\r\n  .catch(err => {\r\n        dispatch(\r\n          err.response ? returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL') : returnErrors('the server is down pls try later', 'LOGIN_FAIL')\r\n        );\r\n      })\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}