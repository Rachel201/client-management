{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\client-management\\\\src\\\\shared\\\\components\\\\dialog\\\\Dialog.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useBoolean } from '@fluentui/react-hooks';\nimport { PrimaryButton, Dialog, DialogFooter, DefaultButton } from 'office-ui-fabric-react';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { CustomDropdown } from '../Option';\nimport { CustomTextField } from '../TextField';\nimport { CustomToggle } from '../Toggle';\nimport \"./dialog.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass UpdateAddress {\n  constructor(typeAddress = -1, country = \"\", streetAndNumber = '', city = '', postalCode = '', addressDefault = false) {\n    this.TypeAddress = void 0;\n    this.Country = void 0;\n    this.StreetAndNumber = void 0;\n    this.PostalCode = void 0;\n    this.City = void 0;\n    this.AddressDefault = void 0;\n    this.TypeAddress = typeAddress;\n    this.Country = country;\n    this.StreetAndNumber = streetAndNumber;\n    this.PostalCode = postalCode;\n    this.City = city;\n    this.AddressDefault = addressDefault;\n  }\n\n}\n\nclass UpdateEmail {\n  constructor(typeAddressEmail = '', emailAddress = \"\", emailDefault = false) {\n    this.TypeAddressEmail = void 0;\n    this.EmailAddress = void 0;\n    this.EmailDefault = void 0;\n    this.TypeAddressEmail = typeAddressEmail;\n    this.EmailAddress = emailAddress;\n    this.EmailDefault = emailDefault;\n  }\n\n}\n\nclass UpdatePhone {\n  constructor(typePhone = -1, phoneDefault = false, phone = '', areaCodeCountry = 0) {\n    this.TypePhone = void 0;\n    this.Phone = void 0;\n    this.PhoneDefault = void 0;\n    this.AreaCodeCountry = void 0;\n    this.TypePhone = typePhone;\n    this.PhoneDefault = phoneDefault;\n    this.Phone = phone;\n    this.AreaCodeCountry = areaCodeCountry;\n  }\n\n}\n\nexport const CustemDialogAddress = props => {\n  _s();\n\n  const {\n    textButton\n  } = props;\n  const [t, i18n] = useTranslation();\n  const [hideDialog, {\n    toggle: toggleHideDialog\n  }] = useBoolean(true);\n  const genderArray = [{\n    key: 1,\n    text: t('male')\n  }, {\n    key: 2,\n    text: t('female')\n  }, {\n    key: 3,\n    text: t('other')\n  }];\n  const dialogContentProps = {\n    title: t('updateAddress')\n  };\n  const [address, setAddress] = useState(new UpdateAddress());\n\n  const updateUser = (key, value) => {\n    let newCus = { ...address\n    };\n    newCus[key] = value;\n    setAddress(newCus);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PrimaryButton, {\n      text: textButton,\n      onClick: toggleHideDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      hidden: hideDialog,\n      onDismiss: toggleHideDialog,\n      dialogContentProps: dialogContentProps,\n      children: /*#__PURE__*/_jsxDEV(DialogFooter, {\n        children: [/*#__PURE__*/_jsxDEV(CustomDropdown, {\n          otherInputId: '',\n          hasOtherValue: false,\n          options: genderArray,\n          label: t('typeAddress'),\n          onChange: updateUser,\n          selectedKey: address.TypeAddress,\n          id: 'TypeAddress',\n          othertextInput: t('')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomTextField, {\n          label: t(\"streetAndNumber\"),\n          onChange: updateUser,\n          id: 'StreetAndNumber'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomTextField, {\n          label: t(\"city\"),\n          onChange: updateUser,\n          id: 'City'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomTextField, {\n          label: t(\"postalCode\"),\n          onChange: updateUser,\n          id: 'PostalCode'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomDropdown, {\n          otherInputId: '',\n          hasOtherValue: false,\n          options: genderArray,\n          label: t('country'),\n          onChange: updateUser,\n          selectedKey: address.Country,\n          id: 'Country',\n          othertextInput: t('')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomToggle, {\n          offText: t('addressDefault'),\n          onText: t('addressDefault'),\n          onChange: updateUser,\n          id: 'AddressDefault',\n          defaultChecked: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(PrimaryButton, {\n          onClick: toggleHideDialog,\n          text: t(\"update\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(DefaultButton, {\n          onClick: toggleHideDialog,\n          text: t(\"Cancel\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true);\n}; ///add phone number\n\n_s(CustemDialogAddress, \"JBTO7VklrNBKdlcw6dTh8s5ZUQQ=\", false, function () {\n  return [useTranslation, useBoolean];\n});\n\n_c = CustemDialogAddress;\nexport const CustemDialogPhone = props => {\n  _s2();\n\n  const {\n    textButton\n  } = props;\n  const [t, i18n] = useTranslation();\n  const [hideDialog, {\n    toggle: toggleHideDialog\n  }] = useBoolean(true);\n  const genderArray = [{\n    key: 1,\n    text: t('male')\n  }, {\n    key: 2,\n    text: t('female')\n  }, {\n    key: 3,\n    text: t('other')\n  }];\n  const dialogContentProps = {\n    title: t('updateAddress')\n  };\n  const [phone, setPhone] = useState(new UpdatePhone());\n\n  const updateUser = (key, value) => {\n    let newCus = { ...phone\n    };\n    newCus[key] = value;\n    setPhone(newCus);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PrimaryButton, {\n      text: textButton,\n      onClick: toggleHideDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      hidden: hideDialog,\n      onDismiss: toggleHideDialog,\n      dialogContentProps: dialogContentProps,\n      children: /*#__PURE__*/_jsxDEV(DialogFooter, {\n        children: [/*#__PURE__*/_jsxDEV(CustomDropdown, {\n          otherInputId: '',\n          hasOtherValue: false,\n          options: genderArray,\n          label: t('TypePhone'),\n          onChange: updateUser,\n          selectedKey: phone.TypePhone,\n          id: 'TypePhone',\n          othertextInput: t('')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CustomTextField, {\n          label: t(\"phone\"),\n          onChange: updateUser,\n          id: 'Phone'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CustomDropdown, {\n          otherInputId: '',\n          hasOtherValue: false,\n          options: genderArray,\n          label: t('AreaCodeCountry'),\n          onChange: updateUser,\n          selectedKey: phone.AreaCodeCountry,\n          id: 'AreaCodeCountry',\n          othertextInput: t('')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CustomToggle, {\n          offText: t('PhoneDefault'),\n          onText: t('PhoneDefault'),\n          onChange: updateUser,\n          id: 'AddressDefault',\n          defaultChecked: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PrimaryButton, {\n          onClick: toggleHideDialog,\n          text: t(\"update\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(DefaultButton, {\n          onClick: toggleHideDialog,\n          text: t(\"Cancel\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n};\n\n_s2(CustemDialogPhone, \"TywTY2L35Kd/ktO/dByjyZqLG3A=\", false, function () {\n  return [useTranslation, useBoolean];\n});\n\n_c2 = CustemDialogPhone;\nexport const CustemDialogEmail = props => {\n  _s3();\n\n  const {\n    textButton\n  } = props;\n  const [t, i18n] = useTranslation();\n  const [hideDialog, {\n    toggle: toggleHideDialog\n  }] = useBoolean(true);\n  const genderArray = [{\n    key: 1,\n    text: t('male')\n  }, {\n    key: 2,\n    text: t('female')\n  }, {\n    key: 3,\n    text: t('other')\n  }];\n  const dialogContentProps = {\n    title: t('updateEmail')\n  };\n  const [email, setEmail] = useState(new UpdateEmail());\n\n  const updateUser = (key, value) => {\n    let newCus = { ...email\n    };\n    newCus[key] = value;\n    setEmail(newCus);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PrimaryButton, {\n      text: textButton,\n      onClick: toggleHideDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      hidden: hideDialog,\n      onDismiss: toggleHideDialog,\n      dialogContentProps: dialogContentProps,\n      children: /*#__PURE__*/_jsxDEV(DialogFooter, {\n        children: [/*#__PURE__*/_jsxDEV(CustomDropdown, {\n          otherInputId: '',\n          hasOtherValue: false,\n          options: genderArray,\n          label: t('TypeEmail'),\n          onChange: updateUser,\n          selectedKey: email.TypeAddressEmail,\n          id: 'TypeAddressEmail',\n          othertextInput: t('')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CustomTextField, {\n          label: t(\"mailAddress\"),\n          onChange: updateUser,\n          id: 'EmailAddress'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CustomToggle, {\n          offText: t('mailDefault'),\n          onText: t('mailDefault'),\n          onChange: updateUser,\n          id: 'EmailDefault',\n          defaultChecked: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PrimaryButton, {\n          onClick: toggleHideDialog,\n          text: t(\"update\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(DefaultButton, {\n          onClick: toggleHideDialog,\n          text: t(\"cancel\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n};\n\n_s3(CustemDialogEmail, \"gUXYI0p75H0vpYBs6zxTmY+koBQ=\", false, function () {\n  return [useTranslation, useBoolean];\n});\n\n_c3 = CustemDialogEmail;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CustemDialogAddress\");\n$RefreshReg$(_c2, \"CustemDialogPhone\");\n$RefreshReg$(_c3, \"CustemDialogEmail\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/client-management/src/shared/components/dialog/Dialog.tsx"],"names":["useBoolean","PrimaryButton","Dialog","DialogFooter","DefaultButton","useState","useTranslation","CustomDropdown","CustomTextField","CustomToggle","UpdateAddress","constructor","typeAddress","country","streetAndNumber","city","postalCode","addressDefault","TypeAddress","Country","StreetAndNumber","PostalCode","City","AddressDefault","UpdateEmail","typeAddressEmail","emailAddress","emailDefault","TypeAddressEmail","EmailAddress","EmailDefault","UpdatePhone","typePhone","phoneDefault","phone","areaCodeCountry","TypePhone","Phone","PhoneDefault","AreaCodeCountry","CustemDialogAddress","props","textButton","t","i18n","hideDialog","toggle","toggleHideDialog","genderArray","key","text","dialogContentProps","title","address","setAddress","updateUser","value","newCus","CustemDialogPhone","setPhone","CustemDialogEmail","email","setEmail"],"mappings":"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","sourcesContent":["import { useBoolean } from '@fluentui/react-hooks';\r\nimport { PrimaryButton, Dialog, DialogFooter, TextField, DefaultButton } from 'office-ui-fabric-react';\r\nimport react, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { CustomDropdown } from '../Option';\r\nimport { CustomTextField } from '../TextField';\r\nimport { CustomToggle } from '../Toggle';\r\nimport \"./dialog.scss\";\r\n\r\ninterface Iprop{\r\n    textButton:string\r\n}\r\n\r\n\r\nclass UpdateAddress\r\n{\r\n  TypeAddress:Number;\r\n  Country:string;\r\n  StreetAndNumber:string;\r\n  PostalCode:string;\r\n  City:String;\r\n  AddressDefault:boolean\r\n  constructor(typeAddress:Number = -1, country:string=\"\", streetAndNumber = '', city = '',postalCode ='', addressDefault=false)\r\n  {\r\n    this.TypeAddress=typeAddress;\r\n    this.Country=country;\r\n    this.StreetAndNumber=streetAndNumber;\r\n    this.PostalCode=postalCode;\r\n    this.City=city;\r\n    this.AddressDefault=addressDefault\r\n  }\r\n}\r\n\r\nclass UpdateEmail{\r\n  TypeAddressEmail:string;\r\n  EmailAddress:string\r\n  EmailDefault:boolean\r\n  constructor(typeAddressEmail:string='', emailAddress=\"\",emailDefault=false ){\r\n    this.TypeAddressEmail=typeAddressEmail;\r\n    this.EmailAddress=emailAddress;\r\n    this.EmailDefault=emailDefault;\r\n  }\r\n}\r\n\r\nclass UpdatePhone\r\n{\r\n  TypePhone:Number;\r\n  Phone:String\r\n  PhoneDefault:boolean\r\n  AreaCodeCountry:Number\r\n  constructor(typePhone:Number = -1, phoneDefault=false, phone:string='', areaCodeCountry=0)\r\n  {\r\n    this.TypePhone=typePhone;\r\n    this.PhoneDefault=phoneDefault;\r\n    this.Phone=phone;\r\n    this.AreaCodeCountry = areaCodeCountry;\r\n  }\r\n}\r\nexport const CustemDialogAddress = (props:Iprop) => {\r\n\r\n    const{textButton} = props\r\n    const [t, i18n] = useTranslation();\r\n    const [hideDialog, { toggle: toggleHideDialog }] = useBoolean(true);\r\n\r\n    const genderArray = [{ key: 1, text: t('male') }, { key: 2, text: t('female') }, { key: 3, text: t('other') }];\r\n\r\n\r\n    const dialogContentProps = {\r\n      title: t('updateAddress'),\r\n    };\r\n   \r\n\r\n    const [address,setAddress] = useState(new UpdateAddress());\r\n\r\n    const updateUser = (key: string, value: any) => {\r\n      let newCus = { ...address};\r\n      (newCus as any)[key] = value;\r\n      setAddress(newCus);\r\n    }\r\n  \r\n\r\n    return(\r\n        <>\r\n        <PrimaryButton  text={textButton} onClick={toggleHideDialog} />\r\n       <Dialog hidden={hideDialog} onDismiss={toggleHideDialog} dialogContentProps={dialogContentProps}>\r\n        <DialogFooter >\r\n          <CustomDropdown otherInputId={''} hasOtherValue={false} options={genderArray} label={t('typeAddress')} onChange={updateUser} selectedKey={address.TypeAddress} id={'TypeAddress'} othertextInput={t('')} />\r\n          <CustomTextField  label={t(\"streetAndNumber\")} onChange={updateUser} id={'StreetAndNumber'}/>\r\n          <CustomTextField  label={t(\"city\")} onChange={updateUser} id={'City'}/>\r\n          <CustomTextField  label={t(\"postalCode\")} onChange={updateUser} id={'PostalCode'}/>\r\n          <CustomDropdown otherInputId={''} hasOtherValue={false} options={genderArray} label={t('country')} onChange={updateUser} selectedKey={address.Country} id={'Country'} othertextInput={t('')} />\r\n            <CustomToggle offText={t('addressDefault')} onText={t('addressDefault')} onChange={updateUser} id={'AddressDefault'} defaultChecked={false} />\r\n           <PrimaryButton onClick={toggleHideDialog} text={t(\"update\")} />\r\n           <DefaultButton onClick={toggleHideDialog} text={t(\"Cancel\")} />\r\n         </DialogFooter>\r\n       </Dialog>\r\n      \r\n      </>\r\n    )\r\n\r\n}\r\n\r\n\r\n///add phone number\r\n\r\nexport const CustemDialogPhone = (props:Iprop) => {\r\n\r\n  const{textButton} = props\r\n  const [t, i18n] = useTranslation();\r\n  const [hideDialog, { toggle: toggleHideDialog }] = useBoolean(true);\r\n\r\n  const genderArray = [{ key: 1, text: t('male') }, { key: 2, text: t('female') }, { key: 3, text: t('other') }];\r\n  const dialogContentProps = {\r\n    title: t('updateAddress'),\r\n  };\r\n \r\n  const [phone,setPhone] = useState(new UpdatePhone());\r\n  const updateUser = (key: string, value: any) => {\r\n    let newCus = { ...phone};\r\n    (newCus as any)[key] = value;\r\n    setPhone(newCus);\r\n  }\r\n  return(\r\n      <>\r\n      <PrimaryButton  text={textButton} onClick={toggleHideDialog} />\r\n     <Dialog hidden={hideDialog} onDismiss={toggleHideDialog} dialogContentProps={dialogContentProps}>\r\n      <DialogFooter >\r\n        <CustomDropdown otherInputId={''} hasOtherValue={false} options={genderArray} label={t('TypePhone')} onChange={updateUser} selectedKey={phone.TypePhone} id={'TypePhone'} othertextInput={t('')} />\r\n        <CustomTextField  label={t(\"phone\")} onChange={updateUser} id={'Phone'}/>\r\n        <CustomDropdown otherInputId={''} hasOtherValue={false} options={genderArray} label={t('AreaCodeCountry')} onChange={updateUser} selectedKey={phone.AreaCodeCountry} id={'AreaCodeCountry'} othertextInput={t('')} />\r\n          <CustomToggle offText={t('PhoneDefault')} onText={t('PhoneDefault')} onChange={updateUser} id={'AddressDefault'} defaultChecked={false} />\r\n         <PrimaryButton onClick={toggleHideDialog} text={t(\"update\")} />\r\n         <DefaultButton onClick={toggleHideDialog} text={t(\"Cancel\")} />\r\n       </DialogFooter>\r\n     </Dialog>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport const CustemDialogEmail = (props:Iprop) => {\r\n\r\n  const{textButton} = props\r\n  const [t, i18n] = useTranslation();\r\n  const [hideDialog, { toggle: toggleHideDialog }] = useBoolean(true);\r\n\r\n  const genderArray = [{ key: 1, text: t('male') }, { key: 2, text: t('female') }, { key: 3, text: t('other') }];\r\n  const dialogContentProps = {\r\n    title: t('updateEmail'),\r\n  };\r\n \r\n  const [email,setEmail] = useState(new UpdateEmail());\r\n  const updateUser = (key: string, value: any) => {\r\n    let newCus = { ...email};\r\n    (newCus as any)[key] = value;\r\n    setEmail(newCus);\r\n  }\r\n  return(\r\n      <>\r\n      <PrimaryButton  text={textButton} onClick={toggleHideDialog} />\r\n     <Dialog hidden={hideDialog} onDismiss={toggleHideDialog} dialogContentProps={dialogContentProps}>\r\n      <DialogFooter >\r\n        <CustomDropdown otherInputId={''} hasOtherValue={false} options={genderArray} label={t('TypeEmail')} onChange={updateUser} selectedKey={email.TypeAddressEmail} id={'TypeAddressEmail'} othertextInput={t('')} />\r\n        <CustomTextField  label={t(\"mailAddress\")} onChange={updateUser} id={'EmailAddress'}/>\r\n          <CustomToggle offText={t('mailDefault')} onText={t('mailDefault')} onChange={updateUser} id={'EmailDefault'} defaultChecked={false} />\r\n         <PrimaryButton onClick={toggleHideDialog} text={t(\"update\")} />\r\n         <DefaultButton onClick={toggleHideDialog} text={t(\"cancel\")} />\r\n       </DialogFooter>\r\n     </Dialog>\r\n    </>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}