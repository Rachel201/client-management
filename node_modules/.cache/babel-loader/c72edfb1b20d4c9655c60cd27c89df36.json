{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\client-management\\\\src\\\\shared\\\\components\\\\TextField.tsx\",\n    _s = $RefreshSig$();\n\nimport { TextField } from '@fluentui/react';\nimport React from 'react';\nimport { useBoolean } from '@fluentui/react-hooks';\nimport \"../../scssPages/form.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CustomTextField = props => {\n  // const [muted, { toggle: setMuted }] = useBoolean(false); \n  const {\n    readOnly = false,\n    value = \"\",\n    onChange,\n    label,\n    id,\n    required,\n    iconProps,\n    type,\n    nameOfClassStyle = \"text-field\"\n  } = props; // if(nameOfClassStyle===undefined){\n  //       const nameOfClassStyle=\"text-field\"\n  // }\n\n  return /*#__PURE__*/_jsxDEV(TextField, {\n    required: required ? true : undefined,\n    label: label,\n    onChange: e => {\n      onChange(id, e.target.value);\n    },\n    iconProps: iconProps,\n    className: nameOfClassStyle,\n    type: type,\n    value: value,\n    readOnly: readOnly\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this) // onClick={setMuted}\n  // onChange={(e, selectedOption) => {\n  //     console.log(e + \"\" + selectedOption);\n  //     onChange(id,selectedOption?.key);\n  //   }}\n  // onChange={(e: any) => setLogin_entity_number(e.target.value)}\n  ;\n};\n_c = CustomTextField;\nexport const CustomTextFieldAddInput = props => {\n  _s();\n\n  const [muted, {\n    toggle: setMuted\n  }] = useBoolean(false);\n  const {\n    onChange,\n    label,\n    id,\n    required,\n    iconProps,\n    othertextItnput,\n    otherInputId\n  } = props;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      required: required ? true : undefined,\n      label: label,\n      onChange: e => {\n        onChange(id, e.currentTarget.value);\n      },\n      iconProps: iconProps,\n      onClick: setMuted,\n      className: \"text-field\" // onChange={(e, selectedOption) => {\n      //     console.log(e + \"\" + selectedOption);\n      //     onChange(id,selectedOption?.key);\n      //   }}\n      // onChange={(e: any) => setLogin_entity_number(e.target.value)}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), muted ? /*#__PURE__*/_jsxDEV(CustomTextField, {\n      label: othertextItnput,\n      onChange: onChange,\n      id: otherInputId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 19\n    }, this) : false]\n  }, void 0, true);\n};\n\n_s(CustomTextFieldAddInput, \"Ii3ldniaONwZYAH36O1JQHa95fM=\", false, function () {\n  return [useBoolean];\n});\n\n_c2 = CustomTextFieldAddInput;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CustomTextField\");\n$RefreshReg$(_c2, \"CustomTextFieldAddInput\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/client-management/src/shared/components/TextField.tsx"],"names":["TextField","React","useBoolean","CustomTextField","props","readOnly","value","onChange","label","id","required","iconProps","type","nameOfClassStyle","undefined","e","target","CustomTextFieldAddInput","muted","toggle","setMuted","othertextItnput","otherInputId","currentTarget"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,UAAT,QAA2B,uBAA3B;AACA,OAAO,2BAAP;;;AAmBA,OAAO,MAAMC,eAAiD,GAAIC,KAAD,IAAW;AACxE;AACA,QAAM;AAAEC,IAAAA,QAAQ,GAAC,KAAX;AAAmBC,IAAAA,KAAK,GAAG,EAA3B;AAA+BC,IAAAA,QAA/B;AAAyCC,IAAAA,KAAzC;AAAgDC,IAAAA,EAAhD;AAAmDC,IAAAA,QAAnD;AAA6DC,IAAAA,SAA7D;AAAwEC,IAAAA,IAAxE;AAA8EC,IAAAA,gBAAgB,GAAC;AAA/F,MAA+GT,KAArH,CAFwE,CAGxE;AACA;AACA;;AACA,sBAEI,QAAC,SAAD;AACI,IAAA,QAAQ,EAAEM,QAAQ,GAAC,IAAD,GAAMI,SAD5B;AAEI,IAAA,KAAK,EAAEN,KAFX;AAGI,IAAA,QAAQ,EAAIO,CAAD,IAAY;AAClBR,MAAAA,QAAQ,CAACE,EAAD,EAAKM,CAAC,CAACC,MAAF,CAASV,KAAd,CAAR;AACJ,KALL;AAMI,IAAA,SAAS,EAAEK,SANf;AAOI,IAAA,SAAS,EAAEE,gBAPf;AAQI,IAAA,IAAI,EAAED,IARV;AASI,IAAA,KAAK,EAAEN,KATX;AAUI,IAAA,QAAQ,EAAGD;AAVf;AAAA;AAAA;AAAA;AAAA,UAFJ,CAgBQ;AAET;AACS;AACA;AACA;AAEJ;AAvBJ;AA2BH,CAjCM;KAAMF,e;AAsCb,OAAO,MAAMc,uBAA8D,GAAIb,KAAD,IAAW;AAAA;;AACrF,QAAM,CAACc,KAAD,EAAQ;AAAEC,IAAAA,MAAM,EAAEC;AAAV,GAAR,IAAgClB,UAAU,CAAC,KAAD,CAAhD;AACA,QAAM;AAAEK,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA,EAAnB;AAAsBC,IAAAA,QAAtB;AAAgCC,IAAAA,SAAhC;AAA2CU,IAAAA,eAA3C;AAA2DC,IAAAA;AAA3D,MAA2ElB,KAAjF;AACA,sBACI;AAAA,4BACA,QAAC,SAAD;AACI,MAAA,QAAQ,EAAEM,QAAQ,GAAC,IAAD,GAAMI,SAD5B;AAEI,MAAA,KAAK,EAAEN,KAFX;AAGI,MAAA,QAAQ,EAAIO,CAAD,IAAY;AAClBR,QAAAA,QAAQ,CAACE,EAAD,EAAKM,CAAC,CAACQ,aAAF,CAAgBjB,KAArB,CAAR;AACJ,OALL;AAMI,MAAA,SAAS,EAAEK,SANf;AAOI,MAAA,OAAO,EAAES,QAPb;AAQI,MAAA,SAAS,EAAC,YARd,CAWL;AACS;AACA;AACA;AAEJ;;AAhBA;AAAA;AAAA;AAAA;AAAA,YADA,EAmBCF,KAAK,gBAAI,QAAC,eAAD;AAAiB,MAAA,KAAK,EAAEG,eAAxB;AAAyC,MAAA,QAAQ,EAAEd,QAAnD;AAA6D,MAAA,EAAE,EAAEe;AAAjE;AAAA;AAAA;AAAA;AAAA,YAAJ,GAAwF,KAnB9F;AAAA,kBADJ;AAyBH,CA5BM;;GAAML,uB;UAC6Bf,U;;;MAD7Be,uB","sourcesContent":["import { TextField } from '@fluentui/react';\r\nimport React from 'react';\r\nimport ComponenetProps from '../../modelsType/type/interface';\r\nimport { useBoolean } from '@fluentui/react-hooks';\r\nimport \"../../scssPages/form.scss\"\r\nimport { IIconProps } from '@fluentui/react';\r\n\r\n\r\n\r\ninterface MyProps extends ComponenetProps {\r\n    label?: string,\r\n    required?:boolean,\r\n    iconProps ?: IIconProps\r\n    type?:string,\r\n    nameOfClassStyle?:string\r\n    value?:any\r\n    readOnly?:boolean\r\n\r\n\r\n    // ?:IIconProps\r\n}\r\n\r\n\r\nexport const CustomTextField: React.FunctionComponent<MyProps> = (props) => {\r\n    // const [muted, { toggle: setMuted }] = useBoolean(false); \r\n    const { readOnly=false , value = \"\", onChange, label, id,required, iconProps ,type ,nameOfClassStyle=\"text-field\"} = props;\r\n    // if(nameOfClassStyle===undefined){\r\n    //       const nameOfClassStyle=\"text-field\"\r\n    // }\r\n    return (\r\n        \r\n        <TextField\r\n            required={required?true:undefined}\r\n            label={label}\r\n            onChange ={(e: any) => {\r\n                 onChange(id, e.target.value)\r\n            }}\r\n            iconProps={iconProps}\r\n            className={nameOfClassStyle}\r\n            type={type}\r\n            value={value}\r\n            readOnly ={readOnly}\r\n           \r\n           \r\n        />\r\n            // onClick={setMuted}\r\n      \r\n   // onChange={(e, selectedOption) => {\r\n            //     console.log(e + \"\" + selectedOption);\r\n            //     onChange(id,selectedOption?.key);\r\n            //   }}\r\n           \r\n        // onChange={(e: any) => setLogin_entity_number(e.target.value)}\r\n     \r\n    );\r\n\r\n}\r\ninterface AddInputProp extends MyProps{\r\n    othertextItnput:string\r\n    otherInputId:string\r\n}\r\nexport const CustomTextFieldAddInput: React.FunctionComponent<AddInputProp> = (props) => {\r\n    const [muted, { toggle: setMuted }] = useBoolean(false);\r\n    const { onChange, label, id,required, iconProps ,othertextItnput,otherInputId} = props;\r\n    return (\r\n        <>\r\n        <TextField\r\n            required={required?true:undefined}\r\n            label={label}\r\n            onChange ={(e: any) => {\r\n                 onChange(id, e.currentTarget.value)\r\n            }}\r\n            iconProps={iconProps}\r\n            onClick={setMuted}\r\n            className=\"text-field\"\r\n            \r\n\r\n   // onChange={(e, selectedOption) => {\r\n            //     console.log(e + \"\" + selectedOption);\r\n            //     onChange(id,selectedOption?.key);\r\n            //   }}\r\n           \r\n        // onChange={(e: any) => setLogin_entity_number(e.target.value)}\r\n        />\r\n        {muted  ? <CustomTextField label={othertextItnput} onChange={onChange} id={otherInputId} /> : false}\r\n        </>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}