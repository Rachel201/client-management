{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS } from '../actions/types';\nimport { basicUrl } from '../../shared/config'; //cheack token&load user\n// const api=\n// export const loadUser = () => (dispatch: Function, getState: Function) => {\n//   const entity =\n//   {\n//     \"id_client \": 45654784,\n//     \"enum_type\": \"class\",\n//     \"id_initiator\": 478541,\n//     \"enum_request_method\": \"read\",\n//     \"category\": \"customer\",\n//     \"user_language\": \"HE\"\n//   }\n//   const body = JSON.stringify(entity);\n//   //User loading\n//   dispatch({ type: USERֹֹ_LOADING });\n//   axios.post(basicUrl + \"/uspEnum\", body, tokenConfig(getState))\n//     .then((res) => {\n//       try {\n//         console.log(res.data)\n//         dispatch({\n//           type: USERֹֹ_LOADED,\n//           payload: res.data\n//         })\n//       }\n//       catch (e) {\n//         console.log(res, e)\n//       }\n//     })\n//     .catch(err => {\n//       err.response ? returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL') : returnErrors('the server is down pls try later', 'LOGIN_FAIL')\n//       dispatch({\n//         type: AUTH_ERROR\n//       })\n//     })\n// }\n// Login User\n\nexport const login = loginUser => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const user = {\n    login_request_method: \"login\",\n    login_entity_number: loginUser.LoginEntityNumber,\n    login_ID: loginUser.LoginID,\n    login_password: loginUser.LoginPassword\n  }; // Request body\n\n  const body = JSON.stringify(user);\n  console.log(user);\n  axios.post(basicUrl + '/login', user, config).then(res => {\n    try {\n      console.log(\"USERLOGIN\", user);\n\n      if (res.data == \"dont login\") {\n        console.log(\"dont login\", res.data);\n        dispatch({\n          type: LOGIN_FAIL,\n          isAuthentitcated: false\n        });\n      } else {\n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: res.data\n        });\n      }\n    } catch {\n      dispatch({\n        type: AUTH_ERROR,\n        isAuthentitcated: false\n      });\n    }\n  }).catch(err => {\n    console.log(\"login gui\", err);\n    dispatch(err.response ? returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL') : returnErrors('the server is down pls try later', 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; // Logout User\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT_SUCCESS\n  });\n};\nexport const logout1 = dispatch => {\n  dispatch({\n    type: LOGOUT_SUCCESS\n  });\n}; // Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // Get token from localstorage\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["C:/Users/USER/Desktop/client-management/src/store/actions/authActions.ts"],"names":["axios","returnErrors","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","basicUrl","login","loginUser","dispatch","config","headers","user","login_request_method","login_entity_number","LoginEntityNumber","login_ID","LoginID","login_password","LoginPassword","body","JSON","stringify","console","log","post","then","res","data","type","isAuthentitcated","payload","catch","err","response","status","logout","logout1","tokenConfig","getState","token","auth"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { returnErrors } from './errorActions'\r\nimport {\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT_SUCCESS,\r\n} from '../actions/types'\r\nimport {IConfigHeaders} from '../../modelsType/type/interface';\r\nimport { User } from '../../modelsType/User';\r\nimport { basicUrl } from '../../shared/config';\r\n//cheack token&load user\r\n// const api=\r\n// export const loadUser = () => (dispatch: Function, getState: Function) => {\r\n//   const entity =\r\n//   {\r\n//     \"id_client \": 45654784,\r\n\r\n//     \"enum_type\": \"class\",\r\n\r\n//     \"id_initiator\": 478541,\r\n\r\n//     \"enum_request_method\": \"read\",\r\n\r\n//     \"category\": \"customer\",\r\n\r\n//     \"user_language\": \"HE\"\r\n//   }\r\n//   const body = JSON.stringify(entity);\r\n\r\n//   //User loading\r\n//   dispatch({ type: USERֹֹ_LOADING });\r\n  \r\n//   axios.post(basicUrl + \"/uspEnum\", body, tokenConfig(getState))\r\n//     .then((res) => {\r\n//       try {\r\n//         console.log(res.data)\r\n//         dispatch({\r\n//           type: USERֹֹ_LOADED,\r\n//           payload: res.data\r\n//         })\r\n//       }\r\n//       catch (e) {\r\n//         console.log(res, e)\r\n//       }\r\n//     })\r\n//     .catch(err => {\r\n//       err.response ? returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL') : returnErrors('the server is down pls try later', 'LOGIN_FAIL')\r\n//       dispatch({\r\n//         type: AUTH_ERROR\r\n//       })\r\n//     })\r\n// }\r\n\r\n\r\n\r\n\r\n// Login User\r\nexport const login = (loginUser: User) => (\r\n  dispatch: Function\r\n) => {\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n  const user = {\r\n    login_request_method: \"login\",\r\n    login_entity_number: loginUser.LoginEntityNumber,\r\n    login_ID: loginUser.LoginID,\r\n    login_password: loginUser.LoginPassword\r\n  }\r\n  // Request body\r\n  const body = JSON.stringify(user);\r\n  console.log(user);\r\n\r\n  axios\r\n    .post(basicUrl + '/login',user , config)\r\n    .then(res =>{\r\n      try{\r\n        \r\n        console.log(\"USERLOGIN\",user);\r\n        if(res.data==\"dont login\")\r\n        {\r\n          console.log(\"dont login\",res.data)\r\n          dispatch({\r\n            type:LOGIN_FAIL ,\r\n            isAuthentitcated:false\r\n          })\r\n        }\r\n        else{\r\n          dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: res.data\r\n          })\r\n        }\r\n      }\r\n      catch{\r\n        dispatch({ type:AUTH_ERROR , isAuthentitcated:false});\r\n      }\r\n    })\r\n    .catch(err => {\r\n      console.log(\"login gui\",err)\r\n      dispatch(\r\n        err.response ? returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL') : returnErrors('the server is down pls try later', 'LOGIN_FAIL')\r\n      );\r\n      dispatch({\r\n        type: LOGIN_FAIL\r\n      });\r\n    });\r\n};\r\n\r\n// Logout User\r\nexport const logout = () => (\r\n  dispatch: Function\r\n) => {\r\n  dispatch({\r\n    type: LOGOUT_SUCCESS\r\n  });\r\n};\r\n\r\nexport const logout1 = (dispatch: any) => {\r\n  dispatch({\r\n    type: LOGOUT_SUCCESS\r\n  });\r\n};\r\n\r\n// Setup config/headers and token\r\nexport const tokenConfig = (getState: Function) => {\r\n  // Get token from localstorage\r\n  const token = getState().auth.token;\r\n\r\n  // Headers\r\n  const config: IConfigHeaders = {\r\n    headers: {\r\n      'Content-type': 'application/json'\r\n    }\r\n  };\r\n\r\n  // If token, add to headers\r\n  if (token) {\r\n    config.headers['x-auth-token'] = token;\r\n  }\r\n  return config;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}