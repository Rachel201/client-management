{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\client-management\\\\src\\\\shared\\\\components\\\\Option.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { Dropdown } from '@fluentui/react/lib/Dropdown';\nimport { useState } from 'react';\nimport \"../../scssPages/form.scss\";\nimport { CustomTextField } from './TextField';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// const dropdownStyles = { dropdown: { width: 300 } };\nexport const CustomDropdown = props => {\n  _s();\n\n  const [t, i18n] = useTranslation();\n  const dropdownRef = /*#__PURE__*/React.createRef();\n\n  const onSetFocus = () => dropdownRef.current.focus(true);\n\n  const {\n    readOnly = false,\n    onChange,\n    options,\n    label,\n    selectedKey,\n    id,\n    othertextInput,\n    hasOtherValue,\n    otherInputId\n  } = props;\n  const [selected, setSelected] = useState(\"\");\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Dropdown // componentRef={dropdownRef}\n    , {\n      label: label,\n      selectedKey: selectedKey,\n      onChange: (e, selectedOption) => {\n        console.log(e + \"\" + selectedOption);\n        setSelected(selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.text);\n        onChange(id, selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.key);\n        let getSelectedIndex = options.findIndex(x => x.text == (selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.text));\n        setSelectedIndex(getSelectedIndex);\n      },\n      options: options,\n      required: true,\n      className: \" text-field\",\n      \"aria-readonly\": false // styles={dropdownStyles}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), selectedIndex == options.length - 1 && hasOtherValue ? /*#__PURE__*/_jsxDEV(CustomTextField, {\n      label: othertextInput,\n      onChange: onChange,\n      id: otherInputId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 63\n    }, this) : false]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 7\n  }, this);\n}; // ,onclick:()=>console.log(\"i0i0\")\n\n_s(CustomDropdown, \"Ad9mEy1jLVBtCxgjtLWWsD4nJ6A=\", false, function () {\n  return [useTranslation];\n});\n\n_c = CustomDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomDropdown\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/client-management/src/shared/components/Option.tsx"],"names":["React","Dropdown","useState","CustomTextField","useTranslation","CustomDropdown","props","t","i18n","dropdownRef","createRef","onSetFocus","current","focus","readOnly","onChange","options","label","selectedKey","id","othertextInput","hasOtherValue","otherInputId","selected","setSelected","selectedIndex","setSelectedIndex","e","selectedOption","console","log","text","key","getSelectedIndex","findIndex","x","length"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAoC,8BAApC;AAEA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAO,2BAAP;AACA,SAASC,eAAT,QAAgC,aAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B;;AAeA;AAEA,OAAO,MAAMC,cAAgD,GAAIC,KAAD,IAAW;AAAA;;AACzE,QAAM,CAACC,CAAD,EAAIC,IAAJ,IAAYJ,cAAc,EAAhC;AACA,QAAMK,WAAW,gBAAGT,KAAK,CAACU,SAAN,EAApB;;AACA,QAAMC,UAAU,GAAG,MAAMF,WAAW,CAACG,OAAZ,CAAqBC,KAArB,CAA2B,IAA3B,CAAzB;;AAEA,QAAM;AAACC,IAAAA,QAAQ,GAAC,KAAV;AAAiBC,IAAAA,QAAjB;AAA2BC,IAAAA,OAA3B;AAAoCC,IAAAA,KAApC;AAA2CC,IAAAA,WAA3C;AAAwDC,IAAAA,EAAxD;AAA4DC,IAAAA,cAA5D;AAA2EC,IAAAA,aAA3E;AAAyFC,IAAAA;AAAzF,MAA0GhB,KAAhH;AACA,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CAAqB,EAArB,CAAxC;AACA,QAAM,CAACuB,aAAD,EAAgBC,gBAAhB,IAAoCxB,QAAQ,CAAqB,CAArB,CAAlD;AACA,sBACI;AAAA,4BACE,QAAC,QAAD,CACE;AADF;AAEE,MAAA,KAAK,EAAEe,KAFT;AAGE,MAAA,WAAW,EAAEC,WAHf;AAIE,MAAA,QAAQ,EAAE,CAACS,CAAD,EAAIC,cAAJ,KAAuB;AAC/BC,QAAAA,OAAO,CAACC,GAAR,CAAYH,CAAC,GAAG,EAAJ,GAASC,cAArB;AACAJ,QAAAA,WAAW,CAACI,cAAD,aAACA,cAAD,uBAACA,cAAc,CAAEG,IAAjB,CAAX;AACAhB,QAAAA,QAAQ,CAACI,EAAD,EAAKS,cAAL,aAAKA,cAAL,uBAAKA,cAAc,CAAEI,GAArB,CAAR;AACA,YAAIC,gBAAgB,GAACjB,OAAO,CAACkB,SAAR,CAAmBC,CAAD,IAASA,CAAC,CAACJ,IAAF,KAAQH,cAAR,aAAQA,cAAR,uBAAQA,cAAc,CAAEG,IAAxB,CAA3B,CAArB;AACAL,QAAAA,gBAAgB,CAACO,gBAAD,CAAhB;AACD,OAVH;AAWE,MAAA,OAAO,EAAEjB,OAXX;AAYE,MAAA,QAAQ,MAZV;AAaE,MAAA,SAAS,EAAC,aAbZ;AAcE,uBAAgB,KAdlB,CAeE;;AAfF;AAAA;AAAA;AAAA;AAAA,YADF,EAkBGS,aAAa,IAAIT,OAAO,CAACoB,MAAR,GAAe,CAAhC,IAAqCf,aAArC,gBAAqD,QAAC,eAAD;AAAkB,MAAA,KAAK,EAAED,cAAzB;AAAyC,MAAA,QAAQ,EAAEL,QAAnD;AAA6D,MAAA,EAAE,EAAEO;AAAjE;AAAA;AAAA;AAAA;AAAA,YAArD,GAAyI,KAlB5I;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBD,CA9BM,C,CA+BP;;GA/BajB,c;UACOD,c;;;KADPC,c","sourcesContent":["import * as React from 'react';\r\nimport { Dropdown, IDropdown } from '@fluentui/react/lib/Dropdown';\r\nimport ComponenetProps from '../../modelsType/type/interface'\r\nimport { useState } from 'react';\r\nimport \"../../scssPages/form.scss\"\r\nimport { CustomTextField } from './TextField';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface MyProps extends ComponenetProps {\r\n  options: any;\r\n  label: string\r\n  selectedKey: any\r\n  othertextInput: string,\r\n  hasOtherValue:boolean\r\n  otherInputId:any\r\n  readOnly ?:Boolean\r\n}\r\n\r\n\r\n\r\n\r\n// const dropdownStyles = { dropdown: { width: 300 } };\r\n\r\nexport const CustomDropdown: React.FunctionComponent<MyProps> = (props) => {\r\n  const [t, i18n] = useTranslation();\r\n  const dropdownRef = React.createRef<IDropdown>();\r\n  const onSetFocus = () => dropdownRef.current!.focus(true);\r\n\r\n  const {readOnly=false, onChange, options, label, selectedKey, id, othertextInput,hasOtherValue,otherInputId } = props;\r\n  const [selected, setSelected] = useState<String | undefined>(\"\");\r\n  const [selectedIndex, setSelectedIndex] = useState<number | undefined>(0);\r\n  return (\r\n      <div>\r\n        <Dropdown\r\n          // componentRef={dropdownRef}\r\n          label={label}\r\n          selectedKey={selectedKey}\r\n          onChange={(e, selectedOption) => {\r\n            console.log(e + \"\" + selectedOption);\r\n            setSelected(selectedOption?.text);\r\n            onChange(id, selectedOption?.key);\r\n            let getSelectedIndex=options.findIndex((x:any)=>x.text==selectedOption?.text);\r\n            setSelectedIndex(getSelectedIndex);\r\n          }}\r\n          options={options}\r\n          required\r\n          className=\" text-field\"\r\n          aria-readonly ={false}\r\n          // styles={dropdownStyles}\r\n        ></Dropdown>\r\n        {selectedIndex == options.length-1 && hasOtherValue ? <CustomTextField  label={othertextInput} onChange={onChange} id={otherInputId} /> : false}\r\n      </div>   \r\n  );\r\n};\r\n// ,onclick:()=>console.log(\"i0i0\")\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}