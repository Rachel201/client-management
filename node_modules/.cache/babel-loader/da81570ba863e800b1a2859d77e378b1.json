{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\client-management\\\\src\\\\components\\\\auth\\\\Login.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport './login.scss';\nimport { connect } from 'react-redux';\nimport { TextField } from '@fluentui/react/lib/TextField';\nimport { initializeIcons, PrimaryButton } from '@fluentui/react';\nimport { useTranslation } from 'react-i18next';\nimport { login } from '../../store/actions/authActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import { clearErrors } from '../store/actions/errorActions';\ninitializeIcons();\n\nconst Login = ({\n  isAuthenticated,\n  error,\n  login // clearErrors\n\n}) => {\n  _s();\n\n  class User {\n    constructor(loginEntityNumber = \"\", loginPassword = \"\", loginID = \"\", loginFingerPrint = \"\") {\n      this.LoginEntityNumber = void 0;\n      this.LoginPassword = void 0;\n      this.LoginID = void 0;\n      this.LoginFingerPrint = void 0;\n      this.LoginEntityNumber = loginEntityNumber;\n      this.LoginPassword = loginPassword;\n      this.LoginID = loginID;\n      this.LoginFingerPrint = loginFingerPrint;\n    }\n\n  }\n\n  const [t, i18n] = useTranslation();\n  const [msg, setMsg] = useState(null);\n  const [modal, setModal] = useState(false);\n  const [isClickLogin, setIsClickLogin] = useState(false);\n  const [userLogin, setUserLogin] = useState(new User(''));\n\n  const updateUserLogin = (key, value) => {\n    let newUser = { ...userLogin\n    };\n    newUser[key] = value;\n    setUserLogin(newUser);\n  }; //   const handleToggle = useCallback(() => {\n  //     // Clear errors\n  //     clearErrors();\n  //     setModal(!modal);\n  //   }, [clearErrors, modal]);\n\n\n  function LoginTime(event) {\n    setIsClickLogin(true);\n    login(userLogin);\n    event.preventDefault();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-container-login\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"login\",\n      onSubmit: e => LoginTime(e),\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        id: \"login_entity_number\",\n        className: \"text-field-login\",\n        required: true,\n        placeholder: t(\"login.business\"),\n        onChange: e => {\n          updateUserLogin('LoginEntityNumber', e.currentTarget.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"login_ID\",\n        className: \"text-field-login\",\n        required: true,\n        placeholder: t(\"login.userName\"),\n        onChange: e => {\n          updateUserLogin('LoginID', e.currentTarget.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"login_password\",\n        className: \"text-field-login\",\n        type: \"password\",\n        placeholder: t(\"login.password\"),\n        required: true,\n        canRevealPassword: true,\n        revealPasswordAriaLabel: \"Show password\",\n        onChange: e => {\n          updateUserLogin('LoginPassword', e.currentTarget.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PrimaryButton, {\n        className: \"button\",\n        checked: false,\n        text: t('login.sigin'),\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"mrwTvRzxlNLqjXwUcXC2X/bsvo4=\", false, function () {\n  return [useTranslation];\n});\n\n_c = Login;\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.authReducer.isAuthenticated,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, {\n  login\n})(Login);\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/client-management/src/components/auth/Login.tsx"],"names":["useState","connect","TextField","initializeIcons","PrimaryButton","useTranslation","login","Login","isAuthenticated","error","User","constructor","loginEntityNumber","loginPassword","loginID","loginFingerPrint","LoginEntityNumber","LoginPassword","LoginID","LoginFingerPrint","t","i18n","msg","setMsg","modal","setModal","isClickLogin","setIsClickLogin","userLogin","setUserLogin","updateUserLogin","key","value","newUser","LoginTime","event","preventDefault","e","currentTarget","mapStateToProps","state","authReducer"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport './login.scss';\r\nimport { connect } from 'react-redux';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { initializeIcons, PrimaryButton } from '@fluentui/react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { login } from '../../store/actions/authActions';\r\nimport { IAuthReduxProps, ILoginModal } from '../../modelsType/type/interface';\r\n// import { clearErrors } from '../store/actions/errorActions';\r\n\r\ninitializeIcons();\r\n\r\n\r\nconst Login = ({\r\n    isAuthenticated,\r\n    error,\r\n    login,\r\n    // clearErrors\r\n  }: ILoginModal) => {\r\n    class User{\r\n        LoginEntityNumber:string;\r\n        LoginPassword:string;\r\n        LoginID:string;\r\n        LoginFingerPrint:string;\r\n        constructor( loginEntityNumber = \"\",loginPassword = \"\",loginID=\"\", loginFingerPrint = \"\" ){\r\n            this.LoginEntityNumber=loginEntityNumber;\r\n            this.LoginPassword=loginPassword;\r\n            this.LoginID=loginID;\r\n            this.LoginFingerPrint=loginFingerPrint\r\n        }\r\n    }\r\n    const [t, i18n] = useTranslation();\r\n    const [msg, setMsg] = useState(null);\r\n    const [modal, setModal] = useState(false);\r\n    const [isClickLogin ,setIsClickLogin]=useState(false)\r\n    const [userLogin, setUserLogin] = useState(new User('') );\r\n\r\n    const updateUserLogin = (key: string, value:any ) => {\r\n        let newUser = { ...userLogin};\r\n        (newUser as any)[key] = value;\r\n        setUserLogin(newUser);\r\n      }\r\n    \r\n    //   const handleToggle = useCallback(() => {\r\n    //     // Clear errors\r\n    //     clearErrors();\r\n    //     setModal(!modal);\r\n    //   }, [clearErrors, modal]);\r\n   \r\n\r\n     function LoginTime(event: any) {\r\n        setIsClickLogin(true);\r\n        login(userLogin)\r\n        event.preventDefault();\r\n    }\r\n    return (\r\n        <div className=\"grid-container-login\">\r\n            <form className=\"login\" onSubmit={(e) => LoginTime(e)}>\r\n                <TextField\r\n                    id='login_entity_number'\r\n                    className=\"text-field-login\"\r\n                    required\r\n                    placeholder={t(\"login.business\")} \r\n                    onChange ={(e: any) => {\r\n                        updateUserLogin('LoginEntityNumber', e.currentTarget.value)\r\n                   }}\r\n                   \r\n                   />\r\n                <TextField\r\n                    id='login_ID'\r\n                    className=\"text-field-login\"\r\n                    required\r\n                    placeholder={t(\"login.userName\")}\r\n                    onChange ={(e: any) => {\r\n                        updateUserLogin('LoginID', e.currentTarget.value)\r\n                   }}                   \r\n                />\r\n                <TextField\r\n                    id='login_password'\r\n                    className=\"text-field-login\"\r\n                    type=\"password\"\r\n                    placeholder={t(\"login.password\")}\r\n                    required\r\n                    canRevealPassword\r\n                    revealPasswordAriaLabel=\"Show password\"\r\n                    onChange ={(e: any) => {\r\n                        updateUserLogin('LoginPassword', e.currentTarget.value)\r\n                   }}                  \r\n                />\r\n                {/* disabled={isClickLogin}  */}\r\n                <PrimaryButton    className='button' checked={false} text={t('login.sigin')} type=\"submit\" />\r\n            </form>\r\n            \r\n        </div >\r\n    );    \r\n};\r\nconst mapStateToProps = (state: IAuthReduxProps) => ({\r\n    isAuthenticated: state.authReducer.isAuthenticated,\r\n    error: state.error\r\n  });\r\n\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n"]},"metadata":{},"sourceType":"module"}