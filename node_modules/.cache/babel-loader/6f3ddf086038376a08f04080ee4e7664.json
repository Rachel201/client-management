{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\client-management\\\\src\\\\shared\\\\components\\\\tabels\\\\TableList.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { DetailsList, Selection, SelectionMode, DetailsRow } from '@fluentui/react/lib/DetailsList';\nimport { DefaultButton } from '@fluentui/react';\nimport { useEffect, useState } from 'react';\nimport \"./detaiList.scss\";\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { useBoolean } from '@fluentui/react-hooks';\nimport { CustemDialogAddress, CustemDialogEmail, CustemDialogPhone } from '../dialog/Dialog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst footerStyle = {\n  root: {\n    background: '#E1E1E1'\n  }\n}; // renderItemColumn=()=>{} ,\n\nconst CustemTable = props => {\n  _s();\n\n  const {\n    allItems,\n    columns,\n    isSelcted = false,\n    isFooter = true,\n    rederRow = \"\",\n    search = false,\n    addCustem = false,\n    textBottun = \"\"\n  } = props;\n  let isSelection = SelectionMode.none;\n\n  if (isSelcted === true) {\n    isSelection = SelectionMode.single;\n  }\n\n  const renderRow = rederRow;\n  const [state, setState] = React.useState({\n    items: allItems,\n    columns: columns\n  }); // if(search===true)  {\n  // columns.map(col:IColumn)=>\n  //     {\n  //       col.push([onColumnClickk]=)\n  //     }\n  //   );\n  // }\n\n  const [t, i18n] = useTranslation();\n  const [hideDialog, {\n    toggle: toggleHideDialog\n  }] = useBoolean(true);\n  const [selectedItem, setSelectedItem] = useState(undefined);\n  const history = useHistory();\n  const selection = new Selection({\n    onSelectionChanged: () => {\n      console.log(selection.getSelection());\n      setSelectedItem(selection.getSelection());\n    }\n  });\n  useEffect(() => {\n    // Do something with the selected item\n    console.log(selectedItem);\n  }, [selectedItem]);\n\n  const onChange = (ke, val) => {\n    console.log(\"col\" + ke + \"0\" + val);\n  };\n\n  const renderItemColumn = (item, index, column) => {\n    let fieldContent = item[column.fieldName];\n    console.log(\"fieldContent in culmn\", fieldContent);\n\n    switch (column.fieldName) {\n      case renderRow:\n        //@ts-ignore\n        console.log(\"index in column\", allItems[index].idEntity);\n        index = allItems[index].idEntity;\n        return /*#__PURE__*/_jsxDEV(DefaultButton, {\n          text: t('details'),\n          name: index,\n          onClick: () => history.push(`/customer-details/${index}`)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 18\n        }, this);\n        {\n          /* <Link to={{\r\n               pathname: '/customer-details',\r\n               state: [{id: 1, name: 'Ford', color: 'red'}]\r\n             }}> {t('details')} </Link>  */\n        }\n        {\n          /* <Link to={`/customer-details/${index}`}> p</Link> \r\n          </DefaultButton> */\n        }\n\n      default:\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: fieldContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 20\n        }, this);\n    }\n  };\n\n  let onRenderDetailsFooter = detailsFooterProps => {\n    if (!props) {\n      return null;\n    }\n\n    if (isFooter === false) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(DetailsRow, { ...detailsFooterProps,\n      columns: detailsFooterProps === null || detailsFooterProps === void 0 ? void 0 : detailsFooterProps.columns,\n      item: {},\n      itemIndex: -1 // groupNestingDepth={detailsFooterProps?.groupNestingDepth}\n      ,\n      styles: footerStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [textBottun === \"addAddress\" ? /*#__PURE__*/_jsxDEV(CustemDialogAddress, {\n      textButton: t(textBottun)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 35\n    }, this) : null, textBottun === \"addPhone\" ? /*#__PURE__*/_jsxDEV(CustemDialogPhone, {\n      textButton: t(textBottun)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 34\n    }, this) : null, textBottun === \"addEmail\" ? /*#__PURE__*/_jsxDEV(CustemDialogEmail, {\n      textButton: t(textBottun)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 34\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"continar\",\n      children: /*#__PURE__*/_jsxDEV(DetailsList, {\n        items: allItems,\n        columns: columns,\n        selection: selection,\n        selectionMode: isSelection // selectionPreservedOnEmptyClick={true}\n        ,\n        onRenderDetailsFooter: onRenderDetailsFooter,\n        onRenderItemColumn: renderItemColumn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CustemTable, \"hQE15Du1KpnQ3biZs9bcnaJak0I=\", false, function () {\n  return [useTranslation, useBoolean, useHistory];\n});\n\n_c = CustemTable;\nexport default CustemTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustemTable\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/client-management/src/shared/components/tabels/TableList.tsx"],"names":["React","DetailsList","Selection","SelectionMode","DetailsRow","DefaultButton","useEffect","useState","useHistory","useTranslation","useBoolean","CustemDialogAddress","CustemDialogEmail","CustemDialogPhone","footerStyle","root","background","CustemTable","props","allItems","columns","isSelcted","isFooter","rederRow","search","addCustem","textBottun","isSelection","none","single","renderRow","state","setState","items","t","i18n","hideDialog","toggle","toggleHideDialog","selectedItem","setSelectedItem","undefined","history","selection","onSelectionChanged","console","log","getSelection","onChange","ke","val","renderItemColumn","item","index","column","fieldContent","fieldName","idEntity","push","onRenderDetailsFooter","detailsFooterProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { DetailsList, Selection, IColumn, SelectionMode, DetailsRow, IDetailsFooterProps } from '@fluentui/react/lib/DetailsList';\r\nimport { DefaultButton, IRenderFunction } from '@fluentui/react';\r\nimport { useEffect, useState } from 'react';\r\nimport \"./detaiList.scss\"\r\nimport {RouteComponentProps, useHistory } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useBoolean } from '@fluentui/react-hooks';\r\nimport { CustemDialogAddress, CustemDialogEmail, CustemDialogPhone } from '../dialog/Dialog';\r\n\r\n\r\n\r\n\r\nexport interface IDetailsListItem {\r\n  key: number;\r\n  name: string;\r\n  value: number;\r\n}\r\n\r\nexport interface IDetailsListState {\r\n  selectionDetails?: string;\r\n  columns: [] | IColumn[];\r\n  allItems:any[];\r\n  styleHeader?: string\r\n  isSelcted?:boolean;\r\n  isFooter?:boolean;\r\n  rederRow?:string;\r\n  search?:boolean;\r\n  addCustem?:boolean;\r\n  textBottun?:string;\r\n  renderItemColumn?:any\r\n\r\n}\r\ninterface PropsInterface extends RouteComponentProps<any> {}\r\n\r\nconst footerStyle = {\r\n  root: {\r\n      background: '#E1E1E1',\r\n  }\r\n}\r\n// renderItemColumn=()=>{} ,\r\nconst CustemTable: React.FunctionComponent<IDetailsListState> = (props) => {\r\n  const { allItems , columns, isSelcted = false, isFooter=true, rederRow=\"\",search=false, addCustem=false ,textBottun=\"\"} = props\r\n  let isSelection=SelectionMode.none\r\n  if(isSelcted === true){\r\n     isSelection=SelectionMode.single\r\n     \r\n  }\r\n  const renderRow=rederRow;\r\n   \r\n  const [state, setState] = React.useState({\r\n    items: allItems,\r\n    columns: columns,\r\n  });\r\n  // if(search===true)  {\r\n  // columns.map(col:IColumn)=>\r\n  //     {\r\n  //       col.push([onColumnClickk]=)\r\n  //     }\r\n  //   );\r\n  // }\r\n  const [t, i18n] = useTranslation();\r\n  const [hideDialog, { toggle: toggleHideDialog }] = useBoolean(true);\r\n  const [selectedItem, setSelectedItem] = useState<Object | undefined>(undefined)\r\n  const history = useHistory()\r\n  const selection = new Selection({\r\n    onSelectionChanged: () => {\r\n      console.log(selection.getSelection());\r\n      setSelectedItem(selection.getSelection())\r\n    }\r\n  })\r\n  useEffect(() => {\r\n    // Do something with the selected item\r\n    console.log(selectedItem)\r\n  }, [selectedItem])\r\n\r\n  const onChange = (ke: string, val: any) => {\r\n    console.log(\"col\" + ke + \"0\" + val); \r\n   }\r\n \r\n  const renderItemColumn = (item: any, index: any, column: any) => {\r\n   \r\n    let fieldContent = item[column.fieldName];\r\n    console.log(\"fieldContent in culmn\",fieldContent)\r\n    switch (column.fieldName) {\r\n        case renderRow:\r\n          //@ts-ignore\r\n          console.log(\"index in column\",allItems[index].idEntity)\r\n          index = allItems[index].idEntity\r\n          return <DefaultButton text={t('details')}name={index} onClick={()=>history.push(`/customer-details/${index}`)}/> \r\n           \r\n          {/* <Link to={{\r\n                pathname: '/customer-details',\r\n                state: [{id: 1, name: 'Ford', color: 'red'}]\r\n              }}> {t('details')} </Link>  */}\r\n              {/* <Link to={`/customer-details/${index}`}> p</Link> \r\n              </DefaultButton> */}\r\n        default:\r\n            return <span >{fieldContent}</span>;\r\n    }\r\n}\r\n \r\n\r\n  let onRenderDetailsFooter: IRenderFunction<IDetailsFooterProps> = (detailsFooterProps?: IDetailsFooterProps) => {\r\n    if (!props) {\r\n      return null;\r\n    }\r\n    if(isFooter===false){\r\n      return null;\r\n    }\r\n    return (\r\n      <DetailsRow\r\n        {...detailsFooterProps}\r\n        columns={detailsFooterProps?.columns}\r\n        item={{}}\r\n        itemIndex={-1}\r\n        // groupNestingDepth={detailsFooterProps?.groupNestingDepth}\r\n        styles={footerStyle}\r\n    \r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n\r\n    <div>\r\n      {textBottun===\"addAddress\" ?<CustemDialogAddress textButton={t(textBottun)}/>:null}\r\n      {textBottun===\"addPhone\" ? <CustemDialogPhone textButton={t(textBottun)}/> :null}\r\n      {textBottun===\"addEmail\" ? <CustemDialogEmail textButton={t(textBottun)}/> :null}\r\n\r\n   \r\n      <div className=\"continar\">\r\n        <DetailsList\r\n          items={allItems}\r\n          columns={columns}\r\n          selection={selection}\r\n          selectionMode={isSelection}\r\n          // selectionPreservedOnEmptyClick={true}\r\n          onRenderDetailsFooter={onRenderDetailsFooter}\r\n          onRenderItemColumn={renderItemColumn}\r\n        />\r\n      </div>\r\n   </div>\r\n  );\r\n\r\n}\r\n\r\n\r\nexport default CustemTable;\r\n"]},"metadata":{},"sourceType":"module"}