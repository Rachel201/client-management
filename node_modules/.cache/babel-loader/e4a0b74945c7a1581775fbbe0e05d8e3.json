{"ast":null,"code":"import axios from 'axios';\nimport { basicUrl } from '../../shared/config';\nimport { FETCH_PROTECTED_DATA_REQUEST, LOGIN_FAIL, RECEIVE_PROTECTED_DATA, SET_IS_FETCHING } from './types';\nimport { checkHttpStatus } from '../../utils';\nimport { returnErrors } from './errorActions';\nconst blankOptionsMap = {\n  customersCondition: null,\n  customersType: null,\n  genders: null,\n  typeIdentityNumbers: null,\n  customersStatus: null\n};\nconst objectData = [{\n  \"enumType\": \"class\",\n  \"category\": \"customer\",\n  \"name\": \"customersCondition\"\n}, {\n  \"enumType\": \"entity_sub_type\",\n  \"category\": \"customer\",\n  \"name\": \"customersType\"\n}, {\n  \"enumType\": \"gender\",\n  \"category\": \"customer\",\n  \"name\": \"genders\"\n}, {\n  \"enumType\": \"type\",\n  \"category\": \"customer\",\n  \"name\": \"typeIdentityNumbers\"\n}, {\n  \"enumType\": \"status\",\n  \"category\": \"customer\",\n  \"name\": \"customersStatus\"\n}];\nexport function receiveProtectedData(data) {\n  return {\n    type: RECEIVE_PROTECTED_DATA,\n    payload: {\n      data: data\n    }\n  };\n}\nexport function fetchProtectedDataRequest() {\n  return {\n    type: FETCH_PROTECTED_DATA_REQUEST\n  };\n}\nconst config = {\n  headers: {\n    'Content-type': 'application/json'\n  }\n};\nexport const loadOptions = () => async (dispatch, getState) => {\n  const optionsPrm = objectData.map(async currObj => {\n    const entity = {\n      \"id_client \": 45654784,\n      \"enum_type\": currObj.enumType,\n      \"id_initiator\": 478541,\n      \"enum_request_method\": \"read\",\n      \"category\": currObj.category,\n      \"user_language\": \"HE\"\n    };\n    const res = await axios.post(basicUrl + \"/uspEnum\", entity, config).then(checkHttpStatus) //if failed:\n    .catch(err => {\n      console.log(\"dataerror\", err);\n      err.response ? returnErrors(err.response.data, err.response.status, 'GET_ERRORS') : returnErrors('the server is down pls try later', 'LOGIN_FAIL');\n      dispatch({\n        type: LOGIN_FAIL\n      });\n      dispatch({\n        type: SET_IS_FETCHING,\n        isFetching: true\n      }); // return \"\";\n    });\n    return res.data;\n  });\n  console.log(optionsPrm);\n  const options = await Promise.all(optionsPrm);\n  const optionsMap = { ...blankOptionsMap\n  };\n  objectData.forEach(({\n    name\n  }, idx) => {\n    //@ts-ignore\n    optionsMap[name] = options[idx];\n  });\n  dispatch({\n    type: 'SET_GENERAL_FORM_OPTIONS_MAP',\n    optionsMap\n  });\n};","map":{"version":3,"sources":["C:/Users/USER/Desktop/client-management/src/store/actions/dataActions.ts"],"names":["axios","basicUrl","FETCH_PROTECTED_DATA_REQUEST","LOGIN_FAIL","RECEIVE_PROTECTED_DATA","SET_IS_FETCHING","checkHttpStatus","returnErrors","blankOptionsMap","customersCondition","customersType","genders","typeIdentityNumbers","customersStatus","objectData","receiveProtectedData","data","type","payload","fetchProtectedDataRequest","config","headers","loadOptions","dispatch","getState","optionsPrm","map","currObj","entity","enumType","category","res","post","then","catch","err","console","log","response","status","isFetching","options","Promise","all","optionsMap","forEach","name","idx"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { basicUrl } from '../../shared/config';\r\nimport {FETCH_PROTECTED_DATA_REQUEST,LOGIN_FAIL,RECEIVE_PROTECTED_DATA,SET_IS_FETCHING}from './types'\r\nimport { checkHttpStatus} from '../../utils';\r\nimport { tokenConfig } from './authActions';\r\nimport { returnErrors } from './errorActions';\r\nimport { IConfigHeaders } from '../../modelsType/type/interface';\r\n\r\nconst blankOptionsMap = {\r\n  customersCondition: null,\r\n  customersType:null,\r\n  genders:null,\r\n  typeIdentityNumbers:null,\r\n  customersStatus: null\r\n}\r\n\r\nconst objectData = [{\"enumType\":\"class\",\"category\":\"customer\",\"name\":\"customersCondition\"},\r\n{\"enumType\": \"entity_sub_type\" ,\"category\":\"customer\",\"name\" :\"customersType\"},\r\n{\"enumType\":\"gender\" ,\"category\":\"customer\",\"name\":\"genders\"},\r\n{\"enumType\": \"type\" ,\"category\":\"customer\",\"name\" :\"typeIdentityNumbers\"},\r\n{\"enumType\": \"status\" ,\"category\":\"customer\",\"name\" :\"customersStatus\"},\r\n]\r\n\r\nexport function receiveProtectedData(data:any) {\r\n    return {\r\n        type: RECEIVE_PROTECTED_DATA,\r\n        payload: {\r\n            data: data\r\n        }\r\n    }\r\n}\r\n\r\nexport function fetchProtectedDataRequest() {\r\n  return {\r\n    type: FETCH_PROTECTED_DATA_REQUEST\r\n  }\r\n}\r\n\r\nconst config: IConfigHeaders = {\r\n  headers: {\r\n    'Content-type': 'application/json'\r\n  }\r\n};\r\n\r\nexport const loadOptions = () => async (dispatch: Function, getState:Function ) => {\r\n  const optionsPrm = objectData.map( async currObj =>{\r\n  const entity =\r\n    {\r\n      \"id_client \": 45654784,\r\n  \r\n      \"enum_type\": currObj.enumType,\r\n  \r\n      \"id_initiator\": 478541,\r\n  \r\n      \"enum_request_method\": \"read\",\r\n  \r\n      \"category\": currObj.category,\r\n  \r\n      \"user_language\": \"HE\"\r\n    } \r\n    const res =await axios.post(basicUrl + \"/uspEnum\", entity, config)\r\n        .then(checkHttpStatus)\r\n        //if failed:\r\n        .catch(err => {\r\n          console.log(\"dataerror\",err)\r\n          err.response ? returnErrors(err.response.data, err.response.status, 'GET_ERRORS') : returnErrors('the server is down pls try later', 'LOGIN_FAIL')\r\n          dispatch({\r\n            type: LOGIN_FAIL\r\n          })\r\n          dispatch({ type:SET_IS_FETCHING , isFetching:true});\r\n          // return \"\";\r\n        })\r\n        return res.data;\r\n        \r\n    });\r\n     console.log(optionsPrm)\r\n      const options = await Promise.all(optionsPrm)\r\n      const optionsMap = {...blankOptionsMap}\r\n      objectData.forEach(({name}, idx)=> {\r\n        //@ts-ignore\r\n        optionsMap[name] = options[idx]\r\n      })\r\n   \r\n      dispatch({type: 'SET_GENERAL_FORM_OPTIONS_MAP', optionsMap})\r\n      \r\n    }\r\n    \r\n    \r\n    "]},"metadata":{},"sourceType":"module"}