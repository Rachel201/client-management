(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[5],{

/***/ "../../node_modules/raw-loader/index.js!../tsx-editor/dist/types/date-time-utilities.d.ts":
/*!***********************************************************************************************!*\
  !*** /mnt/work/5/s/node_modules/raw-loader!../tsx-editor/dist/types/date-time-utilities.d.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"\\n/**\\n * Returns a date offset from the given date by the specified number of days.\\n * @param date - The origin date\\n * @param days - The number of days to offset. 'days' can be negative.\\n * @returns A new Date object offset from the origin date by the given number of days\\n */\\nexport declare function addDays(date: Date, days: number): Date;\\n\\n/**\\n * Returns a date offset from the given date by the specified number of months.\\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\\n * to contain the original day-of-month, we'll use the last day of the new month.\\n * @param date - The origin date\\n * @param months - The number of months to offset. 'months' can be negative.\\n * @returns A new Date object offset from the origin date by the given number of months\\n */\\nexport declare function addMonths(date: Date, months: number): Date;\\n\\n/**\\n * Returns a date offset from the given date by the specified number of weeks.\\n * @param date - The origin date\\n * @param weeks - The number of weeks to offset. 'weeks' can be negative.\\n * @returns A new Date object offset from the origin date by the given number of weeks\\n */\\nexport declare function addWeeks(date: Date, weeks: number): Date;\\n\\n/**\\n * Returns a date offset from the given date by the specified number of years.\\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\\n * to contain the original day-of-month, we'll use the last day of the new month.\\n * @param date - The origin date\\n * @param years - The number of years to offset. 'years' can be negative.\\n * @returns A new Date object offset from the origin date by the given number of years\\n */\\nexport declare function addYears(date: Date, years: number): Date;\\n\\n/**\\n * Compare the date parts of two dates\\n * @param date1 - The first date to compare\\n * @param date2 - The second date to compare\\n * @returns A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\\n * if date1 is later than date2.\\n */\\nexport declare function compareDatePart(date1: Date, date2: Date): Number;\\n\\n/**\\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\\n * @returns True if the two dates represent the same date (regardless of time-of-day), false otherwise.\\n */\\nexport declare function compareDates(date1: Date, date2: Date): boolean;\\n\\n/**\\n * The supported date range types\\n * {@docCategory DateRangeType}\\n */\\nexport declare enum DateRangeType {\\n    Day = 0,\\n    Week = 1,\\n    Month = 2,\\n    WorkWeek = 3\\n}\\n\\n/**\\n * The days of the week\\n * {@docCategory DayOfWeek}\\n */\\nexport declare enum DayOfWeek {\\n    Sunday = 0,\\n    Monday = 1,\\n    Tuesday = 2,\\n    Wednesday = 3,\\n    Thursday = 4,\\n    Friday = 5,\\n    Saturday = 6\\n}\\n\\nexport declare const DAYS_IN_WEEK = 7;\\n\\nexport declare const DEFAULT_CALENDAR_STRINGS: ICalendarStrings;\\n\\nexport declare const DEFAULT_DATE_FORMATTING: IDateFormatting;\\n\\nexport declare const DEFAULT_LOCALIZED_STRINGS: IDateGridStrings;\\n\\n/**\\n * Returns closest available date given the restriction `options`, or undefined otherwise\\n * @param options - list of search options\\n */\\nexport declare const findAvailableDate: (options: IAvailableDateOptions) => Date | undefined;\\n\\n/**\\n * First week of the year settings types\\n * {@docCategory FirstWeekOfYear}\\n */\\nexport declare enum FirstWeekOfYear {\\n    FirstDay = 0,\\n    FirstFullWeek = 1,\\n    FirstFourDayWeek = 2\\n}\\n\\n/**\\n * Format date to a day string representation\\n * @param date - input date to format\\n */\\nexport declare const formatDay: (date: Date) => string;\\n\\n/**\\n * Format date to a month-day-year string\\n * @param date - input date to format\\n * @param strings - localized strings\\n */\\nexport declare const formatMonthDayYear: (date: Date, strings: IDateGridStrings) => string;\\n\\n/**\\n * Format date to a month-year string\\n * @param date - input date to format\\n * @param strings - localized strings\\n */\\nexport declare const formatMonthYear: (date: Date, strings: IDateGridStrings) => string;\\n\\n/**\\n * Format date to a year string representation\\n * @param date - input date to format\\n */\\nexport declare const formatYear: (date: Date) => string;\\n\\n/**\\n * Generates a list of dates, bounded by min and max dates\\n * @param dateRange - input date range\\n * @param minDate - min date to limit the range\\n * @param maxDate - max date to limit the range\\n */\\nexport declare const getBoundedDateRange: (dateRange: Date[], minDate?: Date | undefined, maxDate?: Date | undefined) => Date[];\\n\\n/**\\n * Helper function to assist in date comparisons\\n */\\nexport declare function getDatePartHashValue(date: Date): number;\\n\\n/**\\n * Gets the date range array including the specified date. The date range array is calculated as the list\\n * of dates accounting for the specified first day of the week and date range type.\\n * @param date - The input date\\n * @param dateRangeType - The desired date range type, i.e., day, week, month, etc.\\n * @param firstDayOfWeek - The first day of the week.\\n * @param workWeekDays - The allowed days in work week. If not provided, assumes all days are allowed.\\n * @param daysToSelectInDayView - The number of days to include when using dateRangeType === DateRangeType.Day\\n * for multiday view. Defaults to 1\\n * @returns An array of dates representing the date range containing the specified date.\\n */\\nexport declare function getDateRangeArray(date: Date, dateRangeType: DateRangeType, firstDayOfWeek: DayOfWeek, workWeekDays?: DayOfWeek[], daysToSelectInDayView?: number): Date[];\\n\\n/**\\n * Return corrected date range type, given `dateRangeType` and list of working days.\\n * For non-contiguous working days and working week range type, returns general week range type.\\n * For other cases returns input date range type.\\n * @param dateRangeType - input type of range\\n * @param workWeekDays - list of working days in a week\\n */\\nexport declare const getDateRangeTypeToUse: (dateRangeType: DateRangeType, workWeekDays: DayOfWeek[] | undefined, firstDayOfWeek: DayOfWeek) => DateRangeType;\\n\\n/**\\n * Generates a grid of days, given the `options`.\\n * Returns one additional week at the begining from the previous range\\n * and one at the end from the future range\\n * @param options - parameters to specify date related restrictions for the resulting grid\\n */\\nexport declare const getDayGrid: (options: IDayGridOptions) => IDay[][];\\n\\n/**\\n * Gets the date for the last day of the week based on the given date assuming\\n * the specified first day of the week.\\n * @param date - The date to find the beginning of the week date for.\\n * @returns A new date object representing the first day of the week containing the input date.\\n */\\nexport declare function getEndDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date;\\n\\n/**\\n * Returns a date that is the last day of the month of the provided date.\\n * @param date - The origin date\\n * @returns A new Date object with the day set to the last day of the month.\\n */\\nexport declare function getMonthEnd(date: Date): Date;\\n\\n/**\\n * Returns a date that is the first day of the month of the provided date.\\n * @param date - The origin date\\n * @returns A new Date object with the day set to the first day of the month.\\n */\\nexport declare function getMonthStart(date: Date): Date;\\n\\n/**\\n * Gets the date for the first day of the week based on the given date assuming\\n * the specified first day of the week.\\n * @param date - The date to find the beginning of the week date for.\\n * @returns A new date object representing the first day of the week containing the input date.\\n */\\nexport declare function getStartDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date;\\n\\n/**\\n * Returns the week number for a date.\\n * Week numbers are 1 - 52 (53) in a year\\n * @param date - A date to find the week number for.\\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\\n * @param firstWeekOfYear - The first week of the year (1-2)\\n * @returns The week's number in the year.\\n */\\nexport declare function getWeekNumber(date: Date, firstDayOfWeek: DayOfWeek, firstWeekOfYear: FirstWeekOfYear): number;\\n\\n/**\\n * Returns the week number for a date.\\n * Week numbers are 1 - 52 (53) in a year\\n * @param navigatedDate - A date to find the week number for.\\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\\n * @param firstWeekOfYear - The first week of the year (1-2)\\n * @returns The weeks number array for the current month.\\n */\\nexport declare function getWeekNumbersInMonth(weeksInMonth: number, firstDayOfWeek: DayOfWeek, firstWeekOfYear: FirstWeekOfYear, navigatedDate: Date): number[];\\n\\n/**\\n * Returns a date that is the last day of the year of the provided date.\\n * @param date - The origin date\\n * @returns A new Date object with the day set to the last day of the year.\\n */\\nexport declare function getYearEnd(date: Date): Date;\\n\\n/**\\n * Returns a date that is the first day of the year of the provided date.\\n * @param date - The origin date\\n * @returns A new Date object with the day set to the first day of the year.\\n */\\nexport declare function getYearStart(date: Date): Date;\\n\\nexport declare interface IAvailableDateOptions extends IRestrictedDatesOptions {\\n    /** Date from which we start the search */\\n    initialDate: Date;\\n    /** Ideal available date */\\n    targetDate: Date;\\n    /** Direction of search (`1` - search in future / `-1` search in past) */\\n    direction: number;\\n}\\n\\nexport declare interface ICalendarStrings extends IDateFormatting {\\n    /**\\n     * Error message to render for TextField if isRequired validation fails.\\n     */\\n    isRequiredErrorMessage?: string;\\n    /**\\n     * Error message to render for TextField if input date string parsing fails.\\n     */\\n    invalidInputErrorMessage?: string;\\n    /**\\n     * Error message to render for TextField if date boundary (minDate, maxDate) validation fails.\\n     */\\n    isOutOfBoundsErrorMessage?: string;\\n    /**\\n     * String to render for button to direct the user to today's date.\\n     */\\n    goToToday: string;\\n    /**\\n     * Title for button to open the calendar.\\n     */\\n    openCalendarTitle: string;\\n    /**\\n     * Placeholder string for an unfilled input.\\n     */\\n    inputPlaceholder: string;\\n    /**\\n     * Aria-label for the \\\"previous month\\\" button in day picker.\\n     */\\n    prevMonthAriaLabel?: string;\\n    /**\\n     * Aria-label for the \\\"next month\\\" button in day picker.\\n     */\\n    nextMonthAriaLabel?: string;\\n    /**\\n     * Aria-label for the \\\"previous year\\\" button in month picker.\\n     */\\n    prevYearAriaLabel?: string;\\n    /**\\n     * Aria-label for the \\\"next year\\\" button in month picker.\\n     */\\n    nextYearAriaLabel?: string;\\n    /**\\n     * Aria-label for the \\\"previous year range\\\" button in year picker.\\n     */\\n    prevYearRangeAriaLabel?: string;\\n    /**\\n     * Aria-label for the \\\"next year range\\\" button in year picker.\\n     */\\n    nextYearRangeAriaLabel?: string;\\n    /**\\n     * Aria-label format string for the header button in the month picker. Should have 1 string param, e.g. \\\"`{0}`,\\n     * select to change the year\\\". This aria-label will only be applied if the year picker is enabled; otherwise\\n     * the label will default to the header string, e.g. \\\"2019\\\".\\n     */\\n    monthPickerHeaderAriaLabel?: string;\\n    /**\\n     * Aria-label format string for the header button in the year picker.\\n     * Should have 1 string param, e.g. \\\"`{0}`, select to change the month\\\"\\n     */\\n    yearPickerHeaderAriaLabel?: string;\\n    /**\\n     * Aria-label for the \\\"close\\\" button.\\n     */\\n    closeButtonAriaLabel?: string;\\n    /**\\n     * Aria-label format string for the week number header. Should have 1 string param, e.g. \\\"week number `{0}`\\\"\\n     */\\n    weekNumberFormatString?: string;\\n    /**\\n     * Aria-label format string for the currently selected date. Should have 1 string param, e.g. \\\"Selected date `{0}`\\\"\\n     */\\n    selectedDateFormatString?: string;\\n    /**\\n     * Aria-label format string for today's date. Should have 1 string param, e.g. \\\"Today's date `{0}`\\\"\\n     */\\n    todayDateFormatString?: string;\\n    /**\\n     * Aria-label for input.\\\"\\n     */\\n    inputAriaLabel?: string;\\n    /**\\n     * Aria-label format string for restricted input. Should have 2 string params, 0 is minDate and 1 is maxDate\\\"\\n     */\\n    inputBoundedFormatString?: string;\\n    /**\\n     * Aria-label format string for restricted input only with minDate. Should have 1 string param, 0 is minDate\\\"\\n     */\\n    inputMinBoundedFormatString?: string;\\n    /**\\n     * Aria-label format string for restricted input only with maxDate. Should have 1 string param, 0 is maxDate\\\"\\n     */\\n    inputMaxBoundedFormatString?: string;\\n}\\n\\nexport declare interface IDateFormatting extends IDateGridStrings {\\n    /**\\n     * Format the day according to specified function.\\n     * Intended use case is localization.\\n     */\\n    formatDay: (date: Date) => string;\\n    /**\\n     * Format the year according to specified function.\\n     * Intended use case is localization.\\n     */\\n    formatYear: (date: Date) => string;\\n    /**\\n     * Format the month, day and year according to specified function.\\n     * Intended use case is localization.\\n     */\\n    formatMonthDayYear: (date: Date, strings: IDateGridStrings) => string;\\n    /**\\n     * Format the month and year according to specified function.\\n     * Intended use case is localization.\\n     */\\n    formatMonthYear: (date: Date, strings: IDateGridStrings) => string;\\n    /**\\n     * Parse date from string representation into Date type.\\n     */\\n    parseDate: (date: string) => Date | null;\\n}\\n\\nexport declare interface IDateGridStrings {\\n    /**\\n     * An array of strings for the full names of months.\\n     * The array is 0-based, so months[0] should be the full name of January.\\n     */\\n    months: string[];\\n    /**\\n     * An array of strings for the short names of months.\\n     * The array is 0-based, so shortMonths[0] should be the short name of January.\\n     */\\n    shortMonths: string[];\\n    /**\\n     * An array of strings for the full names of days of the week.\\n     * The array is 0-based, so days[0] should be the full name of Sunday.\\n     */\\n    days: string[];\\n    /**\\n     * An array of strings for the initials of the days of the week.\\n     * The array is 0-based, so days[0] should be the initial of Sunday.\\n     */\\n    shortDays: string[];\\n}\\n\\nexport declare interface IDatepickerOptions extends IRestrictedDatesOptions {\\n    /**\\n     * The first day of the week for your locale.\\n     */\\n    firstDayOfWeek: DayOfWeek;\\n    /**\\n     * Defines when the first week of the year should start, FirstWeekOfYear.FirstDay,\\n     * FirstWeekOfYear.FirstFullWeek or FirstWeekOfYear.FirstFourDayWeek are the possible values\\n     */\\n    firstWeekOfYear: FirstWeekOfYear;\\n    /**\\n     * The date range type indicating how  many days should be selected as the user\\n     * selects days\\n     */\\n    dateRangeType: DateRangeType;\\n    /**\\n     * The number of days to select while dateRangeType === DateRangeType.Day. Used in order to have multi-day\\n     * views.\\n     */\\n    daysToSelectInDayView?: number;\\n    /**\\n     * Value of today. If null, current time in client machine will be used.\\n     */\\n    today?: Date;\\n    /**\\n     * Whether the calendar should show the week number (weeks 1 to 53) before each week row\\n     */\\n    showWeekNumbers?: boolean;\\n    /**\\n     * The days that are selectable when `dateRangeType` is WorkWeek.\\n     * If `dateRangeType` is not WorkWeek this property does nothing.\\n     */\\n    workWeekDays?: DayOfWeek[];\\n    /**\\n     * Which days in the generated grid should be marked.\\n     */\\n    markedDays?: Date[];\\n}\\n\\nexport declare interface IDay {\\n    /** `Date.toString()` value of current date */\\n    key: string;\\n    /** `Date.getDate()` value of current date */\\n    date: string;\\n    /** `Date` object of current date */\\n    originalDate: Date;\\n    /** Is current date is in the same month as \\\"today\\\" date */\\n    isInMonth: boolean;\\n    /** Is current date is \\\"today\\\" date */\\n    isToday: boolean;\\n    /** Is current date is selected */\\n    isSelected: boolean;\\n    /** Is current date within restriction boundaries */\\n    isInBounds: boolean;\\n    /** Is current date marked */\\n    isMarked: boolean;\\n}\\n\\nexport declare interface IDayGridOptions extends IDatepickerOptions {\\n    /**\\n     * The currently selected date\\n     */\\n    selectedDate: Date;\\n    /**\\n     * The currently navigated date\\n     */\\n    navigatedDate: Date;\\n    /**\\n     * How many weeks to show by default. If not provided, will show enough weeks to display the current\\n     * month, between 4 and 6 depending\\n     */\\n    weeksToShow?: number;\\n}\\n\\nexport declare interface IRestrictedDatesOptions {\\n    /**\\n     * If set the Calendar will not allow navigation to or selection of a date earlier than this value.\\n     */\\n    minDate?: Date;\\n    /**\\n     * If set the Calendar will not allow navigation to or selection of a date later than this value.\\n     */\\n    maxDate?: Date;\\n    /**\\n     * If set the Calendar will not allow selection of dates in this array.\\n     */\\n    restrictedDates?: Date[];\\n}\\n\\n/**\\n * Checks if `date` happens later than max date\\n * @param date - date to check\\n * @param options - object with max date to check against\\n */\\nexport declare const isAfterMaxDate: (date: Date, options: IRestrictedDatesOptions) => boolean;\\n\\n/**\\n * Checks if `date` happens earlier than min date\\n * @param date - date to check\\n * @param options - object with min date to check against\\n */\\nexport declare const isBeforeMinDate: (date: Date, options: IRestrictedDatesOptions) => boolean;\\n\\n/**\\n * Returns whether provided week days are contiguous.\\n * @param days - list of days in a week\\n * @param isSingleWeek - decides whether the contiguous logic applies across week boundaries or not\\n * @param firstDayOfWeek - decides which day of week is the first one in the order.\\n */\\nexport declare const isContiguous: (days: DayOfWeek[], isSingleWeek: boolean, firstDayOfWeek: DayOfWeek) => boolean;\\n\\n/**\\n * Checks whether the specified date is in the given date range.\\n * @param date - The origin date\\n * @param dateRange - An array of dates to do the lookup on\\n * @returns True if the date matches one of the dates in the specified array, false otherwise.\\n */\\nexport declare function isInDateRangeArray(date: Date, dateRange: Date[]): boolean;\\n\\n/**\\n * Checks if `date` falls into the restricted `options`\\n * @param date - date to check\\n * @param options - restriction options (min date, max date and list of restricted dates)\\n */\\nexport declare const isRestrictedDate: (date: Date, options: IRestrictedDatesOptions) => boolean;\\n\\n/**\\n * The months\\n * {@docCategory MonthOfYear}\\n */\\nexport declare enum MonthOfYear {\\n    January = 0,\\n    February = 1,\\n    March = 2,\\n    April = 3,\\n    May = 4,\\n    June = 5,\\n    July = 6,\\n    August = 7,\\n    September = 8,\\n    October = 9,\\n    November = 10,\\n    December = 11\\n}\\n\\n/**\\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\\n * to contain the original day-of-month, we'll use the last day of the new month.\\n * @param date - The origin date\\n * @param month - The 0-based index of the month to set on the date.\\n * @returns A new Date object with the given month set.\\n */\\nexport declare function setMonth(date: Date, month: number): Date;\\n\\nexport { }\\n\"\n\n//# sourceURL=webpack:///../tsx-editor/dist/types/date-time-utilities.d.ts?/mnt/work/5/s/node_modules/raw-loader");

/***/ }),

/***/ "../../node_modules/raw-loader/index.js!../tsx-editor/dist/types/dom-utilities.d.ts":
/*!*****************************************************************************************!*\
  !*** /mnt/work/5/s/node_modules/raw-loader!../tsx-editor/dist/types/dom-utilities.d.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"\\nexport declare const DATA_PORTAL_ATTRIBUTE = \\\"data-portal-element\\\";\\n\\n/**\\n * Determines whether or not a parent element contains a given child element.\\n * If `allowVirtualParents` is true, this method may return `true` if the child\\n * has the parent in its virtual element hierarchy.\\n *\\n * @public\\n */\\nexport declare function elementContains(parent: HTMLElement | null, child: HTMLElement | null, allowVirtualParents?: boolean): boolean;\\n\\n/**\\n * Determines if an element, or any of its ancestors, contain the given attribute\\n * @param element - element to start searching at\\n * @param attribute - the attribute to search for\\n * @returns the value of the first instance found\\n */\\nexport declare function elementContainsAttribute(element: HTMLElement, attribute: string): string | null;\\n\\n/**\\n * Finds the first parent element where the matchFunction returns true\\n * @param element - element to start searching at\\n * @param matchFunction - the function that determines if the element is a match\\n * @returns the matched element or null no match was found\\n */\\nexport declare function findElementRecursive(element: HTMLElement | null, matchFunction: (element: HTMLElement) => boolean): HTMLElement | null;\\n\\n/**\\n * Gets the elements which are child elements of the given element.\\n * If `allowVirtualChildren` is `true`, this method enumerates virtual child elements\\n * after the original children.\\n * @param parent - The element to get the children of.\\n * @param allowVirtualChildren - true if the method should enumerate virtual child elements.\\n */\\nexport declare function getChildren(parent: HTMLElement, allowVirtualChildren?: boolean): HTMLElement[];\\n\\n/**\\n * Gets the element which is the parent of a given element.\\n * If `allowVirtuaParents` is `true`, this method prefers the virtual parent over\\n * real DOM parent when present.\\n *\\n * @public\\n */\\nexport declare function getParent(child: HTMLElement, allowVirtualParents?: boolean): HTMLElement | null;\\n\\n/**\\n * Gets the virtual parent given the child element, if it exists.\\n *\\n * @public\\n */\\nexport declare function getVirtualParent(child: HTMLElement): HTMLElement | undefined;\\n\\n/**\\n * Determines whether or not an element has the virtual hierarchy extension.\\n *\\n * @public\\n */\\nexport declare function isVirtualElement(element: HTMLElement | IVirtualElement): element is IVirtualElement;\\n\\n/**\\n * Attached interface for elements which support virtual references.\\n * Used internally by the virtual hierarchy methods.\\n */\\nexport declare interface IVirtualElement extends HTMLElement {\\n    _virtual: {\\n        parent?: IVirtualElement;\\n        children: IVirtualElement[];\\n    };\\n}\\n\\n/**\\n * Determine whether a target is within a portal from perspective of root or optional parent.\\n * This function only works against portal components that use the setPortalAttribute function.\\n * If both parent and child are within the same portal this function will return false.\\n * @param target - Element to query portal containment status of.\\n * @param parent - Optional parent perspective. Search for containing portal stops at parent\\n * (or root if parent is undefined or invalid.)\\n */\\nexport declare function portalContainsElement(target: HTMLElement, parent?: HTMLElement): boolean;\\n\\n/**\\n * Identify element as a portal by setting an attribute.\\n * @param element - Element to mark as a portal.\\n */\\nexport declare function setPortalAttribute(element: HTMLElement): void;\\n\\n/**\\n * Sets the virtual parent of an element.\\n * Pass `undefined` as the `parent` to clear the virtual parent.\\n *\\n * @public\\n */\\nexport declare function setVirtualParent(child: HTMLElement, parent: HTMLElement | null): void;\\n\\nexport { }\\n\"\n\n//# sourceURL=webpack:///../tsx-editor/dist/types/dom-utilities.d.ts?/mnt/work/5/s/node_modules/raw-loader");

/***/ }),

/***/ "../../node_modules/raw-loader/index.js!../tsx-editor/dist/types/example-data.d.ts":
/*!****************************************************************************************!*\
  !*** /mnt/work/5/s/node_modules/raw-loader!../tsx-editor/dist/types/example-data.d.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"/**\\n * @packageDocumentation\\n * This package is for use in Fabric examples and tests only. It's considered internal, so APIs\\n * are subject to change without notice. (The only reason it uses api-extractor is so the types\\n * can easily be added to the live example editor.)\\n */\\n\\n\\n/** @internal */\\nexport declare function createGroups(groupCount: number, groupDepth: number, startIndex: number, itemsPerGroup: number, level?: number, key?: string, isCollapsed?: boolean): IExampleGroup[];\\n\\n/** @internal */\\nexport declare function createListItems(count: number, startIndex?: number): IExampleItem[];\\n\\n/** @internal */\\nexport declare const facepilePersonas: IExampleFacepilePersona[];\\n\\n/** @internal */\\nexport declare const groupOne: (IExampleExtendedPersonaProps & {\\n    key: string | number;\\n})[];\\n\\n/** @internal */\\nexport declare const groupTwo: (IExampleExtendedPersonaProps & {\\n    key: string | number;\\n})[];\\n\\n/**\\n * For use in this package only.\\n * Partial mirror of IExtendedPersonaProps avoid a circular dependency.\\n * If the real interface changes and this one starts causing compiler errors, update it.\\n * @internal\\n */\\nexport declare interface IExampleExtendedPersonaProps {\\n    imageUrl?: string;\\n    imageInitials?: string;\\n    text?: string;\\n    secondaryText?: string;\\n    tertiaryText?: string;\\n    optionalText?: string;\\n    presence?: number;\\n    isValid: boolean;\\n    canExpand?: boolean;\\n}\\n\\n/**\\n * For use in this package only.\\n * Partial mirror of IFacepilePersona avoid a circular dependency.\\n * If the real interface changes and this one starts causing compiler errors, update it.\\n * @internal\\n */\\nexport declare interface IExampleFacepilePersona {\\n    imageUrl?: string;\\n    imageInitials?: string;\\n    initialsColor?: number;\\n    personaName?: string;\\n    onClick?: (ev: unknown, persona?: IExampleFacepilePersona) => void;\\n    data?: any;\\n}\\n\\n/**\\n * For use in this package only.\\n * Partial mirror of IGroup from DetailsList avoid a circular dependency.\\n * If the real interface changes and this one starts causing compiler errors, update it.\\n * @internal\\n */\\nexport declare interface IExampleGroup {\\n    count: number;\\n    key: string;\\n    name: string;\\n    startIndex: number;\\n    level?: number;\\n    isCollapsed?: boolean;\\n    children?: IExampleGroup[];\\n}\\n\\n/** @internal */\\nexport declare interface IExampleItem {\\n    thumbnail: string;\\n    key: string;\\n    name: string;\\n    description: string;\\n    color: string;\\n    shape: string;\\n    location: string;\\n    width: number;\\n    height: number;\\n}\\n\\n/** @internal */\\nexport declare function isGroupable(key: string): boolean;\\n\\n/** @internal */\\nexport declare function lorem(wordCount: number): string;\\n\\n/** @internal */\\nexport declare const mru: (IExampleExtendedPersonaProps & {\\n    key: string | number;\\n})[];\\n\\n/** Sample people and groups @internal */\\nexport declare const people: (IExampleExtendedPersonaProps & {\\n    key: string | number;\\n})[];\\n\\n/**\\n * Creates an array of incrementing numbers from a specified start and end value.\\n * @internal\\n */\\nexport declare const range: (start: number, end: number) => number[];\\n\\n/** @internal */\\nexport declare const TestImages: {\\n    choiceGroupBarUnselected: string;\\n    choiceGroupBarSelected: string;\\n    choiceGroupPieUnselected: string;\\n    choiceGroupPieSelected: string;\\n    documentPreview: string;\\n    documentPreviewTwo: string;\\n    documentPreviewThree: string;\\n    iconOne: string;\\n    iconPpt: string;\\n    personaFemale: string;\\n    personaMale: string;\\n};\\n\\nexport { }\\n\"\n\n//# sourceURL=webpack:///../tsx-editor/dist/types/example-data.d.ts?/mnt/work/5/s/node_modules/raw-loader");

/***/ }),

/***/ "../../node_modules/raw-loader/index.js!../tsx-editor/dist/types/foundation.d.ts":
/*!**************************************************************************************!*\
  !*** /mnt/work/5/s/node_modules/raw-loader!../tsx-editor/dist/types/foundation.d.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"import { ISchemeNames } from '@uifabric/styling';\\nimport { IStyle } from '@uifabric/styling';\\nimport { IStyleSet } from '@uifabric/styling';\\nimport { ITheme } from '@uifabric/styling';\\nimport { styled as legacyStyled } from '@uifabric/utilities';\\nimport * as React from 'react';\\n\\n/**\\n * Assembles a higher order component based on the following: styles, theme, view, and state.\\n * Imposes a separation of concern and centralizes styling processing to increase ease of use and robustness\\n * in how components use and apply styling and theming.\\n *\\n * Automatically merges and applies themes and styles with theme / styleprops having the highest priority.\\n * State component, if provided, is passed in props for processing. Props from state / user are automatically processed\\n * and styled before finally being passed to view.\\n *\\n * State components should contain all stateful behavior and should not generate any JSX, but rather simply call\\n * the view prop.\\n *\\n * Views should simply be stateless pure functions that receive all props needed for rendering their output.\\n *\\n * State component is optional. If state is not provided, created component is essentially a functional\\n * stateless component.\\n *\\n * @param options - component Component options. See IComponentOptions for more detail.\\n */\\nexport declare function createComponent<TComponentProps extends ValidProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>, TViewProps extends TComponentProps = TComponentProps, TStatics = {}>(view: IViewComponent<TViewProps>, options?: IComponentOptions<TComponentProps, TTokens, TStyleSet, TViewProps, TStatics>): React.FunctionComponent<TComponentProps> & TStatics;\\n\\n/**\\n * This function creates factories that render ouput depending on the user ISlotProp props passed in.\\n * @param DefaultComponent - Base component to render when not overridden by user props.\\n * @param options - Factory options, including defaultProp value for shorthand prop mapping.\\n * @returns ISlotFactory function used for rendering slots.\\n */\\nexport declare function createFactory<TProps extends ValidProps, TShorthandProp extends ValidShorthand = never>(DefaultComponent: React.ComponentType<TProps>, options?: IFactoryOptions<TProps>): ISlotFactory<TProps, TShorthandProp>;\\n\\n/**\\n * Extracts props type from ISlotProp definition.\\n */\\nexport declare type ExtractProps<TUnion> = TUnion extends ISlotProp<infer TProps> ? TProps : never;\\n\\n/**\\n * Extracts shorthand type from union of ValidShorthand types.\\n */\\nexport declare type ExtractShorthand<TUnion> = TUnion extends boolean ? boolean : TUnion extends number ? number : TUnion extends string ? string : never;\\n\\n/**\\n * Simple controlled helper that gives priority to props value and falls back to derived value.\\n *\\n * @param props - The props object containing controlled prop values.\\n * @param propName - The controlled prop name.\\n * @param derivedValue - Derived value. Returned when controlled value is not present.\\n */\\nexport declare function getControlledDerivedProps<TProps, TProp extends keyof TProps>(props: Readonly<TProps>, propName: TProp, derivedValue: TProps[TProp]): TProps[TProp];\\n\\n/**\\n * This function generates slots that can be used in JSX given a definition of slots and their corresponding types.\\n * @param userProps - Props as pass to component.\\n * @param slots - Slot definition object defining the default slot component for each slot.\\n * @returns A set of created slots that components can render in JSX.\\n */\\nexport declare function getSlots<TComponentProps extends ISlottableProps<TComponentSlots>, TComponentSlots>(userProps: TComponentProps, slots: ISlotDefinition<Required<TComponentSlots>>): ISlots<Required<TComponentSlots>>;\\n\\n/**\\n * Component helper that defines options as required for ease of use by component consumers.\\n */\\nexport declare type IComponent<TComponentProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>, TViewProps = TComponentProps, TStatics = {}> = Required<IComponentOptions<TComponentProps, TTokens, TStyleSet, TViewProps, TStatics>> & {\\n    /**\\n     * Component that generates view output.\\n     */\\n    view: IViewComponent<TViewProps>;\\n};\\n\\n/**\\n * Component options used by foundation to tie elements together.\\n *\\n * * TComponentProps: A styleable props interface for the created component.\\n * * TTokens: The type for tokens props.\\n * * TStyleSet: The type for styles properties.\\n * * TViewProps: The props specific to the view, including processed properties outputted by optional state component.\\n * If state component is not provided, TComponentProps is the same as TViewProps.\\n * * TStatics: Static type for statics applied to created component object.\\n */\\nexport declare interface IComponentOptions<TComponentProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>, TViewProps = TComponentProps, TStatics = {}> {\\n    /**\\n     * Display name to identify component in React hierarchy. This parameter is required for targeted component styling\\n     * via theming.\\n     */\\n    displayName?: string;\\n    /**\\n     * List of fields which can be customized.\\n     */\\n    fields?: string[];\\n    /**\\n     * Styles prop to pass into component.\\n     */\\n    styles?: IStylesFunctionOrObject<TViewProps, TTokens, TStyleSet>;\\n    /**\\n     * Optional state component that processes TComponentProps into TViewProps.\\n     */\\n    state?: IStateComponentType<TComponentProps, TViewProps>;\\n    /**\\n     * Optional static object to assign to constructed component.\\n     */\\n    statics?: TStatics;\\n    /**\\n     * Tokens prop to pass into component.\\n     */\\n    tokens?: ITokenFunctionOrObject<TViewProps, TTokens>;\\n    /**\\n     * Default prop for which to map primitive values.\\n     */\\n    factoryOptions?: IFactoryOptions<TComponentProps>;\\n}\\n\\n/**\\n * Helper type defining style sections, one for each component slot.\\n */\\nexport declare type IComponentStyles<TSlots> = {\\n    [key in keyof TSlots]?: IStyle;\\n};\\n\\nexport declare interface IControlledStateOptions<TProps, TProp extends keyof TProps, TDefaultProp extends keyof TProps> {\\n    defaultPropValue?: TProps[TProp];\\n    defaultPropName?: TDefaultProp;\\n}\\n\\nexport declare type ICustomizationProps<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>> = IStyleableComponentProps<TViewProps, TTokens, TStyleSet> & Required<Pick<IStyleableComponentProps<TViewProps, TTokens, TStyleSet>, 'theme'>>;\\n\\n/**\\n * Defines user properties that are automatically applied by Slot utilities using slot name.\\n */\\nexport declare interface IDefaultSlotProps<TSlots> {\\n    _defaultStyles: IComponentStyles<TSlots>;\\n}\\n\\n/**\\n * Factory options for creating component.\\n */\\nexport declare interface IFactoryOptions<TProps> {\\n    /**\\n     * Default prop for which to map primitive values.\\n     */\\n    defaultProp?: keyof TProps | 'children';\\n}\\n\\n/**\\n * Optional HTML element typing to confine or expand HTML attribute usage for an intrinsic slot.\\n * Useful for slots that need to allow access to specialized HTML attributes, such as for buttons and inputs.\\n * Example usage: root?: IHTMLElementSlot\\\\<'button'\\\\>;\\n */\\nexport declare type IHTMLElementSlot<TElement extends keyof JSX.IntrinsicElements> = ISlotProp<JSX.IntrinsicElements[TElement]>;\\n\\n/**\\n * Generic slot definition allowing common HTML attributes. Applicable for most intrinsic slots. Please note certain\\n * elements such as buttons and inputs should make use of IHTMLElementSlot to provide access to specialized attributes\\n * of those elements.\\n */\\nexport declare type IHTMLSlot = ISlotProp<React.DetailedHTMLProps<React.HTMLAttributes<any>, any>>;\\n\\n/**\\n * Props generated by Foundation.\\n */\\nexport declare interface IProcessedSlotProps {\\n    className?: string;\\n}\\n\\n/**\\n * Helper interface for accessing user props children.\\n * @deprecated Use React.PropsWithChildren.\\n */\\nexport declare type IPropsWithChildren<TProps> = React.PropsWithChildren<TProps>;\\n\\n/**\\n * Created Slot structure used for rendering by components.\\n */\\nexport declare interface ISlot<TProps> {\\n    (componentProps: React.PropsWithChildren<TProps> | undefined | null): ReturnType<React.FunctionComponent>;\\n    isSlot?: boolean;\\n}\\n\\n/**\\n * Signature of components that have component factories.\\n */\\nexport declare interface ISlotCreator<TProps extends ValidProps, TShorthandProp extends ValidShorthand> {\\n    create?: ISlotFactory<TProps, TShorthandProp>;\\n}\\n\\n/**\\n * An interface for defining slots. Each key in TSlot must point to an ISlottableType.\\n */\\nexport declare type ISlotDefinition<TSlots> = {\\n    [slot in keyof TSlots]: React.ElementType<ExtractProps<TSlots[slot]>>;\\n};\\n\\n/**\\n * Interface for a slot factory that consumes both component and user slot prop and generates rendered output.\\n */\\nexport declare type ISlotFactory<TProps extends ValidProps, TShorthandProp extends ValidShorthand> = (componentProps: TProps & IProcessedSlotProps, userProps: ISlotProp<TProps, TShorthandProp>, slotOptions: ISlotOptions<TProps> | undefined, defaultStyles: IStyle, theme?: ITheme) => ReturnType<React.FunctionComponent<TProps>>;\\n\\n/**\\n * Defines the slot options object for all slot props:\\n *    1. ISlotRender function.\\n *    2. React component with TProps interface.\\n */\\nexport declare interface ISlotOptions<TProps> {\\n    component?: React.ElementType<TProps>;\\n    render?: ISlotRender<TProps>;\\n}\\n\\n/**\\n * Defines the primary slot prop interface components should use to define their slot props.\\n */\\nexport declare type ISlotProp<TProps extends ValidProps, TShorthandProp extends ValidShorthand = never> = TShorthandProp | TProps;\\n\\n/**\\n * Content rendering provided by component.\\n */\\nexport declare type ISlotRender<TProps> = (props: React.PropsWithChildren<TProps>, defaultComponent: React.ComponentType<TProps>) => ReturnType<React.FunctionComponent<TProps>>;\\n\\n/**\\n * Interface for aggregated slots objects used internally by components. Extract the TProps type passed\\n * into ISlotProp<TProps> to define the ISlot using TProps.\\n */\\nexport declare type ISlots<TSlots> = {\\n    [slot in keyof TSlots]: ISlot<ExtractProps<TSlots[slot]>>;\\n};\\n\\n/**\\n * Slottable version of React.ComponentType.\\n */\\nexport declare type ISlottableComponentType<TProps extends ValidProps, TShorthandProp extends ValidShorthand> = React.ComponentType<TProps> & ISlotCreator<TProps, TShorthandProp>;\\n\\n/**\\n * Automatically defines 'slots' prop based on TSlots props.\\n */\\nexport declare type ISlottableProps<TSlots> = TSlots & {\\n    slots?: {\\n        [key in keyof TSlots]+?: ISlotOptions<ExtractProps<TSlots[key]>>;\\n    };\\n};\\n\\n/**\\n * Slottable version of React.ReactType.\\n */\\nexport declare type ISlottableReactType<TProps extends ValidProps, TShorthandProp extends ValidShorthand> = React.ElementType<TProps> & ISlotCreator<TProps, TShorthandProp>;\\n\\n/**\\n * Defines the contract for state components.\\n */\\nexport declare type IStateComponentType<TComponentProps, TViewProps> = (props: Readonly<TComponentProps>) => TViewProps;\\n\\n/**\\n * Optional props for styleable components. If these props are present, they will automatically be\\n * used by Foundation when applying theming and styling.\\n */\\nexport declare interface IStyleableComponentProps<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>> {\\n    className?: string;\\n    styles?: IStylesFunctionOrObject<TViewProps, TTokens, TStyleSet>;\\n    theme?: ITheme;\\n    tokens?: ITokenFunctionOrObject<TViewProps, TTokens>;\\n}\\n\\n/**\\n * Function declaration for component styles functions.\\n */\\nexport declare type IStylesFunction<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>> = (props: TViewProps, theme: ITheme, tokens: TTokens) => TStyleSet;\\n\\n/**\\n * Composite type for component styles functions and objects.\\n */\\nexport declare type IStylesFunctionOrObject<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>> = IStylesFunction<TViewProps, TTokens, TStyleSet> | TStyleSet;\\n\\nexport declare interface IThemeProviderProps {\\n    scheme?: ISchemeNames;\\n    theme?: ITheme;\\n}\\n\\n/**\\n * Tokens can be defined as an object, function, or an array of objects and functions.\\n */\\nexport declare type IToken<TViewProps, TTokens> = ITokenBase<TViewProps, TTokens> | ITokenBaseArray<TViewProps, TTokens>;\\n\\n/**\\n * Composite base type that includes all possible resolutions of token functions in an array.\\n */\\nexport declare type ITokenBase<TViewProps, TTokens> = ITokenFunctionOrObject<TViewProps, TTokens> | false | null | undefined;\\n\\n/**\\n * Composite token base array type allowing for token objects, functions, and function resolutions.\\n */\\nexport declare interface ITokenBaseArray<TViewProps, TTokens> extends Array<IToken<TViewProps, TTokens>> {\\n}\\n\\n/**\\n * Function declaration for component token functions.\\n */\\nexport declare type ITokenFunction<TViewProps, TTokens> = (props: TViewProps, theme: ITheme) => IToken<TViewProps, TTokens>;\\n\\n/**\\n * Composite type for component token functions and objects.\\n */\\nexport declare type ITokenFunctionOrObject<TViewProps, TTokens> = ITokenFunction<TViewProps, TTokens> | TTokens;\\n\\n/**\\n * Defines the contract for view components.\\n */\\nexport declare type IViewComponent<TViewProps> = (props: React.PropsWithChildren<TViewProps>) => ReturnType<React.FunctionComponent>;\\nexport { legacyStyled }\\n\\n/**\\n * Theme provider is a simplified version of Customizer that activates the appropriate theme data\\n * for a given scheme name.\\n *\\n * @param providers - Injected providers for accessing theme data and providing it via a Customizer component.\\n */\\nexport declare const ThemeProvider: React.FunctionComponent<IThemeProviderProps>;\\n\\n/**\\n * Controlled state helper that gives priority to props value. Useful for components that have props with both\\n * controlled and uncontrolled modes. Any props values will override state, but will not update internal state.\\n * If prop is defined and then later undefined, state will revert to its previous value.\\n *\\n * @param props - The props object containing controlled prop values.\\n * @param propName - The controlled prop name.\\n * @param options - Options. defaultPropValue is only used if defaultPropName (or its value) is undefined.\\n */\\nexport declare function useControlledState<TProps, TProp extends keyof TProps, TDefaultProp extends keyof TProps>(props: Readonly<TProps>, propName: TProp, options?: IControlledStateOptions<TProps, TProp, TDefaultProp>): [TProps[TProp] | undefined, React.Dispatch<React.SetStateAction<TProps[TProp]>>];\\n\\n/**\\n * Defines valid prop types.\\n */\\nexport declare type ValidProps = object;\\n\\n/**\\n * Defines valid shorthand prop types. These should match the defaultProp type provided to createComponent.\\n */\\nexport declare type ValidShorthand = string | number | boolean;\\n\\n/**\\n * This function is required for any module that uses slots.\\n *\\n * This function is a slot resolver that automatically evaluates slot functions to generate React elements.\\n * A byproduct of this resolver is that it removes slots from the React hierarchy by bypassing React.createElement.\\n *\\n * To use this function on a per-file basis, use the jsx directive targeting withSlots.\\n * This directive must be the FIRST LINE in the file to work correctly.\\n * Usage of this pragma also requires withSlots import statement.\\n *\\n * See React.createElement\\n */\\nexport declare function withSlots<P>(type: ISlot<P> | React.FunctionComponent<P> | string, props?: (React.Attributes & P) | null, ...children: React.ReactNode[]): ReturnType<React.FunctionComponent<P>>;\\n\\nexport { }\\n\"\n\n//# sourceURL=webpack:///../tsx-editor/dist/types/foundation.d.ts?/mnt/work/5/s/node_modules/raw-loader");

/***/ }),

/***/ "../../node_modules/raw-loader/index.js!../tsx-editor/dist/types/icons.d.ts":
/*!*********************************************************************************!*\
  !*** /mnt/work/5/s/node_modules/raw-loader!../tsx-editor/dist/types/icons.d.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"import { IIconOptions } from '@uifabric/styling';\\n\\n/**\\n * @deprecated Const enum use is deprecated. See GitHub issue #7110: https://github.com/microsoft/fluentui/issues/7110\\n */\\nexport declare const enum IconNames {\\n    PageLink = \\\"PageLink\\\",\\n    CommentSolid = \\\"CommentSolid\\\",\\n    ChangeEntitlements = \\\"ChangeEntitlements\\\",\\n    Installation = \\\"Installation\\\",\\n    WebAppBuilderModule = \\\"WebAppBuilderModule\\\",\\n    WebAppBuilderFragment = \\\"WebAppBuilderFragment\\\",\\n    WebAppBuilderSlot = \\\"WebAppBuilderSlot\\\",\\n    BullseyeTargetEdit = \\\"BullseyeTargetEdit\\\",\\n    WebAppBuilderFragmentCreate = \\\"WebAppBuilderFragmentCreate\\\",\\n    PageData = \\\"PageData\\\",\\n    PageHeaderEdit = \\\"PageHeaderEdit\\\",\\n    ProductList = \\\"ProductList\\\",\\n    UnpublishContent = \\\"UnpublishContent\\\",\\n    DependencyAdd = \\\"DependencyAdd\\\",\\n    DependencyRemove = \\\"DependencyRemove\\\",\\n    EntitlementPolicy = \\\"EntitlementPolicy\\\",\\n    EntitlementRedemption = \\\"EntitlementRedemption\\\",\\n    SchoolDataSyncLogo = \\\"SchoolDataSyncLogo\\\",\\n    PinSolid12 = \\\"PinSolid12\\\",\\n    PinSolidOff12 = \\\"PinSolidOff12\\\",\\n    AddLink = \\\"AddLink\\\",\\n    SharepointAppIcon16 = \\\"SharepointAppIcon16\\\",\\n    DataflowsLink = \\\"DataflowsLink\\\",\\n    TimePicker = \\\"TimePicker\\\",\\n    UserWarning = \\\"UserWarning\\\",\\n    ComplianceAudit = \\\"ComplianceAudit\\\",\\n    GlobalNavButton = \\\"GlobalNavButton\\\",\\n    InternetSharing = \\\"InternetSharing\\\",\\n    Brightness = \\\"Brightness\\\",\\n    MapPin = \\\"MapPin\\\",\\n    Airplane = \\\"Airplane\\\",\\n    Tablet = \\\"Tablet\\\",\\n    QuickNote = \\\"QuickNote\\\",\\n    ChevronDown = \\\"ChevronDown\\\",\\n    ChevronUp = \\\"ChevronUp\\\",\\n    Edit = \\\"Edit\\\",\\n    Add = \\\"Add\\\",\\n    Cancel = \\\"Cancel\\\",\\n    More = \\\"More\\\",\\n    Settings = \\\"Settings\\\",\\n    Video = \\\"Video\\\",\\n    Mail = \\\"Mail\\\",\\n    People = \\\"People\\\",\\n    Phone = \\\"Phone\\\",\\n    Pin = \\\"Pin\\\",\\n    Shop = \\\"Shop\\\",\\n    Stop = \\\"Stop\\\",\\n    Link = \\\"Link\\\",\\n    Filter = \\\"Filter\\\",\\n    AllApps = \\\"AllApps\\\",\\n    Zoom = \\\"Zoom\\\",\\n    ZoomOut = \\\"ZoomOut\\\",\\n    Microphone = \\\"Microphone\\\",\\n    Search = \\\"Search\\\",\\n    Camera = \\\"Camera\\\",\\n    Attach = \\\"Attach\\\",\\n    Send = \\\"Send\\\",\\n    FavoriteList = \\\"FavoriteList\\\",\\n    PageSolid = \\\"PageSolid\\\",\\n    Forward = \\\"Forward\\\",\\n    Back = \\\"Back\\\",\\n    Refresh = \\\"Refresh\\\",\\n    Share = \\\"Share\\\",\\n    Lock = \\\"Lock\\\",\\n    BlockedSite = \\\"BlockedSite\\\",\\n    ReportHacked = \\\"ReportHacked\\\",\\n    EMI = \\\"EMI\\\",\\n    MiniLink = \\\"MiniLink\\\",\\n    Blocked = \\\"Blocked\\\",\\n    FavoriteStar = \\\"FavoriteStar\\\",\\n    FavoriteStarFill = \\\"FavoriteStarFill\\\",\\n    ReadingMode = \\\"ReadingMode\\\",\\n    Favicon = \\\"Favicon\\\",\\n    Remove = \\\"Remove\\\",\\n    Checkbox = \\\"Checkbox\\\",\\n    CheckboxComposite = \\\"CheckboxComposite\\\",\\n    CheckboxFill = \\\"CheckboxFill\\\",\\n    CheckboxIndeterminate = \\\"CheckboxIndeterminate\\\",\\n    CheckboxCompositeReversed = \\\"CheckboxCompositeReversed\\\",\\n    CheckMark = \\\"CheckMark\\\",\\n    BackToWindow = \\\"BackToWindow\\\",\\n    FullScreen = \\\"FullScreen\\\",\\n    Print = \\\"Print\\\",\\n    Up = \\\"Up\\\",\\n    Down = \\\"Down\\\",\\n    OEM = \\\"OEM\\\",\\n    Delete = \\\"Delete\\\",\\n    Save = \\\"Save\\\",\\n    ReturnKey = \\\"ReturnKey\\\",\\n    Cloud = \\\"Cloud\\\",\\n    Flashlight = \\\"Flashlight\\\",\\n    CommandPrompt = \\\"CommandPrompt\\\",\\n    Sad = \\\"Sad\\\",\\n    RealEstate = \\\"RealEstate\\\",\\n    SIPMove = \\\"SIPMove\\\",\\n    EraseTool = \\\"EraseTool\\\",\\n    GripperTool = \\\"GripperTool\\\",\\n    Dialpad = \\\"Dialpad\\\",\\n    PageLeft = \\\"PageLeft\\\",\\n    PageRight = \\\"PageRight\\\",\\n    MultiSelect = \\\"MultiSelect\\\",\\n    KeyboardClassic = \\\"KeyboardClassic\\\",\\n    Play = \\\"Play\\\",\\n    Pause = \\\"Pause\\\",\\n    ChevronLeft = \\\"ChevronLeft\\\",\\n    ChevronRight = \\\"ChevronRight\\\",\\n    InkingTool = \\\"InkingTool\\\",\\n    Emoji2 = \\\"Emoji2\\\",\\n    GripperBarHorizontal = \\\"GripperBarHorizontal\\\",\\n    System = \\\"System\\\",\\n    Personalize = \\\"Personalize\\\",\\n    SearchAndApps = \\\"SearchAndApps\\\",\\n    Globe = \\\"Globe\\\",\\n    EaseOfAccess = \\\"EaseOfAccess\\\",\\n    ContactInfo = \\\"ContactInfo\\\",\\n    Unpin = \\\"Unpin\\\",\\n    Contact = \\\"Contact\\\",\\n    Memo = \\\"Memo\\\",\\n    IncomingCall = \\\"IncomingCall\\\",\\n    Paste = \\\"Paste\\\",\\n    WindowsLogo = \\\"WindowsLogo\\\",\\n    Error = \\\"Error\\\",\\n    GripperBarVertical = \\\"GripperBarVertical\\\",\\n    Unlock = \\\"Unlock\\\",\\n    Slideshow = \\\"Slideshow\\\",\\n    Calendar = \\\"Calendar\\\",\\n    Megaphone = \\\"Megaphone\\\",\\n    Trim = \\\"Trim\\\",\\n    AutoEnhanceOn = \\\"AutoEnhanceOn\\\",\\n    AutoEnhanceOff = \\\"AutoEnhanceOff\\\",\\n    Color = \\\"Color\\\",\\n    SaveAs = \\\"SaveAs\\\",\\n    Light = \\\"Light\\\",\\n    Filters = \\\"Filters\\\",\\n    AspectRatio = \\\"AspectRatio\\\",\\n    Contrast = \\\"Contrast\\\",\\n    Redo = \\\"Redo\\\",\\n    Undo = \\\"Undo\\\",\\n    Crop = \\\"Crop\\\",\\n    PhotoCollection = \\\"PhotoCollection\\\",\\n    Album = \\\"Album\\\",\\n    Rotate = \\\"Rotate\\\",\\n    PanoIndicator = \\\"PanoIndicator\\\",\\n    Translate = \\\"Translate\\\",\\n    RedEye = \\\"RedEye\\\",\\n    ViewOriginal = \\\"ViewOriginal\\\",\\n    ThumbnailView = \\\"ThumbnailView\\\",\\n    Package = \\\"Package\\\",\\n    Telemarketer = \\\"Telemarketer\\\",\\n    Warning = \\\"Warning\\\",\\n    Financial = \\\"Financial\\\",\\n    Education = \\\"Education\\\",\\n    ShoppingCart = \\\"ShoppingCart\\\",\\n    Train = \\\"Train\\\",\\n    Flag = \\\"Flag\\\",\\n    Move = \\\"Move\\\",\\n    Page = \\\"Page\\\",\\n    TouchPointer = \\\"TouchPointer\\\",\\n    Merge = \\\"Merge\\\",\\n    TurnRight = \\\"TurnRight\\\",\\n    Ferry = \\\"Ferry\\\",\\n    Highlight = \\\"Highlight\\\",\\n    PowerButton = \\\"PowerButton\\\",\\n    Tab = \\\"Tab\\\",\\n    Admin = \\\"Admin\\\",\\n    TVMonitor = \\\"TVMonitor\\\",\\n    Speakers = \\\"Speakers\\\",\\n    Game = \\\"Game\\\",\\n    HorizontalTabKey = \\\"HorizontalTabKey\\\",\\n    UnstackSelected = \\\"UnstackSelected\\\",\\n    StackIndicator = \\\"StackIndicator\\\",\\n    Nav2DMapView = \\\"Nav2DMapView\\\",\\n    StreetsideSplitMinimize = \\\"StreetsideSplitMinimize\\\",\\n    Car = \\\"Car\\\",\\n    Bus = \\\"Bus\\\",\\n    EatDrink = \\\"EatDrink\\\",\\n    SeeDo = \\\"SeeDo\\\",\\n    LocationCircle = \\\"LocationCircle\\\",\\n    Home = \\\"Home\\\",\\n    SwitcherStartEnd = \\\"SwitcherStartEnd\\\",\\n    ParkingLocation = \\\"ParkingLocation\\\",\\n    IncidentTriangle = \\\"IncidentTriangle\\\",\\n    Touch = \\\"Touch\\\",\\n    MapDirections = \\\"MapDirections\\\",\\n    CaretHollow = \\\"CaretHollow\\\",\\n    CaretSolid = \\\"CaretSolid\\\",\\n    History = \\\"History\\\",\\n    Location = \\\"Location\\\",\\n    MapLayers = \\\"MapLayers\\\",\\n    SearchNearby = \\\"SearchNearby\\\",\\n    Work = \\\"Work\\\",\\n    Recent = \\\"Recent\\\",\\n    Hotel = \\\"Hotel\\\",\\n    Bank = \\\"Bank\\\",\\n    LocationDot = \\\"LocationDot\\\",\\n    Dictionary = \\\"Dictionary\\\",\\n    ChromeBack = \\\"ChromeBack\\\",\\n    FolderOpen = \\\"FolderOpen\\\",\\n    Pinned = \\\"Pinned\\\",\\n    PinnedFill = \\\"PinnedFill\\\",\\n    RevToggleKey = \\\"RevToggleKey\\\",\\n    USB = \\\"USB\\\",\\n    View = \\\"View\\\",\\n    Previous = \\\"Previous\\\",\\n    Next = \\\"Next\\\",\\n    Clear = \\\"Clear\\\",\\n    Sync = \\\"Sync\\\",\\n    Download = \\\"Download\\\",\\n    Help = \\\"Help\\\",\\n    Upload = \\\"Upload\\\",\\n    Emoji = \\\"Emoji\\\",\\n    MailForward = \\\"MailForward\\\",\\n    ClosePane = \\\"ClosePane\\\",\\n    OpenPane = \\\"OpenPane\\\",\\n    PreviewLink = \\\"PreviewLink\\\",\\n    ZoomIn = \\\"ZoomIn\\\",\\n    Bookmarks = \\\"Bookmarks\\\",\\n    Document = \\\"Document\\\",\\n    ProtectedDocument = \\\"ProtectedDocument\\\",\\n    OpenInNewWindow = \\\"OpenInNewWindow\\\",\\n    MailFill = \\\"MailFill\\\",\\n    ViewAll = \\\"ViewAll\\\",\\n    Switch = \\\"Switch\\\",\\n    Rename = \\\"Rename\\\",\\n    Go = \\\"Go\\\",\\n    Remote = \\\"Remote\\\",\\n    SelectAll = \\\"SelectAll\\\",\\n    Orientation = \\\"Orientation\\\",\\n    Import = \\\"Import\\\",\\n    Folder = \\\"Folder\\\",\\n    Picture = \\\"Picture\\\",\\n    ChromeClose = \\\"ChromeClose\\\",\\n    ShowResults = \\\"ShowResults\\\",\\n    Message = \\\"Message\\\",\\n    CalendarDay = \\\"CalendarDay\\\",\\n    CalendarWeek = \\\"CalendarWeek\\\",\\n    MailReplyAll = \\\"MailReplyAll\\\",\\n    Read = \\\"Read\\\",\\n    Cut = \\\"Cut\\\",\\n    PaymentCard = \\\"PaymentCard\\\",\\n    Copy = \\\"Copy\\\",\\n    Important = \\\"Important\\\",\\n    MailReply = \\\"MailReply\\\",\\n    Sort = \\\"Sort\\\",\\n    GotoToday = \\\"GotoToday\\\",\\n    Font = \\\"Font\\\",\\n    FontColor = \\\"FontColor\\\",\\n    FolderFill = \\\"FolderFill\\\",\\n    Permissions = \\\"Permissions\\\",\\n    DisableUpdates = \\\"DisableUpdates\\\",\\n    Unfavorite = \\\"Unfavorite\\\",\\n    Italic = \\\"Italic\\\",\\n    Underline = \\\"Underline\\\",\\n    Bold = \\\"Bold\\\",\\n    MoveToFolder = \\\"MoveToFolder\\\",\\n    Dislike = \\\"Dislike\\\",\\n    Like = \\\"Like\\\",\\n    AlignRight = \\\"AlignRight\\\",\\n    AlignCenter = \\\"AlignCenter\\\",\\n    AlignLeft = \\\"AlignLeft\\\",\\n    OpenFile = \\\"OpenFile\\\",\\n    ClearSelection = \\\"ClearSelection\\\",\\n    FontDecrease = \\\"FontDecrease\\\",\\n    FontIncrease = \\\"FontIncrease\\\",\\n    FontSize = \\\"FontSize\\\",\\n    CellPhone = \\\"CellPhone\\\",\\n    Tag = \\\"Tag\\\",\\n    RepeatOne = \\\"RepeatOne\\\",\\n    RepeatAll = \\\"RepeatAll\\\",\\n    Calculator = \\\"Calculator\\\",\\n    Library = \\\"Library\\\",\\n    PostUpdate = \\\"PostUpdate\\\",\\n    NewFolder = \\\"NewFolder\\\",\\n    CalendarReply = \\\"CalendarReply\\\",\\n    UnsyncFolder = \\\"UnsyncFolder\\\",\\n    SyncFolder = \\\"SyncFolder\\\",\\n    BlockContact = \\\"BlockContact\\\",\\n    AddFriend = \\\"AddFriend\\\",\\n    Accept = \\\"Accept\\\",\\n    BulletedList = \\\"BulletedList\\\",\\n    Preview = \\\"Preview\\\",\\n    News = \\\"News\\\",\\n    Chat = \\\"Chat\\\",\\n    Group = \\\"Group\\\",\\n    World = \\\"World\\\",\\n    Comment = \\\"Comment\\\",\\n    DockLeft = \\\"DockLeft\\\",\\n    DockRight = \\\"DockRight\\\",\\n    Repair = \\\"Repair\\\",\\n    Accounts = \\\"Accounts\\\",\\n    Street = \\\"Street\\\",\\n    RadioBullet = \\\"RadioBullet\\\",\\n    Stopwatch = \\\"Stopwatch\\\",\\n    Clock = \\\"Clock\\\",\\n    WorldClock = \\\"WorldClock\\\",\\n    AlarmClock = \\\"AlarmClock\\\",\\n    Photo = \\\"Photo\\\",\\n    ActionCenter = \\\"ActionCenter\\\",\\n    Hospital = \\\"Hospital\\\",\\n    Timer = \\\"Timer\\\",\\n    FullCircleMask = \\\"FullCircleMask\\\",\\n    LocationFill = \\\"LocationFill\\\",\\n    ChromeMinimize = \\\"ChromeMinimize\\\",\\n    ChromeRestore = \\\"ChromeRestore\\\",\\n    Annotation = \\\"Annotation\\\",\\n    Fingerprint = \\\"Fingerprint\\\",\\n    Handwriting = \\\"Handwriting\\\",\\n    ChromeFullScreen = \\\"ChromeFullScreen\\\",\\n    Completed = \\\"Completed\\\",\\n    Label = \\\"Label\\\",\\n    FlickDown = \\\"FlickDown\\\",\\n    FlickUp = \\\"FlickUp\\\",\\n    FlickLeft = \\\"FlickLeft\\\",\\n    FlickRight = \\\"FlickRight\\\",\\n    MiniExpand = \\\"MiniExpand\\\",\\n    MiniContract = \\\"MiniContract\\\",\\n    Streaming = \\\"Streaming\\\",\\n    MusicInCollection = \\\"MusicInCollection\\\",\\n    OneDriveLogo = \\\"OneDriveLogo\\\",\\n    CompassNW = \\\"CompassNW\\\",\\n    Code = \\\"Code\\\",\\n    LightningBolt = \\\"LightningBolt\\\",\\n    Info = \\\"Info\\\",\\n    CalculatorMultiply = \\\"CalculatorMultiply\\\",\\n    CalculatorAddition = \\\"CalculatorAddition\\\",\\n    CalculatorSubtract = \\\"CalculatorSubtract\\\",\\n    CalculatorPercentage = \\\"CalculatorPercentage\\\",\\n    CalculatorEqualTo = \\\"CalculatorEqualTo\\\",\\n    PrintfaxPrinterFile = \\\"PrintfaxPrinterFile\\\",\\n    StorageOptical = \\\"StorageOptical\\\",\\n    Communications = \\\"Communications\\\",\\n    Headset = \\\"Headset\\\",\\n    Health = \\\"Health\\\",\\n    Webcam2 = \\\"Webcam2\\\",\\n    FrontCamera = \\\"FrontCamera\\\",\\n    ChevronUpSmall = \\\"ChevronUpSmall\\\",\\n    ChevronDownSmall = \\\"ChevronDownSmall\\\",\\n    ChevronLeftSmall = \\\"ChevronLeftSmall\\\",\\n    ChevronRightSmall = \\\"ChevronRightSmall\\\",\\n    ChevronUpMed = \\\"ChevronUpMed\\\",\\n    ChevronDownMed = \\\"ChevronDownMed\\\",\\n    ChevronLeftMed = \\\"ChevronLeftMed\\\",\\n    ChevronRightMed = \\\"ChevronRightMed\\\",\\n    Devices2 = \\\"Devices2\\\",\\n    PC1 = \\\"PC1\\\",\\n    PresenceChickletVideo = \\\"PresenceChickletVideo\\\",\\n    Reply = \\\"Reply\\\",\\n    HalfAlpha = \\\"HalfAlpha\\\",\\n    ConstructionCone = \\\"ConstructionCone\\\",\\n    DoubleChevronLeftMed = \\\"DoubleChevronLeftMed\\\",\\n    Volume0 = \\\"Volume0\\\",\\n    Volume1 = \\\"Volume1\\\",\\n    Volume2 = \\\"Volume2\\\",\\n    Volume3 = \\\"Volume3\\\",\\n    Chart = \\\"Chart\\\",\\n    Robot = \\\"Robot\\\",\\n    Manufacturing = \\\"Manufacturing\\\",\\n    LockSolid = \\\"LockSolid\\\",\\n    FitPage = \\\"FitPage\\\",\\n    FitWidth = \\\"FitWidth\\\",\\n    BidiLtr = \\\"BidiLtr\\\",\\n    BidiRtl = \\\"BidiRtl\\\",\\n    RightDoubleQuote = \\\"RightDoubleQuote\\\",\\n    Sunny = \\\"Sunny\\\",\\n    CloudWeather = \\\"CloudWeather\\\",\\n    Cloudy = \\\"Cloudy\\\",\\n    PartlyCloudyDay = \\\"PartlyCloudyDay\\\",\\n    PartlyCloudyNight = \\\"PartlyCloudyNight\\\",\\n    ClearNight = \\\"ClearNight\\\",\\n    RainShowersDay = \\\"RainShowersDay\\\",\\n    Rain = \\\"Rain\\\",\\n    Thunderstorms = \\\"Thunderstorms\\\",\\n    RainSnow = \\\"RainSnow\\\",\\n    Snow = \\\"Snow\\\",\\n    BlowingSnow = \\\"BlowingSnow\\\",\\n    Frigid = \\\"Frigid\\\",\\n    Fog = \\\"Fog\\\",\\n    Squalls = \\\"Squalls\\\",\\n    Duststorm = \\\"Duststorm\\\",\\n    Unknown = \\\"Unknown\\\",\\n    Precipitation = \\\"Precipitation\\\",\\n    SortLines = \\\"SortLines\\\",\\n    Ribbon = \\\"Ribbon\\\",\\n    AreaChart = \\\"AreaChart\\\",\\n    Assign = \\\"Assign\\\",\\n    FlowChart = \\\"FlowChart\\\",\\n    CheckList = \\\"CheckList\\\",\\n    Diagnostic = \\\"Diagnostic\\\",\\n    Generate = \\\"Generate\\\",\\n    LineChart = \\\"LineChart\\\",\\n    Equalizer = \\\"Equalizer\\\",\\n    BarChartHorizontal = \\\"BarChartHorizontal\\\",\\n    BarChartVertical = \\\"BarChartVertical\\\",\\n    Freezing = \\\"Freezing\\\",\\n    FunnelChart = \\\"FunnelChart\\\",\\n    Processing = \\\"Processing\\\",\\n    Quantity = \\\"Quantity\\\",\\n    ReportDocument = \\\"ReportDocument\\\",\\n    StackColumnChart = \\\"StackColumnChart\\\",\\n    SnowShowerDay = \\\"SnowShowerDay\\\",\\n    HailDay = \\\"HailDay\\\",\\n    WorkFlow = \\\"WorkFlow\\\",\\n    HourGlass = \\\"HourGlass\\\",\\n    StoreLogoMed20 = \\\"StoreLogoMed20\\\",\\n    TimeSheet = \\\"TimeSheet\\\",\\n    TriangleSolid = \\\"TriangleSolid\\\",\\n    UpgradeAnalysis = \\\"UpgradeAnalysis\\\",\\n    VideoSolid = \\\"VideoSolid\\\",\\n    RainShowersNight = \\\"RainShowersNight\\\",\\n    SnowShowerNight = \\\"SnowShowerNight\\\",\\n    Teamwork = \\\"Teamwork\\\",\\n    HailNight = \\\"HailNight\\\",\\n    PeopleAdd = \\\"PeopleAdd\\\",\\n    Glasses = \\\"Glasses\\\",\\n    DateTime2 = \\\"DateTime2\\\",\\n    Shield = \\\"Shield\\\",\\n    Header1 = \\\"Header1\\\",\\n    PageAdd = \\\"PageAdd\\\",\\n    NumberedList = \\\"NumberedList\\\",\\n    PowerBILogo = \\\"PowerBILogo\\\",\\n    Info2 = \\\"Info2\\\",\\n    MusicInCollectionFill = \\\"MusicInCollectionFill\\\",\\n    List = \\\"List\\\",\\n    Asterisk = \\\"Asterisk\\\",\\n    ErrorBadge = \\\"ErrorBadge\\\",\\n    CircleRing = \\\"CircleRing\\\",\\n    CircleFill = \\\"CircleFill\\\",\\n    Record2 = \\\"Record2\\\",\\n    AllAppsMirrored = \\\"AllAppsMirrored\\\",\\n    BookmarksMirrored = \\\"BookmarksMirrored\\\",\\n    BulletedListMirrored = \\\"BulletedListMirrored\\\",\\n    CaretHollowMirrored = \\\"CaretHollowMirrored\\\",\\n    CaretSolidMirrored = \\\"CaretSolidMirrored\\\",\\n    ChromeBackMirrored = \\\"ChromeBackMirrored\\\",\\n    ClearSelectionMirrored = \\\"ClearSelectionMirrored\\\",\\n    ClosePaneMirrored = \\\"ClosePaneMirrored\\\",\\n    DockLeftMirrored = \\\"DockLeftMirrored\\\",\\n    DoubleChevronLeftMedMirrored = \\\"DoubleChevronLeftMedMirrored\\\",\\n    GoMirrored = \\\"GoMirrored\\\",\\n    HelpMirrored = \\\"HelpMirrored\\\",\\n    ImportMirrored = \\\"ImportMirrored\\\",\\n    ImportAllMirrored = \\\"ImportAllMirrored\\\",\\n    ListMirrored = \\\"ListMirrored\\\",\\n    MailForwardMirrored = \\\"MailForwardMirrored\\\",\\n    MailReplyMirrored = \\\"MailReplyMirrored\\\",\\n    MailReplyAllMirrored = \\\"MailReplyAllMirrored\\\",\\n    MiniContractMirrored = \\\"MiniContractMirrored\\\",\\n    MiniExpandMirrored = \\\"MiniExpandMirrored\\\",\\n    OpenPaneMirrored = \\\"OpenPaneMirrored\\\",\\n    ParkingLocationMirrored = \\\"ParkingLocationMirrored\\\",\\n    SendMirrored = \\\"SendMirrored\\\",\\n    ShowResultsMirrored = \\\"ShowResultsMirrored\\\",\\n    ThumbnailViewMirrored = \\\"ThumbnailViewMirrored\\\",\\n    Media = \\\"Media\\\",\\n    Devices3 = \\\"Devices3\\\",\\n    Focus = \\\"Focus\\\",\\n    VideoLightOff = \\\"VideoLightOff\\\",\\n    Lightbulb = \\\"Lightbulb\\\",\\n    StatusTriangle = \\\"StatusTriangle\\\",\\n    VolumeDisabled = \\\"VolumeDisabled\\\",\\n    Puzzle = \\\"Puzzle\\\",\\n    EmojiNeutral = \\\"EmojiNeutral\\\",\\n    EmojiDisappointed = \\\"EmojiDisappointed\\\",\\n    HomeSolid = \\\"HomeSolid\\\",\\n    Ringer = \\\"Ringer\\\",\\n    PDF = \\\"PDF\\\",\\n    HeartBroken = \\\"HeartBroken\\\",\\n    StoreLogo16 = \\\"StoreLogo16\\\",\\n    MultiSelectMirrored = \\\"MultiSelectMirrored\\\",\\n    Broom = \\\"Broom\\\",\\n    AddToShoppingList = \\\"AddToShoppingList\\\",\\n    Cocktails = \\\"Cocktails\\\",\\n    Wines = \\\"Wines\\\",\\n    Articles = \\\"Articles\\\",\\n    Cycling = \\\"Cycling\\\",\\n    DietPlanNotebook = \\\"DietPlanNotebook\\\",\\n    Pill = \\\"Pill\\\",\\n    ExerciseTracker = \\\"ExerciseTracker\\\",\\n    HandsFree = \\\"HandsFree\\\",\\n    Medical = \\\"Medical\\\",\\n    Running = \\\"Running\\\",\\n    Weights = \\\"Weights\\\",\\n    Trackers = \\\"Trackers\\\",\\n    AddNotes = \\\"AddNotes\\\",\\n    AllCurrency = \\\"AllCurrency\\\",\\n    BarChart4 = \\\"BarChart4\\\",\\n    CirclePlus = \\\"CirclePlus\\\",\\n    Coffee = \\\"Coffee\\\",\\n    Cotton = \\\"Cotton\\\",\\n    Market = \\\"Market\\\",\\n    Money = \\\"Money\\\",\\n    PieDouble = \\\"PieDouble\\\",\\n    PieSingle = \\\"PieSingle\\\",\\n    RemoveFilter = \\\"RemoveFilter\\\",\\n    Savings = \\\"Savings\\\",\\n    Sell = \\\"Sell\\\",\\n    StockDown = \\\"StockDown\\\",\\n    StockUp = \\\"StockUp\\\",\\n    Lamp = \\\"Lamp\\\",\\n    Source = \\\"Source\\\",\\n    MSNVideos = \\\"MSNVideos\\\",\\n    Cricket = \\\"Cricket\\\",\\n    Golf = \\\"Golf\\\",\\n    Baseball = \\\"Baseball\\\",\\n    Soccer = \\\"Soccer\\\",\\n    MoreSports = \\\"MoreSports\\\",\\n    AutoRacing = \\\"AutoRacing\\\",\\n    CollegeHoops = \\\"CollegeHoops\\\",\\n    CollegeFootball = \\\"CollegeFootball\\\",\\n    ProFootball = \\\"ProFootball\\\",\\n    ProHockey = \\\"ProHockey\\\",\\n    Rugby = \\\"Rugby\\\",\\n    SubstitutionsIn = \\\"SubstitutionsIn\\\",\\n    Tennis = \\\"Tennis\\\",\\n    Arrivals = \\\"Arrivals\\\",\\n    Design = \\\"Design\\\",\\n    Website = \\\"Website\\\",\\n    Drop = \\\"Drop\\\",\\n    HistoricalWeather = \\\"HistoricalWeather\\\",\\n    SkiResorts = \\\"SkiResorts\\\",\\n    Snowflake = \\\"Snowflake\\\",\\n    BusSolid = \\\"BusSolid\\\",\\n    FerrySolid = \\\"FerrySolid\\\",\\n    AirplaneSolid = \\\"AirplaneSolid\\\",\\n    TrainSolid = \\\"TrainSolid\\\",\\n    Heart = \\\"Heart\\\",\\n    HeartFill = \\\"HeartFill\\\",\\n    Ticket = \\\"Ticket\\\",\\n    WifiWarning4 = \\\"WifiWarning4\\\",\\n    Devices4 = \\\"Devices4\\\",\\n    AzureLogo = \\\"AzureLogo\\\",\\n    BingLogo = \\\"BingLogo\\\",\\n    MSNLogo = \\\"MSNLogo\\\",\\n    OutlookLogoInverse = \\\"OutlookLogoInverse\\\",\\n    OfficeLogo = \\\"OfficeLogo\\\",\\n    SkypeLogo = \\\"SkypeLogo\\\",\\n    Door = \\\"Door\\\",\\n    EditMirrored = \\\"EditMirrored\\\",\\n    GiftCard = \\\"GiftCard\\\",\\n    DoubleBookmark = \\\"DoubleBookmark\\\",\\n    StatusErrorFull = \\\"StatusErrorFull\\\",\\n    Certificate = \\\"Certificate\\\",\\n    FastForward = \\\"FastForward\\\",\\n    Rewind = \\\"Rewind\\\",\\n    Photo2 = \\\"Photo2\\\",\\n    OpenSource = \\\"OpenSource\\\",\\n    Movers = \\\"Movers\\\",\\n    CloudDownload = \\\"CloudDownload\\\",\\n    Family = \\\"Family\\\",\\n    WindDirection = \\\"WindDirection\\\",\\n    Bug = \\\"Bug\\\",\\n    SiteScan = \\\"SiteScan\\\",\\n    BrowserScreenShot = \\\"BrowserScreenShot\\\",\\n    F12DevTools = \\\"F12DevTools\\\",\\n    CSS = \\\"CSS\\\",\\n    JS = \\\"JS\\\",\\n    DeliveryTruck = \\\"DeliveryTruck\\\",\\n    ReminderPerson = \\\"ReminderPerson\\\",\\n    ReminderGroup = \\\"ReminderGroup\\\",\\n    ReminderTime = \\\"ReminderTime\\\",\\n    TabletMode = \\\"TabletMode\\\",\\n    Umbrella = \\\"Umbrella\\\",\\n    NetworkTower = \\\"NetworkTower\\\",\\n    CityNext = \\\"CityNext\\\",\\n    CityNext2 = \\\"CityNext2\\\",\\n    Section = \\\"Section\\\",\\n    OneNoteLogoInverse = \\\"OneNoteLogoInverse\\\",\\n    ToggleFilled = \\\"ToggleFilled\\\",\\n    ToggleBorder = \\\"ToggleBorder\\\",\\n    SliderThumb = \\\"SliderThumb\\\",\\n    ToggleThumb = \\\"ToggleThumb\\\",\\n    Documentation = \\\"Documentation\\\",\\n    Badge = \\\"Badge\\\",\\n    Giftbox = \\\"Giftbox\\\",\\n    VisualStudioLogo = \\\"VisualStudioLogo\\\",\\n    HomeGroup = \\\"HomeGroup\\\",\\n    ExcelLogoInverse = \\\"ExcelLogoInverse\\\",\\n    WordLogoInverse = \\\"WordLogoInverse\\\",\\n    PowerPointLogoInverse = \\\"PowerPointLogoInverse\\\",\\n    Cafe = \\\"Cafe\\\",\\n    SpeedHigh = \\\"SpeedHigh\\\",\\n    Commitments = \\\"Commitments\\\",\\n    ThisPC = \\\"ThisPC\\\",\\n    MusicNote = \\\"MusicNote\\\",\\n    MicOff = \\\"MicOff\\\",\\n    PlaybackRate1x = \\\"PlaybackRate1x\\\",\\n    EdgeLogo = \\\"EdgeLogo\\\",\\n    CompletedSolid = \\\"CompletedSolid\\\",\\n    AlbumRemove = \\\"AlbumRemove\\\",\\n    MessageFill = \\\"MessageFill\\\",\\n    TabletSelected = \\\"TabletSelected\\\",\\n    MobileSelected = \\\"MobileSelected\\\",\\n    LaptopSelected = \\\"LaptopSelected\\\",\\n    TVMonitorSelected = \\\"TVMonitorSelected\\\",\\n    DeveloperTools = \\\"DeveloperTools\\\",\\n    Shapes = \\\"Shapes\\\",\\n    InsertTextBox = \\\"InsertTextBox\\\",\\n    LowerBrightness = \\\"LowerBrightness\\\",\\n    WebComponents = \\\"WebComponents\\\",\\n    OfflineStorage = \\\"OfflineStorage\\\",\\n    DOM = \\\"DOM\\\",\\n    CloudUpload = \\\"CloudUpload\\\",\\n    ScrollUpDown = \\\"ScrollUpDown\\\",\\n    DateTime = \\\"DateTime\\\",\\n    Event = \\\"Event\\\",\\n    Cake = \\\"Cake\\\",\\n    Tiles = \\\"Tiles\\\",\\n    Org = \\\"Org\\\",\\n    PartyLeader = \\\"PartyLeader\\\",\\n    DRM = \\\"DRM\\\",\\n    CloudAdd = \\\"CloudAdd\\\",\\n    AppIconDefault = \\\"AppIconDefault\\\",\\n    Photo2Add = \\\"Photo2Add\\\",\\n    Photo2Remove = \\\"Photo2Remove\\\",\\n    Calories = \\\"Calories\\\",\\n    POI = \\\"POI\\\",\\n    AddTo = \\\"AddTo\\\",\\n    RadioBtnOff = \\\"RadioBtnOff\\\",\\n    RadioBtnOn = \\\"RadioBtnOn\\\",\\n    ExploreContent = \\\"ExploreContent\\\",\\n    Embed = \\\"Embed\\\",\\n    Product = \\\"Product\\\",\\n    ProgressLoopInner = \\\"ProgressLoopInner\\\",\\n    ProgressLoopOuter = \\\"ProgressLoopOuter\\\",\\n    Blocked2 = \\\"Blocked2\\\",\\n    FangBody = \\\"FangBody\\\",\\n    Toolbox = \\\"Toolbox\\\",\\n    PageHeader = \\\"PageHeader\\\",\\n    Glimmer = \\\"Glimmer\\\",\\n    ChatInviteFriend = \\\"ChatInviteFriend\\\",\\n    Brush = \\\"Brush\\\",\\n    Shirt = \\\"Shirt\\\",\\n    Crown = \\\"Crown\\\",\\n    Diamond = \\\"Diamond\\\",\\n    ScaleUp = \\\"ScaleUp\\\",\\n    QRCode = \\\"QRCode\\\",\\n    Feedback = \\\"Feedback\\\",\\n    SharepointLogoInverse = \\\"SharepointLogoInverse\\\",\\n    YammerLogo = \\\"YammerLogo\\\",\\n    Hide = \\\"Hide\\\",\\n    Uneditable = \\\"Uneditable\\\",\\n    ReturnToSession = \\\"ReturnToSession\\\",\\n    OpenFolderHorizontal = \\\"OpenFolderHorizontal\\\",\\n    CalendarMirrored = \\\"CalendarMirrored\\\",\\n    SwayLogoInverse = \\\"SwayLogoInverse\\\",\\n    OutOfOffice = \\\"OutOfOffice\\\",\\n    Trophy = \\\"Trophy\\\",\\n    ReopenPages = \\\"ReopenPages\\\",\\n    EmojiTabSymbols = \\\"EmojiTabSymbols\\\",\\n    AADLogo = \\\"AADLogo\\\",\\n    AccessLogo = \\\"AccessLogo\\\",\\n    AdminALogoInverse32 = \\\"AdminALogoInverse32\\\",\\n    AdminCLogoInverse32 = \\\"AdminCLogoInverse32\\\",\\n    AdminDLogoInverse32 = \\\"AdminDLogoInverse32\\\",\\n    AdminELogoInverse32 = \\\"AdminELogoInverse32\\\",\\n    AdminLLogoInverse32 = \\\"AdminLLogoInverse32\\\",\\n    AdminMLogoInverse32 = \\\"AdminMLogoInverse32\\\",\\n    AdminOLogoInverse32 = \\\"AdminOLogoInverse32\\\",\\n    AdminPLogoInverse32 = \\\"AdminPLogoInverse32\\\",\\n    AdminSLogoInverse32 = \\\"AdminSLogoInverse32\\\",\\n    AdminYLogoInverse32 = \\\"AdminYLogoInverse32\\\",\\n    DelveLogoInverse = \\\"DelveLogoInverse\\\",\\n    ExchangeLogoInverse = \\\"ExchangeLogoInverse\\\",\\n    LyncLogo = \\\"LyncLogo\\\",\\n    OfficeVideoLogoInverse = \\\"OfficeVideoLogoInverse\\\",\\n    SocialListeningLogo = \\\"SocialListeningLogo\\\",\\n    VisioLogoInverse = \\\"VisioLogoInverse\\\",\\n    Balloons = \\\"Balloons\\\",\\n    Cat = \\\"Cat\\\",\\n    MailAlert = \\\"MailAlert\\\",\\n    MailCheck = \\\"MailCheck\\\",\\n    MailLowImportance = \\\"MailLowImportance\\\",\\n    MailPause = \\\"MailPause\\\",\\n    MailRepeat = \\\"MailRepeat\\\",\\n    SecurityGroup = \\\"SecurityGroup\\\",\\n    Table = \\\"Table\\\",\\n    VoicemailForward = \\\"VoicemailForward\\\",\\n    VoicemailReply = \\\"VoicemailReply\\\",\\n    Waffle = \\\"Waffle\\\",\\n    RemoveEvent = \\\"RemoveEvent\\\",\\n    EventInfo = \\\"EventInfo\\\",\\n    ForwardEvent = \\\"ForwardEvent\\\",\\n    WipePhone = \\\"WipePhone\\\",\\n    AddOnlineMeeting = \\\"AddOnlineMeeting\\\",\\n    JoinOnlineMeeting = \\\"JoinOnlineMeeting\\\",\\n    RemoveLink = \\\"RemoveLink\\\",\\n    PeopleBlock = \\\"PeopleBlock\\\",\\n    PeopleRepeat = \\\"PeopleRepeat\\\",\\n    PeopleAlert = \\\"PeopleAlert\\\",\\n    PeoplePause = \\\"PeoplePause\\\",\\n    TransferCall = \\\"TransferCall\\\",\\n    AddPhone = \\\"AddPhone\\\",\\n    UnknownCall = \\\"UnknownCall\\\",\\n    NoteReply = \\\"NoteReply\\\",\\n    NoteForward = \\\"NoteForward\\\",\\n    NotePinned = \\\"NotePinned\\\",\\n    RemoveOccurrence = \\\"RemoveOccurrence\\\",\\n    Timeline = \\\"Timeline\\\",\\n    EditNote = \\\"EditNote\\\",\\n    CircleHalfFull = \\\"CircleHalfFull\\\",\\n    Room = \\\"Room\\\",\\n    Unsubscribe = \\\"Unsubscribe\\\",\\n    Subscribe = \\\"Subscribe\\\",\\n    HardDrive = \\\"HardDrive\\\",\\n    RecurringTask = \\\"RecurringTask\\\",\\n    TaskManager = \\\"TaskManager\\\",\\n    TaskManagerMirrored = \\\"TaskManagerMirrored\\\",\\n    Combine = \\\"Combine\\\",\\n    Split = \\\"Split\\\",\\n    DoubleChevronUp = \\\"DoubleChevronUp\\\",\\n    DoubleChevronLeft = \\\"DoubleChevronLeft\\\",\\n    DoubleChevronRight = \\\"DoubleChevronRight\\\",\\n    Ascending = \\\"Ascending\\\",\\n    Descending = \\\"Descending\\\",\\n    TextBox = \\\"TextBox\\\",\\n    TextField = \\\"TextField\\\",\\n    NumberField = \\\"NumberField\\\",\\n    Dropdown = \\\"Dropdown\\\",\\n    PenWorkspace = \\\"PenWorkspace\\\",\\n    BookingsLogo = \\\"BookingsLogo\\\",\\n    ClassNotebookLogoInverse = \\\"ClassNotebookLogoInverse\\\",\\n    DelveAnalyticsLogo = \\\"DelveAnalyticsLogo\\\",\\n    DocsLogoInverse = \\\"DocsLogoInverse\\\",\\n    Dynamics365Logo = \\\"Dynamics365Logo\\\",\\n    DynamicSMBLogo = \\\"DynamicSMBLogo\\\",\\n    OfficeAssistantLogo = \\\"OfficeAssistantLogo\\\",\\n    OfficeStoreLogo = \\\"OfficeStoreLogo\\\",\\n    OneNoteEduLogoInverse = \\\"OneNoteEduLogoInverse\\\",\\n    PlannerLogo = \\\"PlannerLogo\\\",\\n    PowerApps = \\\"PowerApps\\\",\\n    Suitcase = \\\"Suitcase\\\",\\n    ProjectLogoInverse = \\\"ProjectLogoInverse\\\",\\n    CaretLeft8 = \\\"CaretLeft8\\\",\\n    CaretRight8 = \\\"CaretRight8\\\",\\n    CaretUp8 = \\\"CaretUp8\\\",\\n    CaretDown8 = \\\"CaretDown8\\\",\\n    CaretLeftSolid8 = \\\"CaretLeftSolid8\\\",\\n    CaretRightSolid8 = \\\"CaretRightSolid8\\\",\\n    CaretUpSolid8 = \\\"CaretUpSolid8\\\",\\n    CaretDownSolid8 = \\\"CaretDownSolid8\\\",\\n    ClearFormatting = \\\"ClearFormatting\\\",\\n    Superscript = \\\"Superscript\\\",\\n    Subscript = \\\"Subscript\\\",\\n    Strikethrough = \\\"Strikethrough\\\",\\n    Export = \\\"Export\\\",\\n    ExportMirrored = \\\"ExportMirrored\\\",\\n    SingleBookmark = \\\"SingleBookmark\\\",\\n    SingleBookmarkSolid = \\\"SingleBookmarkSolid\\\",\\n    DoubleChevronDown = \\\"DoubleChevronDown\\\",\\n    FollowUser = \\\"FollowUser\\\",\\n    ReplyAll = \\\"ReplyAll\\\",\\n    WorkforceManagement = \\\"WorkforceManagement\\\",\\n    RecruitmentManagement = \\\"RecruitmentManagement\\\",\\n    Questionnaire = \\\"Questionnaire\\\",\\n    ManagerSelfService = \\\"ManagerSelfService\\\",\\n    ProductionFloorManagement = \\\"ProductionFloorManagement\\\",\\n    ProductRelease = \\\"ProductRelease\\\",\\n    ProductVariant = \\\"ProductVariant\\\",\\n    ReplyMirrored = \\\"ReplyMirrored\\\",\\n    ReplyAllMirrored = \\\"ReplyAllMirrored\\\",\\n    Medal = \\\"Medal\\\",\\n    AddGroup = \\\"AddGroup\\\",\\n    QuestionnaireMirrored = \\\"QuestionnaireMirrored\\\",\\n    CloudImportExport = \\\"CloudImportExport\\\",\\n    TemporaryUser = \\\"TemporaryUser\\\",\\n    CaretSolid16 = \\\"CaretSolid16\\\",\\n    GroupedDescending = \\\"GroupedDescending\\\",\\n    GroupedAscending = \\\"GroupedAscending\\\",\\n    SortUp = \\\"SortUp\\\",\\n    SortDown = \\\"SortDown\\\",\\n    AwayStatus = \\\"AwayStatus\\\",\\n    MyMoviesTV = \\\"MyMoviesTV\\\",\\n    SyncToPC = \\\"SyncToPC\\\",\\n    GenericScan = \\\"GenericScan\\\",\\n    AustralianRules = \\\"AustralianRules\\\",\\n    WifiEthernet = \\\"WifiEthernet\\\",\\n    TrackersMirrored = \\\"TrackersMirrored\\\",\\n    DateTimeMirrored = \\\"DateTimeMirrored\\\",\\n    StopSolid = \\\"StopSolid\\\",\\n    DoubleChevronUp12 = \\\"DoubleChevronUp12\\\",\\n    DoubleChevronDown12 = \\\"DoubleChevronDown12\\\",\\n    DoubleChevronLeft12 = \\\"DoubleChevronLeft12\\\",\\n    DoubleChevronRight12 = \\\"DoubleChevronRight12\\\",\\n    CalendarAgenda = \\\"CalendarAgenda\\\",\\n    ConnectVirtualMachine = \\\"ConnectVirtualMachine\\\",\\n    AddEvent = \\\"AddEvent\\\",\\n    AssetLibrary = \\\"AssetLibrary\\\",\\n    DataConnectionLibrary = \\\"DataConnectionLibrary\\\",\\n    DocLibrary = \\\"DocLibrary\\\",\\n    FormLibrary = \\\"FormLibrary\\\",\\n    FormLibraryMirrored = \\\"FormLibraryMirrored\\\",\\n    ReportLibrary = \\\"ReportLibrary\\\",\\n    ReportLibraryMirrored = \\\"ReportLibraryMirrored\\\",\\n    ContactCard = \\\"ContactCard\\\",\\n    CustomList = \\\"CustomList\\\",\\n    CustomListMirrored = \\\"CustomListMirrored\\\",\\n    IssueTracking = \\\"IssueTracking\\\",\\n    IssueTrackingMirrored = \\\"IssueTrackingMirrored\\\",\\n    PictureLibrary = \\\"PictureLibrary\\\",\\n    OfficeAddinsLogo = \\\"OfficeAddinsLogo\\\",\\n    OfflineOneDriveParachute = \\\"OfflineOneDriveParachute\\\",\\n    OfflineOneDriveParachuteDisabled = \\\"OfflineOneDriveParachuteDisabled\\\",\\n    LargeGrid = \\\"LargeGrid\\\",\\n    TriangleSolidUp12 = \\\"TriangleSolidUp12\\\",\\n    TriangleSolidDown12 = \\\"TriangleSolidDown12\\\",\\n    TriangleSolidLeft12 = \\\"TriangleSolidLeft12\\\",\\n    TriangleSolidRight12 = \\\"TriangleSolidRight12\\\",\\n    TriangleUp12 = \\\"TriangleUp12\\\",\\n    TriangleDown12 = \\\"TriangleDown12\\\",\\n    TriangleLeft12 = \\\"TriangleLeft12\\\",\\n    TriangleRight12 = \\\"TriangleRight12\\\",\\n    ArrowUpRight8 = \\\"ArrowUpRight8\\\",\\n    ArrowDownRight8 = \\\"ArrowDownRight8\\\",\\n    DocumentSet = \\\"DocumentSet\\\",\\n    GoToDashboard = \\\"GoToDashboard\\\",\\n    DelveAnalytics = \\\"DelveAnalytics\\\",\\n    ArrowUpRightMirrored8 = \\\"ArrowUpRightMirrored8\\\",\\n    ArrowDownRightMirrored8 = \\\"ArrowDownRightMirrored8\\\",\\n    CompanyDirectory = \\\"CompanyDirectory\\\",\\n    OpenEnrollment = \\\"OpenEnrollment\\\",\\n    CompanyDirectoryMirrored = \\\"CompanyDirectoryMirrored\\\",\\n    OneDriveAdd = \\\"OneDriveAdd\\\",\\n    ProfileSearch = \\\"ProfileSearch\\\",\\n    Header2 = \\\"Header2\\\",\\n    Header3 = \\\"Header3\\\",\\n    Header4 = \\\"Header4\\\",\\n    RingerSolid = \\\"RingerSolid\\\",\\n    Eyedropper = \\\"Eyedropper\\\",\\n    MarketDown = \\\"MarketDown\\\",\\n    CalendarWorkWeek = \\\"CalendarWorkWeek\\\",\\n    SidePanel = \\\"SidePanel\\\",\\n    GlobeFavorite = \\\"GlobeFavorite\\\",\\n    CaretTopLeftSolid8 = \\\"CaretTopLeftSolid8\\\",\\n    CaretTopRightSolid8 = \\\"CaretTopRightSolid8\\\",\\n    ViewAll2 = \\\"ViewAll2\\\",\\n    DocumentReply = \\\"DocumentReply\\\",\\n    PlayerSettings = \\\"PlayerSettings\\\",\\n    ReceiptForward = \\\"ReceiptForward\\\",\\n    ReceiptReply = \\\"ReceiptReply\\\",\\n    ReceiptCheck = \\\"ReceiptCheck\\\",\\n    Fax = \\\"Fax\\\",\\n    RecurringEvent = \\\"RecurringEvent\\\",\\n    ReplyAlt = \\\"ReplyAlt\\\",\\n    ReplyAllAlt = \\\"ReplyAllAlt\\\",\\n    EditStyle = \\\"EditStyle\\\",\\n    EditMail = \\\"EditMail\\\",\\n    Lifesaver = \\\"Lifesaver\\\",\\n    LifesaverLock = \\\"LifesaverLock\\\",\\n    InboxCheck = \\\"InboxCheck\\\",\\n    FolderSearch = \\\"FolderSearch\\\",\\n    CollapseMenu = \\\"CollapseMenu\\\",\\n    ExpandMenu = \\\"ExpandMenu\\\",\\n    Boards = \\\"Boards\\\",\\n    SunAdd = \\\"SunAdd\\\",\\n    SunQuestionMark = \\\"SunQuestionMark\\\",\\n    LandscapeOrientation = \\\"LandscapeOrientation\\\",\\n    DocumentSearch = \\\"DocumentSearch\\\",\\n    PublicCalendar = \\\"PublicCalendar\\\",\\n    PublicContactCard = \\\"PublicContactCard\\\",\\n    PublicEmail = \\\"PublicEmail\\\",\\n    PublicFolder = \\\"PublicFolder\\\",\\n    WordDocument = \\\"WordDocument\\\",\\n    PowerPointDocument = \\\"PowerPointDocument\\\",\\n    ExcelDocument = \\\"ExcelDocument\\\",\\n    GroupedList = \\\"GroupedList\\\",\\n    ClassroomLogo = \\\"ClassroomLogo\\\",\\n    Sections = \\\"Sections\\\",\\n    EditPhoto = \\\"EditPhoto\\\",\\n    Starburst = \\\"Starburst\\\",\\n    ShareiOS = \\\"ShareiOS\\\",\\n    AirTickets = \\\"AirTickets\\\",\\n    PencilReply = \\\"PencilReply\\\",\\n    Tiles2 = \\\"Tiles2\\\",\\n    SkypeCircleCheck = \\\"SkypeCircleCheck\\\",\\n    SkypeCircleClock = \\\"SkypeCircleClock\\\",\\n    SkypeCircleMinus = \\\"SkypeCircleMinus\\\",\\n    SkypeCheck = \\\"SkypeCheck\\\",\\n    SkypeClock = \\\"SkypeClock\\\",\\n    SkypeMinus = \\\"SkypeMinus\\\",\\n    SkypeMessage = \\\"SkypeMessage\\\",\\n    ClosedCaption = \\\"ClosedCaption\\\",\\n    ATPLogo = \\\"ATPLogo\\\",\\n    OfficeFormsLogoInverse = \\\"OfficeFormsLogoInverse\\\",\\n    RecycleBin = \\\"RecycleBin\\\",\\n    EmptyRecycleBin = \\\"EmptyRecycleBin\\\",\\n    Hide2 = \\\"Hide2\\\",\\n    Breadcrumb = \\\"Breadcrumb\\\",\\n    BirthdayCake = \\\"BirthdayCake\\\",\\n    ClearFilter = \\\"ClearFilter\\\",\\n    Flow = \\\"Flow\\\",\\n    TimeEntry = \\\"TimeEntry\\\",\\n    CRMProcesses = \\\"CRMProcesses\\\",\\n    PageEdit = \\\"PageEdit\\\",\\n    PageArrowRight = \\\"PageArrowRight\\\",\\n    PageRemove = \\\"PageRemove\\\",\\n    Database = \\\"Database\\\",\\n    DataManagementSettings = \\\"DataManagementSettings\\\",\\n    CRMServices = \\\"CRMServices\\\",\\n    EditContact = \\\"EditContact\\\",\\n    ConnectContacts = \\\"ConnectContacts\\\",\\n    AppIconDefaultAdd = \\\"AppIconDefaultAdd\\\",\\n    AppIconDefaultList = \\\"AppIconDefaultList\\\",\\n    ActivateOrders = \\\"ActivateOrders\\\",\\n    DeactivateOrders = \\\"DeactivateOrders\\\",\\n    ProductCatalog = \\\"ProductCatalog\\\",\\n    ScatterChart = \\\"ScatterChart\\\",\\n    AccountActivity = \\\"AccountActivity\\\",\\n    DocumentManagement = \\\"DocumentManagement\\\",\\n    CRMReport = \\\"CRMReport\\\",\\n    KnowledgeArticle = \\\"KnowledgeArticle\\\",\\n    Relationship = \\\"Relationship\\\",\\n    HomeVerify = \\\"HomeVerify\\\",\\n    ZipFolder = \\\"ZipFolder\\\",\\n    SurveyQuestions = \\\"SurveyQuestions\\\",\\n    TextDocument = \\\"TextDocument\\\",\\n    TextDocumentShared = \\\"TextDocumentShared\\\",\\n    PageCheckedOut = \\\"PageCheckedOut\\\",\\n    PageShared = \\\"PageShared\\\",\\n    SaveAndClose = \\\"SaveAndClose\\\",\\n    Script = \\\"Script\\\",\\n    Archive = \\\"Archive\\\",\\n    ActivityFeed = \\\"ActivityFeed\\\",\\n    Compare = \\\"Compare\\\",\\n    EventDate = \\\"EventDate\\\",\\n    ArrowUpRight = \\\"ArrowUpRight\\\",\\n    CaretRight = \\\"CaretRight\\\",\\n    SetAction = \\\"SetAction\\\",\\n    ChatBot = \\\"ChatBot\\\",\\n    CaretSolidLeft = \\\"CaretSolidLeft\\\",\\n    CaretSolidDown = \\\"CaretSolidDown\\\",\\n    CaretSolidRight = \\\"CaretSolidRight\\\",\\n    CaretSolidUp = \\\"CaretSolidUp\\\",\\n    PowerAppsLogo = \\\"PowerAppsLogo\\\",\\n    PowerApps2Logo = \\\"PowerApps2Logo\\\",\\n    SearchIssue = \\\"SearchIssue\\\",\\n    SearchIssueMirrored = \\\"SearchIssueMirrored\\\",\\n    FabricAssetLibrary = \\\"FabricAssetLibrary\\\",\\n    FabricDataConnectionLibrary = \\\"FabricDataConnectionLibrary\\\",\\n    FabricDocLibrary = \\\"FabricDocLibrary\\\",\\n    FabricFormLibrary = \\\"FabricFormLibrary\\\",\\n    FabricFormLibraryMirrored = \\\"FabricFormLibraryMirrored\\\",\\n    FabricReportLibrary = \\\"FabricReportLibrary\\\",\\n    FabricReportLibraryMirrored = \\\"FabricReportLibraryMirrored\\\",\\n    FabricPublicFolder = \\\"FabricPublicFolder\\\",\\n    FabricFolderSearch = \\\"FabricFolderSearch\\\",\\n    FabricMovetoFolder = \\\"FabricMovetoFolder\\\",\\n    FabricUnsyncFolder = \\\"FabricUnsyncFolder\\\",\\n    FabricSyncFolder = \\\"FabricSyncFolder\\\",\\n    FabricOpenFolderHorizontal = \\\"FabricOpenFolderHorizontal\\\",\\n    FabricFolder = \\\"FabricFolder\\\",\\n    FabricFolderFill = \\\"FabricFolderFill\\\",\\n    FabricNewFolder = \\\"FabricNewFolder\\\",\\n    FabricPictureLibrary = \\\"FabricPictureLibrary\\\",\\n    PhotoVideoMedia = \\\"PhotoVideoMedia\\\",\\n    AddFavorite = \\\"AddFavorite\\\",\\n    AddFavoriteFill = \\\"AddFavoriteFill\\\",\\n    BufferTimeBefore = \\\"BufferTimeBefore\\\",\\n    BufferTimeAfter = \\\"BufferTimeAfter\\\",\\n    BufferTimeBoth = \\\"BufferTimeBoth\\\",\\n    PublishContent = \\\"PublishContent\\\",\\n    ClipboardList = \\\"ClipboardList\\\",\\n    ClipboardListMirrored = \\\"ClipboardListMirrored\\\",\\n    CannedChat = \\\"CannedChat\\\",\\n    SkypeForBusinessLogo = \\\"SkypeForBusinessLogo\\\",\\n    TabCenter = \\\"TabCenter\\\",\\n    PageCheckedin = \\\"PageCheckedin\\\",\\n    PageList = \\\"PageList\\\",\\n    ReadOutLoud = \\\"ReadOutLoud\\\",\\n    CaretBottomLeftSolid8 = \\\"CaretBottomLeftSolid8\\\",\\n    CaretBottomRightSolid8 = \\\"CaretBottomRightSolid8\\\",\\n    FolderHorizontal = \\\"FolderHorizontal\\\",\\n    MicrosoftStaffhubLogo = \\\"MicrosoftStaffhubLogo\\\",\\n    GiftboxOpen = \\\"GiftboxOpen\\\",\\n    StatusCircleOuter = \\\"StatusCircleOuter\\\",\\n    StatusCircleInner = \\\"StatusCircleInner\\\",\\n    StatusCircleRing = \\\"StatusCircleRing\\\",\\n    StatusTriangleOuter = \\\"StatusTriangleOuter\\\",\\n    StatusTriangleInner = \\\"StatusTriangleInner\\\",\\n    StatusTriangleExclamation = \\\"StatusTriangleExclamation\\\",\\n    StatusCircleExclamation = \\\"StatusCircleExclamation\\\",\\n    StatusCircleErrorX = \\\"StatusCircleErrorX\\\",\\n    StatusCircleCheckmark = \\\"StatusCircleCheckmark\\\",\\n    StatusCircleInfo = \\\"StatusCircleInfo\\\",\\n    StatusCircleBlock = \\\"StatusCircleBlock\\\",\\n    StatusCircleBlock2 = \\\"StatusCircleBlock2\\\",\\n    StatusCircleQuestionMark = \\\"StatusCircleQuestionMark\\\",\\n    StatusCircleSync = \\\"StatusCircleSync\\\",\\n    Toll = \\\"Toll\\\",\\n    ExploreContentSingle = \\\"ExploreContentSingle\\\",\\n    CollapseContent = \\\"CollapseContent\\\",\\n    CollapseContentSingle = \\\"CollapseContentSingle\\\",\\n    InfoSolid = \\\"InfoSolid\\\",\\n    GroupList = \\\"GroupList\\\",\\n    ProgressRingDots = \\\"ProgressRingDots\\\",\\n    CaloriesAdd = \\\"CaloriesAdd\\\",\\n    BranchFork = \\\"BranchFork\\\",\\n    MuteChat = \\\"MuteChat\\\",\\n    AddHome = \\\"AddHome\\\",\\n    AddWork = \\\"AddWork\\\",\\n    MobileReport = \\\"MobileReport\\\",\\n    ScaleVolume = \\\"ScaleVolume\\\",\\n    HardDriveGroup = \\\"HardDriveGroup\\\",\\n    FastMode = \\\"FastMode\\\",\\n    ToggleLeft = \\\"ToggleLeft\\\",\\n    ToggleRight = \\\"ToggleRight\\\",\\n    TriangleShape = \\\"TriangleShape\\\",\\n    RectangleShape = \\\"RectangleShape\\\",\\n    CubeShape = \\\"CubeShape\\\",\\n    Trophy2 = \\\"Trophy2\\\",\\n    BucketColor = \\\"BucketColor\\\",\\n    BucketColorFill = \\\"BucketColorFill\\\",\\n    Taskboard = \\\"Taskboard\\\",\\n    SingleColumn = \\\"SingleColumn\\\",\\n    DoubleColumn = \\\"DoubleColumn\\\",\\n    TripleColumn = \\\"TripleColumn\\\",\\n    ColumnLeftTwoThirds = \\\"ColumnLeftTwoThirds\\\",\\n    ColumnRightTwoThirds = \\\"ColumnRightTwoThirds\\\",\\n    AccessLogoFill = \\\"AccessLogoFill\\\",\\n    AnalyticsLogo = \\\"AnalyticsLogo\\\",\\n    AnalyticsQuery = \\\"AnalyticsQuery\\\",\\n    NewAnalyticsQuery = \\\"NewAnalyticsQuery\\\",\\n    AnalyticsReport = \\\"AnalyticsReport\\\",\\n    WordLogo = \\\"WordLogo\\\",\\n    WordLogoFill = \\\"WordLogoFill\\\",\\n    ExcelLogo = \\\"ExcelLogo\\\",\\n    ExcelLogoFill = \\\"ExcelLogoFill\\\",\\n    OneNoteLogo = \\\"OneNoteLogo\\\",\\n    OneNoteLogoFill = \\\"OneNoteLogoFill\\\",\\n    OutlookLogo = \\\"OutlookLogo\\\",\\n    OutlookLogoFill = \\\"OutlookLogoFill\\\",\\n    PowerPointLogo = \\\"PowerPointLogo\\\",\\n    PowerPointLogoFill = \\\"PowerPointLogoFill\\\",\\n    PublisherLogo = \\\"PublisherLogo\\\",\\n    PublisherLogoFill = \\\"PublisherLogoFill\\\",\\n    ScheduleEventAction = \\\"ScheduleEventAction\\\",\\n    FlameSolid = \\\"FlameSolid\\\",\\n    ServerProcesses = \\\"ServerProcesses\\\",\\n    Server = \\\"Server\\\",\\n    SaveAll = \\\"SaveAll\\\",\\n    LinkedInLogo = \\\"LinkedInLogo\\\",\\n    Decimals = \\\"Decimals\\\",\\n    SidePanelMirrored = \\\"SidePanelMirrored\\\",\\n    ProtectRestrict = \\\"ProtectRestrict\\\",\\n    Blog = \\\"Blog\\\",\\n    UnknownMirrored = \\\"UnknownMirrored\\\",\\n    PublicContactCardMirrored = \\\"PublicContactCardMirrored\\\",\\n    GridViewSmall = \\\"GridViewSmall\\\",\\n    GridViewMedium = \\\"GridViewMedium\\\",\\n    GridViewLarge = \\\"GridViewLarge\\\",\\n    Step = \\\"Step\\\",\\n    StepInsert = \\\"StepInsert\\\",\\n    StepShared = \\\"StepShared\\\",\\n    StepSharedAdd = \\\"StepSharedAdd\\\",\\n    StepSharedInsert = \\\"StepSharedInsert\\\",\\n    ViewDashboard = \\\"ViewDashboard\\\",\\n    ViewList = \\\"ViewList\\\",\\n    ViewListGroup = \\\"ViewListGroup\\\",\\n    ViewListTree = \\\"ViewListTree\\\",\\n    TriggerAuto = \\\"TriggerAuto\\\",\\n    TriggerUser = \\\"TriggerUser\\\",\\n    PivotChart = \\\"PivotChart\\\",\\n    StackedBarChart = \\\"StackedBarChart\\\",\\n    StackedLineChart = \\\"StackedLineChart\\\",\\n    BuildQueue = \\\"BuildQueue\\\",\\n    BuildQueueNew = \\\"BuildQueueNew\\\",\\n    UserFollowed = \\\"UserFollowed\\\",\\n    ContactLink = \\\"ContactLink\\\",\\n    Stack = \\\"Stack\\\",\\n    Bullseye = \\\"Bullseye\\\",\\n    VennDiagram = \\\"VennDiagram\\\",\\n    FiveTileGrid = \\\"FiveTileGrid\\\",\\n    FocalPoint = \\\"FocalPoint\\\",\\n    Insert = \\\"Insert\\\",\\n    RingerRemove = \\\"RingerRemove\\\",\\n    TeamsLogoInverse = \\\"TeamsLogoInverse\\\",\\n    TeamsLogo = \\\"TeamsLogo\\\",\\n    TeamsLogoFill = \\\"TeamsLogoFill\\\",\\n    SkypeForBusinessLogoFill = \\\"SkypeForBusinessLogoFill\\\",\\n    SharepointLogo = \\\"SharepointLogo\\\",\\n    SharepointLogoFill = \\\"SharepointLogoFill\\\",\\n    DelveLogo = \\\"DelveLogo\\\",\\n    DelveLogoFill = \\\"DelveLogoFill\\\",\\n    OfficeVideoLogo = \\\"OfficeVideoLogo\\\",\\n    OfficeVideoLogoFill = \\\"OfficeVideoLogoFill\\\",\\n    ExchangeLogo = \\\"ExchangeLogo\\\",\\n    ExchangeLogoFill = \\\"ExchangeLogoFill\\\",\\n    Signin = \\\"Signin\\\",\\n    DocumentApproval = \\\"DocumentApproval\\\",\\n    CloneToDesktop = \\\"CloneToDesktop\\\",\\n    InstallToDrive = \\\"InstallToDrive\\\",\\n    Blur = \\\"Blur\\\",\\n    Build = \\\"Build\\\",\\n    ProcessMetaTask = \\\"ProcessMetaTask\\\",\\n    BranchFork2 = \\\"BranchFork2\\\",\\n    BranchLocked = \\\"BranchLocked\\\",\\n    BranchCommit = \\\"BranchCommit\\\",\\n    BranchCompare = \\\"BranchCompare\\\",\\n    BranchMerge = \\\"BranchMerge\\\",\\n    BranchPullRequest = \\\"BranchPullRequest\\\",\\n    BranchSearch = \\\"BranchSearch\\\",\\n    BranchShelveset = \\\"BranchShelveset\\\",\\n    RawSource = \\\"RawSource\\\",\\n    MergeDuplicate = \\\"MergeDuplicate\\\",\\n    RowsGroup = \\\"RowsGroup\\\",\\n    RowsChild = \\\"RowsChild\\\",\\n    Deploy = \\\"Deploy\\\",\\n    Redeploy = \\\"Redeploy\\\",\\n    ServerEnviroment = \\\"ServerEnviroment\\\",\\n    VisioDiagram = \\\"VisioDiagram\\\",\\n    HighlightMappedShapes = \\\"HighlightMappedShapes\\\",\\n    TextCallout = \\\"TextCallout\\\",\\n    IconSetsFlag = \\\"IconSetsFlag\\\",\\n    VisioLogo = \\\"VisioLogo\\\",\\n    VisioLogoFill = \\\"VisioLogoFill\\\",\\n    VisioDocument = \\\"VisioDocument\\\",\\n    TimelineProgress = \\\"TimelineProgress\\\",\\n    TimelineDelivery = \\\"TimelineDelivery\\\",\\n    Backlog = \\\"Backlog\\\",\\n    TeamFavorite = \\\"TeamFavorite\\\",\\n    TaskGroup = \\\"TaskGroup\\\",\\n    TaskGroupMirrored = \\\"TaskGroupMirrored\\\",\\n    ScopeTemplate = \\\"ScopeTemplate\\\",\\n    AssessmentGroupTemplate = \\\"AssessmentGroupTemplate\\\",\\n    NewTeamProject = \\\"NewTeamProject\\\",\\n    CommentAdd = \\\"CommentAdd\\\",\\n    CommentNext = \\\"CommentNext\\\",\\n    CommentPrevious = \\\"CommentPrevious\\\",\\n    ShopServer = \\\"ShopServer\\\",\\n    LocaleLanguage = \\\"LocaleLanguage\\\",\\n    QueryList = \\\"QueryList\\\",\\n    UserSync = \\\"UserSync\\\",\\n    UserPause = \\\"UserPause\\\",\\n    StreamingOff = \\\"StreamingOff\\\",\\n    MoreVertical = \\\"MoreVertical\\\",\\n    ArrowTallUpLeft = \\\"ArrowTallUpLeft\\\",\\n    ArrowTallUpRight = \\\"ArrowTallUpRight\\\",\\n    ArrowTallDownLeft = \\\"ArrowTallDownLeft\\\",\\n    ArrowTallDownRight = \\\"ArrowTallDownRight\\\",\\n    FieldEmpty = \\\"FieldEmpty\\\",\\n    FieldFilled = \\\"FieldFilled\\\",\\n    FieldChanged = \\\"FieldChanged\\\",\\n    FieldNotChanged = \\\"FieldNotChanged\\\",\\n    RingerOff = \\\"RingerOff\\\",\\n    PlayResume = \\\"PlayResume\\\",\\n    BulletedList2 = \\\"BulletedList2\\\",\\n    BulletedList2Mirrored = \\\"BulletedList2Mirrored\\\",\\n    ImageCrosshair = \\\"ImageCrosshair\\\",\\n    GitGraph = \\\"GitGraph\\\",\\n    Repo = \\\"Repo\\\",\\n    RepoSolid = \\\"RepoSolid\\\",\\n    FolderQuery = \\\"FolderQuery\\\",\\n    FolderList = \\\"FolderList\\\",\\n    FolderListMirrored = \\\"FolderListMirrored\\\",\\n    LocationOutline = \\\"LocationOutline\\\",\\n    POISolid = \\\"POISolid\\\",\\n    CalculatorNotEqualTo = \\\"CalculatorNotEqualTo\\\",\\n    BoxSubtractSolid = \\\"BoxSubtractSolid\\\",\\n    BoxAdditionSolid = \\\"BoxAdditionSolid\\\",\\n    BoxMultiplySolid = \\\"BoxMultiplySolid\\\",\\n    BoxPlaySolid = \\\"BoxPlaySolid\\\",\\n    BoxCheckmarkSolid = \\\"BoxCheckmarkSolid\\\",\\n    CirclePauseSolid = \\\"CirclePauseSolid\\\",\\n    CirclePause = \\\"CirclePause\\\",\\n    MSNVideosSolid = \\\"MSNVideosSolid\\\",\\n    CircleStopSolid = \\\"CircleStopSolid\\\",\\n    CircleStop = \\\"CircleStop\\\",\\n    NavigateBack = \\\"NavigateBack\\\",\\n    NavigateBackMirrored = \\\"NavigateBackMirrored\\\",\\n    NavigateForward = \\\"NavigateForward\\\",\\n    NavigateForwardMirrored = \\\"NavigateForwardMirrored\\\",\\n    UnknownSolid = \\\"UnknownSolid\\\",\\n    UnknownMirroredSolid = \\\"UnknownMirroredSolid\\\",\\n    CircleAddition = \\\"CircleAddition\\\",\\n    CircleAdditionSolid = \\\"CircleAdditionSolid\\\",\\n    FilePDB = \\\"FilePDB\\\",\\n    FileTemplate = \\\"FileTemplate\\\",\\n    FileSQL = \\\"FileSQL\\\",\\n    FileJAVA = \\\"FileJAVA\\\",\\n    FileASPX = \\\"FileASPX\\\",\\n    FileCSS = \\\"FileCSS\\\",\\n    FileSass = \\\"FileSass\\\",\\n    FileLess = \\\"FileLess\\\",\\n    FileHTML = \\\"FileHTML\\\",\\n    JavaScriptLanguage = \\\"JavaScriptLanguage\\\",\\n    CSharpLanguage = \\\"CSharpLanguage\\\",\\n    CSharp = \\\"CSharp\\\",\\n    VisualBasicLanguage = \\\"VisualBasicLanguage\\\",\\n    VB = \\\"VB\\\",\\n    CPlusPlusLanguage = \\\"CPlusPlusLanguage\\\",\\n    CPlusPlus = \\\"CPlusPlus\\\",\\n    FSharpLanguage = \\\"FSharpLanguage\\\",\\n    FSharp = \\\"FSharp\\\",\\n    TypeScriptLanguage = \\\"TypeScriptLanguage\\\",\\n    PythonLanguage = \\\"PythonLanguage\\\",\\n    PY = \\\"PY\\\",\\n    CoffeeScript = \\\"CoffeeScript\\\",\\n    MarkDownLanguage = \\\"MarkDownLanguage\\\",\\n    FullWidth = \\\"FullWidth\\\",\\n    FullWidthEdit = \\\"FullWidthEdit\\\",\\n    Plug = \\\"Plug\\\",\\n    PlugSolid = \\\"PlugSolid\\\",\\n    PlugConnected = \\\"PlugConnected\\\",\\n    PlugDisconnected = \\\"PlugDisconnected\\\",\\n    UnlockSolid = \\\"UnlockSolid\\\",\\n    Variable = \\\"Variable\\\",\\n    Parameter = \\\"Parameter\\\",\\n    CommentUrgent = \\\"CommentUrgent\\\",\\n    Storyboard = \\\"Storyboard\\\",\\n    DiffInline = \\\"DiffInline\\\",\\n    DiffSideBySide = \\\"DiffSideBySide\\\",\\n    ImageDiff = \\\"ImageDiff\\\",\\n    ImagePixel = \\\"ImagePixel\\\",\\n    FileBug = \\\"FileBug\\\",\\n    FileCode = \\\"FileCode\\\",\\n    FileComment = \\\"FileComment\\\",\\n    BusinessHoursSign = \\\"BusinessHoursSign\\\",\\n    FileImage = \\\"FileImage\\\",\\n    FileSymlink = \\\"FileSymlink\\\",\\n    AutoFillTemplate = \\\"AutoFillTemplate\\\",\\n    WorkItem = \\\"WorkItem\\\",\\n    WorkItemBug = \\\"WorkItemBug\\\",\\n    LogRemove = \\\"LogRemove\\\",\\n    ColumnOptions = \\\"ColumnOptions\\\",\\n    Packages = \\\"Packages\\\",\\n    BuildIssue = \\\"BuildIssue\\\",\\n    AssessmentGroup = \\\"AssessmentGroup\\\",\\n    VariableGroup = \\\"VariableGroup\\\",\\n    FullHistory = \\\"FullHistory\\\",\\n    Wheelchair = \\\"Wheelchair\\\",\\n    SingleColumnEdit = \\\"SingleColumnEdit\\\",\\n    DoubleColumnEdit = \\\"DoubleColumnEdit\\\",\\n    TripleColumnEdit = \\\"TripleColumnEdit\\\",\\n    ColumnLeftTwoThirdsEdit = \\\"ColumnLeftTwoThirdsEdit\\\",\\n    ColumnRightTwoThirdsEdit = \\\"ColumnRightTwoThirdsEdit\\\",\\n    StreamLogo = \\\"StreamLogo\\\",\\n    PassiveAuthentication = \\\"PassiveAuthentication\\\",\\n    AlertSolid = \\\"AlertSolid\\\",\\n    MegaphoneSolid = \\\"MegaphoneSolid\\\",\\n    TaskSolid = \\\"TaskSolid\\\",\\n    ConfigurationSolid = \\\"ConfigurationSolid\\\",\\n    BugSolid = \\\"BugSolid\\\",\\n    CrownSolid = \\\"CrownSolid\\\",\\n    Trophy2Solid = \\\"Trophy2Solid\\\",\\n    QuickNoteSolid = \\\"QuickNoteSolid\\\",\\n    ConstructionConeSolid = \\\"ConstructionConeSolid\\\",\\n    PageListSolid = \\\"PageListSolid\\\",\\n    PageListMirroredSolid = \\\"PageListMirroredSolid\\\",\\n    StarburstSolid = \\\"StarburstSolid\\\",\\n    ReadingModeSolid = \\\"ReadingModeSolid\\\",\\n    SadSolid = \\\"SadSolid\\\",\\n    HealthSolid = \\\"HealthSolid\\\",\\n    ShieldSolid = \\\"ShieldSolid\\\",\\n    GiftBoxSolid = \\\"GiftBoxSolid\\\",\\n    ShoppingCartSolid = \\\"ShoppingCartSolid\\\",\\n    MailSolid = \\\"MailSolid\\\",\\n    ChatSolid = \\\"ChatSolid\\\",\\n    RibbonSolid = \\\"RibbonSolid\\\",\\n    FinancialSolid = \\\"FinancialSolid\\\",\\n    FinancialMirroredSolid = \\\"FinancialMirroredSolid\\\",\\n    HeadsetSolid = \\\"HeadsetSolid\\\",\\n    PermissionsSolid = \\\"PermissionsSolid\\\",\\n    ParkingSolid = \\\"ParkingSolid\\\",\\n    ParkingMirroredSolid = \\\"ParkingMirroredSolid\\\",\\n    DiamondSolid = \\\"DiamondSolid\\\",\\n    AsteriskSolid = \\\"AsteriskSolid\\\",\\n    OfflineStorageSolid = \\\"OfflineStorageSolid\\\",\\n    BankSolid = \\\"BankSolid\\\",\\n    DecisionSolid = \\\"DecisionSolid\\\",\\n    Parachute = \\\"Parachute\\\",\\n    ParachuteSolid = \\\"ParachuteSolid\\\",\\n    FiltersSolid = \\\"FiltersSolid\\\",\\n    ColorSolid = \\\"ColorSolid\\\",\\n    ReviewSolid = \\\"ReviewSolid\\\",\\n    ReviewRequestSolid = \\\"ReviewRequestSolid\\\",\\n    ReviewRequestMirroredSolid = \\\"ReviewRequestMirroredSolid\\\",\\n    ReviewResponseSolid = \\\"ReviewResponseSolid\\\",\\n    FeedbackRequestSolid = \\\"FeedbackRequestSolid\\\",\\n    FeedbackRequestMirroredSolid = \\\"FeedbackRequestMirroredSolid\\\",\\n    FeedbackResponseSolid = \\\"FeedbackResponseSolid\\\",\\n    WorkItemBar = \\\"WorkItemBar\\\",\\n    WorkItemBarSolid = \\\"WorkItemBarSolid\\\",\\n    Separator = \\\"Separator\\\",\\n    NavigateExternalInline = \\\"NavigateExternalInline\\\",\\n    PlanView = \\\"PlanView\\\",\\n    TimelineMatrixView = \\\"TimelineMatrixView\\\",\\n    EngineeringGroup = \\\"EngineeringGroup\\\",\\n    ProjectCollection = \\\"ProjectCollection\\\",\\n    CaretBottomRightCenter8 = \\\"CaretBottomRightCenter8\\\",\\n    CaretBottomLeftCenter8 = \\\"CaretBottomLeftCenter8\\\",\\n    CaretTopRightCenter8 = \\\"CaretTopRightCenter8\\\",\\n    CaretTopLeftCenter8 = \\\"CaretTopLeftCenter8\\\",\\n    DonutChart = \\\"DonutChart\\\",\\n    ChevronUnfold10 = \\\"ChevronUnfold10\\\",\\n    ChevronFold10 = \\\"ChevronFold10\\\",\\n    DoubleChevronDown8 = \\\"DoubleChevronDown8\\\",\\n    DoubleChevronUp8 = \\\"DoubleChevronUp8\\\",\\n    DoubleChevronLeft8 = \\\"DoubleChevronLeft8\\\",\\n    DoubleChevronRight8 = \\\"DoubleChevronRight8\\\",\\n    ChevronDownEnd6 = \\\"ChevronDownEnd6\\\",\\n    ChevronUpEnd6 = \\\"ChevronUpEnd6\\\",\\n    ChevronLeftEnd6 = \\\"ChevronLeftEnd6\\\",\\n    ChevronRightEnd6 = \\\"ChevronRightEnd6\\\",\\n    ContextMenu = \\\"ContextMenu\\\",\\n    AzureAPIManagement = \\\"AzureAPIManagement\\\",\\n    AzureServiceEndpoint = \\\"AzureServiceEndpoint\\\",\\n    VSTSLogo = \\\"VSTSLogo\\\",\\n    VSTSAltLogo1 = \\\"VSTSAltLogo1\\\",\\n    VSTSAltLogo2 = \\\"VSTSAltLogo2\\\",\\n    FileTypeSolution = \\\"FileTypeSolution\\\",\\n    WordLogoInverse16 = \\\"WordLogoInverse16\\\",\\n    WordLogo16 = \\\"WordLogo16\\\",\\n    WordLogoFill16 = \\\"WordLogoFill16\\\",\\n    PowerPointLogoInverse16 = \\\"PowerPointLogoInverse16\\\",\\n    PowerPointLogo16 = \\\"PowerPointLogo16\\\",\\n    PowerPointLogoFill16 = \\\"PowerPointLogoFill16\\\",\\n    ExcelLogoInverse16 = \\\"ExcelLogoInverse16\\\",\\n    ExcelLogo16 = \\\"ExcelLogo16\\\",\\n    ExcelLogoFill16 = \\\"ExcelLogoFill16\\\",\\n    OneNoteLogoInverse16 = \\\"OneNoteLogoInverse16\\\",\\n    OneNoteLogo16 = \\\"OneNoteLogo16\\\",\\n    OneNoteLogoFill16 = \\\"OneNoteLogoFill16\\\",\\n    OutlookLogoInverse16 = \\\"OutlookLogoInverse16\\\",\\n    OutlookLogo16 = \\\"OutlookLogo16\\\",\\n    OutlookLogoFill16 = \\\"OutlookLogoFill16\\\",\\n    PublisherLogoInverse16 = \\\"PublisherLogoInverse16\\\",\\n    PublisherLogo16 = \\\"PublisherLogo16\\\",\\n    PublisherLogoFill16 = \\\"PublisherLogoFill16\\\",\\n    VisioLogoInverse16 = \\\"VisioLogoInverse16\\\",\\n    VisioLogo16 = \\\"VisioLogo16\\\",\\n    VisioLogoFill16 = \\\"VisioLogoFill16\\\",\\n    TestBeaker = \\\"TestBeaker\\\",\\n    TestBeakerSolid = \\\"TestBeakerSolid\\\",\\n    TestExploreSolid = \\\"TestExploreSolid\\\",\\n    TestAutoSolid = \\\"TestAutoSolid\\\",\\n    TestUserSolid = \\\"TestUserSolid\\\",\\n    TestImpactSolid = \\\"TestImpactSolid\\\",\\n    TestPlan = \\\"TestPlan\\\",\\n    TestStep = \\\"TestStep\\\",\\n    TestParameter = \\\"TestParameter\\\",\\n    TestSuite = \\\"TestSuite\\\",\\n    TestCase = \\\"TestCase\\\",\\n    Sprint = \\\"Sprint\\\",\\n    SignOut = \\\"SignOut\\\",\\n    TriggerApproval = \\\"TriggerApproval\\\",\\n    Rocket = \\\"Rocket\\\",\\n    AzureKeyVault = \\\"AzureKeyVault\\\",\\n    Onboarding = \\\"Onboarding\\\",\\n    Transition = \\\"Transition\\\",\\n    LikeSolid = \\\"LikeSolid\\\",\\n    DislikeSolid = \\\"DislikeSolid\\\",\\n    CRMCustomerInsightsApp = \\\"CRMCustomerInsightsApp\\\",\\n    EditCreate = \\\"EditCreate\\\",\\n    PlayReverseResume = \\\"PlayReverseResume\\\",\\n    PlayReverse = \\\"PlayReverse\\\",\\n    SearchData = \\\"SearchData\\\",\\n    UnSetColor = \\\"UnSetColor\\\",\\n    DeclineCall = \\\"DeclineCall\\\",\\n    RectangularClipping = \\\"RectangularClipping\\\",\\n    TeamsLogo16 = \\\"TeamsLogo16\\\",\\n    TeamsLogoFill16 = \\\"TeamsLogoFill16\\\",\\n    Spacer = \\\"Spacer\\\",\\n    SkypeLogo16 = \\\"SkypeLogo16\\\",\\n    SkypeForBusinessLogo16 = \\\"SkypeForBusinessLogo16\\\",\\n    SkypeForBusinessLogoFill16 = \\\"SkypeForBusinessLogoFill16\\\",\\n    FilterSolid = \\\"FilterSolid\\\",\\n    MailUndelivered = \\\"MailUndelivered\\\",\\n    MailTentative = \\\"MailTentative\\\",\\n    MailTentativeMirrored = \\\"MailTentativeMirrored\\\",\\n    MailReminder = \\\"MailReminder\\\",\\n    ReceiptUndelivered = \\\"ReceiptUndelivered\\\",\\n    ReceiptTentative = \\\"ReceiptTentative\\\",\\n    ReceiptTentativeMirrored = \\\"ReceiptTentativeMirrored\\\",\\n    Inbox = \\\"Inbox\\\",\\n    IRMReply = \\\"IRMReply\\\",\\n    IRMReplyMirrored = \\\"IRMReplyMirrored\\\",\\n    IRMForward = \\\"IRMForward\\\",\\n    IRMForwardMirrored = \\\"IRMForwardMirrored\\\",\\n    VoicemailIRM = \\\"VoicemailIRM\\\",\\n    EventAccepted = \\\"EventAccepted\\\",\\n    EventTentative = \\\"EventTentative\\\",\\n    EventTentativeMirrored = \\\"EventTentativeMirrored\\\",\\n    EventDeclined = \\\"EventDeclined\\\",\\n    IDBadge = \\\"IDBadge\\\",\\n    BackgroundColor = \\\"BackgroundColor\\\",\\n    OfficeFormsLogoInverse16 = \\\"OfficeFormsLogoInverse16\\\",\\n    OfficeFormsLogo = \\\"OfficeFormsLogo\\\",\\n    OfficeFormsLogoFill = \\\"OfficeFormsLogoFill\\\",\\n    OfficeFormsLogo16 = \\\"OfficeFormsLogo16\\\",\\n    OfficeFormsLogoFill16 = \\\"OfficeFormsLogoFill16\\\",\\n    OfficeFormsLogoInverse24 = \\\"OfficeFormsLogoInverse24\\\",\\n    OfficeFormsLogo24 = \\\"OfficeFormsLogo24\\\",\\n    OfficeFormsLogoFill24 = \\\"OfficeFormsLogoFill24\\\",\\n    PageLock = \\\"PageLock\\\",\\n    NotExecuted = \\\"NotExecuted\\\",\\n    NotImpactedSolid = \\\"NotImpactedSolid\\\",\\n    FieldReadOnly = \\\"FieldReadOnly\\\",\\n    FieldRequired = \\\"FieldRequired\\\",\\n    BacklogBoard = \\\"BacklogBoard\\\",\\n    ExternalBuild = \\\"ExternalBuild\\\",\\n    ExternalTFVC = \\\"ExternalTFVC\\\",\\n    ExternalXAML = \\\"ExternalXAML\\\",\\n    IssueSolid = \\\"IssueSolid\\\",\\n    DefectSolid = \\\"DefectSolid\\\",\\n    LadybugSolid = \\\"LadybugSolid\\\",\\n    NugetLogo = \\\"NugetLogo\\\",\\n    TFVCLogo = \\\"TFVCLogo\\\",\\n    ProjectLogo32 = \\\"ProjectLogo32\\\",\\n    ProjectLogoFill32 = \\\"ProjectLogoFill32\\\",\\n    ProjectLogo16 = \\\"ProjectLogo16\\\",\\n    ProjectLogoFill16 = \\\"ProjectLogoFill16\\\",\\n    SwayLogo32 = \\\"SwayLogo32\\\",\\n    SwayLogoFill32 = \\\"SwayLogoFill32\\\",\\n    SwayLogo16 = \\\"SwayLogo16\\\",\\n    SwayLogoFill16 = \\\"SwayLogoFill16\\\",\\n    ClassNotebookLogo32 = \\\"ClassNotebookLogo32\\\",\\n    ClassNotebookLogoFill32 = \\\"ClassNotebookLogoFill32\\\",\\n    ClassNotebookLogo16 = \\\"ClassNotebookLogo16\\\",\\n    ClassNotebookLogoFill16 = \\\"ClassNotebookLogoFill16\\\",\\n    ClassNotebookLogoInverse32 = \\\"ClassNotebookLogoInverse32\\\",\\n    ClassNotebookLogoInverse16 = \\\"ClassNotebookLogoInverse16\\\",\\n    StaffNotebookLogo32 = \\\"StaffNotebookLogo32\\\",\\n    StaffNotebookLogoFill32 = \\\"StaffNotebookLogoFill32\\\",\\n    StaffNotebookLogo16 = \\\"StaffNotebookLogo16\\\",\\n    StaffNotebookLogoFill16 = \\\"StaffNotebookLogoFill16\\\",\\n    StaffNotebookLogoInverted32 = \\\"StaffNotebookLogoInverted32\\\",\\n    StaffNotebookLogoInverted16 = \\\"StaffNotebookLogoInverted16\\\",\\n    KaizalaLogo = \\\"KaizalaLogo\\\",\\n    TaskLogo = \\\"TaskLogo\\\",\\n    ProtectionCenterLogo32 = \\\"ProtectionCenterLogo32\\\",\\n    GallatinLogo = \\\"GallatinLogo\\\",\\n    Globe2 = \\\"Globe2\\\",\\n    Guitar = \\\"Guitar\\\",\\n    Breakfast = \\\"Breakfast\\\",\\n    Brunch = \\\"Brunch\\\",\\n    BeerMug = \\\"BeerMug\\\",\\n    Vacation = \\\"Vacation\\\",\\n    Teeth = \\\"Teeth\\\",\\n    Taxi = \\\"Taxi\\\",\\n    Chopsticks = \\\"Chopsticks\\\",\\n    SyncOccurence = \\\"SyncOccurence\\\",\\n    UnsyncOccurence = \\\"UnsyncOccurence\\\",\\n    GIF = \\\"GIF\\\",\\n    PrimaryCalendar = \\\"PrimaryCalendar\\\",\\n    SearchCalendar = \\\"SearchCalendar\\\",\\n    VideoOff = \\\"VideoOff\\\",\\n    MicrosoftFlowLogo = \\\"MicrosoftFlowLogo\\\",\\n    BusinessCenterLogo = \\\"BusinessCenterLogo\\\",\\n    ToDoLogoBottom = \\\"ToDoLogoBottom\\\",\\n    ToDoLogoTop = \\\"ToDoLogoTop\\\",\\n    EditSolid12 = \\\"EditSolid12\\\",\\n    EditSolidMirrored12 = \\\"EditSolidMirrored12\\\",\\n    UneditableSolid12 = \\\"UneditableSolid12\\\",\\n    UneditableSolidMirrored12 = \\\"UneditableSolidMirrored12\\\",\\n    UneditableMirrored = \\\"UneditableMirrored\\\",\\n    AdminALogo32 = \\\"AdminALogo32\\\",\\n    AdminALogoFill32 = \\\"AdminALogoFill32\\\",\\n    ToDoLogoInverse = \\\"ToDoLogoInverse\\\",\\n    Snooze = \\\"Snooze\\\",\\n    WaffleOffice365 = \\\"WaffleOffice365\\\",\\n    ImageSearch = \\\"ImageSearch\\\",\\n    NewsSearch = \\\"NewsSearch\\\",\\n    VideoSearch = \\\"VideoSearch\\\",\\n    R = \\\"R\\\",\\n    FontColorA = \\\"FontColorA\\\",\\n    FontColorSwatch = \\\"FontColorSwatch\\\",\\n    LightWeight = \\\"LightWeight\\\",\\n    NormalWeight = \\\"NormalWeight\\\",\\n    SemiboldWeight = \\\"SemiboldWeight\\\",\\n    GroupObject = \\\"GroupObject\\\",\\n    UngroupObject = \\\"UngroupObject\\\",\\n    AlignHorizontalLeft = \\\"AlignHorizontalLeft\\\",\\n    AlignHorizontalCenter = \\\"AlignHorizontalCenter\\\",\\n    AlignHorizontalRight = \\\"AlignHorizontalRight\\\",\\n    AlignVerticalTop = \\\"AlignVerticalTop\\\",\\n    AlignVerticalCenter = \\\"AlignVerticalCenter\\\",\\n    AlignVerticalBottom = \\\"AlignVerticalBottom\\\",\\n    HorizontalDistributeCenter = \\\"HorizontalDistributeCenter\\\",\\n    VerticalDistributeCenter = \\\"VerticalDistributeCenter\\\",\\n    Ellipse = \\\"Ellipse\\\",\\n    Line = \\\"Line\\\",\\n    Octagon = \\\"Octagon\\\",\\n    Hexagon = \\\"Hexagon\\\",\\n    Pentagon = \\\"Pentagon\\\",\\n    RightTriangle = \\\"RightTriangle\\\",\\n    HalfCircle = \\\"HalfCircle\\\",\\n    QuarterCircle = \\\"QuarterCircle\\\",\\n    ThreeQuarterCircle = \\\"ThreeQuarterCircle\\\",\\n    SixPointStar = \\\"SixPointStar\\\",\\n    TwelvePointStar = \\\"TwelvePointStar\\\",\\n    ArrangeBringToFront = \\\"ArrangeBringToFront\\\",\\n    ArrangeSendToBack = \\\"ArrangeSendToBack\\\",\\n    ArrangeSendBackward = \\\"ArrangeSendBackward\\\",\\n    ArrangeBringForward = \\\"ArrangeBringForward\\\",\\n    BorderDash = \\\"BorderDash\\\",\\n    BorderDot = \\\"BorderDot\\\",\\n    LineStyle = \\\"LineStyle\\\",\\n    LineThickness = \\\"LineThickness\\\",\\n    WindowEdit = \\\"WindowEdit\\\",\\n    HintText = \\\"HintText\\\",\\n    MediaAdd = \\\"MediaAdd\\\",\\n    AnchorLock = \\\"AnchorLock\\\",\\n    AutoHeight = \\\"AutoHeight\\\",\\n    ChartSeries = \\\"ChartSeries\\\",\\n    ChartXAngle = \\\"ChartXAngle\\\",\\n    ChartYAngle = \\\"ChartYAngle\\\",\\n    Combobox = \\\"Combobox\\\",\\n    LineSpacing = \\\"LineSpacing\\\",\\n    Padding = \\\"Padding\\\",\\n    PaddingTop = \\\"PaddingTop\\\",\\n    PaddingBottom = \\\"PaddingBottom\\\",\\n    PaddingLeft = \\\"PaddingLeft\\\",\\n    PaddingRight = \\\"PaddingRight\\\",\\n    NavigationFlipper = \\\"NavigationFlipper\\\",\\n    AlignJustify = \\\"AlignJustify\\\",\\n    TextOverflow = \\\"TextOverflow\\\",\\n    VisualsFolder = \\\"VisualsFolder\\\",\\n    VisualsStore = \\\"VisualsStore\\\",\\n    PictureCenter = \\\"PictureCenter\\\",\\n    PictureFill = \\\"PictureFill\\\",\\n    PicturePosition = \\\"PicturePosition\\\",\\n    PictureStretch = \\\"PictureStretch\\\",\\n    PictureTile = \\\"PictureTile\\\",\\n    Slider = \\\"Slider\\\",\\n    SliderHandleSize = \\\"SliderHandleSize\\\",\\n    DefaultRatio = \\\"DefaultRatio\\\",\\n    NumberSequence = \\\"NumberSequence\\\",\\n    GUID = \\\"GUID\\\",\\n    ReportAdd = \\\"ReportAdd\\\",\\n    DashboardAdd = \\\"DashboardAdd\\\",\\n    MapPinSolid = \\\"MapPinSolid\\\",\\n    WebPublish = \\\"WebPublish\\\",\\n    PieSingleSolid = \\\"PieSingleSolid\\\",\\n    BlockedSolid = \\\"BlockedSolid\\\",\\n    DrillDown = \\\"DrillDown\\\",\\n    DrillDownSolid = \\\"DrillDownSolid\\\",\\n    DrillExpand = \\\"DrillExpand\\\",\\n    DrillShow = \\\"DrillShow\\\",\\n    SpecialEvent = \\\"SpecialEvent\\\",\\n    OneDriveFolder16 = \\\"OneDriveFolder16\\\",\\n    FunctionalManagerDashboard = \\\"FunctionalManagerDashboard\\\",\\n    BIDashboard = \\\"BIDashboard\\\",\\n    CodeEdit = \\\"CodeEdit\\\",\\n    RenewalCurrent = \\\"RenewalCurrent\\\",\\n    RenewalFuture = \\\"RenewalFuture\\\",\\n    SplitObject = \\\"SplitObject\\\",\\n    BulkUpload = \\\"BulkUpload\\\",\\n    DownloadDocument = \\\"DownloadDocument\\\",\\n    GreetingCard = \\\"GreetingCard\\\",\\n    Flower = \\\"Flower\\\",\\n    WaitlistConfirm = \\\"WaitlistConfirm\\\",\\n    WaitlistConfirmMirrored = \\\"WaitlistConfirmMirrored\\\",\\n    LaptopSecure = \\\"LaptopSecure\\\",\\n    DragObject = \\\"DragObject\\\",\\n    EntryView = \\\"EntryView\\\",\\n    EntryDecline = \\\"EntryDecline\\\",\\n    ContactCardSettings = \\\"ContactCardSettings\\\",\\n    ContactCardSettingsMirrored = \\\"ContactCardSettingsMirrored\\\",\\n    CalendarSettings = \\\"CalendarSettings\\\",\\n    CalendarSettingsMirrored = \\\"CalendarSettingsMirrored\\\",\\n    HardDriveLock = \\\"HardDriveLock\\\",\\n    HardDriveUnlock = \\\"HardDriveUnlock\\\",\\n    AccountManagement = \\\"AccountManagement\\\",\\n    ReportWarning = \\\"ReportWarning\\\",\\n    TransitionPop = \\\"TransitionPop\\\",\\n    TransitionPush = \\\"TransitionPush\\\",\\n    TransitionEffect = \\\"TransitionEffect\\\",\\n    LookupEntities = \\\"LookupEntities\\\",\\n    ExploreData = \\\"ExploreData\\\",\\n    AddBookmark = \\\"AddBookmark\\\",\\n    SearchBookmark = \\\"SearchBookmark\\\",\\n    DrillThrough = \\\"DrillThrough\\\",\\n    MasterDatabase = \\\"MasterDatabase\\\",\\n    CertifiedDatabase = \\\"CertifiedDatabase\\\",\\n    MaximumValue = \\\"MaximumValue\\\",\\n    MinimumValue = \\\"MinimumValue\\\",\\n    VisualStudioIDELogo32 = \\\"VisualStudioIDELogo32\\\",\\n    PasteAsText = \\\"PasteAsText\\\",\\n    PasteAsCode = \\\"PasteAsCode\\\",\\n    BrowserTab = \\\"BrowserTab\\\",\\n    BrowserTabScreenshot = \\\"BrowserTabScreenshot\\\",\\n    DesktopScreenshot = \\\"DesktopScreenshot\\\",\\n    FileYML = \\\"FileYML\\\",\\n    ClipboardSolid = \\\"ClipboardSolid\\\",\\n    FabricUserFolder = \\\"FabricUserFolder\\\",\\n    FabricNetworkFolder = \\\"FabricNetworkFolder\\\",\\n    BullseyeTarget = \\\"BullseyeTarget\\\",\\n    AnalyticsView = \\\"AnalyticsView\\\",\\n    Video360Generic = \\\"Video360Generic\\\",\\n    Untag = \\\"Untag\\\",\\n    Leave = \\\"Leave\\\",\\n    Trending12 = \\\"Trending12\\\",\\n    Blocked12 = \\\"Blocked12\\\",\\n    Warning12 = \\\"Warning12\\\",\\n    CheckedOutByOther12 = \\\"CheckedOutByOther12\\\",\\n    CheckedOutByYou12 = \\\"CheckedOutByYou12\\\",\\n    CircleShapeSolid = \\\"CircleShapeSolid\\\",\\n    SquareShapeSolid = \\\"SquareShapeSolid\\\",\\n    TriangleShapeSolid = \\\"TriangleShapeSolid\\\",\\n    DropShapeSolid = \\\"DropShapeSolid\\\",\\n    RectangleShapeSolid = \\\"RectangleShapeSolid\\\",\\n    ZoomToFit = \\\"ZoomToFit\\\",\\n    InsertColumnsLeft = \\\"InsertColumnsLeft\\\",\\n    InsertColumnsRight = \\\"InsertColumnsRight\\\",\\n    InsertRowsAbove = \\\"InsertRowsAbove\\\",\\n    InsertRowsBelow = \\\"InsertRowsBelow\\\",\\n    DeleteColumns = \\\"DeleteColumns\\\",\\n    DeleteRows = \\\"DeleteRows\\\",\\n    DeleteRowsMirrored = \\\"DeleteRowsMirrored\\\",\\n    DeleteTable = \\\"DeleteTable\\\",\\n    AccountBrowser = \\\"AccountBrowser\\\",\\n    VersionControlPush = \\\"VersionControlPush\\\",\\n    StackedColumnChart2 = \\\"StackedColumnChart2\\\",\\n    TripleColumnWide = \\\"TripleColumnWide\\\",\\n    QuadColumn = \\\"QuadColumn\\\",\\n    WhiteBoardApp16 = \\\"WhiteBoardApp16\\\",\\n    WhiteBoardApp32 = \\\"WhiteBoardApp32\\\",\\n    PinnedSolid = \\\"PinnedSolid\\\",\\n    InsertSignatureLine = \\\"InsertSignatureLine\\\",\\n    ArrangeByFrom = \\\"ArrangeByFrom\\\",\\n    Phishing = \\\"Phishing\\\",\\n    CreateMailRule = \\\"CreateMailRule\\\",\\n    PublishCourse = \\\"PublishCourse\\\",\\n    DictionaryRemove = \\\"DictionaryRemove\\\",\\n    UserRemove = \\\"UserRemove\\\",\\n    UserEvent = \\\"UserEvent\\\",\\n    Encryption = \\\"Encryption\\\",\\n    PasswordField = \\\"PasswordField\\\",\\n    OpenInNewTab = \\\"OpenInNewTab\\\",\\n    Hide3 = \\\"Hide3\\\",\\n    VerifiedBrandSolid = \\\"VerifiedBrandSolid\\\",\\n    MarkAsProtected = \\\"MarkAsProtected\\\",\\n    AuthenticatorApp = \\\"AuthenticatorApp\\\",\\n    WebTemplate = \\\"WebTemplate\\\",\\n    DefenderTVM = \\\"DefenderTVM\\\",\\n    MedalSolid = \\\"MedalSolid\\\",\\n    D365TalentLearn = \\\"D365TalentLearn\\\",\\n    D365TalentInsight = \\\"D365TalentInsight\\\",\\n    D365TalentHRCore = \\\"D365TalentHRCore\\\",\\n    BacklogList = \\\"BacklogList\\\",\\n    ButtonControl = \\\"ButtonControl\\\",\\n    TableGroup = \\\"TableGroup\\\",\\n    MountainClimbing = \\\"MountainClimbing\\\",\\n    TagUnknown = \\\"TagUnknown\\\",\\n    TagUnknownMirror = \\\"TagUnknownMirror\\\",\\n    TagUnknown12 = \\\"TagUnknown12\\\",\\n    TagUnknown12Mirror = \\\"TagUnknown12Mirror\\\",\\n    Link12 = \\\"Link12\\\",\\n    Presentation = \\\"Presentation\\\",\\n    Presentation12 = \\\"Presentation12\\\",\\n    Lock12 = \\\"Lock12\\\",\\n    BuildDefinition = \\\"BuildDefinition\\\",\\n    ReleaseDefinition = \\\"ReleaseDefinition\\\",\\n    SaveTemplate = \\\"SaveTemplate\\\",\\n    UserGauge = \\\"UserGauge\\\",\\n    BlockedSiteSolid12 = \\\"BlockedSiteSolid12\\\",\\n    TagSolid = \\\"TagSolid\\\",\\n    OfficeChat = \\\"OfficeChat\\\",\\n    OfficeChatSolid = \\\"OfficeChatSolid\\\",\\n    MailSchedule = \\\"MailSchedule\\\",\\n    WarningSolid = \\\"WarningSolid\\\",\\n    Blocked2Solid = \\\"Blocked2Solid\\\",\\n    SkypeCircleArrow = \\\"SkypeCircleArrow\\\",\\n    SkypeArrow = \\\"SkypeArrow\\\",\\n    SyncStatus = \\\"SyncStatus\\\",\\n    SyncStatusSolid = \\\"SyncStatusSolid\\\",\\n    ProjectDocument = \\\"ProjectDocument\\\",\\n    ToDoLogoOutline = \\\"ToDoLogoOutline\\\",\\n    VisioOnlineLogoFill32 = \\\"VisioOnlineLogoFill32\\\",\\n    VisioOnlineLogo32 = \\\"VisioOnlineLogo32\\\",\\n    VisioOnlineLogoCloud32 = \\\"VisioOnlineLogoCloud32\\\",\\n    VisioDiagramSync = \\\"VisioDiagramSync\\\",\\n    Event12 = \\\"Event12\\\",\\n    EventDateMissed12 = \\\"EventDateMissed12\\\",\\n    UserOptional = \\\"UserOptional\\\",\\n    ResponsesMenu = \\\"ResponsesMenu\\\",\\n    DoubleDownArrow = \\\"DoubleDownArrow\\\",\\n    DistributeDown = \\\"DistributeDown\\\",\\n    BookmarkReport = \\\"BookmarkReport\\\",\\n    FilterSettings = \\\"FilterSettings\\\",\\n    GripperDotsVertical = \\\"GripperDotsVertical\\\",\\n    MailAttached = \\\"MailAttached\\\",\\n    AddIn = \\\"AddIn\\\",\\n    LinkedDatabase = \\\"LinkedDatabase\\\",\\n    TableLink = \\\"TableLink\\\",\\n    PromotedDatabase = \\\"PromotedDatabase\\\",\\n    BarChartVerticalFilter = \\\"BarChartVerticalFilter\\\",\\n    BarChartVerticalFilterSolid = \\\"BarChartVerticalFilterSolid\\\",\\n    MicOff2 = \\\"MicOff2\\\",\\n    MicrosoftTranslatorLogo = \\\"MicrosoftTranslatorLogo\\\",\\n    ShowTimeAs = \\\"ShowTimeAs\\\",\\n    FileRequest = \\\"FileRequest\\\",\\n    WorkItemAlert = \\\"WorkItemAlert\\\",\\n    PowerBILogo16 = \\\"PowerBILogo16\\\",\\n    PowerBILogoBackplate16 = \\\"PowerBILogoBackplate16\\\",\\n    BulletedListText = \\\"BulletedListText\\\",\\n    BulletedListBullet = \\\"BulletedListBullet\\\",\\n    BulletedListTextMirrored = \\\"BulletedListTextMirrored\\\",\\n    BulletedListBulletMirrored = \\\"BulletedListBulletMirrored\\\",\\n    NumberedListText = \\\"NumberedListText\\\",\\n    NumberedListNumber = \\\"NumberedListNumber\\\",\\n    NumberedListTextMirrored = \\\"NumberedListTextMirrored\\\",\\n    NumberedListNumberMirrored = \\\"NumberedListNumberMirrored\\\",\\n    RemoveLinkChain = \\\"RemoveLinkChain\\\",\\n    RemoveLinkX = \\\"RemoveLinkX\\\",\\n    FabricTextHighlight = \\\"FabricTextHighlight\\\",\\n    ClearFormattingA = \\\"ClearFormattingA\\\",\\n    ClearFormattingEraser = \\\"ClearFormattingEraser\\\",\\n    Photo2Fill = \\\"Photo2Fill\\\",\\n    IncreaseIndentText = \\\"IncreaseIndentText\\\",\\n    IncreaseIndentArrow = \\\"IncreaseIndentArrow\\\",\\n    DecreaseIndentText = \\\"DecreaseIndentText\\\",\\n    DecreaseIndentArrow = \\\"DecreaseIndentArrow\\\",\\n    IncreaseIndentTextMirrored = \\\"IncreaseIndentTextMirrored\\\",\\n    IncreaseIndentArrowMirrored = \\\"IncreaseIndentArrowMirrored\\\",\\n    DecreaseIndentTextMirrored = \\\"DecreaseIndentTextMirrored\\\",\\n    DecreaseIndentArrowMirrored = \\\"DecreaseIndentArrowMirrored\\\",\\n    CheckListText = \\\"CheckListText\\\",\\n    CheckListCheck = \\\"CheckListCheck\\\",\\n    CheckListTextMirrored = \\\"CheckListTextMirrored\\\",\\n    CheckListCheckMirrored = \\\"CheckListCheckMirrored\\\",\\n    NumberSymbol = \\\"NumberSymbol\\\",\\n    Coupon = \\\"Coupon\\\",\\n    VerifiedBrand = \\\"VerifiedBrand\\\",\\n    ReleaseGate = \\\"ReleaseGate\\\",\\n    ReleaseGateCheck = \\\"ReleaseGateCheck\\\",\\n    ReleaseGateError = \\\"ReleaseGateError\\\",\\n    M365InvoicingLogo = \\\"M365InvoicingLogo\\\",\\n    RemoveFromShoppingList = \\\"RemoveFromShoppingList\\\",\\n    ShieldAlert = \\\"ShieldAlert\\\",\\n    FabricTextHighlightComposite = \\\"FabricTextHighlightComposite\\\",\\n    Dataflows = \\\"Dataflows\\\",\\n    GenericScanFilled = \\\"GenericScanFilled\\\",\\n    DiagnosticDataBarTooltip = \\\"DiagnosticDataBarTooltip\\\",\\n    SaveToMobile = \\\"SaveToMobile\\\",\\n    Orientation2 = \\\"Orientation2\\\",\\n    ScreenCast = \\\"ScreenCast\\\",\\n    ShowGrid = \\\"ShowGrid\\\",\\n    SnapToGrid = \\\"SnapToGrid\\\",\\n    ContactList = \\\"ContactList\\\",\\n    NewMail = \\\"NewMail\\\",\\n    EyeShadow = \\\"EyeShadow\\\",\\n    FabricFolderConfirm = \\\"FabricFolderConfirm\\\",\\n    InformationBarriers = \\\"InformationBarriers\\\",\\n    CommentActive = \\\"CommentActive\\\",\\n    ColumnVerticalSectionEdit = \\\"ColumnVerticalSectionEdit\\\",\\n    WavingHand = \\\"WavingHand\\\",\\n    ShakeDevice = \\\"ShakeDevice\\\",\\n    SmartGlassRemote = \\\"SmartGlassRemote\\\",\\n    Rotate90Clockwise = \\\"Rotate90Clockwise\\\",\\n    Rotate90CounterClockwise = \\\"Rotate90CounterClockwise\\\",\\n    CampaignTemplate = \\\"CampaignTemplate\\\",\\n    ChartTemplate = \\\"ChartTemplate\\\",\\n    PageListFilter = \\\"PageListFilter\\\",\\n    SecondaryNav = \\\"SecondaryNav\\\",\\n    ColumnVerticalSection = \\\"ColumnVerticalSection\\\",\\n    SkypeCircleSlash = \\\"SkypeCircleSlash\\\",\\n    SkypeSlash = \\\"SkypeSlash\\\",\\n    CustomizeToolbar = \\\"CustomizeToolbar\\\",\\n    DuplicateRow = \\\"DuplicateRow\\\",\\n    RemoveFromTrash = \\\"RemoveFromTrash\\\",\\n    MailOptions = \\\"MailOptions\\\",\\n    Childof = \\\"Childof\\\",\\n    Footer = \\\"Footer\\\",\\n    Header = \\\"Header\\\",\\n    BarChartVerticalFill = \\\"BarChartVerticalFill\\\",\\n    StackedColumnChart2Fill = \\\"StackedColumnChart2Fill\\\",\\n    PlainText = \\\"PlainText\\\",\\n    AccessibiltyChecker = \\\"AccessibiltyChecker\\\",\\n    DatabaseSync = \\\"DatabaseSync\\\",\\n    ReservationOrders = \\\"ReservationOrders\\\",\\n    TabOneColumn = \\\"TabOneColumn\\\",\\n    TabTwoColumn = \\\"TabTwoColumn\\\",\\n    TabThreeColumn = \\\"TabThreeColumn\\\",\\n    BulletedTreeList = \\\"BulletedTreeList\\\",\\n    MicrosoftTranslatorLogoGreen = \\\"MicrosoftTranslatorLogoGreen\\\",\\n    MicrosoftTranslatorLogoBlue = \\\"MicrosoftTranslatorLogoBlue\\\",\\n    InternalInvestigation = \\\"InternalInvestigation\\\",\\n    AddReaction = \\\"AddReaction\\\",\\n    ContactHeart = \\\"ContactHeart\\\",\\n    VisuallyImpaired = \\\"VisuallyImpaired\\\",\\n    EventToDoLogo = \\\"EventToDoLogo\\\",\\n    Variable2 = \\\"Variable2\\\",\\n    ModelingView = \\\"ModelingView\\\",\\n    DisconnectVirtualMachine = \\\"DisconnectVirtualMachine\\\",\\n    ReportLock = \\\"ReportLock\\\",\\n    Uneditable2 = \\\"Uneditable2\\\",\\n    Uneditable2Mirrored = \\\"Uneditable2Mirrored\\\",\\n    BarChartVerticalEdit = \\\"BarChartVerticalEdit\\\",\\n    GlobalNavButtonActive = \\\"GlobalNavButtonActive\\\",\\n    PollResults = \\\"PollResults\\\",\\n    Rerun = \\\"Rerun\\\",\\n    QandA = \\\"QandA\\\",\\n    QandAMirror = \\\"QandAMirror\\\",\\n    BookAnswers = \\\"BookAnswers\\\",\\n    AlertSettings = \\\"AlertSettings\\\",\\n    TrimStart = \\\"TrimStart\\\",\\n    TrimEnd = \\\"TrimEnd\\\",\\n    TableComputed = \\\"TableComputed\\\",\\n    DecreaseIndentLegacy = \\\"DecreaseIndentLegacy\\\",\\n    IncreaseIndentLegacy = \\\"IncreaseIndentLegacy\\\",\\n    SizeLegacy = \\\"SizeLegacy\\\"\\n}\\n\\nexport declare function initializeIcons(baseUrl?: string, options?: IIconOptions): void;\\n\\nexport { }\\n\"\n\n//# sourceURL=webpack:///../tsx-editor/dist/types/icons.d.ts?/mnt/work/5/s/node_modules/raw-loader");

/***/ }),

/***/ "../../node_modules/raw-loader/index.js!../tsx-editor/dist/types/merge-styles.d.ts":
/*!****************************************************************************************!*\
  !*** /mnt/work/5/s/node_modules/raw-loader!../tsx-editor/dist/types/merge-styles.d.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"\\n/**\\n * Helper function whose role is supposed to express that regardless if T is a style object or style function,\\n * it will always map to a style function.\\n */\\ndeclare type __MapToFunctionType<T> = Extract<T, Function> extends never ? (...args: any[]) => Partial<T> : Extract<T, Function>;\\n\\n/**\\n * Combine a set of styles together (but does not register css classes).\\n * @param styleSet - The first style set to be concatenated.\\n */\\nexport declare function concatStyleSets<TStyleSet>(styleSet: TStyleSet | false | null | undefined): IConcatenatedStyleSet<ObjectOnly<TStyleSet>>;\\n\\n/**\\n * Combine a set of styles together (but does not register css classes).\\n * @param styleSet1 - The first style set to be concatenated.\\n * @param styleSet2 - The second style set to be concatenated.\\n */\\nexport declare function concatStyleSets<TStyleSet1, TStyleSet2>(styleSet1: TStyleSet1 | false | null | undefined, styleSet2: TStyleSet2 | false | null | undefined): IConcatenatedStyleSet<ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2>>;\\n\\n/**\\n * Combine a set of styles together (but does not register css classes).\\n * @param styleSet1 - The first style set to be concatenated.\\n * @param styleSet2 - The second style set to be concatenated.\\n * @param styleSet3 - The third style set to be concatenated.\\n */\\nexport declare function concatStyleSets<TStyleSet1, TStyleSet2, TStyleSet3>(styleSet1: TStyleSet1 | false | null | undefined, styleSet2: TStyleSet2 | false | null | undefined, styleSet3: TStyleSet3 | false | null | undefined): IConcatenatedStyleSet<ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2> & ObjectOnly<TStyleSet3>>;\\n\\n/**\\n * Combine a set of styles together (but does not register css classes).\\n * @param styleSet1 - The first style set to be concatenated.\\n * @param styleSet2 - The second style set to be concatenated.\\n * @param styleSet3 - The third style set to be concatenated.\\n * @param styleSet4 - The fourth style set to be concatenated.\\n */\\nexport declare function concatStyleSets<TStyleSet1, TStyleSet2, TStyleSet3, TStyleSet4>(styleSet1: TStyleSet1 | false | null | undefined, styleSet2: TStyleSet2 | false | null | undefined, styleSet3: TStyleSet3 | false | null | undefined, styleSet4: TStyleSet4 | false | null | undefined): IConcatenatedStyleSet<ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2> & ObjectOnly<TStyleSet3> & ObjectOnly<TStyleSet4>>;\\n\\n/**\\n * Combine a set of styles together (but does not register css classes).\\n * @param styleSet1 - The first style set to be concatenated.\\n * @param styleSet2 - The second style set to be concatenated.\\n * @param styleSet3 - The third style set to be concatenated.\\n * @param styleSet4 - The fourth style set to be concatenated.\\n * @param styleSet5 - The fifth set to be concatenated.\\n */\\nexport declare function concatStyleSets<TStyleSet1, TStyleSet2, TStyleSet3, TStyleSet4, TStyleSet5>(styleSet1: TStyleSet1 | false | null | undefined, styleSet2: TStyleSet2 | false | null | undefined, styleSet3: TStyleSet3 | false | null | undefined, styleSet4: TStyleSet4 | false | null | undefined, styleSet5: TStyleSet5 | false | null | undefined): IConcatenatedStyleSet<ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2> & ObjectOnly<TStyleSet3> & ObjectOnly<TStyleSet4> & ObjectOnly<TStyleSet5>>;\\n\\n/**\\n * Combine a set of styles together (but does not register css classes).\\n * @param styleSet1 - The first style set to be concatenated.\\n * @param styleSet2 - The second style set to be concatenated.\\n * @param styleSet3 - The third style set to be concatenated.\\n * @param styleSet4 - The fourth style set to be concatenated.\\n * @param styleSet5 - The fifth set to be concatenated.\\n * @param styleSet6 - The sixth set to be concatenated.\\n */\\nexport declare function concatStyleSets<TStyleSet1, TStyleSet2, TStyleSet3, TStyleSet4, TStyleSet5, TStyleSet6>(styleSet1: TStyleSet1 | false | null | undefined, styleSet2: TStyleSet2 | false | null | undefined, styleSet3: TStyleSet3 | false | null | undefined, styleSet4: TStyleSet4 | false | null | undefined, styleSet5: TStyleSet5 | false | null | undefined, styleSet6: TStyleSet6 | false | null | undefined): IConcatenatedStyleSet<ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2> & ObjectOnly<TStyleSet3> & ObjectOnly<TStyleSet4> & ObjectOnly<TStyleSet5> & ObjectOnly<TStyleSet6>>;\\n\\n/**\\n * Combine a set of styles together (but does not register css classes).\\n * @param styleSets - One or more stylesets to be merged (each param can also be falsy).\\n */\\nexport declare function concatStyleSets(...styleSets: (IStyleSet | false | null | undefined)[]): IConcatenatedStyleSet<any>;\\n\\n/**\\n * Concatenates style sets into one, but resolves functional sets using the given props.\\n * @param styleProps - Props used to resolve functional sets.\\n * @param allStyles - Style sets, which can be functions or objects.\\n */\\nexport declare function concatStyleSetsWithProps<TStyleProps, TStyleSet extends IStyleSet<TStyleSet>>(styleProps: TStyleProps, ...allStyles: (IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined)[]): DeepPartial<TStyleSet>;\\n\\n/**\\n * TypeScript type to return a deep partial object (each property can be undefined, recursively.)\\n */\\nexport declare type DeepPartial<T> = {\\n    [P in keyof T]?: T[P] extends (infer U)[] ? DeepPartial<U>[] : T[P] extends object ? DeepPartial<T[P]> : T[P];\\n};\\n\\ndeclare type Diff<T extends keyof any, U extends keyof any> = ({\\n    [P in T]: P;\\n} & {\\n    [P in U]: never;\\n} & {\\n    [x: string]: never;\\n})[T];\\n\\n/**\\n * Registers a font face.\\n * @public\\n */\\nexport declare function fontFace(font: IFontFace): void;\\n\\n/**\\n * A concatenated style set differs from `IStyleSet` in that subComponentStyles will always be a style function.\\n */\\nexport declare type IConcatenatedStyleSet<TStyleSet extends IStyleSet<TStyleSet>> = {\\n    [P in keyof Omit<TStyleSet, 'subComponentStyles'>]: IStyle;\\n} & {\\n    subComponentStyles?: {\\n        [P in keyof TStyleSet['subComponentStyles']]: IStyleFunction<any, any>;\\n    };\\n};\\n\\n/**\\n * CSP settings for the stylesheet\\n */\\nexport declare interface ICSPSettings {\\n    /**\\n     * Nonce to inject into script tag\\n     */\\n    nonce?: string;\\n}\\n\\ndeclare type ICSSBaselinePositionRule = 'baseline' | 'last baseline' | 'first baseline';\\n\\ndeclare type ICSSDisplayRule = 'block' | 'inline' | 'run-in' | 'flow' | 'flow-root' | 'table' | 'flex' | 'grid' | 'ruby' | 'block flow' | 'inline table' | 'flex run-in' | 'list-item' | 'list-item block' | 'list-item inline' | 'list-item flow' | 'list-item flow-root' | 'list-item block flow' | 'list-item block flow-root' | 'flow list-item block' | 'table-row-group' | 'table-header-group' | 'table-footer-group' | 'table-row' | 'table-cell' | 'table-column-group' | 'table-column' | 'table-caption' | 'ruby-base' | 'ruby-text' | 'ruby-base-container' | 'ruby-text-container' | 'contents' | 'none' | 'inline-block' | 'inline-table' | 'inline-flex' | 'inline-grid';\\n\\ndeclare type ICSSOverflowAndSelfPositionRule = 'center' | 'start' | 'end' | 'self-start' | 'self-end' | 'flex-start' | 'flex-end' | 'safe center' | 'safe start' | 'safe end' | 'safe self-start' | 'safe self-end' | 'safe flex-start' | 'safe flex-end' | 'unsafe center' | 'unsafe start' | 'unsafe end' | 'unsafe self-start' | 'unsafe self-end' | 'unsafe flex-start' | 'unsafe flex-end';\\n\\ndeclare type ICSSPercentageRule = string;\\n\\ndeclare type ICSSPixelUnitRule = string | number;\\n\\nexport declare type ICSSRule = 'initial' | 'inherit' | 'unset';\\n\\n/**\\n * Font face definition.\\n *\\n * @public\\n * {@docCategory IFontFace}\\n */\\nexport declare interface IFontFace extends IRawFontStyle {\\n    /**\\n     * Specifies the src of the font.\\n     */\\n    src?: string;\\n    /**\\n     * unicode-range allows you to set a specific range of characters to be downloaded\\n     * from a font (embedded using \\\\@font-face) and made available for use on the current\\n     * page.\\n     */\\n    unicodeRange?: ICSSRule | string;\\n    /**\\n     * Determines how a font face is displayed based on whether and when it is downloaded\\n     * and ready to use.\\n     */\\n    fontDisplay?: 'auto' | 'block' | 'swap' | 'fallback' | 'optional';\\n    /**\\n     * Feature settings for the font.\\n     */\\n    fontFeatureSettings?: string;\\n}\\n\\nexport declare type IFontWeight = ICSSRule | 'normal' | 'bold' | 'bolder' | 'lighter' | '100' | 100 | '200' | 200 | '300' | 300 | '400' | 400 | '500' | 500 | '600' | 600 | '700' | 700 | '800' | 800 | '900' | 900;\\n\\n/**\\n * Keyframe definition.\\n */\\nexport declare type IKeyframes = Record<string, IRawStyle>;\\n\\ndeclare type IMixBlendModes = ICSSRule | 'normal' | 'multiply' | 'screen' | 'overlay' | 'darken' | 'lighten' | 'color-dodge' | 'color-burn' | 'hard-light' | 'soft-light' | 'difference' | 'exclusion' | 'hue' | 'saturation' | 'color' | 'luminosity';\\n\\nexport declare const InjectionMode: {\\n    /**\\n     * Avoids style injection, use getRules() to read the styles.\\n     */\\n    none: 0;\\n    /**\\n     * Inserts rules using the insertRule api.\\n     */\\n    insertNode: 1;\\n    /**\\n     * Appends rules using appendChild.\\n     */\\n    appendChild: 2;\\n};\\n\\nexport declare type InjectionMode = typeof InjectionMode[keyof typeof InjectionMode];\\n\\n/**\\n * A processed style set is one which the set of styles associated with each area has been converted\\n * into a class name. Additionally, all subComponentStyles are style functions.\\n */\\nexport declare type IProcessedStyleSet<TStyleSet extends IStyleSet<TStyleSet>> = {\\n    [P in keyof Omit<TStyleSet, 'subComponentStyles'>]: string;\\n} & {\\n    subComponentStyles: {\\n        [P in keyof TStyleSet['subComponentStyles']]: __MapToFunctionType<TStyleSet['subComponentStyles'] extends infer J ? (P extends keyof J ? J[P] : never) : never>;\\n    };\\n};\\n\\n/**\\n * The base font style.\\n * {@docCategory IRawFontStyle}\\n */\\nexport declare interface IRawFontStyle {\\n    /**\\n     * The font property is shorthand that allows you to do one of two things: you can\\n     * either set up six of the most mature font properties in one line, or you can set\\n     *  one of a choice of keywords to adopt a system font setting.\\n     */\\n    font?: ICSSRule | string;\\n    /**\\n     * The font-family property allows one or more font family names and/or generic family\\n     * names to be specified for usage on the selected element(s)' text. The browser then\\n     * goes through the list; for each character in the selection it applies the first\\n     * font family that has an available glyph for that character.\\n     */\\n    fontFamily?: ICSSRule | string;\\n    /**\\n     * The font-kerning property allows contextual adjustment of inter-glyph spacing, i.e.\\n     * the spaces between the characters in text. This property controls <bold>metric\\n     * kerning</bold> - that utilizes adjustment data contained in the font. Optical\\n     * Kerning is not supported as yet.\\n     */\\n    fontKerning?: ICSSRule | string;\\n    /**\\n     * Specifies the size of the font. Used to compute em and ex units.\\n     * See CSS 3 font-size property https://www.w3.org/TR/css-fonts-3/#propdef-font-size\\n     */\\n    fontSize?: ICSSRule | 'xx-small' | 'x-small' | 'small' | 'medium' | 'large' | 'x-large' | 'xx-large' | 'larger' | 'smaller' | ICSSPixelUnitRule | ICSSPercentageRule;\\n    /**\\n     * The font-size-adjust property adjusts the font-size of the fallback fonts defined\\n     * with font-family, so that the x-height is the same no matter what font is used.\\n     * This preserves the readability of the text when fallback happens.\\n     * See CSS 3 font-size-adjust property\\n     * https://www.w3.org/TR/css-fonts-3/#propdef-font-size-adjust\\n     */\\n    fontSizeAdjust?: ICSSRule | 'none' | number | string;\\n    /**\\n     * Allows you to expand or condense the widths for a normal, condensed, or expanded\\n     * font face.\\n     * See CSS 3 font-stretch property\\n     * https://drafts.csswg.org/css-fonts-3/#propdef-font-stretch\\n     */\\n    fontStretch?: ICSSRule | 'normal' | 'ultra-condensed' | 'extra-condensed' | 'condensed' | 'semi-condensed' | 'semi-expanded' | 'expanded' | 'extra-expanded' | 'ultra-expanded' | string;\\n    /**\\n     * The font-style property allows normal, italic, or oblique faces to be selected.\\n     * Italic forms are generally cursive in nature while oblique faces are typically\\n     * sloped versions of the regular face. Oblique faces can be simulated by artificially\\n     * sloping the glyphs of the regular face.\\n     * See CSS 3 font-style property https://www.w3.org/TR/css-fonts-3/#propdef-font-style\\n     */\\n    fontStyle?: ICSSRule | 'normal' | 'italic' | 'oblique' | string;\\n    /**\\n     * This value specifies whether the user agent is allowed to synthesize bold or\\n     *  oblique font faces when a font family lacks bold or italic faces.\\n     */\\n    fontSynthesis?: ICSSRule | string;\\n    /**\\n     * The font-variant property enables you to select the small-caps font within a font\\n     * family.\\n     */\\n    fontVariant?: ICSSRule | string;\\n    /**\\n     * Fonts can provide alternate glyphs in addition to default glyph for a character.\\n     * This property provides control over the selection of these alternate glyphs.\\n     */\\n    fontVariantAlternates?: ICSSRule | string;\\n    /**\\n     * Specifies the weight or boldness of the font.\\n     * See CSS 3 'font-weight' property https://www.w3.org/TR/css-fonts-3/#propdef-font-weight\\n     */\\n    fontWeight?: IFontWeight | string;\\n}\\n\\n/**\\n * IRawStyle extends a raw style object, but allows selectors to be defined\\n * under the selectors node.\\n * @public\\n * {@docCategory IRawStyle}\\n */\\nexport declare interface IRawStyle extends IRawStyleBase {\\n    /**\\n     * Allow css variables, strings, objects. While we should have more strict typing\\n     * here, partners are broken in many unpredictable cases where typescript can't infer\\n     * the right typing. Loosening the typing to both allow for css variables and other things.\\n     */\\n    [key: string]: any;\\n    /**\\n     * Display name for the style.\\n     */\\n    displayName?: string;\\n    /**\\n     * @deprecated - The selectors wrapper is no longer required. You may add selectors as siblings to other\\n     * style properties, like most css-in-js libraries support.\\n     */\\n    selectors?: {\\n        [key: string]: IStyle;\\n    };\\n}\\n\\n/**\\n * All raw style properties.\\n *\\n * @public\\n * {@docCategory IRawStyleBase}\\n */\\nexport declare interface IRawStyleBase extends IRawFontStyle {\\n    /**\\n     * (Ms specific) constrast adjust rule.\\n     */\\n    MsHighContrastAdjust?: ICSSRule | string;\\n    /**\\n     * (Ms specific) scrollbar behavior adjust rule.\\n     */\\n    MsOverflowStyle?: 'auto' | 'none' | 'scrollbar' | '-ms-autohiding-scrollbar' | string;\\n    /**\\n     * (Moz specific) font smoothing directive.\\n     */\\n    MozOsxFontSmoothing?: 'none' | 'antialiased' | 'grayscale' | 'subpixel-antialiased' | string;\\n    /**\\n     * (Webkit specific) font smoothing directive.\\n     */\\n    WebkitFontSmoothing?: 'none' | 'antialiased' | 'grayscale' | 'subpixel-antialiased' | string;\\n    /**\\n     * (Webkit specific) momentum scrolling on iOS devices\\n     */\\n    WebkitOverflowScrolling?: 'auto' | 'touch' | string;\\n    /**\\n     * (Webkit specific) color of the highlight that appears overa  link while it's being tapped\\n     */\\n    WebkitTapHighlightColor?: string;\\n    /**\\n     * (Webkit specific) controls the text inflation algorithm used on some smartphones and tablets.\\n     * Other browsers will ignore this property.\\n     */\\n    WebkitTextSizeAdjust?: 'none' | 'auto' | ICSSPercentageRule | ICSSRule | string;\\n    /**\\n     * Aligns a flex container's lines within the flex container when there is extra space\\n     * in the cross-axis, similar to how justify-content aligns individual items within the main-axis.\\n     */\\n    alignContent?: ICSSRule | 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'stretch' | string;\\n    /**\\n     * Sets the default alignment in the cross axis for all of the flex container's items,\\n     * including anonymous flex items, similarly to how justify-content aligns items along the main axis.\\n     */\\n    alignItems?: ICSSRule | 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch' | string;\\n    /**\\n     * Aligns the box (as the alignment subject) within its containing block (as the alignment container)\\n     * along the block/column/cross axis of the alignment container.\\n     *\\n     * See CSS align-self property\\n     * https://www.w3.org/TR/css-align-3/#propdef-align-self\\n     */\\n    alignSelf?: ICSSRule | 'auto' | 'normal' | 'stretch' | ICSSBaselinePositionRule | ICSSOverflowAndSelfPositionRule | string;\\n    /**\\n     * This property allows precise alignment of elements, such as graphics, that do not\\n     * have a baseline-table or lack the desired baseline in their baseline-table. With the\\n     * alignment-adjust property, the position of the baseline identified by the\\n     * alignment-baseline can be explicitly determined. It also determines precisely\\n     * the alignment point for each glyph within a textual element.\\n     */\\n    alignmentAdjust?: ICSSRule | string;\\n    /**\\n     * Specifies how an object is aligned with respect to its parent. This property specifies\\n     * which baseline of this element is to be aligned with the corresponding baseline of the\\n     * parent. For example, this allows alphabetic baselines in Roman text to stay aligned\\n     * across font size changes. It defaults to the baseline with the same name as the computed\\n     * value of the alignment-baseline property.\\n     */\\n    alignmentBaseline?: ICSSRule | string;\\n    /**\\n     * The animation CSS property is a shorthand property for the various animation properties:\\n     * `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`,\\n     * `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and\\n     * `animation-play-state`.\\n     */\\n    animation?: ICSSRule | string;\\n    /**\\n     * Defines a length of time to elapse before an animation starts, allowing an animation to begin execution\\n     * some time after it is applied.\\n     */\\n    animationDelay?: ICSSRule | string;\\n    /**\\n     * Defines whether an animation should run in reverse on some or all cycles.\\n     */\\n    animationDirection?: ICSSRule | string;\\n    /**\\n     * Specifies the length an animation takes to finish. Default value is 0, meaning\\n     * there will be no animation.\\n     */\\n    animationDuration?: ICSSRule | string;\\n    /**\\n     * The animation-fill-mode CSS property specifies how a CSS animation should apply\\n     * styles to its target before and after its execution.\\n     */\\n    animationFillMode?: ICSSRule | 'none' | 'forwards' | 'backwards' | 'both' | string;\\n    /**\\n     * Specifies how many times an animation cycle should play.\\n     */\\n    animationIterationCount?: ICSSRule | string;\\n    /**\\n     * Defines the list of animations that apply to the element.\\n     */\\n    animationName?: ICSSRule | string;\\n    /**\\n     * Defines whether an animation is running or paused.\\n     */\\n    animationPlayState?: ICSSRule | string;\\n    /**\\n     * The animation-timing-function specifies the speed curve of an animation.\\n     */\\n    animationTimingFunction?: ICSSRule | string;\\n    /**\\n     * Allows changing the style of any element to platform-based interface elements or\\n     * vice versa.\\n     */\\n    appearance?: ICSSRule | string;\\n    /**\\n     * Lets you apply graphical effects such as blurring or color shifting to the area\\n     * behind an element. Because it applies to everything behind the element, to see\\n     * the effect you must make the element or its background at least partially transparent.\\n     */\\n    backdropFilter?: ICSSRule | string;\\n    /**\\n     * Edge requires the -webkit prefix backdrop-filter.\\n     */\\n    WebkitBackdropFilter?: ICSSRule | string;\\n    /**\\n     * Determines whether or not the “back” side of a transformed element is visible when\\n     * facing the viewer.\\n     */\\n    backfaceVisibility?: ICSSRule | string;\\n    /**\\n     * Shorthand property to set the values for one or more of:\\n     * background-clip, background-color, background-image,\\n     * background-origin, background-position, background-repeat,\\n     * background-size, and background-attachment.\\n     */\\n    background?: ICSSRule | string;\\n    /**\\n     * If a background-image is specified, this property determines\\n     * whether that image's position is fixed within the viewport,\\n     * or scrolls along with its containing block.\\n     * See CSS 3 background-attachment property https://drafts.csswg.org/css-backgrounds-3/#the-background-attachment\\n     */\\n    backgroundAttachment?: ICSSRule | 'scroll' | 'fixed' | 'local' | string;\\n    /**\\n     * This property describes how the element's background images should blend with each\\n     * other and the element's background color. The value is a list of blend modes that\\n     * corresponds to each background image. Each element in the list will apply to the\\n     * corresponding element of background-image. If a property doesn’t have enough\\n     * comma-separated values to match the number of layers, the UA must calculate its\\n     * used value by repeating the list of values until there are enough.\\n     */\\n    backgroundBlendMode?: ICSSRule | string;\\n    /**\\n     * The background-clip CSS property specifies if an element's background, whether a\\n     * `<color>` or an `<image>`, extends underneath its border.\\n     *\\n     * \\\\* Does not work in IE\\n     *\\n     * \\\\* The `text` value is experimental and should not be used in production code.\\n     */\\n    backgroundClip?: ICSSRule | 'border-box' | 'padding-box' | 'content-box' | 'text' | string;\\n    /**\\n     * Sets the background color of an element.\\n     */\\n    backgroundColor?: ICSSRule | string;\\n    /**\\n     * Sets a compositing style for background images and colors.\\n     */\\n    backgroundComposite?: ICSSRule | string;\\n    /**\\n     * Applies one or more background images to an element. These can be any valid CSS\\n     * image, including url() paths to image files or CSS gradients.\\n     */\\n    backgroundImage?: ICSSRule | string;\\n    /**\\n     * Specifies what the background-position property is relative to.\\n     */\\n    backgroundOrigin?: ICSSRule | string;\\n    /**\\n     * Sets the position of a background image.\\n     */\\n    backgroundPosition?: ICSSRule | string;\\n    /**\\n     * Background-repeat defines if and how background images will be repeated after they\\n     * have been sized and positioned\\n     */\\n    backgroundRepeat?: ICSSRule | string;\\n    /**\\n     * Sets the size of background images\\n     */\\n    backgroundSize?: ICSSRule | string;\\n    /**\\n     * Shorthand property that defines the different properties of all four sides of an\\n     * element's border in a single declaration. It can be used to set border-width,\\n     * border-style and border-color, or a subset of these.\\n     */\\n    border?: ICSSRule | 0 | string;\\n    /**\\n     * Shorthand that sets the values of border-bottom-color,\\n     * border-bottom-style, and border-bottom-width.\\n     */\\n    borderBottom?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Sets the color of the bottom border of an element.\\n     */\\n    borderBottomColor?: ICSSRule | string;\\n    /**\\n     * Defines the shape of the border of the bottom-left corner.\\n     */\\n    borderBottomLeftRadius?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Defines the shape of the border of the bottom-right corner.\\n     */\\n    borderBottomRightRadius?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Sets the line style of the bottom border of a box.\\n     */\\n    borderBottomStyle?: ICSSRule | string;\\n    /**\\n     * Sets the width of an element's bottom border. To set all four borders, use the\\n     * border-width shorthand property which sets the values simultaneously for\\n     * border-top-width, border-right-width, border-bottom-width, and border-left-width.\\n     */\\n    borderBottomWidth?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Border-collapse can be used for collapsing the borders between table cells\\n     */\\n    borderCollapse?: ICSSRule | string;\\n    /**\\n     * The CSS border-color property sets the color of an element's four borders. This\\n     * property can have from one to four values, made up of the elementary properties:\\n     *      •       border-top-color\\n     *      •       border-right-color\\n     *      •       border-bottom-color\\n     *      •       border-left-color The default color is the currentColor of each of\\n     * these values.\\n     * If you provide one value, it sets the color for the element. Two values set the\\n     * horizontal and vertical values, respectively. Providing three values sets the top,\\n     * vertical, and bottom values, in that order. Four values set all for sides: top,\\n     * right, bottom, and left, in that order.\\n     */\\n    borderColor?: ICSSRule | string;\\n    /**\\n     * Specifies different corner clipping effects, such as scoop (inner curves), bevel\\n     * (straight cuts) or notch (cut-off rectangles). Works along with border-radius to\\n     * specify the size of each corner effect.\\n     */\\n    borderCornerShape?: ICSSRule | string;\\n    /**\\n     * The property border-image-source is used to set the image to be used instead of\\n     * the border style. If this is set to none the border-style is used instead.\\n     */\\n    borderImageSource?: ICSSRule | string;\\n    /**\\n     * The border-image-width CSS property defines the offset to use for dividing the\\n     * border image in nine parts, the top-left corner, central top edge, top-right-corner,\\n     * central right edge, bottom-right corner, central bottom edge, bottom-left corner,\\n     * and central right edge. They represent inward distance from the top, right, bottom,\\n     * and left edges.\\n     */\\n    borderImageWidth?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Shorthand property that defines the border-width, border-style and border-color of\\n     * an element's left border in a single declaration. Note that you can use the\\n     * corresponding longhand properties to set specific individual properties of the left\\n     * border — border-left-width, border-left-style and border-left-color.\\n     */\\n    borderLeft?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * The CSS border-left-color property sets the color of an element's left border. This\\n     *  page explains the border-left-color value, but often you will find it more\\n     * convenient to fix the border's left color as part of a shorthand set, either\\n     * border-left or border-color. Colors can be defined several ways. For more\\n     * information, see Usage.\\n     */\\n    borderLeftColor?: ICSSRule | string;\\n    /**\\n     * Sets the style of an element's left border. To set all four borders, use the\\n     * shorthand property, border-style. Otherwise, you can set the borders individually\\n     * with border-top-style, border-right-style, border-bottom-style, border-left-style.\\n     */\\n    borderLeftStyle?: ICSSRule | string;\\n    /**\\n     * Sets the width of an element's left border. To set all four borders, use the\\n     * border-width shorthand property which sets the values simultaneously for\\n     * border-top-width, border-right-width, border-bottom-width, and border-left-width.\\n     */\\n    borderLeftWidth?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Defines how round the border's corners are.\\n     */\\n    borderRadius?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Shorthand property that defines the border-width, border-style and border-color of\\n     * an element's right border in a single declaration. Note that you can use the\\n     * corresponding longhand properties to set specific individual properties of the\\n     * right border — border-right-width, border-right-style and border-right-color.\\n     */\\n    borderRight?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Sets the color of an element's right border. This page explains the\\n     * border-right-color value, but often you will find it more convenient to fix the\\n     * border's right color as part of a shorthand set, either border-right or border-color.\\n     * Colors can be defined several ways. For more information, see Usage.\\n     */\\n    borderRightColor?: ICSSRule | string;\\n    /**\\n     * Sets the style of an element's right border. To set all four borders, use the\\n     * shorthand property, border-style. Otherwise, you can set the borders individually\\n     * with border-top-style, border-right-style, border-bottom-style, border-left-style.\\n     */\\n    borderRightStyle?: ICSSRule | string;\\n    /**\\n     * Sets the width of an element's right border. To set all four borders, use the\\n     * border-width shorthand property which sets the values simultaneously for\\n     * border-top-width, border-right-width, border-bottom-width, and border-left-width.\\n     */\\n    borderRightWidth?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Specifies the distance between the borders of adjacent cells.\\n     */\\n    borderSpacing?: ICSSRule | string;\\n    /**\\n     * Sets the style of an element's four borders. This property can have from one to\\n     * four values. With only one value, the value will be applied to all four borders;\\n     * otherwise, this works as a shorthand property for each of border-top-style,\\n     *  border-right-style, border-bottom-style, border-left-style, where each border\\n     *  style may be assigned a separate value.\\n     */\\n    borderStyle?: ICSSRule | string;\\n    /**\\n     * Shorthand property that defines the border-width, border-style and border-color of\\n     * an element's top border in a single declaration. Note that you can use the\\n     * corresponding longhand properties to set specific individual properties of the top\\n     * border — border-top-width, border-top-style and border-top-color.\\n     */\\n    borderTop?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Sets the color of an element's top border. This page explains the border-top-color\\n     * value, but often you will find it more convenient to fix the border's top color as\\n     * part of a shorthand set, either border-top or border-color.\\n     * Colors can be defined several ways. For more information, see Usage.\\n     */\\n    borderTopColor?: ICSSRule | string;\\n    /**\\n     * Sets the rounding of the top-left corner of the element.\\n     */\\n    borderTopLeftRadius?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Sets the rounding of the top-right corner of the element.\\n     */\\n    borderTopRightRadius?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Sets the style of an element's top border. To set all four borders, use the\\n     * shorthand property, border-style. Otherwise, you can set the borders individually\\n     * with border-top-style, border-right-style, border-bottom-style, border-left-style.\\n     */\\n    borderTopStyle?: ICSSRule | string;\\n    /**\\n     * Sets the width of an element's top border. To set all four borders, use the\\n     * border-width shorthand property which sets the values simultaneously for\\n     * border-top-width, border-right-width, border-bottom-width, and border-left-width.\\n     */\\n    borderTopWidth?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Sets the width of an element's four borders. This property can have from one to\\n     * four values. This is a shorthand property for setting values simultaneously for\\n     * border-top-width, border-right-width, border-bottom-width, and border-left-width.\\n     */\\n    borderWidth?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * This property specifies how far an absolutely positioned box's bottom margin edge\\n     * is offset above the bottom edge of the box's containing block. For relatively\\n     * positioned boxes, the offset is with respect to the bottom edges of the box itself\\n     * (i.e., the box is given a position in the normal flow, then offset from that\\n     * position according to these properties).\\n     */\\n    bottom?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Breaks a box into fragments creating new borders, padding and repeating backgrounds\\n     * or lets it stay as a continuous box on a page break, column break, or, for inline\\n     * elements, at a line break.\\n     */\\n    boxDecorationBreak?: ICSSRule | string;\\n    /**\\n     * Cast a drop shadow from the frame of almost any element.\\n     * MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow\\n     */\\n    boxShadow?: ICSSRule | string;\\n    /**\\n     * The CSS box-sizing property is used to alter the default CSS box model used to\\n     * calculate width and height of the elements.\\n     */\\n    boxSizing?: ICSSRule | 'border-box' | 'content-box' | string;\\n    /**\\n     * The CSS break-after property allows you to force a break on multi-column layouts.\\n     * More specifically, it allows you to force a break after an element. It allows you\\n     * to determine if a break should occur, and what type of break it should be. The\\n     * break-after CSS property describes how the page, column or region break behaves\\n     * after the generated box. If there is no generated box, the property is ignored.\\n     */\\n    breakAfter?: ICSSRule | string;\\n    /**\\n     * Control page/column/region breaks that fall above a block of content\\n     */\\n    breakBefore?: ICSSRule | string;\\n    /**\\n     * Control page/column/region breaks that fall within a block of content\\n     */\\n    breakInside?: ICSSRule | string;\\n    /**\\n     * The clear CSS property specifies if an element can be positioned next to or must be\\n     * positioned below the floating elements that precede it in the markup.\\n     */\\n    clear?: ICSSRule | string;\\n    /**\\n     * Clipping crops an graphic, so that only a portion of the graphic is rendered, or\\n     * filled. This clip-rule property, when used with the clip-path property, defines\\n     * which clip rule, or algorithm, to use when filling the different parts of a graphics.\\n     */\\n    clipRule?: ICSSRule | string;\\n    /**\\n     * The color property sets the color of an element's foreground content (usually text),\\n     * accepting any standard CSS color from keywords and hex values to RGB(a) and HSL(a).\\n     */\\n    color?: ICSSRule | string;\\n    /**\\n     * Describes the number of columns of the element.\\n     * See CSS 3 column-count property https://www.w3.org/TR/css3-multicol/#cc\\n     */\\n    columnCount?: ICSSRule | number | 'auto' | string;\\n    /**\\n     * Specifies how to fill columns (balanced or sequential).\\n     */\\n    columnFill?: ICSSRule | string;\\n    /**\\n     * The column-gap property controls the width of the gap between columns in multi-column\\n     * elements.\\n     */\\n    columnGap?: ICSSRule | string;\\n    /**\\n     * Sets the width, style, and color of the rule between columns.\\n     */\\n    columnRule?: ICSSRule | string;\\n    /**\\n     * Specifies the color of the rule between columns.\\n     */\\n    columnRuleColor?: ICSSRule | string;\\n    /**\\n     * Specifies the width of the rule between columns.\\n     */\\n    columnRuleWidth?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * The column-span CSS property makes it possible for an element to span across all\\n     * columns when its value is set to all. An element that spans more than one column\\n     * is called a spanning element.\\n     */\\n    columnSpan?: ICSSRule | string;\\n    /**\\n     * Specifies the width of columns in multi-column elements.\\n     */\\n    columnWidth?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * This property is a shorthand property for setting column-width and/or column-count.\\n     */\\n    columns?: ICSSRule | string;\\n    /**\\n     * Content for pseudo selectors.\\n     */\\n    content?: string;\\n    /**\\n     * The counter-increment property accepts one or more names of counters (identifiers),\\n     * each one optionally followed by an integer which specifies the value by which the\\n     * counter should be incremented (e.g. if the value is 2, the counter increases by 2\\n     * each time it is invoked).\\n     */\\n    counterIncrement?: ICSSRule | string;\\n    /**\\n     * The counter-reset property contains a list of one or more names of counters, each\\n     * one optionally followed by an integer (otherwise, the integer defaults to 0.) Each\\n     * time the given element is invoked, the counters specified by the property are set to the given integer.\\n     */\\n    counterReset?: ICSSRule | string;\\n    /**\\n     * The cue property specifies sound files (known as an \\\"auditory icon\\\") to be played by\\n     * speech media agents before and after presenting an element's content; if only one\\n     * file is specified, it is played both before and after. The volume at which the\\n     * file(s) should be played, relative to the volume of the main element, may also be\\n     * specified. The icon files may also be set separately with the cue-before and\\n     * cue-after properties.\\n     */\\n    cue?: ICSSRule | string;\\n    /**\\n     * The cue-after property specifies a sound file (known as an \\\"auditory icon\\\") to be\\n     * played by speech media agents after presenting an element's content; the volume at\\n     * which the file should be played may also be specified. The shorthand property cue\\n     * sets cue sounds for both before and after the element is presented.\\n     */\\n    cueAfter?: ICSSRule | string;\\n    /**\\n     * Specifies the mouse cursor displayed when the mouse pointer is over an element.\\n     */\\n    cursor?: ICSSRule | string;\\n    /**\\n     * The direction CSS property specifies the text direction/writing direction. The rtl\\n     * is used for Hebrew or Arabic text, the ltr is for other languages.\\n     */\\n    direction?: ICSSRule | string;\\n    /**\\n     * This property specifies the type of rendering box used for an element. It is a\\n     * shorthand property for many other display properties.\\n     * W3: https://www.w3.org/TR/css-display-3/#the-display-properties\\n     * MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/display\\n     */\\n    display?: ICSSRule | ICSSDisplayRule | string;\\n    /**\\n     * The ‘fill’ property paints the interior of the given graphical element. The area to\\n     * be painted consists of any areas inside the outline of the shape. To determine the\\n     * inside of the shape, all subpaths are considered, and the interior is determined\\n     * according to the rules associated with the current value of the ‘fill-rule’\\n     * property. The zero-width geometric outline of a shape is included in the area to be\\n     * painted.\\n     */\\n    fill?: ICSSRule | string;\\n    /**\\n     * SVG: Specifies the opacity of the color or the content the current object is filled\\n     * with.\\n     * See SVG 1.1 https://www.w3.org/TR/SVG/painting.html#FillOpacityProperty\\n     */\\n    fillOpacity?: ICSSRule | number;\\n    /**\\n     * The ‘fill-rule’ property indicates the algorithm which is to be used to determine\\n     * what parts of the canvas are included inside the shape. For a simple,\\n     * non-intersecting path, it is intuitively clear what region lies \\\"inside\\\"; however,\\n     * for a more complex path, such as a path that intersects itself or where one subpath\\n     * encloses another, the interpretation of \\\"inside\\\" is not so obvious.\\n     * The ‘fill-rule’ property provides two options for how the inside of a shape is\\n     * determined:\\n     */\\n    fillRule?: ICSSRule | string;\\n    /**\\n     * Applies various image processing effects. This property is largely unsupported. See\\n     * Compatibility section for more information.\\n     */\\n    filter?: ICSSRule | string;\\n    /**\\n     * Shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`.\\n     */\\n    flex?: ICSSRule | string | number;\\n    /**\\n     * The flex-basis CSS property describes the initial main size of the flex item before\\n     * any free space is distributed according to the flex factors described in the flex\\n     * property (flex-grow and flex-shrink).\\n     */\\n    flexBasis?: ICSSRule | string | number;\\n    /**\\n     * The flex-direction CSS property describes how flex items are placed in the flex\\n     * container, by setting the direction of the flex container's main axis.\\n     */\\n    flexDirection?: ICSSRule | 'row' | 'row-reverse' | 'column' | 'column-reverse' | string;\\n    /**\\n     * The flex-flow CSS property defines the flex container's main and cross axis. It is\\n     * a shorthand property for the flex-direction and flex-wrap properties.\\n     */\\n    flexFlow?: ICSSRule | string;\\n    /**\\n     * Specifies the flex grow factor of a flex item.\\n     * See CSS flex-grow property https://drafts.csswg.org/css-flexbox-1/#flex-grow-property\\n     */\\n    flexGrow?: ICSSRule | number | string;\\n    /**\\n     * Specifies the flex shrink factor of a flex item.\\n     * See CSS flex-shrink property https://drafts.csswg.org/css-flexbox-1/#flex-shrink-property\\n     */\\n    flexShrink?: ICSSRule | number | string;\\n    /**\\n     * Specifies whether flex items are forced into a single line or can be wrapped onto\\n     * multiple lines. If wrapping is allowed, this property also enables you to control\\n     * the direction in which lines are stacked.\\n     * See CSS flex-wrap property https://drafts.csswg.org/css-flexbox-1/#flex-wrap-property\\n     */\\n    flexWrap?: ICSSRule | 'nowrap' | 'wrap' | 'wrap-reverse' | string;\\n    /**\\n     * Elements which have the style float are floated horizontally. These elements can\\n     * move as far to the left or right of the containing element. All elements after\\n     * the floating element will flow around it, but elements before the floating element\\n     * are not impacted. If several floating elements are placed after each other, they\\n     * will float next to each other as long as there is room.\\n     */\\n    float?: ICSSRule | string;\\n    /**\\n     * Flows content from a named flow (specified by a corresponding flow-into) through\\n     * selected elements to form a dynamic chain of layout regions.\\n     */\\n    flowFrom?: ICSSRule | string;\\n    /**\\n     * The property which allows authors to opt particular elements out of forced colors mode,\\n     * restoring full control over the colors to CSS. Currently it's only supported in Edge Chromium.\\n     */\\n    forcedColorAdjust?: 'auto' | 'none' | string;\\n    /**\\n     * Lays out one or more grid items bound by 4 grid lines. Shorthand for setting\\n     * grid-column-start, grid-column-end, grid-row-start, and grid-row-end in a single\\n     * declaration.\\n     */\\n    gridArea?: ICSSRule | string;\\n    /**\\n     * Specifies the size of an implicitly-created grid column track\\n     */\\n    gridAutoColumns?: ICSSRule | string;\\n    /**\\n     * Controls how the auto-placement algorithm works,\\n     * specifying exactly how auto-placed items get flowed into the grid.\\n     */\\n    gridAutoFlow?: ICSSRule | string;\\n    /**\\n     * Specifies the size of an implicitly-created grid column track\\n     */\\n    gridAutoRows?: ICSSRule | string;\\n    /**\\n     * Controls a grid item's placement in a grid area, particularly grid position and a\\n     * grid span. Shorthand for setting grid-column-start and grid-column-end in a single\\n     * declaration.\\n     */\\n    gridColumn?: ICSSRule | string;\\n    /**\\n     * Controls a grid item's placement in a grid area as well as grid position and a\\n     * grid span. The grid-column-end property (with grid-row-start, grid-row-end, and\\n     * grid-column-start) determines a grid item's placement by specifying the grid lines\\n     * of a grid item's grid area.\\n     */\\n    gridColumnEnd?: ICSSRule | string;\\n    /**\\n     * Sets the size of the gap (gutter) between an element's columns\\n     */\\n    gridColumnGap?: ICSSRule | string;\\n    /**\\n     * Determines a grid item's placement by specifying the starting grid lines of a grid\\n     * item's grid area . A grid item's placement in a grid area consists of a grid\\n     * position and a grid span. See also ( grid-row-start, grid-row-end, and\\n     * grid-column-end)\\n     */\\n    gridColumnStart?: ICSSRule | string;\\n    /**\\n     * Specifies the gaps (gutters) between grid rows and columns. It is a shorthand\\n     * for grid-row-gap and grid-column-gap.\\n     */\\n    gridGap?: ICSSRule | string;\\n    /**\\n     * Gets or sets a value that indicates which row an element within a Grid should\\n     * appear in. Shorthand for setting grid-row-start and grid-row-end in a single\\n     * declaration.\\n     */\\n    gridRow?: ICSSRule | string;\\n    /**\\n     * Determines a grid item’s placement by specifying the block-end. A grid item's\\n     * placement in a grid area consists of a grid position and a grid span. The\\n     * grid-row-end property (with grid-row-start, grid-column-start, and grid-column-end)\\n     * determines a grid item's placement by specifying the grid lines of a grid item's\\n     * grid area.\\n     */\\n    gridRowEnd?: ICSSRule | string;\\n    /**\\n     * Sets the size of the gap (gutter) between an element's grid rows\\n     */\\n    gridRowGap?: ICSSRule | string;\\n    /**\\n     * Specifies a grid item’s start position within the grid row by contributing a line,\\n     * a span, or nothing (automatic) to its grid placement, thereby specifying the\\n     * inline-start edge of its grid area\\n     */\\n    gridRowStart?: ICSSRule | string;\\n    /**\\n     * Specifies a row position based upon an integer location, string value, or desired\\n     * row size.\\n     * css/properties/grid-row is used as short-hand for grid-row-position and\\n     * grid-row-position\\n     */\\n    gridRowPosition?: ICSSRule | string;\\n    /**\\n     * Specifies named grid areas which are not associated with any particular grid item,\\n     * but can be referenced from the grid-placement properties. The syntax of the\\n     * grid-template-areas property also provides a visualization of the structure of the\\n     * grid, making the overall layout of the grid container easier to understand.\\n     */\\n    gridTemplate?: ICSSRule | string;\\n    /**\\n     * Specifies named grid areas\\n     */\\n    gridTemplateAreas?: ICSSRule | string;\\n    /**\\n     * Specifies (with grid-template-rows) the line names and track sizing functions of\\n     * the grid. Each sizing function can be specified as a length, a percentage of the\\n     * grid container’s size, a measurement of the contents occupying the column or row,\\n     * or a fraction of the free space in the grid.\\n     */\\n    gridTemplateColumns?: ICSSRule | string;\\n    /**\\n     * Specifies (with grid-template-columns) the line names and track sizing functions of\\n     * the grid. Each sizing function can be specified as a length, a percentage of the\\n     * grid container’s size, a measurement of the contents occupying the column or row,\\n     * or a fraction of the free space in the grid.\\n     */\\n    gridTemplateRows?: ICSSRule | string;\\n    /**\\n     * Sets the height of an element. The content area of the element height does not\\n     * include the padding, border, and margin of the element.\\n     */\\n    height?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Specifies the minimum number of characters in a hyphenated word\\n     */\\n    hyphenateLimitChars?: ICSSRule | string;\\n    /**\\n     * Indicates the maximum number of successive hyphenated lines in an element. The\\n     * ‘no-limit’ value means that there is no limit.\\n     */\\n    hyphenateLimitLines?: ICSSRule | string;\\n    /**\\n     * Specifies the maximum amount of trailing whitespace (before justification) that may\\n     * be left in a line before hyphenation is triggered to pull part of a word from the\\n     * next line back up into the current one.\\n     */\\n    hyphenateLimitZone?: ICSSRule | string;\\n    /**\\n     * Specifies whether or not words in a sentence can be split by the use of a manual or\\n     * automatic hyphenation mechanism.\\n     */\\n    hyphens?: ICSSRule | string;\\n    /**\\n     * Defines how the browser distributes space between and around flex items\\n     * along the main-axis of their container.\\n     * See CSS justify-content property\\n     * https://www.w3.org/TR/css-flexbox-1/#justify-content-property\\n     */\\n    justifyContent?: ICSSRule | 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly' | 'stretch' | string;\\n    /**\\n     * Justifies the box (as the alignment subject) within its containing block (as the alignment container)\\n     * along the inline/row/main axis of the alignment container.\\n     *\\n     * See CSS jusitfy-self property\\n     * https://www.w3.org/TR/css-align-3/#propdef-justify-self\\n     */\\n    justifySelf?: ICSSRule | 'auto' | 'normal' | 'stretch' | ICSSBaselinePositionRule | ICSSOverflowAndSelfPositionRule | 'left' | 'right' | 'safe left' | 'safe right' | 'unsafe left' | 'unsafe right' | string;\\n    /**\\n     * Sets the left position of an element relative to the nearest ancestor that is set\\n     * to position absolute, relative, or fixed.\\n     */\\n    left?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * The letter-spacing CSS property specifies the spacing behavior between text\\n     * characters.\\n     */\\n    letterSpacing?: ICSSRule | string;\\n    /**\\n     * Specifies the height of an inline block level element.\\n     * See CSS 2.1 line-height property https://www.w3.org/TR/CSS21/visudet.html#propdef-line-height\\n     */\\n    lineHeight?: ICSSRule | 'normal' | ICSSPixelUnitRule | ICSSPercentageRule;\\n    /**\\n     * Shorthand property that sets the list-style-type, list-style-position and\\n     * list-style-image properties in one declaration.\\n     */\\n    listStyle?: ICSSRule | string;\\n    /**\\n     * This property sets the image that will be used as the list item marker. When the\\n     * image is available, it will replace the marker set with the 'list-style-type'\\n     * marker. That also means that if the image is not available, it will show the style\\n     * specified by list-style-property\\n     */\\n    listStyleImage?: ICSSRule | string;\\n    /**\\n     * Specifies if the list-item markers should appear inside or outside the content flow.\\n     */\\n    listStylePosition?: ICSSRule | string;\\n    /**\\n     * Specifies the type of list-item marker in a list.\\n     */\\n    listStyleType?: ICSSRule | string;\\n    /**\\n     * The margin property is shorthand to allow you to set all four margins of an element\\n     * at once. Its equivalent longhand properties are margin-top, margin-right,\\n     * margin-bottom and margin-left. Negative values are also allowed.\\n     */\\n    margin?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * margin-bottom sets the bottom margin of an element.\\n     */\\n    marginBottom?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * margin-left sets the left margin of an element.\\n     */\\n    marginLeft?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * margin-right sets the right margin of an element.\\n     */\\n    marginRight?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * margin-top sets the top margin of an element.\\n     */\\n    marginTop?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * The marquee-direction determines the initial direction in which the marquee content moves.\\n     */\\n    marqueeDirection?: ICSSRule | string;\\n    /**\\n     * The 'marquee-style' property determines a marquee's scrolling behavior.\\n     */\\n    marqueeStyle?: ICSSRule | string;\\n    /**\\n     * This property is shorthand for setting mask-image, mask-mode, mask-repeat,\\n     * mask-position, mask-clip, mask-origin, mask-composite and mask-size. Omitted\\n     * values are set to their original properties' initial values.\\n     */\\n    mask?: ICSSRule | string;\\n    /**\\n     * This property is shorthand for setting mask-border-source, mask-border-slice,\\n     * mask-border-width, mask-border-outset, and mask-border-repeat. Omitted values\\n     * are set to their original properties' initial values.\\n     */\\n    maskBorder?: ICSSRule | string;\\n    /**\\n     * This property specifies how the images for the sides and the middle part of the\\n     * mask image are scaled and tiled. The first keyword applies to the horizontal\\n     * sides, the second one applies to the vertical ones. If the second keyword is\\n     * absent, it is assumed to be the same as the first, similar to the CSS\\n     * border-image-repeat property.\\n     */\\n    maskBorderRepeat?: ICSSRule | string;\\n    /**\\n     * This property specifies inward offsets from the top, right, bottom, and left\\n     * edges of the mask image, dividing it into nine regions: four corners, four\\n     * edges, and a middle. The middle image part is discarded and treated as fully\\n     * transparent black unless the fill keyword is present. The four values set the\\n     * top, right, bottom and left offsets in that order, similar to the CSS\\n     * border-image-slice property.\\n     */\\n    maskBorderSlice?: ICSSRule | string;\\n    /**\\n     * Specifies an image to be used as a mask. An image that is empty, fails to\\n     * download, is non-existent, or cannot be displayed is ignored and does not mask\\n     * the element.\\n     */\\n    maskBorderSource?: ICSSRule | string;\\n    /**\\n     * This property sets the width of the mask box image, similar to the CSS\\n     * border-image-width property.\\n     */\\n    maskBorderWidth?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Determines the mask painting area, which defines the area that is affected by\\n     * the mask. The painted content of an element may be restricted to this area.\\n     */\\n    maskClip?: ICSSRule | string;\\n    /**\\n     * For elements rendered as a single box, specifies the mask positioning area. For\\n     * elements rendered as multiple boxes (e.g., inline boxes on several lines, boxes\\n     * on several pages) specifies which boxes box-decoration-break operates on to\\n     * determine the mask positioning area(s).\\n     */\\n    maskOrigin?: ICSSRule | string;\\n    /**\\n     * This property must not be used. It is no longer included in any standard or\\n     * standard track specification, nor is it implemented in any browser. It is only\\n     * used when the text-align-last property is set to size. It controls allowed\\n     * adjustments of font-size to fit line content.\\n     */\\n    maxFontSize?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Sets the maximum height for an element. It prevents the height of the element to\\n     *  exceed the specified value. If min-height is specified and is greater than\\n     * max-height, max-height is overridden.\\n     */\\n    maxHeight?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Sets the maximum width for an element. It limits the width property to be larger\\n     * than the value specified in max-width.\\n     */\\n    maxWidth?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Sets the minimum height for an element. It prevents the height of the element to\\n     * be smaller than the specified value. The value of min-height overrides both\\n     * max-height and height.\\n     */\\n    minHeight?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Sets the minimum width of an element. It limits the width property to be not\\n     * smaller than the value specified in min-width.\\n     */\\n    minWidth?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * The mix-blend-mode CSS property describes how an element's content should blend\\n     * with the content of the element's direct parent and the element's background.\\n     */\\n    mixBlendMode?: ICSSRule | IMixBlendModes | string;\\n    /**\\n     * The ‘object-fit’ property specifies how the contents of a replaced element should\\n     * be fitted to the box established by its used height and width.\\n     * See CSS 3 object-fit property https://www.w3.org/TR/css3-images/#the-object-fit\\n     */\\n    objectFit?: ICSSRule | 'cover' | 'contain' | 'fill' | 'none' | string;\\n    /**\\n     * Specifies the transparency of an element.\\n     * See CSS 3 opacity property https://drafts.csswg.org/css-color-3/#opacity\\n     */\\n    opacity?: ICSSRule | number | string;\\n    /**\\n     * Specifies the order used to lay out flex items in their flex container.\\n     * Elements are laid out in the ascending order of the order value.\\n     * See CSS order property https://drafts.csswg.org/css-flexbox-1/#order-property\\n     */\\n    order?: ICSSRule | number | string;\\n    /**\\n     * In paged media, this property defines the minimum number of lines in\\n     * a block container that must be left at the bottom of the page.\\n     * See CSS 3 orphans, widows properties https://drafts.csswg.org/css-break-3/#widows-orphans\\n     */\\n    orphans?: ICSSRule | number | string;\\n    /**\\n     * The CSS outline property is a shorthand property for setting one or more of the\\n     * individual outline properties outline-style, outline-width and outline-color in a\\n     * single rule. In most cases the use of this shortcut is preferable and more\\n     * convenient.\\n     * Outlines differ from borders in the following ways:\\n     *      •       Outlines do not take up space, they are drawn above the content.\\n     *      •       Outlines may be non-rectangular. They are rectangular in\\n     * Gecko/Firefox. Internet Explorer attempts to place the smallest contiguous outline\\n     * around all elements or shapes that are indicated to have an outline. Opera draws a\\n     * non-rectangular shape around a construct.\\n     */\\n    outline?: ICSSRule | 0 | string;\\n    /**\\n     * The outline-color property sets the color of the outline of an element. An\\n     * outline is a line that is drawn around elements, outside the border edge, to make\\n     * the element stand out.\\n     */\\n    outlineColor?: ICSSRule | string;\\n    /**\\n     * The outline-offset property offsets the outline and draw it beyond the border edge.\\n     */\\n    outlineOffset?: ICSSRule | string;\\n    /**\\n     * The overflow property controls how extra content exceeding the bounding box of an\\n     * element is rendered. It can be used in conjunction with an element that has a\\n     * fixed width and height, to eliminate text-induced page distortion.\\n     */\\n    overflow?: ICSSRule | 'auto' | 'hidden' | 'scroll' | 'visible';\\n    /**\\n     * Specifies the preferred scrolling methods for elements that overflow.\\n     */\\n    overflowStyle?: ICSSRule | string;\\n    /**\\n     * Specifies whether or not the browser should insert line breaks within words to\\n     * prevent text from overflowing its content box. In contrast to word-break,\\n     * overflow-wrap will only create a break if an entire word cannot be placed on its\\n     * own line without overflowing.\\n     */\\n    overflowWrap?: ICSSRule | 'normal' | 'break-word' | string;\\n    /**\\n     * Controls how extra content exceeding the x-axis of the bounding box of an element\\n     * is rendered.\\n     */\\n    overflowX?: ICSSRule | 'auto' | 'hidden' | 'scroll' | 'visible' | string;\\n    /**\\n     * Controls how extra content exceeding the y-axis of the bounding box of an element\\n     * is rendered.\\n     */\\n    overflowY?: ICSSRule | 'auto' | 'hidden' | 'scroll' | 'visible' | string;\\n    /**\\n     * The padding optional CSS property sets the required padding space on one to four\\n     * sides of an element. The padding area is the space between an element and its\\n     * border. Negative values are not allowed but decimal values are permitted. The\\n     *  element size is treated as fixed, and the content of the element shifts toward the\\n     * center as padding is increased. The padding property is a shorthand to avoid\\n     * setting each side separately (padding-top, padding-right, padding-bottom,\\n     * padding-left).\\n     */\\n    padding?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * The padding-block-end CSS property defines the logical block end padding\\n     * of an element, which maps to a physical padding depending on the element's\\n     * writing mode, directionality, and text orientation. It corresponds to the\\n     * padding-top, padding-right, padding-bottom, or padding-left property\\n     * depending on the values defined for writing-mode, direction, and text-orientation.\\n     */\\n    paddingBlockEnd?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * The padding-block-start CSS property defines the logical block start padding\\n     * of an element, which maps to a physical padding depending on the element's\\n     * writing mode, directionality, and text orientation. It corresponds to the\\n     * padding-top, padding-right, padding-bottom, or padding-left property depending\\n     * on the values defined for writing-mode, direction, and text-orientation.\\n     */\\n    paddingBlockStart?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * The padding-left CSS property of an element sets the padding space required on the\\n     * left side of an element. The padding area is the space between the content of the\\n     * element and its border. Contrary to margin-left values, negative values of\\n     * padding-left are invalid.\\n     */\\n    paddingLeft?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * The padding-bottom CSS property of an element sets the padding space required on\\n     * the bottom of an element. The padding area is the space between the content of the\\n     * element and its border. Contrary to margin-bottom values, negative values of\\n     * padding-bottom are invalid.\\n     */\\n    paddingBottom?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * The padding-inline-end CSS property defines the logical inline end padding of an element,\\n     * which maps to a physical padding depending on the element's writing mode, directionality,\\n     * and text orientation. It corresponds to the padding-top, padding-right, padding-bottom,\\n     * or padding-left property depending on the values defined for writing-mode, direction,\\n     * and text-orientation.\\n     */\\n    paddingInlineEnd?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * The padding-inline-start CSS property defines the logical inline start padding of\\n     * an element, which maps to a physical padding depending on the element's writing mode,\\n     * directionality, and text orientation. It corresponds to the padding-top, padding-right,\\n     * padding-bottom, or padding-left property depending on the values defined for writing-mode,\\n     * direction, and text-orientation.\\n     */\\n    paddingInlineStart?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * The padding-right CSS property of an element sets the padding space required on the\\n     * right side of an element. The padding area is the space between the content of the\\n     * element and its border. Contrary to margin-right values, negative values of\\n     * padding-right are invalid.\\n     */\\n    paddingRight?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * The padding-top CSS property of an element sets the padding space required on the\\n     * top of an element. The padding area is the space between the content of the element\\n     * and its border. Contrary to margin-top values, negative values of padding-top are\\n     * invalid.\\n     */\\n    paddingTop?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * The page-break-after property is supported in all major browsers. With CSS3,\\n     *  page-break-* properties are only aliases of the break-* properties. The CSS3\\n     * Fragmentation spec defines breaks for all CSS box fragmentation.\\n     */\\n    pageBreakAfter?: ICSSRule | string;\\n    /**\\n     * The page-break-before property sets the page-breaking behavior before an element.\\n     * With CSS3, page-break-* properties are only aliases of the break-* properties. The\\n     * CSS3 Fragmentation spec defines breaks for all CSS box fragmentation.\\n     */\\n    pageBreakBefore?: ICSSRule | string;\\n    /**\\n     * Sets the page-breaking behavior inside an element. With CSS3, page-break-*\\n     * properties are only aliases of the break-* properties. The CSS3 Fragmentation spec\\n     * defines breaks for all CSS box fragmentation.\\n     */\\n    pageBreakInside?: ICSSRule | string;\\n    /**\\n     * The pause property determines how long a speech media agent should pause before and\\n     * after presenting an element. It is a shorthand for the pause-before and pause-after\\n     *  properties.\\n     */\\n    pause?: ICSSRule | string;\\n    /**\\n     * The pause-after property determines how long a speech media agent should pause after\\n     * presenting an element. It may be replaced by the shorthand property pause, which\\n     * sets pause time before and after.\\n     */\\n    pauseAfter?: ICSSRule | string;\\n    /**\\n     * The pause-before property determines how long a speech media agent should pause\\n     * before presenting an element. It may be replaced by the shorthand property pause,\\n     * which sets pause time before and after.\\n     */\\n    pauseBefore?: ICSSRule | string;\\n    /**\\n     * The perspective property defines how far an element is placed from the view on the\\n     * z-axis, from the screen to the viewer. Perspective defines how an object is viewed.\\n     * In graphic arts, perspective is the representation on a flat surface of what the\\n     * viewer's eye would see in a 3D space. (See Wikipedia for more information about\\n     * graphical perspective and for related illustrations.)\\n     * The illusion of perspective on a flat surface, such as a computer screen, is created\\n     * by projecting points on the flat surface as they would appear if the flat surface\\n     * were a window through which the viewer was looking at the object. In discussion of\\n     * virtual environments, this flat surface is called a projection plane.\\n     */\\n    perspective?: ICSSRule | string;\\n    /**\\n     * The perspective-origin property establishes the origin for the perspective property.\\n     * It effectively sets the X and Y position at which the viewer appears to be looking\\n     * at the children of the element.\\n     * When used with perspective, perspective-origin changes the appearance of an object,\\n     * as if a viewer were looking at it from a different origin. An object appears\\n     * differently if a viewer is looking directly at it versus looking at it from below,\\n     * above, or from the side. Thus, the perspective-origin is like a vanishing point.\\n     * The default value of perspective-origin is 50% 50%. This displays an object as if\\n     * the viewer's eye were positioned directly at the center of the screen, both\\n     * top-to-bottom and left-to-right. A value of 0% 0% changes the object as if the\\n     * viewer was looking toward the top left angle. A value of 100% 100% changes the\\n     * appearance as if viewed toward the bottom right angle.\\n     */\\n    perspectiveOrigin?: ICSSRule | string;\\n    /**\\n     * The pointer-events property allows you to control whether an element can be the\\n     * target for the pointing device (e.g, mouse, pen) events.\\n     */\\n    pointerEvents?: ICSSRule | string;\\n    /**\\n     * The position property controls the type of positioning used by an element within\\n     * its parent elements. The effect of the position property depends on a lot of\\n     * factors, for example the position property of parent elements.\\n     */\\n    position?: ICSSRule | 'static' | 'relative' | 'absolute' | 'fixed' | 'sticky';\\n    /**\\n     * Sets the type of quotation marks for embedded quotations.\\n     */\\n    quotes?: ICSSRule | string;\\n    /**\\n     * Controls whether the last region in a chain displays additional 'overset' content\\n     * according its default overflow property, or if it displays a fragment of content\\n     * as if it were flowing into a subsequent region.\\n     */\\n    regionFragment?: ICSSRule | string;\\n    /**\\n     * The resize CSS sets whether an element is resizable, and if so, in which direction(s).\\n     */\\n    resize?: ICSSRule | 'none' | 'both' | 'horizontal' | 'vertical' | 'block' | 'inline' | string;\\n    /**\\n     * The rest-after property determines how long a speech media agent should pause after\\n     * presenting an element's main content, before presenting that element's exit cue\\n     * sound. It may be replaced by the shorthand property rest, which sets rest time\\n     * before and after.\\n     */\\n    restAfter?: ICSSRule | string;\\n    /**\\n     * The rest-before property determines how long a speech media agent should pause after\\n     * presenting an intro cue sound for an element, before presenting that element's main\\n     * content. It may be replaced by the shorthand property rest, which sets rest time\\n     * before and after.\\n     */\\n    restBefore?: ICSSRule | string;\\n    /**\\n     * Specifies the position an element in relation to the right side of the containing\\n     * element.\\n     */\\n    right?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Defines the alpha channel threshold used to extract a shape from an image. Can be\\n     * thought of as a \\\"minimum opacity\\\" threshold; that is, a value of 0.5 means that the\\n     * shape will enclose all the pixels that are more than 50% opaque.\\n     */\\n    shapeImageThreshold?: ICSSRule | string;\\n    /**\\n     * A future level of CSS Shapes will define a shape-inside property, which will define\\n     * a shape to wrap content within the element. See Editor's Draft\\n     * http://dev.w3.org/csswg/css-shapes and CSSWG wiki page on next-level plans\\n     * http://wiki.csswg.org/spec/css-shapes\\n     */\\n    shapeInside?: ICSSRule | string;\\n    /**\\n     * Adds a margin to a shape-outside. In effect, defines a new shape that is the\\n     * smallest contour around all the points that are the shape-margin distance outward\\n     * perpendicular to each point on the underlying shape. For points where a\\n     * perpendicular direction is not defined (e.g., a triangle corner), takes all\\n     * points on a circle centered at the point and with a radius of the shape-margin\\n     * distance. This property accepts only non-negative values.\\n     */\\n    shapeMargin?: ICSSRule | string;\\n    /**\\n     * Declares a shape around which text should be wrapped, with possible modifications\\n     * from the shape-margin property. The shape defined by shape-outside and shape-margin\\n     * changes the geometry of a float element's float area.\\n     */\\n    shapeOutside?: ICSSRule | string;\\n    /**\\n     * The speak property determines whether or not a speech synthesizer will read aloud\\n     * the contents of an element.\\n     */\\n    speak?: ICSSRule | string;\\n    /**\\n     * The speak-as property determines how the speech synthesizer interprets the content:\\n     * words as whole words or as a sequence of letters, numbers as a numerical value or a\\n     * sequence of digits, punctuation as pauses in speech or named punctuation characters.\\n     */\\n    speakAs?: ICSSRule | string;\\n    /**\\n     * The stroke property in CSS is for adding a border to SVG shapes.\\n     * See SVG 1.1 https://www.w3.org/TR/SVG/painting.html#Stroke\\n     */\\n    stroke?: ICSSRule | string;\\n    /**\\n     * SVG: The stroke-linecap attribute defines the shape to be used at the end of open subpaths when they are stroked.\\n     * See SVG 1.1 https://www.w3.org/TR/SVG/painting.html#LineCaps\\n     */\\n    strokeLinecap?: ICSSRule | 'butt' | 'round' | 'square' | string;\\n    /**\\n     * SVG: Specifies the opacity of the outline on the current object.\\n     * See SVG 1.1 https://www.w3.org/TR/SVG/painting.html#StrokeOpacityProperty\\n     */\\n    strokeOpacity?: ICSSRule | number | string;\\n    /**\\n     * SVG: Specifies the width of the outline on the current object.\\n     * See SVG 1.1 https://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty\\n     */\\n    strokeWidth?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * The tab-size CSS property is used to customise the width of a tab (U+0009) character.\\n     */\\n    tabSize?: ICSSRule | string;\\n    /**\\n     * The 'table-layout' property controls the algorithm used to lay out the table cells, rows, and columns.\\n     */\\n    tableLayout?: ICSSRule | string;\\n    /**\\n     * The text-align CSS property describes how inline content like text is aligned in its\\n     * parent block element. text-align does not control the alignment of block elements\\n     * itself, only their inline content.\\n     */\\n    textAlign?: ICSSRule | string;\\n    /**\\n     * The text-align-last CSS property describes how the last line of a block element or\\n     * a line before line break is aligned in its parent block element.\\n     */\\n    textAlignLast?: ICSSRule | string;\\n    /**\\n     * The text-decoration CSS property is used to set the text formatting to underline,\\n     * overline, line-through or blink. underline and overline decorations are positioned\\n     * under the text, line-through over it.\\n     */\\n    textDecoration?: ICSSRule | string;\\n    /**\\n     * Sets the color of any text decoration, such as underlines, overlines, and strike\\n     * throughs.\\n     */\\n    textDecorationColor?: ICSSRule | string;\\n    /**\\n     * Sets what kind of line decorations are added to an element, such as underlines,\\n     * overlines, etc.\\n     */\\n    textDecorationLine?: ICSSRule | string;\\n    /**\\n     * Specifies what parts of an element’s content are skipped over when applying any\\n     * text decoration.\\n     */\\n    textDecorationSkip?: ICSSRule | string;\\n    /**\\n     * This property specifies the style of the text decoration line drawn on the\\n     * specified element. The intended meaning for the values are the same as those of\\n     * the border-style-properties.\\n     */\\n    textDecorationStyle?: ICSSRule | string;\\n    /**\\n     * The text-emphasis property will apply special emphasis marks to the elements text.\\n     * Slightly similar to the text-decoration property only that this property can have\\n     * affect on the line-height. It also is noted that this is shorthand for\\n     * text-emphasis-style and for text-emphasis-color.\\n     */\\n    textEmphasis?: ICSSRule | string;\\n    /**\\n     * The text-emphasis-color property specifies the foreground color of the emphasis\\n     * marks.\\n     */\\n    textEmphasisColor?: ICSSRule | string;\\n    /**\\n     * The text-emphasis-style property applies special emphasis marks to an element's\\n     * text.\\n     */\\n    textEmphasisStyle?: ICSSRule | string;\\n    /**\\n     * This property helps determine an inline box's block-progression dimension, derived\\n     * from the text-height and font-size properties for non-replaced elements, the height\\n     * or the width for replaced elements, and the stacked block-progression dimension for\\n     * inline-block elements. The block-progression dimension determines the position of\\n     * the padding, border and margin for the element.\\n     */\\n    textHeight?: ICSSRule | string;\\n    /**\\n     * Specifies the amount of space horizontally that should be left on the first line of\\n     * the text of an element. This horizontal spacing is at the beginning of the first\\n     * line and is in respect to the left edge of the containing block box.\\n     */\\n    textIndent?: ICSSRule | string;\\n    /**\\n     * The text-overflow shorthand CSS property determines how overflowed content that is\\n     * not displayed is signaled to the users. It can be clipped, display an ellipsis\\n     * ('…', U+2026 HORIZONTAL ELLIPSIS) or a Web author-defined string. It covers the\\n     * two long-hand properties text-overflow-mode and text-overflow-ellipsis\\n     */\\n    textOverflow?: ICSSRule | string;\\n    /**\\n     * The text-overline property is the shorthand for the text-overline-style,\\n     * text-overline-width, text-overline-color, and text-overline-mode properties.\\n     */\\n    textOverline?: ICSSRule | string;\\n    /**\\n     * Specifies the line color for the overline text decoration.\\n     */\\n    textOverlineColor?: ICSSRule | string;\\n    /**\\n     * Sets the mode for the overline text decoration, determining whether the text\\n     * decoration affects the space characters or not.\\n     */\\n    textOverlineMode?: ICSSRule | string;\\n    /**\\n     * Specifies the line style for overline text decoration.\\n     */\\n    textOverlineStyle?: ICSSRule | string;\\n    /**\\n     * Specifies the line width for the overline text decoration.\\n     */\\n    textOverlineWidth?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * The text-rendering CSS property provides information to the browser about how to\\n     * optimize when rendering text. Options are: legibility, speed or geometric precision.\\n     */\\n    textRendering?: ICSSRule | string;\\n    /**\\n     * The CSS text-shadow property applies one or more drop shadows to the text and\\n     * `<text-decorations>` of an element. Each shadow is specified as an offset from the\\n     * text, along with optional color and blur radius values.\\n     */\\n    textShadow?: ICSSRule | string;\\n    /**\\n     * The text-size-adjust CSS property controls the text inflation algorithm used\\n     * on some smartphones and tablets. Other browsers will ignore this property.\\n     */\\n    textSizeAdjust?: 'none' | 'auto' | ICSSPercentageRule | ICSSRule;\\n    /**\\n     * This property transforms text for styling purposes. (It has no effect on the\\n     * underlying content.)\\n     */\\n    textTransform?: ICSSRule | string;\\n    /**\\n     * Unsupported.\\n     * This property will add a underline position value to the element that has an\\n     * underline defined.\\n     */\\n    textUnderlinePosition?: ICSSRule | string;\\n    /**\\n     * After review this should be replaced by text-decoration should it not?\\n     * This property will set the underline style for text with a line value for\\n     * underline, overline, and line-through.\\n     */\\n    textUnderlineStyle?: ICSSRule | string;\\n    /**\\n     * This property specifies how far an absolutely positioned box's top margin edge is\\n     * offset below the top edge of the box's containing block. For relatively positioned\\n     * boxes, the offset is with respect to the top edges of the box itself (i.e., the box\\n     * is given a position in the normal flow, then offset from that position according to\\n     * these properties).\\n     */\\n    top?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Determines whether touch input may trigger default behavior supplied by the user\\n     * agent, such as panning or zooming.\\n     */\\n    touchAction?: ICSSRule | string;\\n    /**\\n     * CSS transforms allow elements styled with CSS to be transformed in two-dimensional\\n     * or three-dimensional space. Using this property, elements can be translated,\\n     * rotated, scaled, and skewed. The value list may consist of 2D and/or 3D transform\\n     * values.\\n     */\\n    transform?: ICSSRule | string;\\n    /**\\n     * This property defines the origin of the transformation axes relative to the element\\n     * to which the transformation is applied.\\n     */\\n    transformOrigin?: ICSSRule | string;\\n    /**\\n     * This property allows you to define the relative position of the origin of the\\n     * transformation grid along the z-axis.\\n     */\\n    transformOriginZ?: ICSSRule | string;\\n    /**\\n     * This property specifies how nested elements are rendered in 3D space relative to their parent.\\n     */\\n    transformStyle?: ICSSRule | string;\\n    /**\\n     * The transition CSS property is a shorthand property for transition-property,\\n     * transition-duration, transition-timing-function, and transition-delay. It allows to\\n     * define the transition between two states of an element.\\n     */\\n    transition?: ICSSRule | string;\\n    /**\\n     * Defines when the transition will start. A value of ‘0s’ means the transition will\\n     * execute as soon as the property is changed. Otherwise, the value specifies an\\n     * offset from the moment the property is changed, and the transition will delay\\n     * execution by that offset.\\n     */\\n    transitionDelay?: ICSSRule | string;\\n    /**\\n     * The 'transition-duration' property specifies the length of time a transition\\n     * animation takes to complete.\\n     */\\n    transitionDuration?: ICSSRule | string;\\n    /**\\n     * The 'transition-property' property specifies the name of the CSS property to which\\n     * the transition is applied.\\n     */\\n    transitionProperty?: ICSSRule | string;\\n    /**\\n     * Sets the pace of action within a transition\\n     */\\n    transitionTimingFunction?: ICSSRule | string;\\n    /**\\n     * The unicode-bidi CSS property specifies the level of embedding with respect to the bidirectional algorithm.\\n     */\\n    unicodeBidi?: ICSSRule | string;\\n    /**\\n     * This is for all the high level UX stuff.\\n     */\\n    userFocus?: ICSSRule | string;\\n    /**\\n     * For inputting user content\\n     */\\n    userInput?: ICSSRule | string;\\n    /**\\n     * Defines the text selection behavior.\\n     */\\n    userSelect?: ICSSRule | 'none' | 'auto' | 'text' | 'all' | 'contain' | string;\\n    /**\\n     * The vertical-align property controls how inline elements or text are vertically\\n     * aligned compared to the baseline. If this property is used on table-cells it\\n     * controls the vertical alignment of content of the table cell.\\n     */\\n    verticalAlign?: ICSSRule | string;\\n    /**\\n     * The visibility property specifies whether the boxes generated by an element are rendered.\\n     */\\n    visibility?: ICSSRule | string;\\n    /**\\n     * The voice-balance property sets the apparent position (in stereo sound) of the synthesized voice for spoken media.\\n     */\\n    voiceBalance?: ICSSRule | string;\\n    /**\\n     * The voice-duration property allows the author to explicitly set the amount of time\\n     * it should take a speech synthesizer to read an element's content, for example to\\n     * allow the speech to be synchronized with other media. With a value of auto (the\\n     * default) the length of time it takes to read the content is determined by the\\n     * content itself and the voice-rate property.\\n     */\\n    voiceDuration?: ICSSRule | string;\\n    /**\\n     * The voice-family property sets the speaker's voice used by a speech media agent to\\n     * read an element. The speaker may be specified as a named character (to match a\\n     * voice option in the speech reading software) or as a generic description of the\\n     * age and gender of the voice. Similar to the font-family property for visual media,\\n     * a comma-separated list of fallback options may be given in case the speech reader\\n     * does not recognize the character name or cannot synthesize the requested combination\\n     * of generic properties.\\n     */\\n    voiceFamily?: ICSSRule | string;\\n    /**\\n     * The voice-pitch property sets pitch or tone (high or low) for the synthesized speech\\n     * when reading an element; the pitch may be specified absolutely or relative to the\\n     * normal pitch for the voice-family used to read the text.\\n     */\\n    voicePitch?: ICSSRule | string;\\n    /**\\n     * The voice-range property determines how much variation in pitch or tone will be\\n     * created by the speech synthesize when reading an element. Emphasized text,\\n     * grammatical structures and punctuation may all be rendered as changes in pitch,\\n     * this property determines how strong or obvious those changes are; large ranges are\\n     * associated with enthusiastic or emotional speech, while small ranges are associated\\n     * with flat or mechanical speech.\\n     */\\n    voiceRange?: ICSSRule | string;\\n    /**\\n     * The voice-rate property sets the speed at which the voice synthesized by a speech\\n     * media agent will read content.\\n     */\\n    voiceRate?: ICSSRule | string;\\n    /**\\n     * The voice-stress property sets the level of vocal emphasis to be used for\\n     * synthesized speech reading the element.\\n     */\\n    voiceStress?: ICSSRule | string;\\n    /**\\n     * The voice-volume property sets the volume for spoken content in speech media. It\\n     * replaces the deprecated volume property.\\n     */\\n    voiceVolume?: ICSSRule | string;\\n    /**\\n     * The white-space property controls whether and how white space inside the element is\\n     * collapsed, and whether lines may wrap at unforced \\\"soft wrap\\\" opportunities.\\n     */\\n    whiteSpace?: ICSSRule | string;\\n    /**\\n     * In paged media, this property defines the mimimum number of lines that must be left\\n     * at the top of the second page.\\n     * See CSS 3 orphans, widows properties\\n     * https://drafts.csswg.org/css-break-3/#widows-orphans\\n     */\\n    widows?: ICSSRule | number | string;\\n    /**\\n     * Specifies the width of the content area of an element. The content area of the element\\n     * width does not include the padding, border, and margin of the element.\\n     */\\n    width?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * The word-break property is often used when there is long generated content that is\\n     * strung together without and spaces or hyphens to beak apart. A common case of this\\n     * is when there is a long URL that does not have any hyphens. This case could\\n     * potentially cause the breaking of the layout as it could extend past the parent\\n     * element.\\n     */\\n    wordBreak?: ICSSRule | string;\\n    /**\\n     * The word-spacing CSS property specifies the spacing behavior between \\\"words\\\".\\n     */\\n    wordSpacing?: ICSSRule | string;\\n    /**\\n     * An alias of css/properties/overflow-wrap, word-wrap defines whether to break\\n     * words when the content exceeds the boundaries of its container.\\n     */\\n    wordWrap?: ICSSRule | string;\\n    /**\\n     * Specifies how exclusions affect inline content within block-level elements. Elements\\n     * lay out their inline content in their content area but wrap around exclusion areas.\\n     */\\n    wrapFlow?: ICSSRule | string;\\n    /**\\n     * Set the value that is used to offset the inner wrap shape from other shapes. Inline\\n     * content that intersects a shape with this property will be pushed by this shape's\\n     * margin.\\n     */\\n    wrapMargin?: ICSSRule | string;\\n    /**\\n     * writing-mode specifies if lines of text are laid out horizontally or vertically,\\n     * and the direction which lines of text and blocks progress.\\n     */\\n    writingMode?: ICSSRule | string;\\n    /**\\n     * The z-index property specifies the z-order of an element and its descendants.\\n     * When elements overlap, z-order determines which one covers the other.\\n     * See CSS 2 z-index property https://www.w3.org/TR/CSS2/visuren.html#z-index\\n     */\\n    zIndex?: ICSSRule | 'auto' | number | string;\\n    /**\\n     * Sets the initial zoom factor of a document defined by `@viewport`.\\n     * See CSS zoom descriptor https://drafts.csswg.org/css-device-adapt/#zoom-desc\\n     */\\n    zoom?: ICSSRule | 'auto' | number | ICSSPercentageRule;\\n}\\n\\n/**\\n * IStyleObject extends a raw style objects, but allows selectors to be defined\\n * under the selectors node.\\n * @public\\n * {@docCategory IStyle}\\n */\\nexport declare type IStyle = IStyleBase | IStyleBaseArray;\\n\\n/**\\n * {@docCategory IStyleBase}\\n */\\nexport declare type IStyleBase = IRawStyle | string | false | null | undefined;\\n\\n/**\\n * {@docCategory IStyleBaseArray}\\n */\\nexport declare interface IStyleBaseArray extends Array<IStyle> {\\n}\\n\\n/**\\n * A style function takes in styleprops and returns a partial styleset.\\n * {@docCategory IStyleFunction}\\n */\\nexport declare type IStyleFunction<TStylesProps, TStyleSet extends IStyleSet<TStyleSet>> = (props: TStylesProps) => DeepPartial<TStyleSet>;\\n\\n/**\\n * Represents either a style function that takes in style props and returns a partial styleset,\\n * or a partial styleset object.\\n * {@docCategory IStyleFunctionOrObject}\\n */\\nexport declare type IStyleFunctionOrObject<TStylesProps, TStyleSet extends IStyleSet<TStyleSet>> = IStyleFunction<TStylesProps, TStyleSet> | DeepPartial<TStyleSet>;\\n\\ndeclare interface IStyleOptions {\\n    rtl?: boolean;\\n    specificityMultiplier?: number;\\n}\\n\\n/**\\n * A style set is a dictionary of display areas to IStyle objects.\\n * It may optionally contain style functions for sub components in the special `subComponentStyles`\\n * property.\\n */\\nexport declare type IStyleSet<TStyleSet extends IStyleSet<TStyleSet> = {\\n    [key: string]: any;\\n}> = {\\n    [P in keyof Omit<TStyleSet, 'subComponentStyles'>]: IStyle;\\n} & {\\n    subComponentStyles?: {\\n        [P in keyof TStyleSet['subComponentStyles']]: IStyleFunctionOrObject<any, any>;\\n    };\\n};\\n\\n/**\\n * Stylesheet config.\\n *\\n * @public\\n */\\nexport declare interface IStyleSheetConfig {\\n    /**\\n     * Injection mode for how rules are inserted.\\n     */\\n    injectionMode?: InjectionMode;\\n    /**\\n     * Default 'displayName' to use for a className.\\n     * @defaultvalue 'css'\\n     */\\n    defaultPrefix?: string;\\n    /**\\n     * Defines the default direction of rules for auto-rtlifying things.\\n     * While typically this is represented as a DIR attribute in the markup,\\n     * the DIR is not enough to control whether padding goes on the left or\\n     * right. Use this to set the default direction when rules are registered.\\n     */\\n    rtl?: boolean;\\n    /**\\n     * Default 'namespace' to attach before the className.\\n     */\\n    namespace?: string;\\n    /**\\n     * CSP settings\\n     */\\n    cspSettings?: ICSPSettings;\\n    /**\\n     * Callback executed when a rule is inserted.\\n     */\\n    onInsertRule?: (rule: string) => void;\\n    /**\\n     * Initial value for classnames cache. Key is serialized css rules associated with a classname.\\n     */\\n    classNameCache?: {\\n        [key: string]: string;\\n    };\\n}\\n\\n/**\\n * Registers keyframe definitions.\\n *\\n * @public\\n */\\nexport declare function keyframes(timeline: IKeyframes): string;\\n\\n/**\\n * Concatenation helper, which can merge class names together. Skips over falsey values.\\n * Accepts a set of options that will be used when calculating styles.\\n *\\n * @public\\n */\\nexport declare function mergeCss(args: (IStyle | IStyleBaseArray | false | null | undefined) | (IStyle | IStyleBaseArray | false | null | undefined)[], options?: IStyleOptions): string;\\n\\n/**\\n * Takes in one or more style set objects, each1consisting of a set of areas,\\n * each which will produce a class name. Using this is analogous to calling\\n * `mergeCss` for each property in the object, but ensures we maintain the\\n * set ordering when multiple style sets are merged.\\n *\\n * @param styleSets - One or more style sets to be merged.\\n * @param options - (optional) Options to use when creating rules.\\n */\\nexport declare function mergeCssSets<TStyleSet>(styleSets: [TStyleSet | false | null | undefined], options?: IStyleOptions): IProcessedStyleSet<TStyleSet>;\\n\\n/**\\n * Takes in one or more style set objects, each1consisting of a set of areas,\\n * each which will produce a class name. Using this is analogous to calling\\n * `mergeCss` for each property in the object, but ensures we maintain the\\n * set ordering when multiple style sets are merged.\\n *\\n * @param styleSets - One or more style sets to be merged.\\n * @param options - (optional) Options to use when creating rules.\\n */\\nexport declare function mergeCssSets<TStyleSet1, TStyleSet2>(styleSets: [TStyleSet1 | false | null | undefined, TStyleSet2 | false | null | undefined], options?: IStyleOptions): IProcessedStyleSet<TStyleSet1 & TStyleSet2>;\\n\\n/**\\n * Takes in one or more style set objects, each1consisting of a set of areas,\\n * each which will produce a class name. Using this is analogous to calling\\n * `mergeCss` for each property in the object, but ensures we maintain the\\n * set ordering when multiple style sets are merged.\\n *\\n * @param styleSets - One or more style sets to be merged.\\n * @param options - (optional) Options to use when creating rules.\\n */\\nexport declare function mergeCssSets<TStyleSet1, TStyleSet2, TStyleSet3>(styleSets: [TStyleSet1 | false | null | undefined, TStyleSet2 | false | null | undefined, TStyleSet3 | false | null | undefined], options?: IStyleOptions): IProcessedStyleSet<TStyleSet1 & TStyleSet2 & TStyleSet3>;\\n\\n/**\\n * Takes in one or more style set objects, each1consisting of a set of areas,\\n * each which will produce a class name. Using this is analogous to calling\\n * `mergeCss` for each property in the object, but ensures we maintain the\\n * set ordering when multiple style sets are merged.\\n *\\n * @param styleSets - One or more style sets to be merged.\\n * @param options - (optional) Options to use when creating rules.\\n */\\nexport declare function mergeCssSets<TStyleSet1, TStyleSet2, TStyleSet3, TStyleSet4>(styleSets: [TStyleSet1 | false | null | undefined, TStyleSet2 | false | null | undefined, TStyleSet3 | false | null | undefined, TStyleSet4 | false | null | undefined], options?: IStyleOptions): IProcessedStyleSet<ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2> & ObjectOnly<TStyleSet3> & ObjectOnly<TStyleSet4>>;\\n\\n/**\\n * Takes in one or more style set objects, each1consisting of a set of areas,\\n * each which will produce a class name. Using this is analogous to calling\\n * `mergeCss` for each property in the object, but ensures we maintain the\\n * set ordering when multiple style sets are merged.\\n *\\n * @param styleSets - One or more style sets to be merged.\\n * @param options - (optional) Options to use when creating rules.\\n */\\nexport declare function mergeCssSets<TStyleSet>(styleSet: [TStyleSet | false | null | undefined], options?: IStyleOptions): IProcessedStyleSet<TStyleSet>;\\n\\n/**\\n * Concatenation helper, which can merge class names together. Skips over falsey values.\\n *\\n * @public\\n */\\nexport declare function mergeStyles(...args: (IStyle | IStyleBaseArray | false | null | undefined)[]): string;\\n\\n/**\\n * Takes in one or more style set objects, each consisting of a set of areas,\\n * each which will produce a class name. Using this is analogous to calling\\n * `mergeStyles` for each property in the object, but ensures we maintain the\\n * set ordering when multiple style sets are merged.\\n *\\n * @param styleSet - The first style set to be merged and reigstered.\\n */\\nexport declare function mergeStyleSets<TStyleSet>(styleSet: TStyleSet | false | null | undefined): IProcessedStyleSet<ObjectOnly<TStyleSet>>;\\n\\n/**\\n * Takes in one or more style set objects, each consisting of a set of areas,\\n * each which will produce a class name. Using this is analogous to calling\\n * `mergeStyles` for each property in the object, but ensures we maintain the\\n * set ordering when multiple style sets are merged.\\n *\\n * @param styleSet1 - The first style set to be merged.\\n * @param styleSet2 - The second style set to be merged.\\n */\\nexport declare function mergeStyleSets<TStyleSet1, TStyleSet2>(styleSet1: TStyleSet1 | false | null | undefined, styleSet2: TStyleSet2 | false | null | undefined): IProcessedStyleSet<ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2>>;\\n\\n/**\\n * Takes in one or more style set objects, each consisting of a set of areas,\\n * each which will produce a class name. Using this is analogous to calling\\n * `mergeStyles` for each property in the object, but ensures we maintain the\\n * set ordering when multiple style sets are merged.\\n *\\n * @param styleSet1 - The first style set to be merged.\\n * @param styleSet2 - The second style set to be merged.\\n * @param styleSet3 - The third style set to be merged.\\n */\\nexport declare function mergeStyleSets<TStyleSet1, TStyleSet2, TStyleSet3>(styleSet1: TStyleSet1 | false | null | undefined, styleSet2: TStyleSet2 | false | null | undefined, styleSet3: TStyleSet3 | false | null | undefined): IProcessedStyleSet<ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2> & ObjectOnly<TStyleSet3>>;\\n\\n/**\\n * Takes in one or more style set objects, each consisting of a set of areas,\\n * each which will produce a class name. Using this is analogous to calling\\n * `mergeStyles` for each property in the object, but ensures we maintain the\\n * set ordering when multiple style sets are merged.\\n *\\n * @param styleSet1 - The first style set to be merged.\\n * @param styleSet2 - The second style set to be merged.\\n * @param styleSet3 - The third style set to be merged.\\n * @param styleSet4 - The fourth style set to be merged.\\n */\\nexport declare function mergeStyleSets<TStyleSet1, TStyleSet2, TStyleSet3, TStyleSet4>(styleSet1: TStyleSet1 | false | null | undefined, styleSet2: TStyleSet2 | false | null | undefined, styleSet3: TStyleSet3 | false | null | undefined, styleSet4: TStyleSet4 | false | null | undefined): IProcessedStyleSet<ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2> & ObjectOnly<TStyleSet3> & ObjectOnly<TStyleSet4>>;\\n\\n/**\\n * Takes in one or more style set objects, each consisting of a set of areas,\\n * each which will produce a class name. Using this is analogous to calling\\n * `mergeStyles` for each property in the object, but ensures we maintain the\\n * set ordering when multiple style sets are merged.\\n *\\n * @param styleSets - One or more style sets to be merged.\\n */\\nexport declare function mergeStyleSets(...styleSets: Array<IStyleSet | undefined | false | null>): IProcessedStyleSet<any>;\\n\\nexport declare type ObjectOnly<TArg> = TArg extends {} ? TArg : {};\\n\\n/**\\n * {@docCategory Omit}\\n */\\nexport declare type Omit<U, K extends keyof U> = Pick<U, Diff<keyof U, K>>;\\n\\n/**\\n * Sets the current RTL value.\\n */\\nexport declare function setRTL(isRTL: boolean): void;\\n\\n/**\\n * Represents the state of styles registered in the page. Abstracts\\n * the surface for adding styles to the stylesheet, exposes helpers\\n * for reading the styles registered in server rendered scenarios.\\n *\\n * @public\\n */\\nexport declare class Stylesheet {\\n    private _lastStyleElement?;\\n    private _styleElement?;\\n    private _rules;\\n    private _preservedRules;\\n    private _config;\\n    private _rulesToInsert;\\n    private _counter;\\n    private _keyToClassName;\\n    private _onResetCallbacks;\\n    private _classNameToArgs;\\n    /**\\n     * Gets the singleton instance.\\n     */\\n    static getInstance(): Stylesheet;\\n    constructor(config?: IStyleSheetConfig);\\n    /**\\n     * Configures the stylesheet.\\n     */\\n    setConfig(config?: IStyleSheetConfig): void;\\n    /**\\n     * Configures a reset callback.\\n     *\\n     * @param callback - A callback which will be called when the Stylesheet is reset.\\n     */\\n    onReset(callback: () => void): void;\\n    /**\\n     * Generates a unique classname.\\n     *\\n     * @param displayName - Optional value to use as a prefix.\\n     */\\n    getClassName(displayName?: string): string;\\n    /**\\n     * Used internally to cache information about a class which was\\n     * registered with the stylesheet.\\n     */\\n    cacheClassName(className: string, key: string, args: IStyle[], rules: string[]): void;\\n    /**\\n     * Gets the appropriate classname given a key which was previously\\n     * registered using cacheClassName.\\n     */\\n    classNameFromKey(key: string): string | undefined;\\n    /**\\n     * Gets all classnames cache with the stylesheet.\\n     */\\n    getClassNameCache(): {\\n        [key: string]: string;\\n    };\\n    /**\\n     * Gets the arguments associated with a given classname which was\\n     * previously registered using cacheClassName.\\n     */\\n    argsFromClassName(className: string): IStyle[] | undefined;\\n    /**\\n     * Gets the arguments associated with a given classname which was\\n     * previously registered using cacheClassName.\\n     */\\n    insertedRulesFromClassName(className: string): string[] | undefined;\\n    /**\\n     * Inserts a css rule into the stylesheet.\\n     * @param preserve - Preserves the rule beyond a reset boundary.\\n     */\\n    insertRule(rule: string, preserve?: boolean): void;\\n    /**\\n     * Gets all rules registered with the stylesheet; only valid when\\n     * using InsertionMode.none.\\n     */\\n    getRules(includePreservedRules?: boolean): string;\\n    /**\\n     * Resets the internal state of the stylesheet. Only used in server\\n     * rendered scenarios where we're using InsertionMode.none.\\n     */\\n    reset(): void;\\n    resetKeys(): void;\\n    private _getStyleElement;\\n    private _createStyleElement;\\n    private _findPlaceholderStyleTag;\\n}\\n\\nexport { }\\n\"\n\n//# sourceURL=webpack:///../tsx-editor/dist/types/merge-styles.d.ts?/mnt/work/5/s/node_modules/raw-loader");

/***/ }),

/***/ "../../node_modules/raw-loader/index.js!../tsx-editor/dist/types/office-ui-fabric-react.d.ts":
/*!**************************************************************************************************!*\
  !*** /mnt/work/5/s/node_modules/raw-loader!../tsx-editor/dist/types/office-ui-fabric-react.d.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"import { DateRangeType } from '@fluentui/date-time-utilities/lib/dateValues/dateValues';\\nimport { DayOfWeek } from '@fluentui/date-time-utilities/lib/dateValues/dateValues';\\nimport { EventGroup } from '@uifabric/utilities';\\nimport { FirstWeekOfYear } from '@fluentui/date-time-utilities/lib/dateValues/dateValues';\\nimport { IBaseProps } from '@uifabric/utilities';\\nimport { IComponent } from '@uifabric/foundation';\\nimport { IComponentAs } from '@uifabric/utilities';\\nimport { IComponentStyles } from '@uifabric/foundation';\\nimport { ICSSPixelUnitRule } from '@uifabric/merge-styles/lib/IRawStyleBase';\\nimport { ICSSRule } from '@uifabric/merge-styles/lib/IRawStyleBase';\\nimport { IFocusZone } from '@fluentui/react-focus';\\nimport { IFocusZoneProps } from '@fluentui/react-focus';\\nimport { IFontStyles } from '@uifabric/styling';\\nimport { IHTMLSlot } from '@uifabric/foundation';\\nimport { IObjectWithKey } from '@uifabric/utilities';\\nimport { IPoint } from '@uifabric/utilities';\\nimport { IProcessedStyleSet } from '@uifabric/styling';\\nimport { IRawStyle } from '@uifabric/styling';\\nimport { IRectangle } from '@uifabric/utilities';\\nimport { IRefObject } from '@uifabric/utilities';\\nimport { IRenderComponent } from '@uifabric/utilities';\\nimport { IRenderFunction } from '@uifabric/utilities';\\nimport { ISelection } from '@uifabric/utilities';\\nimport { ISelectionOptions } from '@uifabric/utilities';\\nimport { ISlotProp } from '@uifabric/foundation';\\nimport { ISlottableProps } from '@uifabric/foundation';\\nimport { IStyle } from '@uifabric/styling';\\nimport { IStyleableComponentProps } from '@uifabric/foundation';\\nimport { IStyleFunction } from '@uifabric/utilities';\\nimport { IStyleFunctionOrObject } from '@uifabric/utilities';\\nimport { ITheme } from '@uifabric/styling';\\nimport { KeyCodes } from '@uifabric/utilities';\\nimport { Omit } from '@uifabric/utilities';\\nimport { Point } from '@uifabric/utilities';\\nimport * as PropTypes from 'prop-types';\\nimport * as React from 'react';\\nimport { Rectangle } from '@uifabric/utilities';\\nimport { Selection } from '@uifabric/utilities';\\nimport { SELECTION_CHANGE } from '@uifabric/utilities';\\nimport { SelectionDirection } from '@uifabric/utilities';\\nimport { SelectionMode } from '@uifabric/utilities';\\nimport { Target } from '@uifabric/react-hooks';\\n\\n/**\\n * {@docCategory Button}\\n */\\nexport declare class ActionButton extends React.Component<IButtonProps, {}> {\\n    render(): JSX.Element;\\n}\\n\\n/**\\n * {@docCategory ActivityItem}\\n */\\nexport declare class ActivityItem extends React.Component<IActivityItemProps, {}> {\\n    constructor(props: IActivityItemProps);\\n    render(): JSX.Element;\\n    private _onRenderIcon;\\n    private _onRenderActivityDescription;\\n    private _onRenderComments;\\n    private _onRenderTimeStamp;\\n    private _onRenderPersonaArray;\\n    private _getClassNames;\\n}\\n\\n/**\\n * Defines a type made by the union of the different values that the align-items and justify-content flexbox\\n * properties can take.\\n * {@docCategory Stack}\\n */\\nexport declare type Alignment = 'start' | 'end' | 'center' | 'space-between' | 'space-around' | 'space-evenly' | 'baseline' | 'stretch';\\n\\nexport declare const Announced: React.FunctionComponent<IAnnouncedProps>;\\n\\n/**\\n * {@docCategory Announced}\\n */\\nexport declare class AnnouncedBase extends React.Component<IAnnouncedProps> {\\n    static defaultProps: Partial<IAnnouncedProps>;\\n    render(): JSX.Element;\\n}\\n\\n/**\\n * {@docCategory Autofill}\\n */\\nexport declare class Autofill extends React.Component<IAutofillProps, IAutofillState> implements IAutofill {\\n    static defaultProps: {\\n        enableAutofillOnKeyPress: number[];\\n    };\\n    private _inputElement;\\n    private _autoFillEnabled;\\n    private _value;\\n    private _isComposing;\\n    private _async;\\n    constructor(props: IAutofillProps);\\n    readonly cursorLocation: number | null;\\n    readonly isValueSelected: boolean;\\n    readonly value: string;\\n    readonly selectionStart: number | null;\\n    readonly selectionEnd: number | null;\\n    readonly inputElement: HTMLInputElement | null;\\n    UNSAFE_componentWillReceiveProps(nextProps: IAutofillProps): void;\\n    componentDidUpdate(): void;\\n    componentWillUnmount(): void;\\n    render(): JSX.Element;\\n    focus(): void;\\n    clear(): void;\\n    private _onCompositionStart;\\n    private _onCompositionUpdate;\\n    private _onCompositionEnd;\\n    private _onClick;\\n    private _onKeyDown;\\n    private _onInputChanged;\\n    private _onChanged;\\n    private _getCurrentInputValue;\\n    /**\\n     * Attempts to enable autofill. Whether or not autofill is enabled depends on the input value,\\n     * whether or not any text is selected, and only if the new input value is longer than the old input value.\\n     * Autofill should never be set to true if the value is composing. Once compositionEnd is called, then\\n     * it should be completed.\\n     * See https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent for more information on composition.\\n     * @param newValue - new input value\\n     * @param oldValue - old input value\\n     * @param isComposing - if true then the text is actively being composed and it has not completed.\\n     * @param isComposed - if the text is a composed text value.\\n     */\\n    private _tryEnableAutofill;\\n    private _notifyInputChange;\\n    /**\\n     * Updates the current input value as well as getting a new display value.\\n     * @param newValue - The new value from the input\\n     */\\n    private _updateValue;\\n    /**\\n     * Returns a string that should be used as the display value.\\n     * It evaluates this based on whether or not the suggested value starts with the input value\\n     * and whether or not autofill is enabled.\\n     * @param inputValue - the value that the input currently has.\\n     * @param suggestedDisplayValue - the possible full value\\n     */\\n    private _getDisplayValue;\\n    private _doesTextStartWith;\\n}\\n\\n/**\\n *  @deprecated do not use.\\n * {@docCategory Autofill}\\n */\\nexport declare class BaseAutoFill extends Autofill {\\n}\\n\\n/**\\n * {@docCategory Button}\\n */\\nexport declare class BaseButton extends React.Component<IBaseButtonProps, IBaseButtonState> implements IButton {\\n    private readonly _isSplitButton;\\n    static defaultProps: Partial<IBaseButtonProps>;\\n    private _async;\\n    private _events;\\n    private _buttonElement;\\n    private _splitButtonContainer;\\n    private _mergedRef;\\n    private _labelId;\\n    private _descriptionId;\\n    private _ariaDescriptionId;\\n    private _classNames;\\n    private _processingTouch;\\n    private _lastTouchTimeoutId;\\n    private _renderedVisibleMenu;\\n    private _menuShouldFocusOnContainer;\\n    private _menuShouldFocusOnMount;\\n    private _getMemoizedMenuButtonKeytipProps;\\n    constructor(props: IBaseButtonProps);\\n    render(): JSX.Element;\\n    componentDidMount(): void;\\n    componentDidUpdate(prevProps: IBaseButtonProps, prevState: IBaseButtonState): void;\\n    componentWillUnmount(): void;\\n    focus(): void;\\n    dismissMenu(): void;\\n    openMenu(shouldFocusOnContainer?: boolean, shouldFocusOnMount?: boolean): void;\\n    private _onRenderContent;\\n    /**\\n     * Method to help determine if the menu's component tree should\\n     * be rendered. It takes into account whether the menu is expanded,\\n     * whether it is a persisted menu and whether it has been shown to the user.\\n     */\\n    private _shouldRenderMenu;\\n    private _onRenderIcon;\\n    private _onRenderTextContents;\\n    private _onRenderText;\\n    private _hasText;\\n    private _onRenderChildren;\\n    private _onRenderDescription;\\n    private _onRenderAriaDescription;\\n    private _onRenderMenuIcon;\\n    private _onRenderMenu;\\n    private _onDismissMenu;\\n    private _dismissMenu;\\n    private _openMenu;\\n    private _onToggleMenu;\\n    private _onRenderSplitButtonContent;\\n    private _onSplitContainerFocusCapture;\\n    private _onSplitButtonPrimaryClick;\\n    private _onRenderSplitButtonDivider;\\n    private _onRenderSplitButtonMenuButton;\\n    private _onKeyDown;\\n    private _onKeyUp;\\n    private _onKeyPress;\\n    private _onMouseUp;\\n    private _onMouseDown;\\n    private _onClick;\\n    private _onSplitButtonContainerKeyDown;\\n    private _onMenuKeyDown;\\n    private _onTouchStart;\\n    private _onPointerDown;\\n    private _handleTouchAndPointerEvent;\\n    /**\\n     * Returns if the user hits a valid keyboard key to open the menu\\n     * @param ev - the keyboard event\\n     * @returns True if user clicks on custom trigger key if enabled or alt + down arrow if not. False otherwise.\\n     */\\n    private _isValidMenuOpenKey;\\n    private _onMenuClick;\\n}\\n\\n/**\\n * {@docCategory ExtendedPeoplePicker}\\n */\\nexport declare class BaseExtendedPeoplePicker extends BaseExtendedPicker<IPersonaProps, IExtendedPeoplePickerProps> {\\n}\\n\\nexport declare class BaseExtendedPicker<T, P extends IBaseExtendedPickerProps<T>> extends React.Component<P, IBaseExtendedPickerState<T>> implements IBaseExtendedPicker<T> {\\n    floatingPicker: React.RefObject<BaseFloatingPicker<T, IBaseFloatingPickerProps<T>>>;\\n    selectedItemsList: React.RefObject<BaseSelectedItemsList<T, IBaseSelectedItemsListProps<T>>>;\\n    protected root: React.RefObject<HTMLDivElement>;\\n    protected input: React.RefObject<Autofill>;\\n    protected selection: Selection;\\n    protected floatingPickerProps: IBaseFloatingPickerProps<T>;\\n    protected selectedItemsListProps: IBaseSelectedItemsListProps<T>;\\n    constructor(basePickerProps: P);\\n    readonly items: any;\\n    componentDidMount(): void;\\n    UNSAFE_componentWillReceiveProps(newProps: P): void;\\n    focus(): void;\\n    clearInput(): void;\\n    readonly inputElement: HTMLInputElement | null;\\n    readonly highlightedItems: T[];\\n    render(): JSX.Element;\\n    protected onSelectionChange: () => void;\\n    protected canAddItems(): boolean;\\n    protected renderFloatingPicker(): JSX.Element;\\n    protected renderSelectedItemsList(): JSX.Element;\\n    protected onInputChange: (value: string, composing?: boolean | undefined) => void;\\n    protected onInputFocus: (ev: React.FocusEvent<HTMLInputElement | Autofill>) => void;\\n    protected onInputClick: (ev: React.MouseEvent<HTMLInputElement | Autofill, MouseEvent>) => void;\\n    protected onBackspace: (ev: React.KeyboardEvent<HTMLElement>) => void;\\n    protected onCopy: (ev: React.ClipboardEvent<HTMLElement>) => void;\\n    protected onPaste: (ev: React.ClipboardEvent<HTMLInputElement | Autofill>) => void;\\n    protected _onSuggestionSelected: (item: T) => void;\\n    protected _onSelectedItemsChanged: () => void;\\n    /**\\n     * The floating picker is the source of truth for if the menu has been opened or not.\\n     *\\n     * Because this isn't tracked inside the state of this component, we need to\\n     * force an update here to keep the rendered output that depends on the picker being open\\n     * in sync with the state\\n     *\\n     * Called when the suggestions is shown or closed\\n     */\\n    private _onSuggestionsShownOrHidden;\\n    private _addProcessedItem;\\n}\\n\\n/**\\n * {@docCategory FloatingPeoplePicker}\\n */\\nexport declare class BaseFloatingPeoplePicker extends BaseFloatingPicker<IPersonaProps, IPeopleFloatingPickerProps> {\\n}\\n\\nexport declare class BaseFloatingPicker<T, P extends IBaseFloatingPickerProps<T>> extends React.Component<P, IBaseFloatingPickerState> implements IBaseFloatingPicker {\\n    protected selection: Selection;\\n    protected root: React.RefObject<HTMLDivElement>;\\n    protected suggestionStore: SuggestionsStore<T>;\\n    protected suggestionsControl: React.RefObject<SuggestionsControl<T>>;\\n    protected SuggestionsControlOfProperType: new (props: ISuggestionsControlProps<T>) => SuggestionsControl<T>;\\n    protected currentPromise: PromiseLike<T[]>;\\n    protected isComponentMounted: boolean;\\n    private _async;\\n    constructor(basePickerProps: P);\\n    readonly inputText: string;\\n    readonly suggestions: any[];\\n    forceResolveSuggestion(): void;\\n    readonly currentSelectedSuggestionIndex: number;\\n    readonly isSuggestionsShown: boolean;\\n    onQueryStringChanged: (queryString: string) => void;\\n    hidePicker: () => void;\\n    showPicker: (updateValue?: boolean) => void;\\n    componentDidMount(): void;\\n    componentDidUpdate(): void;\\n    componentWillUnmount(): void;\\n    UNSAFE_componentWillReceiveProps(newProps: IBaseFloatingPickerProps<T>): void;\\n    completeSuggestion: () => void;\\n    updateSuggestions(suggestions: T[], forceUpdate?: boolean): void;\\n    render(): JSX.Element;\\n    protected renderSuggestions(): JSX.Element | null;\\n    protected onSelectionChange(): void;\\n    protected updateValue(updatedValue: string): void;\\n    protected updateSuggestionWithZeroState(): void;\\n    protected updateSuggestionsList(suggestions: T[] | PromiseLike<T[]>): void;\\n    protected onChange(item: T): void;\\n    protected onSuggestionClick: (ev: React.MouseEvent<HTMLElement, MouseEvent>, item: T, index: number) => void;\\n    protected onSuggestionRemove: (ev: React.MouseEvent<HTMLElement, MouseEvent>, item: T, index: number) => void;\\n    protected onKeyDown: (ev: MouseEvent) => void;\\n    private _updateActiveDescendant;\\n    private _onResolveSuggestions;\\n    private _onValidateInput;\\n    private _updateSuggestionsVisible;\\n    private _bindToInputElement;\\n    private _unbindFromInputElement;\\n}\\n\\n/**\\n * {@docCategory PeoplePicker}\\n */\\nexport declare class BasePeoplePicker extends BasePicker<IPersonaProps, IPeoplePickerProps> {\\n}\\n\\n/**\\n * {@docCategory SelectedPeopleList}\\n */\\nexport declare class BasePeopleSelectedItemsList extends BaseSelectedItemsList<IExtendedPersonaProps, ISelectedPeopleProps> {\\n}\\n\\n/**\\n * {@docCategory Pickers}\\n */\\nexport declare class BasePicker<T, P extends IBasePickerProps<T>> extends React.Component<P, IBasePickerState> implements IBasePicker<T> {\\n    protected root: React.RefObject<HTMLDivElement>;\\n    protected input: React.RefObject<IAutofill>;\\n    protected focusZone: React.RefObject<IFocusZone>;\\n    protected suggestionElement: React.RefObject<ISuggestions<T>>;\\n    protected selection: Selection;\\n    protected suggestionStore: SuggestionsController<T>;\\n    /**\\n     * @deprecated this is no longer necessary as typescript now supports generic elements\\n     */\\n    protected SuggestionOfProperType: new (props: ISuggestionsProps<T>) => Suggestions<T>;\\n    protected currentPromise: PromiseLike<any> | undefined;\\n    protected _ariaMap: IPickerAriaIds;\\n    private _styledSuggestions;\\n    private _id;\\n    private _async;\\n    static getDerivedStateFromProps(newProps: IBasePickerProps<any>): {\\n        items: any[];\\n    } | null;\\n    constructor(basePickerProps: P);\\n    readonly items: T[];\\n    componentDidMount(): void;\\n    componentDidUpdate(oldProps: P, oldState: IBasePickerState): void;\\n    componentWillUnmount(): void;\\n    focus(): void;\\n    focusInput(): void;\\n    dismissSuggestions: (ev?: any) => void;\\n    completeSuggestion(forceComplete?: boolean): void;\\n    refocusSuggestions: (keyCode: number) => void;\\n    render(): JSX.Element;\\n    protected canAddItems(): boolean;\\n    protected renderSuggestions(): JSX.Element | null;\\n    protected renderItems(): JSX.Element[];\\n    protected resetFocus(index?: number): void;\\n    protected onSuggestionSelect(): void;\\n    protected onSelectionChange(): void;\\n    protected updateSuggestions(suggestions: any[]): void;\\n    /**\\n     * Only to be called when there is nothing in the input. Checks to see if the consumer has\\n     * provided a function to resolve suggestions\\n     */\\n    protected onEmptyInputFocus(): void;\\n    protected updateValue(updatedValue: string): void;\\n    protected updateSuggestionsList(suggestions: T[] | PromiseLike<T[]>, updatedValue?: string): void;\\n    protected resolveNewValue(updatedValue: string, suggestions: T[]): void;\\n    protected onChange(items?: T[]): void;\\n    protected onInputChange: (value: string) => void;\\n    protected onSuggestionClick: (ev: React.MouseEvent<HTMLElement, MouseEvent>, item: any, index: number) => void;\\n    protected onSuggestionRemove: (ev: React.MouseEvent<HTMLElement, MouseEvent>, item: T, index: number) => void;\\n    protected onInputFocus: (ev: React.FocusEvent<HTMLInputElement | Autofill>) => void;\\n    protected onInputBlur: (ev: React.FocusEvent<HTMLInputElement | Autofill>) => void;\\n    protected onBlur: (ev: React.FocusEvent<HTMLElement | Autofill>) => void;\\n    /**\\n     * Reveals suggestions any time the user clicks on the input element\\n     * without shifting focus.\\n     */\\n    protected onClick: (ev: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;\\n    protected onKeyDown: (ev: React.KeyboardEvent<HTMLElement>) => void;\\n    protected onItemChange: (changedItem: T, index: number) => void;\\n    protected onGetMoreResults: () => void;\\n    protected completeSelection: (item: T) => void;\\n    protected addItemByIndex: (index: number) => void;\\n    protected addItem: (item: T) => void;\\n    protected removeItem: (item: IPickerItemProps<T>, focusNextItem?: boolean | undefined) => void;\\n    protected removeItems: (itemsToRemove: any[]) => void;\\n    protected onBackspace(ev: React.KeyboardEvent<HTMLElement>): void;\\n    protected _shouldFocusZoneEnterInnerZone: (ev: React.KeyboardEvent<HTMLElement>) => boolean;\\n    protected getActiveDescendant(): string | undefined;\\n    protected getSuggestionsAlert(suggestionAlertClassName?: string): JSX.Element | undefined;\\n    /**\\n     * Takes in the current updated value and either resolves it with the new suggestions\\n     * or if updated value is undefined then it clears out currently suggested items\\n     */\\n    private _updateAndResolveValue;\\n    /**\\n     * Controls what happens whenever there is an action that impacts the selected items.\\n     * If `selectedItems` is provided, this will act as a controlled component and it will not update its own state.\\n     */\\n    private _updateSelectedItems;\\n    private _onSelectedItemsUpdated;\\n    /**\\n     * Suggestions are normally shown after the user updates text and the text\\n     * is non-empty, but also when the user clicks on the input element.\\n     * @returns True if suggestions should be shown.\\n     */\\n    private _getShowSuggestions;\\n    private _onResolveSuggestions;\\n    private _completeGenericSuggestion;\\n    private _getTextFromItem;\\n    /**\\n     * This should be called when the user does something other than use text entry to trigger suggestions.\\n     *\\n     */\\n    private _userTriggeredSuggestions;\\n}\\n\\nexport declare class BasePickerListBelow<T, P extends IBasePickerProps<T>> extends BasePicker<T, P> {\\n    render(): JSX.Element;\\n    protected onBackspace(ev: React.KeyboardEvent<HTMLElement>): void;\\n}\\n\\nexport declare class BaseSelectedItemsList<T, P extends IBaseSelectedItemsListProps<T>> extends React.Component<P, IBaseSelectedItemsListState<T>> implements IBaseSelectedItemsList<T> {\\n    protected root: HTMLElement;\\n    protected selection: Selection;\\n    constructor(basePickerProps: P);\\n    readonly items: T[];\\n    addItems: (items: T[]) => void;\\n    removeItemAt: (index: number) => void;\\n    removeItem: (item: T) => void;\\n    replaceItem: (itemToReplace: T, itemsToReplaceWith: T[]) => void;\\n    removeItems: (itemsToRemove: any[]) => void;\\n    removeSelectedItems(): void;\\n    /**\\n     * Controls what happens whenever there is an action that impacts the selected items.\\n     * If selectedItems is provided, this will act as a controlled component and will not update its own state.\\n     */\\n    updateItems(items: T[], focusIndex?: number): void;\\n    onCopy: (ev: React.ClipboardEvent<HTMLElement>) => void;\\n    hasSelectedItems(): boolean;\\n    unselectAll(): void;\\n    highlightedItems(): T[];\\n    UNSAFE_componentWillUpdate(newProps: P, newState: IBaseSelectedItemsListState): void;\\n    componentDidMount(): void;\\n    UNSAFE_componentWillReceiveProps(newProps: P): void;\\n    render(): any;\\n    protected renderItems: () => JSX.Element[];\\n    protected onSelectionChanged: () => void;\\n    protected onChange(items?: T[]): void;\\n    protected onItemChange: (changedItem: T, index: number) => void;\\n    protected copyItems(items: T[]): void;\\n    private _onSelectedItemsUpdated;\\n    private _canRemoveItem;\\n}\\n\\nexport declare enum BaseSlots {\\n    primaryColor = 0,\\n    backgroundColor = 1,\\n    foregroundColor = 2\\n}\\n\\nexport declare const Breadcrumb: React.FunctionComponent<IBreadcrumbProps>;\\n\\n/**\\n * {@docCategory Breadcrumb}\\n */\\nexport declare class BreadcrumbBase extends React.Component<IBreadcrumbProps, any> {\\n    static defaultProps: IBreadcrumbProps;\\n    private _classNames;\\n    private _focusZone;\\n    constructor(props: IBreadcrumbProps);\\n    /**\\n     * Sets focus to the first breadcrumb link.\\n     */\\n    focus(): void;\\n    render(): JSX.Element;\\n    /**\\n     * Remove the first rendered item past the overlow point and put it and the end the overflow set.\\n     */\\n    private _onReduceData;\\n    /**\\n     * Remove the last item of the overflow set and insert the item as the start of the rendered set past the overflow\\n     * point.\\n     */\\n    private _onGrowData;\\n    private _onRenderBreadcrumb;\\n    private _onRenderItem;\\n    private _onBreadcrumbClicked;\\n    /**\\n     * Validate incoming props\\n     * @param props - Props to validate\\n     */\\n    private _validateProps;\\n}\\n\\nexport declare function buildColumns(items: any[], canResizeColumns?: boolean, onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void, sortedColumnKey?: string, isSortedDescending?: boolean, groupedColumnKey?: string, isMultiline?: boolean): IColumn[];\\n\\n/**\\n * Builds a map of ID to IKeytipProps\\n *\\n * @param config - IKeytipConfig object\\n * @returns Config map\\n */\\nexport declare function buildKeytipConfigMap(config: IKeytipConfig): IKeytipConfigMap;\\n\\n/**\\n * This class is deprecated. Use the individual *Button components instead.\\n * @deprecated Use the individual *Button components instead.\\n * {@docCategory Button}\\n */\\nexport declare class Button extends React.Component<IButtonProps, {}> {\\n    constructor(props: IButtonProps);\\n    render(): JSX.Element;\\n}\\n\\nexport declare const ButtonGrid: React.FunctionComponent<IButtonGridProps>;\\n\\nexport declare class ButtonGridCell<T, P extends IButtonGridCellProps<T>> extends React.Component<P, {}> {\\n    static defaultProps: {\\n        disabled: boolean;\\n    };\\n    render(): JSX.Element;\\n    private _onClick;\\n    private _onMouseEnter;\\n    private _onMouseMove;\\n    private _onMouseLeave;\\n    private _onFocus;\\n}\\n\\n/**\\n * {@docCategory Button}\\n */\\nexport declare enum ButtonType {\\n    normal = 0,\\n    primary = 1,\\n    hero = 2,\\n    compound = 3,\\n    command = 4,\\n    icon = 5,\\n    default = 6\\n}\\n\\nexport declare class Calendar extends React.Component<ICalendarProps, ICalendarState> implements ICalendar {\\n    static defaultProps: ICalendarProps;\\n    private _dayPicker;\\n    private _monthPicker;\\n    private _hasFocus;\\n    private _focusOnUpdate;\\n    constructor(props: ICalendarProps);\\n    UNSAFE_componentWillReceiveProps(nextProps: ICalendarProps): void;\\n    componentDidUpdate(): void;\\n    render(): JSX.Element;\\n    focus(): void;\\n    private _onBlur;\\n    private _onFocus;\\n    private _navigateDayPickerDay;\\n    private _navigateMonthPickerDay;\\n    private _onNavigateDayDate;\\n    private _onNavigateMonthDate;\\n    private _onSelectDate;\\n    private _onHeaderSelect;\\n    private _onGotoToday;\\n    private _onGotoTodayClick;\\n    private _onGotoTodayKeyDown;\\n    private _onDatePickerPopupKeyDown;\\n    private _handleEscKey;\\n}\\n\\nexport declare class Callout extends React.Component<ICalloutProps, ICalloutState> {\\n    render(): JSX.Element;\\n}\\n\\nexport declare const CalloutContent: React.FunctionComponent<ICalloutProps>;\\n\\nexport declare class CalloutContentBase extends React.Component<ICalloutProps, ICalloutState> {\\n    static defaultProps: {\\n        preventDismissOnLostFocus: boolean;\\n        preventDismissOnScroll: boolean;\\n        preventDismissOnResize: boolean;\\n        isBeakVisible: boolean;\\n        beakWidth: number;\\n        gapSpace: number;\\n        minPagePadding: number;\\n        directionalHint: 7;\\n    };\\n    private _classNames;\\n    private _didSetInitialFocus;\\n    private _hostElement;\\n    private _calloutElement;\\n    private _targetWindow;\\n    private _bounds;\\n    private _positionAttempts;\\n    private _target;\\n    private _setHeightOffsetTimer;\\n    private _hasListeners;\\n    private _maxHeight;\\n    private _blockResetHeight;\\n    private _isMouseDownOnPopup;\\n    private _async;\\n    private _disposables;\\n    constructor(props: ICalloutProps);\\n    componentDidUpdate(): void;\\n    shouldComponentUpdate(newProps: ICalloutProps, newState: ICalloutState): boolean;\\n    UNSAFE_componentWillMount(): void;\\n    componentWillUnmount(): void;\\n    UNSAFE_componentWillUpdate(newProps: ICalloutProps): void;\\n    componentDidMount(): void;\\n    render(): JSX.Element | null;\\n    dismiss: (ev?: Event | React.MouseEvent<HTMLElement, MouseEvent> | React.KeyboardEvent<HTMLElement> | undefined) => void;\\n    protected _dismissOnScroll: (ev: Event) => void;\\n    protected _dismissOnResize: (ev: Event) => void;\\n    protected _dismissOnLostFocus: (ev: Event) => void;\\n    protected _setInitialFocus: () => void;\\n    protected _onComponentDidMount: () => void;\\n    private _dismissOnClickOrScroll;\\n    private _dismissOnTargetWindowBlur;\\n    private _addListeners;\\n    private _removeListeners;\\n    private _updateAsyncPosition;\\n    private _getBeakPosition;\\n    private _updatePosition;\\n    private _getBounds;\\n    private _getMaxHeight;\\n    private _arePositionsEqual;\\n    private _comparePositions;\\n    private _setTargetWindowAndElement;\\n    private _setHeightOffsetEveryFrame;\\n    private _didPositionPropsChange;\\n    private _getTarget;\\n    private _mouseDownOnPopup;\\n    private _mouseUpOnPopup;\\n}\\n\\n/**\\n * Returns true if a list of menu items can contain a checkbox\\n */\\nexport declare function canAnyMenuItemsCheck(items: IContextualMenuItem[]): boolean;\\n\\nexport declare const Check: React.FunctionComponent<ICheckProps>;\\n\\nexport declare const CheckBase: React.FunctionComponent<ICheckProps>;\\n\\nexport declare const Checkbox: React.FunctionComponent<ICheckboxProps>;\\n\\nexport declare class CheckboxBase extends React.Component<ICheckboxProps, ICheckboxState> implements ICheckbox {\\n    static defaultProps: ICheckboxProps;\\n    private _checkBox;\\n    private _id;\\n    private _classNames;\\n    static getDerivedStateFromProps(nextProps: Readonly<ICheckboxProps>, prevState: Readonly<ICheckboxState>): ICheckboxState | null;\\n    /**\\n     * Initialize a new instance of the Checkbox\\n     * @param props - Props for the component\\n     * @param context - Context or initial state for the base component.\\n     */\\n    constructor(props: ICheckboxProps, context?: any);\\n    /**\\n     * Render the Checkbox based on passed props\\n     */\\n    render(): JSX.Element;\\n    readonly indeterminate: boolean;\\n    readonly checked: boolean;\\n    focus(): void;\\n    private _renderContent;\\n    private _onFocus;\\n    private _onBlur;\\n    private _onChange;\\n    private _onRenderLabel;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare enum CheckboxVisibility {\\n    /** Visible on hover. */\\n    onHover = 0,\\n    /** Visible always. */\\n    always = 1,\\n    /** Hide checkboxes. */\\n    hidden = 2\\n}\\n\\nexport declare const ChoiceGroup: React.FunctionComponent<IChoiceGroupProps>;\\n\\n/**\\n * {@docCategory ChoiceGroup}\\n */\\nexport declare class ChoiceGroupBase extends React.Component<IChoiceGroupProps, IChoiceGroupState> implements IChoiceGroup {\\n    private _id;\\n    private _labelId;\\n    private _focusCallbacks;\\n    private _changeCallbacks;\\n    constructor(props: IChoiceGroupProps);\\n    /**\\n     * Gets the current checked option.\\n     */\\n    readonly checkedOption: IChoiceGroupOption | undefined;\\n    componentDidUpdate(prevProps: IChoiceGroupProps, prevState: IChoiceGroupState): void;\\n    render(): JSX.Element;\\n    focus(): void;\\n    private _onFocus;\\n    private _onBlur;\\n    private _onChange;\\n    /**\\n     * Returns `selectedKey` if provided, or the key of the first option with the `checked` prop set.\\n     */\\n    private _getKeyChecked;\\n    private _getOptionId;\\n    private _getOptionLabelId;\\n}\\n\\nexport declare const ChoiceGroupOption: React.FunctionComponent<IChoiceGroupOptionProps>;\\n\\n/** Clamp a value to ensure it falls within a given range. */\\nexport declare function clamp(value: number, max: number, min?: number): number;\\n\\nexport declare const Coachmark: React.FunctionComponent<ICoachmarkProps>;\\n\\nexport declare const COACHMARK_ATTRIBUTE_NAME = \\\"data-coachmarkid\\\";\\n\\nexport declare class CoachmarkBase extends React.Component<ICoachmarkProps, ICoachmarkState> implements ICoachmark {\\n    static defaultProps: Partial<ICoachmarkProps>;\\n    private _async;\\n    private _events;\\n    /**\\n     * The cached HTMLElement reference to the Entity Inner Host\\n     * element.\\n     */\\n    private _entityHost;\\n    private _entityInnerHostElement;\\n    private _translateAnimationContainer;\\n    private _ariaAlertContainer;\\n    private _childrenContainer;\\n    private _positioningContainer;\\n    /**\\n     * The target element the mouse would be in\\n     * proximity to\\n     */\\n    private _targetElementRect;\\n    constructor(props: ICoachmarkProps);\\n    private readonly _beakDirection;\\n    render(): JSX.Element;\\n    UNSAFE_componentWillReceiveProps(newProps: ICoachmarkProps): void;\\n    shouldComponentUpdate(newProps: ICoachmarkProps, newState: ICoachmarkState): boolean;\\n    componentDidUpdate(prevProps: ICoachmarkProps, prevState: ICoachmarkState): void;\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    dismiss: (ev?: Event | React.MouseEvent<HTMLElement, MouseEvent> | React.KeyboardEvent<HTMLElement> | undefined) => void;\\n    private _addListeners;\\n    private _dismissOnLostFocus;\\n    private _onKeyDown;\\n    private _onFocusHandler;\\n    private _onPositioned;\\n    private _getBounds;\\n    private _setBeakPosition;\\n    private _openCoachmark;\\n    private _addProximityHandler;\\n    private _setTargetElementRect;\\n    private _isInsideElement;\\n}\\n\\n/**\\n * {@docCategory GroupedList}\\n */\\nexport declare enum CollapseAllVisibility {\\n    hidden = 0,\\n    visible = 1\\n}\\n\\ndeclare type ColorComponent = keyof Pick<IColor, 'r' | 'g' | 'b' | 'a' | 't' | 'hex'>;\\n\\nexport declare const ColorPicker: React.FunctionComponent<IColorPickerProps>;\\n\\n/**\\n * {@docCategory ColorPicker}\\n */\\nexport declare class ColorPickerBase extends React.Component<IColorPickerProps, IColorPickerState> implements IColorPicker {\\n    static defaultProps: Partial<IColorPickerProps>;\\n    private _textChangeHandlers;\\n    /**\\n     * Strings displayed in the UI as text field labels (these are in a separate object for convenient\\n     * indexing by short color component name).\\n     */\\n    private _textLabels;\\n    /** Strings besides red/green/blue/alpha/hex, with defaults for all values except the deprecated `hue` */\\n    private _strings;\\n    constructor(props: IColorPickerProps);\\n    readonly color: IColor;\\n    componentDidUpdate(prevProps: Readonly<IColorPickerProps>, prevState: Readonly<IColorPickerState>): void;\\n    render(): JSX.Element;\\n    private _getDisplayValue;\\n    private _onSVChanged;\\n    private _onHChanged;\\n    /** Callback for when the alpha/transparency slider changes */\\n    private _onATChanged;\\n    private _onTextChange;\\n    private _onBlur;\\n    /**\\n     * Update the displayed color and call change handlers if appropriate.\\n     * @param ev - Event if call was triggered by an event (undefined if triggered by props change)\\n     * @param newColor - Updated color\\n     */\\n    private _updateColor;\\n}\\n\\nexport declare const ColorPickerGridCell: React.FunctionComponent<IColorPickerGridCellProps>;\\n\\nexport declare class ColorPickerGridCellBase extends React.PureComponent<IColorPickerGridCellProps, {}> {\\n    static defaultProps: Partial<IColorPickerGridCellProps>;\\n    private _classNames;\\n    render(): JSX.Element;\\n    /**\\n     * Render the core of a color cell\\n     * @returns - Element representing the core of the item\\n     */\\n    private _onRenderColorOption;\\n    /**\\n     * Validate if the cell's color is white or not to apply whiteCell style\\n     * @param inputColor - The color of the current cell\\n     * @returns - Whether the cell's color is white or not.\\n     */\\n    private _isWhiteCell;\\n}\\n\\n/**\\n * Enum to describe how a particular column header behaves.\\n * This is used to to specify the property `IColumn.columnActionsMode`.\\n * If `IColumn.columnActionsMode` is undefined, it's equivalent to `ColumnActionsMode.clickable`.\\n * {@docCategory DetailsList}\\n */\\nexport declare enum ColumnActionsMode {\\n    /** Renders the column header as disabled. */\\n    disabled = 0,\\n    /** Renders the column header as clickable. Default value. */\\n    clickable = 1,\\n    /** Renders the column header as clickable and displays the dropdown chevron. */\\n    hasDropdown = 2\\n}\\n\\n/**\\n * Enum to describe where the column has been dropped, after starting the drag\\n * {@docCategory DetailsList}\\n */\\nexport declare enum ColumnDragEndLocation {\\n    /** Drag ended outside of current list */\\n    outside = 0,\\n    /** Drag ended within current list */\\n    surface = 1,\\n    /** Drag ended on header */\\n    header = 2\\n}\\n\\nexport declare class ComboBox extends React.Component<IComboBoxProps, IComboBoxState> {\\n    static defaultProps: IComboBoxProps;\\n    private _root;\\n    /** The input aspect of the comboBox */\\n    private _autofill;\\n    /** The wrapping div of the input and button */\\n    private _comboBoxWrapper;\\n    /** The callout element */\\n    private _comboBoxMenu;\\n    /** The menu item element that is currently selected */\\n    private _selectedElement;\\n    /** The base id for the ComboBox */\\n    private _id;\\n    /**\\n     * After a character is inserted when autocomplete is true and allowFreeform is false,\\n     * remember the task that will clear the pending string of characters.\\n     */\\n    private _lastReadOnlyAutoCompleteChangeTimeoutId;\\n    /** Promise used when resolving the comboBox options */\\n    private _currentPromise;\\n    /** The current visible value sent to the auto fill on render */\\n    private _currentVisibleValue;\\n    private _classNames;\\n    private _isScrollIdle;\\n    private _hasPendingValue;\\n    private _scrollIdleTimeoutId;\\n    private _processingTouch;\\n    private _lastTouchTimeoutId;\\n    /** True if the most recent keydown event was for alt (option) or meta (command). */\\n    private _lastKeyDownWasAltOrMeta;\\n    /**\\n     * Determines if we should be setting focus back to the input when the menu closes.\\n     * The general rule of thumb is if the menu was launched via the keyboard focus should go back\\n     * to the input, if it was dropped via the mouse focus should not be forced back to the input.\\n     */\\n    private _focusInputAfterClose;\\n    /** Flag for when we get the first mouseMove */\\n    private _gotMouseMove;\\n    private _processingClearPendingInfo;\\n    private _async;\\n    private _events;\\n    constructor(props: IComboBoxProps);\\n    /**\\n     * All selected options\\n     */\\n    readonly selectedOptions: IComboBoxOption[];\\n    componentDidMount(): void;\\n    UNSAFE_componentWillReceiveProps(newProps: IComboBoxProps): void;\\n    componentDidUpdate(prevProps: IComboBoxProps, prevState: IComboBoxState): void;\\n    componentWillUnmount(): void;\\n    render(): JSX.Element;\\n    /**\\n     * {@inheritdoc}\\n     */\\n    focus: (shouldOpenOnFocus?: boolean | undefined, useFocusAsync?: boolean | undefined) => void;\\n    /**\\n     * Close menu callout if it is open\\n     */\\n    dismissMenu: () => void;\\n    /**\\n     * componentWillReceiveProps handler for the auto fill component\\n     * Checks/updates the iput value to set, if needed\\n     * @param defaultVisibleValue - the defaultVisibleValue that got passed\\n     *  in to the auto fill's componentWillReceiveProps\\n     * @returns - the updated value to set, if needed\\n     */\\n    private _onUpdateValueInAutofillWillReceiveProps;\\n    private _renderComboBoxWrapper;\\n    /**\\n     * componentDidUpdate handler for the auto fill component\\n     *\\n     * @param defaultVisibleValue - the current defaultVisibleValue in the auto fill's componentDidUpdate\\n     * @param suggestedDisplayValue - the current suggestedDisplayValue in the auto fill's componentDidUpdate\\n     * @returns - should the full value of the input be selected?\\n     * True if the defaultVisibleValue equals the suggestedDisplayValue, false otherwise\\n     */\\n    private _onShouldSelectFullInputValueInAutofillComponentDidUpdate;\\n    /**\\n     * Get the correct value to pass to the input\\n     * to show to the user based off of the current props and state\\n     * @returns the value to pass to the input\\n     */\\n    private _getVisibleValue;\\n    private _getPendingString;\\n    /**\\n     * Returns a string that concatenates all of the selected values\\n     * for multiselect combobox.\\n     */\\n    private _getMultiselectDisplayString;\\n    /**\\n     * Is the index within the bounds of the array?\\n     * @param options - options to check if the index is valid for\\n     * @param index - the index to check\\n     * @returns - true if the index is valid for the given options, false otherwise\\n     */\\n    private _indexWithinBounds;\\n    /**\\n     * Handler for typing changes on the input\\n     * @param updatedValue - the newly changed value\\n     */\\n    private _onInputChange;\\n    /**\\n     * Process the new input's new value when the comboBox\\n     * allows freeform entry\\n     * @param updatedValue - the input's newly changed value\\n     */\\n    private _processInputChangeWithFreeform;\\n    /**\\n     * Process the new input's new value when the comboBox\\n     * does not allow freeform entry\\n     * @param updatedValue - the input's newly changed value\\n     */\\n    private _processInputChangeWithoutFreeform;\\n    private _getFirstSelectedIndex;\\n    /**\\n     * Walk along the options starting at the index, stepping by the delta (positive or negative)\\n     * looking for the next valid selectable index (e.g. skipping headings and dividers)\\n     * @param index - the index to get the next selectable index from\\n     * @param delta - optional delta to step by when finding the next index, defaults to 0\\n     * @returns - the next valid selectable index. If the new index is outside of the bounds,\\n     * it will snap to the edge of the options array. If delta == 0 and the given index is not selectable\\n     */\\n    private _getNextSelectableIndex;\\n    /**\\n     * Set the selected index. Note, this is\\n     * the \\\"real\\\" selected index, not the pending selected index\\n     * @param index - the index to set (or the index to set from if a search direction is provided)\\n     * @param searchDirection - the direction to search along the options from the given index\\n     */\\n    private _setSelectedIndex;\\n    /**\\n     * Focus (and select) the content of the input\\n     * and set the focused state\\n     */\\n    private _onFocus;\\n    /**\\n     * Callback issued when the options should be resolved, if they have been updated or\\n     * if they need to be passed in the first time. This only does work if an onResolveOptions\\n     * callback was passed in\\n     */\\n    private _onResolveOptions;\\n    /**\\n     * OnBlur handler. Set the focused state to false\\n     * and submit any pending value\\n     */\\n    private _onBlur;\\n    /**\\n     * Submit a pending value if there is one\\n     */\\n    private _submitPendingValue;\\n    private _onRenderContainer;\\n    private _onCalloutLayerMounted;\\n    private _onLayerMounted;\\n    private _onRenderLabel;\\n    private _onRenderList;\\n    private _onRenderItem;\\n    private _onRenderLowerContent;\\n    private _onRenderUpperContent;\\n    private _renderSeparator;\\n    private _renderHeader;\\n    private _renderOption;\\n    /**\\n     * If we are coming from a mouseOut:\\n     * there is no visible selected option.\\n     *\\n     * Else if We are hovering over an item:\\n     * that gets the selected look.\\n     *\\n     * Else:\\n     * Use the current valid pending index if it exists OR\\n     * we do not have a valid index and we currently have a pending input value,\\n     * otherwise use the selected index\\n     * */\\n    private _isOptionSelected;\\n    private _isOptionChecked;\\n    /**\\n     * Gets the pending selected index taking into account hover, valueValidIndex, and selectedIndex\\n     * @param includeCurrentPendingValue - Should we include the currentPendingValue when\\n     * finding the index\\n     */\\n    private _getPendingSelectedIndex;\\n    /**\\n     * Mouse clicks to headers, dividers and scrollbar should not make input lose focus\\n     */\\n    private _onCalloutMouseDown;\\n    /**\\n     * Scroll handler for the callout to make sure the mouse events\\n     * for updating focus are not interacting during scroll\\n     */\\n    private _onScroll;\\n    /**\\n     * Scroll the selected element into view\\n     */\\n    private _scrollIntoView;\\n    private _onRenderOptionContent;\\n    /**\\n     * Click handler for the menu items\\n     * to select the item and also close the menu\\n     * @param index - the index of the item that was clicked\\n     */\\n    private _onItemClick;\\n    /**\\n     * Handles dismissing (cancelling) the menu\\n     */\\n    private _onDismiss;\\n    /**\\n     * Get the indices of the options that are marked as selected\\n     * @param options - the comboBox options\\n     * @param selectedKeys - the known selected keys to find\\n     * @returns - an array of the indices of the selected options, empty array if nothing is selected\\n     */\\n    private _getSelectedIndices;\\n    /**\\n     * Reset the selected index by clearing the\\n     * input (of any pending text), clearing the pending state,\\n     * and setting the suggested display value to the last\\n     * selected state text\\n     */\\n    private _resetSelectedIndex;\\n    /**\\n     * Clears the pending info state\\n     */\\n    private _clearPendingInfo;\\n    private _onAfterClearPendingInfo;\\n    /**\\n     * Set the pending info\\n     * @param currentPendingValue - new pending value to set\\n     * @param currentPendingValueValidIndex - new pending value index to set\\n     * @param suggestedDisplayValue - new suggest display value to set\\n     */\\n    private _setPendingInfo;\\n    /**\\n     * Set the pending info from the given index\\n     * @param index - the index to set the pending info from\\n     */\\n    private _setPendingInfoFromIndex;\\n    /**\\n     * Sets the pending info for the comboBox\\n     * @param index - the index to search from\\n     * @param searchDirection - the direction to search\\n     */\\n    private _setPendingInfoFromIndexAndDirection;\\n    private _notifyPendingValueChanged;\\n    /**\\n     * Sets the isOpen state and updates focusInputAfterClose\\n     */\\n    private _setOpenStateAndFocusOnClose;\\n    /**\\n     * Handle keydown on the input\\n     * @param ev - The keyboard event that was fired\\n     */\\n    private _onInputKeyDown;\\n    /**\\n     * Returns true if the key for the event is alt (Mac option) or meta (Mac command).\\n     */\\n    private _isAltOrMeta;\\n    /**\\n     * Handle keyup on the input\\n     * @param ev - the keyboard event that was fired\\n     */\\n    private _onInputKeyUp;\\n    private _onOptionMouseEnter;\\n    private _onOptionMouseMove;\\n    private _onOptionMouseLeave;\\n    private _shouldIgnoreMouseEvent;\\n    /**\\n     * Handle dismissing the menu and\\n     * eating the required key event when disabled\\n     * @param ev - the keyboard event that was fired\\n     */\\n    private _handleInputWhenDisabled;\\n    /**\\n     * Click handler for the button of the comboBox\\n     * and the input when not allowing freeform. This\\n     * toggles the expand/collapse state of the comboBox (if enbled)\\n     */\\n    private _onComboBoxClick;\\n    /**\\n     * Click handler for the autofill.\\n     */\\n    private _onAutofillClick;\\n    private _onTouchStart;\\n    private _onPointerDown;\\n    private _handleTouchAndPointerEvent;\\n    /**\\n     * Get the styles for the current option.\\n     * @param item - Item props for the current option\\n     */\\n    private _getCaretButtonStyles;\\n    /**\\n     * Get the styles for the current option.\\n     * @param item - Item props for the current option\\n     */\\n    private _getCurrentOptionStyles;\\n    /**\\n     * Get the aria-activedescendant value for the comboxbox.\\n     * @returns the id of the current focused combo item, otherwise the id of the currently selected element,\\n     * null otherwise\\n     */\\n    private _getAriaActiveDescendantValue;\\n    /**\\n     * Get the aria autocomplete value for the Combobox\\n     * @returns 'inline' if auto-complete automatically dynamic, 'both' if we have a list of possible values to pick from\\n     * and can dynamically populate input, and 'none' if auto-complete is not enabled as we can't give user inputs.\\n     */\\n    private _getAriaAutoCompleteValue;\\n    private _isPendingOption;\\n    /**\\n     * Given default selected key(s) and selected key(s), return the selected keys(s).\\n     * When default selected key(s) are available, they take precedence and return them instead of selected key(s).\\n     *\\n     * @returns No matter what specific types the input parameters are, always return an array of\\n     *  either strings or numbers instead of premitive type.  This normlization makes caller's logic easier.\\n     */\\n    private _buildDefaultSelectedKeys;\\n    private _buildSelectedKeys;\\n    private _getPreviewText;\\n    private _normalizeToString;\\n    /**\\n     * Returns true if the component has some kind of focus. If it's either focusing or if it's focused\\n     */\\n    private _hasFocus;\\n}\\n\\nexport declare const CommandBar: React.FunctionComponent<ICommandBarProps>;\\n\\nexport declare class CommandBarBase extends React.Component<ICommandBarProps, {}> implements ICommandBar {\\n    static defaultProps: ICommandBarProps;\\n    private _overflowSet;\\n    private _resizeGroup;\\n    private _classNames;\\n    constructor(props: ICommandBarProps);\\n    render(): JSX.Element;\\n    focus(): void;\\n    remeasure(): void;\\n    private _onRenderData;\\n    private _onRenderItem;\\n    private _commandButton;\\n    private _onButtonClick;\\n    private _onRenderOverflowButton;\\n    private _computeCacheKey;\\n    private _onReduceData;\\n    private _onGrowData;\\n}\\n\\n/**\\n * {@docCategory Button}\\n */\\nexport declare class CommandBarButton extends React.Component<IButtonProps, {}> {\\n    render(): JSX.Element;\\n}\\n\\n/**\\n * {@docCategory Button}\\n */\\nexport declare const CommandButton: typeof ActionButton;\\n\\nexport declare const CompactPeoplePicker: React.FunctionComponent<IPeoplePickerProps>;\\n\\n/**\\n * Compact layout. It uses personas without secondary text when displaying search results.\\n * {@docCategory PeoplePicker}\\n */\\nexport declare class CompactPeoplePickerBase extends BasePeoplePicker {\\n    /** Default props for CompactPeoplePicker. */\\n    static defaultProps: {\\n        onRenderItem: (props: IPeoplePickerItemSelectedProps) => JSX.Element;\\n        onRenderSuggestionsItem: (personaProps: IPersonaProps, suggestionsProps?: IBasePickerSuggestionsProps<any> | undefined) => JSX.Element;\\n        createGenericItem: typeof createGenericItem;\\n    };\\n}\\n\\n/**\\n * {@docCategory Button}\\n */\\nexport declare class CompoundButton extends React.Component<IButtonProps, {}> {\\n    render(): JSX.Element;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare enum ConstrainMode {\\n    /** Lets the content grow which allows the page to manage scrolling. */\\n    unconstrained = 0,\\n    /** Constrains the list to the given layout space. */\\n    horizontalConstrained = 1\\n}\\n\\n/**\\n * Constructs a keytip from an IKeytipConfigItem and puts it in the configMap\\n *\\n * @param configMap - IKeytipConfigMap to store the keytip in\\n * @param parentSequence - string of the parent keytip\\n * @param keytip - IKeytipConfigItem data\\n */\\nexport declare function constructKeytip(configMap: IKeytipConfigMap, parentSequence: string[], keytip: IKeytipConfigItem): void;\\n\\n/**\\n * ContextualMenu description\\n */\\nexport declare const ContextualMenu: React.FunctionComponent<IContextualMenuProps>;\\n\\nexport declare class ContextualMenuBase extends React.Component<IContextualMenuProps, IContextualMenuState> {\\n    static defaultProps: IContextualMenuProps;\\n    private _async;\\n    private _events;\\n    private _id;\\n    private _host;\\n    private _previousActiveElement;\\n    private _enterTimerId;\\n    private _targetWindow;\\n    private _target;\\n    private _isScrollIdle;\\n    private _scrollIdleTimeoutId;\\n    /** True if the most recent keydown event was for alt (option) or meta (command). */\\n    private _lastKeyDownWasAltOrMeta;\\n    private _shouldUpdateFocusOnMouseEvent;\\n    private _gotMouseMove;\\n    private _mounted;\\n    private _focusingPreviousElement;\\n    private _adjustedFocusZoneProps;\\n    private _classNames;\\n    constructor(props: IContextualMenuProps);\\n    dismiss: (ev?: any, dismissAll?: boolean | undefined) => void;\\n    shouldComponentUpdate(newProps: IContextualMenuProps, newState: IContextualMenuState): boolean;\\n    UNSAFE_componentWillUpdate(newProps: IContextualMenuProps): void;\\n    UNSAFE_componentWillMount(): void;\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    render(): JSX.Element | null;\\n    /**\\n     * Return whether the contextual menu is hidden.\\n     * Undefined value for hidden is equivalent to hidden being false.\\n     * @param props - Props for the component\\n     */\\n    private _isHidden;\\n    private _onMenuOpened;\\n    private _onMenuClosed;\\n    private _tryFocusPreviousActiveElement;\\n    /**\\n     * Gets the focusZoneDirection by using the arrowDirection if specified,\\n     * the direction specificed in the focusZoneProps, or defaults to FocusZoneDirection.vertical\\n     */\\n    private _getFocusZoneDirection;\\n    private _onRenderSubMenu;\\n    private _onRenderMenuList;\\n    /**\\n     * !!!IMPORTANT!!! Avoid mutating `item: IContextualMenuItem` argument. It will\\n     * cause the menu items to always re-render because the component update is based on shallow comparison.\\n     */\\n    private _renderMenuItem;\\n    private _defaultMenuItemRenderer;\\n    private _renderSectionItem;\\n    private _renderListItem;\\n    private _renderSeparator;\\n    private _renderNormalItem;\\n    private _renderHeaderMenuItem;\\n    private _renderAnchorMenuItem;\\n    private _renderButtonItem;\\n    private _renderSplitButton;\\n    private _onKeyDown;\\n    private _shouldHandleKeyDown;\\n    private _onMenuFocusCapture;\\n    private _onKeyUp;\\n    /**\\n     * We close the menu on key up only if ALL of the following are true:\\n     * - Most recent key down was alt or meta (command)\\n     * - The alt/meta key down was NOT followed by some other key (such as down/up arrow to\\n     *   expand/collapse the menu)\\n     * - We're not on a Mac (or iOS)\\n     *\\n     * This is because on Windows, pressing alt moves focus to the application menu bar or similar,\\n     * closing any open context menus. There is not a similar behavior on Macs.\\n     */\\n    private _shouldHandleKeyUp;\\n    /**\\n     * Returns true if the key for the event is alt (Mac option) or meta (Mac command).\\n     */\\n    private _isAltOrMeta;\\n    /**\\n     * Calls `shouldHandleKey` to determine whether the keyboard event should be handled;\\n     * if so, stops event propagation and dismisses menu(s).\\n     * @param ev - The keyboard event.\\n     * @param shouldHandleKey - Returns whether we should handle this keyboard event.\\n     * @param dismissAllMenus - If true, dismiss all menus. Otherwise, dismiss only the current menu.\\n     * Only does anything if `shouldHandleKey` returns true.\\n     * @returns Whether the event was handled.\\n     */\\n    private _keyHandler;\\n    /**\\n     * Checks if the submenu should be closed\\n     */\\n    private _shouldCloseSubMenu;\\n    private _onMenuKeyDown;\\n    /**\\n     * Scroll handler for the callout to make sure the mouse events\\n     * for updating focus are not interacting during scroll\\n     */\\n    private _onScroll;\\n    private _onItemMouseEnterBase;\\n    private _onItemMouseMoveBase;\\n    private _shouldIgnoreMouseEvent;\\n    private _onMouseItemLeave;\\n    /**\\n     * Handles updating focus when mouseEnter or mouseMove fire.\\n     * As part of updating focus, This function will also update\\n     * the expand/collapse state accordingly.\\n     */\\n    private _updateFocusOnMouseEvent;\\n    private _onItemMouseDown;\\n    private _onItemClick;\\n    private _onItemClickBase;\\n    private _onAnchorClick;\\n    private _executeItemClick;\\n    private _onItemKeyDown;\\n    private _cancelSubMenuTimer;\\n    private _onItemSubMenuExpand;\\n    private _getSubmenuProps;\\n    private _findItemByKey;\\n    /**\\n     * Returns the item that mathes a given key if any.\\n     * @param key - The key of the item to match\\n     * @param items - The items to look for the key\\n     */\\n    private _findItemByKeyFromItems;\\n    /**\\n     * This function is called ASYNCHRONOUSLY, and so there is a chance it is called\\n     * after the component is unmounted. The _mounted property is added to prevent\\n     * from calling setState() after unmount. Do NOT copy this pattern in synchronous\\n     * code.\\n     */\\n    private _onSubMenuDismiss;\\n    private _setTargetWindowAndElement;\\n    private _getSubMenuId;\\n    private _onPointerAndTouchEvent;\\n}\\n\\n/**\\n * ContextualMenuItem description\\n */\\nexport declare const ContextualMenuItem: React.FunctionComponent<IContextualMenuItemProps>;\\n\\nexport declare class ContextualMenuItemBase extends React.Component<IContextualMenuItemProps, {}> {\\n    constructor(props: IContextualMenuItemProps);\\n    render(): JSX.Element;\\n    openSubMenu: () => void;\\n    dismissSubMenu: () => void;\\n    dismissMenu: (dismissAll?: boolean | undefined) => void;\\n    private _renderLayout;\\n}\\n\\n/**\\n * {@docCategory ContextualMenu}\\n */\\nexport declare enum ContextualMenuItemType {\\n    Normal = 0,\\n    Divider = 1,\\n    Header = 2,\\n    Section = 3\\n}\\n\\n/**\\n * Corrects a hex color to have length 3 or 6. Defaults to white if too short.\\n * Does NOT check anything besides the length (such as valid characters) and does NOT handle\\n * hex values starting with # sign.\\n */\\nexport declare function correctHex(hex: string): string;\\n\\n/** Corrects an HSV color to fall within the valid range. */\\nexport declare function correctHSV(color: IHSV): IHSV;\\n\\n/** Corrects an RGB color to fall within the valid range.  */\\nexport declare function correctRGB(color: IRGB): IRGB;\\n\\n/**\\n * {@docCategory PeoplePicker}\\n */\\nexport declare function createGenericItem(name: string, currentValidationState: ValidationState): IGenericItem & {\\n    key: React.Key;\\n};\\n\\nexport declare function createItem(name: string, isValid: boolean): ISuggestionModel<IPersonaProps>;\\n\\n/**\\n * Converts a valid CSS color string to an RGB color.\\n * Note that hex colors *must* be prefixed with # to be considered valid.\\n * Alpha in returned color defaults to 100.\\n * Four and eight digit hex values (with alpha) are supported if the current browser supports them.\\n */\\nexport declare function cssColor(color?: string): IRGB | undefined;\\n\\nexport declare const DATAKTP_ARIA_TARGET = \\\"data-ktp-aria-target\\\";\\n\\nexport declare const DATAKTP_EXECUTE_TARGET = \\\"data-ktp-execute-target\\\";\\n\\nexport declare const DATAKTP_TARGET = \\\"data-ktp-target\\\";\\n\\n/**\\n * DatePicker description\\n */\\nexport declare const DatePicker: React.FunctionComponent<IDatePickerProps>;\\n\\nexport declare class DatePickerBase extends React.Component<IDatePickerProps, IDatePickerState> implements IDatePicker {\\n    static defaultProps: IDatePickerProps;\\n    private _calendar;\\n    private _datePickerDiv;\\n    private _textField;\\n    private _preventFocusOpeningPicker;\\n    private _id;\\n    constructor(props: IDatePickerProps);\\n    UNSAFE_componentWillReceiveProps(nextProps: IDatePickerProps): void;\\n    componentDidUpdate(prevProps: IDatePickerProps, prevState: IDatePickerState): void;\\n    render(): JSX.Element;\\n    focus(): void;\\n    reset(): void;\\n    private _setErrorMessage;\\n    private _onSelectDate;\\n    private _onCalloutPositioned;\\n    private _onTextFieldFocus;\\n    private _onTextFieldBlur;\\n    private _onTextFieldChanged;\\n    private _onTextFieldKeyDown;\\n    private _onTextFieldClick;\\n    private _onIconClick;\\n    private _showDatePickerPopup;\\n    private _dismissDatePickerPopup;\\n    /**\\n     * Callback for closing the calendar callout\\n     */\\n    private _calendarDismissed;\\n    private _handleEscKey;\\n    private _validateTextInput;\\n    private _getDefaultState;\\n    private _isDateOutOfBounds;\\n    private _getErrorMessage;\\n}\\nexport { DateRangeType }\\nexport { DayOfWeek }\\n\\nexport declare const DEFAULT_CELL_STYLE_PROPS: ICellStyleProps;\\n\\nexport declare const DEFAULT_MASK_CHAR = \\\"_\\\";\\n\\nexport declare const DEFAULT_ROW_HEIGHTS: {\\n    rowHeight: number;\\n    compactRowHeight: number;\\n};\\n\\n/**\\n * {@docCategory Button}\\n */\\nexport declare class DefaultButton extends React.Component<IButtonProps, {}> {\\n    render(): JSX.Element;\\n}\\n\\nexport declare type DefaultProps = Required<Pick<ISpinButtonProps, 'step' | 'min' | 'max' | 'disabled' | 'labelPosition' | 'label' | 'incrementButtonIcon' | 'decrementButtonIcon'>>;\\n\\n/**\\n * Component for rendering columns in a `DetailsList`.\\n *\\n * {@docCategory DetailsList}\\n */\\nexport declare class DetailsColumnBase extends React.Component<IDetailsColumnProps> {\\n    private _async;\\n    private _events;\\n    private _root;\\n    private _dragDropSubscription;\\n    private _classNames;\\n    constructor(props: IDetailsColumnProps);\\n    render(): JSX.Element;\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    componentDidUpdate(): void;\\n    private _onRenderColumnHeaderTooltip;\\n    private _onColumnClick;\\n    private _getColumnDragDropOptions;\\n    private _hasAccessibleLabel;\\n    private _renderAccessibleLabel;\\n    private _onDragStart;\\n    private _onDragEnd;\\n    private _updateHeaderDragInfo;\\n    private _onColumnContextMenu;\\n    private _onRootMouseDown;\\n    private _addDragDropHandling;\\n}\\n\\nexport declare const DetailsHeader: React.FunctionComponent<IDetailsHeaderBaseProps>;\\n\\nexport declare class DetailsHeaderBase extends React.Component<IDetailsHeaderBaseProps, IDetailsHeaderState> implements IDetailsHeader {\\n    static defaultProps: {\\n        selectAllVisibility: SelectAllVisibility;\\n        collapseAllVisibility: CollapseAllVisibility;\\n        useFastIcons: boolean;\\n    };\\n    private _classNames;\\n    private _rootElement;\\n    private _events;\\n    private _rootComponent;\\n    private _id;\\n    private _draggedColumnIndex;\\n    private _dropHintDetails;\\n    private _dragDropHelper;\\n    private _currentDropHintIndex;\\n    private _subscriptionObject;\\n    private _onDropIndexInfo;\\n    constructor(props: IDetailsHeaderBaseProps);\\n    componentDidMount(): void;\\n    componentDidUpdate(prevProps: IDetailsHeaderBaseProps): void;\\n    componentWillUnmount(): void;\\n    render(): JSX.Element;\\n    /** Set focus to the active thing in the focus area. */\\n    focus(): boolean;\\n    /**\\n     * Gets column reorder props from this.props. If the calling code is part of setting up or\\n     * handling drag/drop events, it's safe to assume that this method's return value is defined\\n     * (because drag/drop handling will only be set up if reorder props are given).\\n     */\\n    private _getColumnReorderProps;\\n    private _getHeaderDragDropOptions;\\n    private _updateDroppingState;\\n    private _isValidCurrentDropHintIndex;\\n    private _onDragOver;\\n    private _onDrop;\\n    /**\\n     * @returns whether or not the \\\"Select All\\\" checkbox column is hidden.\\n     */\\n    private _isCheckboxColumnHidden;\\n    private _updateDragInfo;\\n    private _resetDropHints;\\n    private _updateDropHintElement;\\n    private _getDropHintPositions;\\n    /**\\n     * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\\n     */\\n    private _computeDropHintToBeShown;\\n    private _isEventOnHeader;\\n    private _renderColumnSizer;\\n    private _renderColumnDivider;\\n    private _renderDropHint;\\n    private _onRenderColumnHeaderTooltip;\\n    /**\\n     * double click on the column sizer will auto ajust column width\\n     * to fit the longest content among current rendered rows.\\n     *\\n     * @param columnIndex - index of the column user double clicked\\n     * @param ev - mouse double click event\\n     */\\n    private _onSizerDoubleClick;\\n    /**\\n     * Called when the select all toggle is clicked.\\n     */\\n    private _onSelectAllClicked;\\n    private _onRootMouseDown;\\n    private _onRootMouseMove;\\n    private _onRootKeyDown;\\n    /**\\n     * mouse move event handler in the header\\n     * it will set isSizing state to true when user clicked on the sizer and move the mouse.\\n     *\\n     * @param ev - mouse move event\\n     */\\n    private _onSizerMouseMove;\\n    private _onSizerBlur;\\n    /**\\n     * mouse up event handler in the header\\n     * clear the resize related state.\\n     * This is to ensure we can catch double click event\\n     *\\n     * @param ev - mouse up event\\n     */\\n    private _onSizerMouseUp;\\n    private _onSelectionChanged;\\n    private _onToggleCollapseAll;\\n}\\n\\nexport declare const DetailsList: React.FunctionComponent<IDetailsListProps>;\\n\\nexport declare class DetailsListBase extends React.Component<IDetailsListProps, IDetailsListState> implements IDetailsList {\\n    static defaultProps: {\\n        layoutMode: DetailsListLayoutMode;\\n        selectionMode: SelectionMode;\\n        constrainMode: ConstrainMode;\\n        checkboxVisibility: CheckboxVisibility;\\n        isHeaderVisible: boolean;\\n        compact: boolean;\\n        useFastIcons: boolean;\\n    };\\n    private _async;\\n    private _root;\\n    private _header;\\n    private _groupedList;\\n    private _list;\\n    private _focusZone;\\n    private _selectionZone;\\n    private _selection;\\n    private _activeRows;\\n    private _dragDropHelper;\\n    private _initialFocusedIndex;\\n    private _columnOverrides;\\n    static getDerivedStateFromProps(nextProps: IDetailsListProps, previousState: IDetailsListState): IDetailsListState;\\n    constructor(props: IDetailsListProps);\\n    scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void;\\n    focusIndex(index: number, forceIntoFirstElement?: boolean, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void;\\n    getStartItemIndexInView(): number;\\n    componentWillUnmount(): void;\\n    componentDidUpdate(prevProps: IDetailsListProps, prevState: IDetailsListState): void;\\n    render(): JSX.Element;\\n    forceUpdate(): void;\\n    protected _onRenderRow: (props: IDetailsRowProps, defaultRender?: IRenderFunction<IDetailsRowProps> | undefined) => JSX.Element;\\n    private _getDerivedStateFromProps;\\n    private _onGroupExpandStateChanged;\\n    private _onColumnIsSizingChanged;\\n    private _getGroupNestingDepth;\\n    private _onRowDidMount;\\n    private _setFocusToRowIfPending;\\n    private _setFocusToRow;\\n    private _onRowWillUnmount;\\n    private _onToggleCollapse;\\n    private _forceListUpdates;\\n    private _notifyColumnsResized;\\n    private _adjustColumns;\\n    /** Returns adjusted columns, given the viewport size and layout mode. */\\n    private _getAdjustedColumns;\\n    /** Builds a set of columns based on the given columns mixed with the current overrides. */\\n    private _getFixedColumns;\\n    private _getJustifiedColumnsAfterResize;\\n    /** Builds a set of columns to fix within the viewport width. */\\n    private _getJustifiedColumns;\\n    private _onColumnResized;\\n    private _rememberCalculatedWidth;\\n    private _getColumnOverride;\\n    /**\\n     * Callback function when double clicked on the details header column resizer\\n     * which will measure the column cells of all the active rows and resize the\\n     * column to the max cell width.\\n     *\\n     * @param column - double clicked column definition\\n     * @param columnIndex - double clicked column index\\n     * TODO: min width 100 should be changed to const value and should be consistent with the\\n     * value used on _onSizerMove method in DetailsHeader\\n     */\\n    private _onColumnAutoResized;\\n    /**\\n     * Call back function when an element in FocusZone becomes active. It will translate it into item\\n     * and call onActiveItemChanged callback if specified.\\n     *\\n     * @param row - element that became active in Focus Zone\\n     * @param focus - event from Focus Zone\\n     */\\n    private _onActiveRowChanged;\\n    private _onBlur;\\n    private _getItemKey;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare enum DetailsListLayoutMode {\\n    /**\\n     * Lets the user resize columns and makes not attempt to fit them.\\n     */\\n    fixedColumns = 0,\\n    /**\\n     * Manages which columns are visible, tries to size them according to their min/max rules and drops\\n     * off columns that can't fit and have isCollapsible set.\\n     */\\n    justified = 1\\n}\\n\\nexport declare const DetailsRow: React.FunctionComponent<IDetailsRowBaseProps>;\\n\\nexport declare class DetailsRowBase extends React.Component<IDetailsRowBaseProps, IDetailsRowState> {\\n    private _events;\\n    private _root;\\n    private _cellMeasurer;\\n    private _focusZone;\\n    private _droppingClassNames;\\n    /** Whether this.props.onDidMount has been called */\\n    private _onDidMountCalled;\\n    private _dragDropSubscription;\\n    private _classNames;\\n    private _rowClassNames;\\n    static getDerivedStateFromProps(nextProps: IDetailsRowBaseProps, previousState: IDetailsRowState): IDetailsRowState;\\n    constructor(props: IDetailsRowBaseProps);\\n    componentDidMount(): void;\\n    componentDidUpdate(previousProps: IDetailsRowBaseProps): void;\\n    componentWillUnmount(): void;\\n    shouldComponentUpdate(nextProps: IDetailsRowBaseProps, nextState: IDetailsRowState): boolean;\\n    render(): JSX.Element;\\n    /**\\n     * measure cell at index. and call the call back with the measured cell width when finish measure\\n     *\\n     * @param index - The cell index\\n     * @param onMeasureDone - The call back function when finish measure\\n     */\\n    measureCell(index: number, onMeasureDone: (width: number) => void): void;\\n    focus(forceIntoFirstElement?: boolean): boolean;\\n    protected _onRenderCheck(props: IDetailsRowCheckProps): JSX.Element;\\n    private _onSelectionChanged;\\n    private _getRowDragDropOptions;\\n    /**\\n     * update isDropping state based on the input value, which is used to change style during drag and drop\\n     *\\n     * when change to true, that means drag enter. we will add default dropping class name\\n     * or the custom dropping class name (return result from onDragEnter) to the root elemet.\\n     *\\n     * when change to false, that means drag leave. we will remove the dropping class name from root element.\\n     *\\n     * @param newValue - New isDropping state value\\n     * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\\n     */\\n    private _updateDroppingState;\\n}\\n\\nexport declare const DetailsRowCheck: React.FunctionComponent<IDetailsRowCheckProps>;\\n\\n/**\\n * Component for rendering a row's cells in a `DetailsList`.\\n *\\n * {@docCategory DetailsList}\\n */\\nexport declare const DetailsRowFields: React.FunctionComponent<IDetailsRowFieldsProps>;\\n\\nexport declare const DetailsRowGlobalClassNames: {\\n    root: string;\\n    compact: string;\\n    cell: string;\\n    cellAnimation: string;\\n    cellCheck: string;\\n    check: string;\\n    cellMeasurer: string;\\n    listCellFirstChild: string;\\n    isContentUnselectable: string;\\n    isSelected: string;\\n    isCheckVisible: string;\\n    isRowHeader: string;\\n    fields: string;\\n};\\n\\nexport declare const Dialog: React.FunctionComponent<IDialogProps>;\\n\\nexport declare class DialogBase extends React.Component<IDialogProps, {}> {\\n    static defaultProps: IDialogProps;\\n    private _id;\\n    private _defaultTitleTextId;\\n    private _defaultSubTextId;\\n    constructor(props: IDialogProps);\\n    render(): JSX.Element;\\n    private _getSubTextId;\\n    private _getTitleTextId;\\n}\\n\\nexport declare const DialogContent: React.FunctionComponent<IDialogContentProps>;\\n\\nexport declare class DialogContentBase extends React.Component<IDialogContentProps, {}> {\\n    static defaultProps: IDialogContentProps;\\n    constructor(props: IDialogContentProps);\\n    render(): JSX.Element;\\n    private _groupChildren;\\n}\\n\\nexport declare const DialogFooter: React.FunctionComponent<IDialogFooterProps>;\\n\\nexport declare class DialogFooterBase extends React.Component<IDialogFooterProps, {}> {\\n    private _classNames;\\n    constructor(props: IDialogFooterProps);\\n    render(): JSX.Element;\\n    private _renderChildrenAsActions;\\n}\\n\\n/**\\n * {@docCategory Dialog}\\n */\\nexport declare enum DialogType {\\n    /** Standard dialog */\\n    normal = 0,\\n    /** Dialog with large header banner */\\n    largeHeader = 1,\\n    /** Dialog with an 'x' close button in the upper-right corner */\\n    close = 2\\n}\\n\\nexport declare const DirectionalHint: {\\n    /**\\n     * Appear above the target element, with the left edges of the callout and target aligning.\\n     */\\n    topLeftEdge: 0;\\n    /**\\n     * Appear above the target element, with the centers of the callout and target aligning.\\n     */\\n    topCenter: 1;\\n    /**\\n     * Appear above the target element, with the right edges of the callout and target aligning.\\n     */\\n    topRightEdge: 2;\\n    /**\\n     * Appear above the target element, aligning with the target element such that the callout tends toward\\n     * the center of the screen.\\n     */\\n    topAutoEdge: 3;\\n    /**\\n     * Appear below the target element, with the left edges of the callout and target aligning.\\n     */\\n    bottomLeftEdge: 4;\\n    /**\\n     * Appear below the target element, with the centers of the callout and target aligning.\\n     */\\n    bottomCenter: 5;\\n    /**\\n     * Appear below the target element, with the right edges of the callout and target aligning.\\n     */\\n    bottomRightEdge: 6;\\n    /**\\n     * Appear below the target element, aligning with the target element such that the callout tends toward\\n     * the center of the screen.\\n     */\\n    bottomAutoEdge: 7;\\n    /**\\n     * Appear to the left of the target element, with the top edges of the callout and target aligning.\\n     */\\n    leftTopEdge: 8;\\n    /**\\n     * Appear to the left of the target element, with the centers of the callout and target aligning.\\n     */\\n    leftCenter: 9;\\n    /**\\n     * Appear to the left of the target element, with the bottom edges of the callout and target aligning.\\n     */\\n    leftBottomEdge: 10;\\n    /**\\n     * Appear to the right of the target element, with the top edges of the callout and target aligning.\\n     */\\n    rightTopEdge: 11;\\n    /**\\n     * Appear to the right of the target element, with the centers of the callout and target aligning.\\n     */\\n    rightCenter: 12;\\n    /**\\n     * Appear to the right of the target element, with the bottom edges of the callout and target aligning.\\n     */\\n    rightBottomEdge: 13;\\n};\\n\\nexport declare type DirectionalHint = typeof DirectionalHint[keyof typeof DirectionalHint];\\n\\nexport declare const DocumentCard: React.FunctionComponent<IDocumentCardProps>;\\n\\nexport declare const DocumentCardActions: React.FunctionComponent<IDocumentCardActionsProps>;\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\ndeclare class DocumentCardActionsBase extends React.Component<IDocumentCardActionsProps, any> {\\n    private _classNames;\\n    constructor(props: IDocumentCardActionsProps);\\n    render(): JSX.Element;\\n}\\n\\nexport declare const DocumentCardActivity: React.FunctionComponent<IDocumentCardActivityProps>;\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\ndeclare class DocumentCardActivityBase extends React.Component<IDocumentCardActivityProps, any> {\\n    private _classNames;\\n    constructor(props: IDocumentCardActivityProps);\\n    render(): JSX.Element | null;\\n    private _renderAvatars;\\n    private _renderAvatar;\\n    private _getNameString;\\n}\\n\\nexport declare const DocumentCardDetails: React.FunctionComponent<IDocumentCardDetailsProps>;\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\ndeclare class DocumentCardDetailsBase extends React.Component<IDocumentCardDetailsProps, any> {\\n    private _classNames;\\n    constructor(props: IDocumentCardDetailsProps);\\n    render(): JSX.Element;\\n}\\n\\nexport declare const DocumentCardImage: React.FunctionComponent<IDocumentCardImageProps>;\\n\\nexport declare const DocumentCardLocation: React.FunctionComponent<IDocumentCardLocationProps>;\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\ndeclare class DocumentCardLocationBase extends React.Component<IDocumentCardLocationProps, any> {\\n    private _classNames;\\n    constructor(props: IDocumentCardLocationProps);\\n    render(): JSX.Element;\\n}\\n\\nexport declare const DocumentCardLogo: React.FunctionComponent<IDocumentCardLogoProps>;\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\ndeclare class DocumentCardLogoBase extends React.Component<IDocumentCardLogoProps, any> {\\n    private _classNames;\\n    constructor(props: IDocumentCardLogoProps);\\n    render(): JSX.Element;\\n}\\n\\nexport declare const DocumentCardPreview: React.FunctionComponent<IDocumentCardPreviewProps>;\\n\\nexport declare const DocumentCardStatus: React.FunctionComponent<IDocumentCardStatusProps>;\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\ndeclare class DocumentCardStatusBase extends React.Component<IDocumentCardStatusProps, any> {\\n    private _classNames;\\n    constructor(props: IDocumentCardStatusProps);\\n    render(): JSX.Element;\\n}\\n\\nexport declare const DocumentCardTitle: React.FunctionComponent<IDocumentCardTitleProps>;\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\ndeclare class DocumentCardTitleBase extends React.Component<IDocumentCardTitleProps, IDocumentCardTitleState> {\\n    private _titleElement;\\n    private _measureTitleElement;\\n    private _titleTruncationTimer;\\n    private _classNames;\\n    private _async;\\n    private _events;\\n    constructor(props: IDocumentCardTitleProps);\\n    componentDidUpdate(): void;\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    render(): JSX.Element;\\n    private _truncateTitle;\\n    private _truncateWhenInAnimation;\\n    private _shrinkTitle;\\n    private _updateTruncation;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare enum DocumentCardType {\\n    /**\\n     * Standard DocumentCard.\\n     */\\n    normal = 0,\\n    /**\\n     * Compact layout. Displays the preview beside the details, rather than above.\\n     */\\n    compact = 1\\n}\\n\\nexport declare class DragDropHelper implements IDragDropHelper {\\n    private _dragEnterCounts;\\n    private _isDragging;\\n    private _dragData;\\n    private _selection;\\n    private _activeTargets;\\n    private _events;\\n    private _lastId;\\n    private _initialized;\\n    constructor(params: IDragDropHelperParams);\\n    dispose(): void;\\n    subscribe(root: HTMLElement, events: EventGroup, dragDropOptions: IDragDropOptions): {\\n        key: string;\\n        dispose(): void;\\n    };\\n    unsubscribe(root: HTMLElement, key: string): void;\\n    private _onDragEnd;\\n    /**\\n     * clear drag data when mouse up on body\\n     */\\n    private _onMouseUp;\\n    /**\\n     * clear drag data when mouse up outside of the document\\n     */\\n    private _onDocumentMouseUp;\\n    /**\\n     * when mouse move over a new drop target while dragging some items,\\n     * fire dragleave on the old target and fire dragenter to the new target\\n     * The target will handle style change on dragenter and dragleave events.\\n     */\\n    private _onMouseMove;\\n    /**\\n     * when mouse leave a target while dragging some items, fire dragleave to the target\\n     */\\n    private _onMouseLeave;\\n    /**\\n     * when mouse down on a draggable item, we start to track dragdata.\\n     */\\n    private _onMouseDown;\\n    /**\\n     * determine whether the child target is a descendant of the parent\\n     */\\n    private _isChild;\\n    private _isDraggable;\\n    private _isDroppable;\\n}\\n\\nexport declare const Dropdown: React.FunctionComponent<IDropdownProps>;\\n\\nexport declare class DropdownBase extends React.Component<IDropdownInternalProps, IDropdownState> implements IDropdown {\\n    static defaultProps: {\\n        options: any[];\\n    };\\n    private _host;\\n    private _focusZone;\\n    private _dropDown;\\n    private _id;\\n    private _labelId;\\n    private _listId;\\n    private _optionId;\\n    private _isScrollIdle;\\n    private readonly _scrollIdleDelay;\\n    private _scrollIdleTimeoutId;\\n    /** True if the most recent keydown event was for alt (option) or meta (command). */\\n    private _lastKeyDownWasAltOrMeta;\\n    private _sizePosCache;\\n    private _classNames;\\n    private _requestAnimationFrame;\\n    /** Flag for when we get the first mouseMove */\\n    private _gotMouseMove;\\n    /** Flag for tracking whether focus is triggered by click (alternatively triggered by keyboard nav) */\\n    private _isFocusedByClick;\\n    constructor(props: IDropdownProps);\\n    /**\\n     * All selected options\\n     */\\n    readonly selectedOptions: IDropdownOption[];\\n    componentWillUnmount(): void;\\n    UNSAFE_componentWillReceiveProps(newProps: IDropdownProps): void;\\n    componentDidUpdate(prevProps: IDropdownProps, prevState: IDropdownState): void;\\n    render(): JSX.Element;\\n    focus(shouldOpenOnFocus?: boolean): void;\\n    setSelectedIndex(event: React.FormEvent<HTMLDivElement>, index: number): void;\\n    private _onChange;\\n    /** Get either props.placeholder (new name) or props.placeHolder (old name) */\\n    private _getPlaceholder;\\n    private _copyArray;\\n    /**\\n     * Finds the next valid Dropdown option and sets the selected index to it.\\n     * @param stepValue - Value of how many items the function should traverse.  Should be -1 or 1.\\n     * @param index - Index of where the search should start\\n     * @param selectedIndex - The selectedIndex Dropdown's state\\n     * @returns The next valid dropdown option's index\\n     */\\n    private _moveIndex;\\n    /** Get text in dropdown input as a string */\\n    private _getTitle;\\n    /** Render text in dropdown input */\\n    private _onRenderTitle;\\n    /** Render placeholder text in dropdown input */\\n    private _onRenderPlaceholder;\\n    /** Render Callout or Panel container and pass in list */\\n    private _onRenderContainer;\\n    /** Render Caret Down Icon */\\n    private _onRenderCaretDown;\\n    /** Wrap item list in a FocusZone */\\n    private _renderFocusableList;\\n    /** Render List of items */\\n    private _onRenderList;\\n    private _onRenderItem;\\n    private _renderSeparator;\\n    private _renderHeader;\\n    private _renderOption;\\n    /** Render content of item (i.e. text/icon inside of button) */\\n    private _onRenderOption;\\n    /** Render custom label for drop down item */\\n    private _onRenderItemLabel;\\n    private _onPositioned;\\n    private _onItemClick;\\n    /**\\n     * Scroll handler for the callout to make sure the mouse events\\n     * for updating focus are not interacting during scroll\\n     */\\n    private _onScroll;\\n    private _onItemMouseEnter;\\n    private _onItemMouseMove;\\n    private _onMouseItemLeave;\\n    private _shouldIgnoreMouseEvent;\\n    private _onDismiss;\\n    /** Get all selected indexes for multi-select mode */\\n    private _getSelectedIndexes;\\n    private _getAllSelectedIndices;\\n    private _getSelectedIndex;\\n    private _onDropdownBlur;\\n    private _onDropdownKeyDown;\\n    private _onDropdownKeyUp;\\n    /**\\n     * Returns true if the key for the event is alt (Mac option) or meta (Mac command).\\n     */\\n    private _isAltOrMeta;\\n    /**\\n     * We close the menu on key up only if ALL of the following are true:\\n     * - Most recent key down was alt or meta (command)\\n     * - The alt/meta key down was NOT followed by some other key (such as down/up arrow to\\n     *   expand/collapse the menu)\\n     * - We're not on a Mac (or iOS)\\n     *\\n     * This is because on Windows, pressing alt moves focus to the application menu bar or similar,\\n     * closing any open context menus. There is not a similar behavior on Macs.\\n     */\\n    private _shouldHandleKeyUp;\\n    private _onZoneKeyDown;\\n    private _onZoneKeyUp;\\n    private _onDropdownClick;\\n    private _onDropdownMouseDown;\\n    private _onFocus;\\n    /**\\n     * Because the isDisabled prop is deprecated, we have had to repeat this logic all over the place.\\n     * This helper method avoids all the repetition.\\n     */\\n    private _isDisabled;\\n    private _onRenderLabel;\\n    /**\\n     * Returns true if dropdown should set to open on focus.\\n     * Otherwise, isOpen state should be toggled on click\\n     */\\n    private _shouldOpenOnFocus;\\n}\\n\\n/**\\n * {@docCategory Button}\\n */\\nexport declare enum ElementType {\\n    /** <button> element. */\\n    button = 0,\\n    /** <a> element. */\\n    anchor = 1\\n}\\n\\nexport declare const ExpandingCard: React.FunctionComponent<IExpandingCardProps>;\\n\\nexport declare class ExpandingCardBase extends React.Component<IExpandingCardProps, IExpandingCardState> {\\n    static defaultProps: {\\n        compactCardHeight: number;\\n        expandedCardHeight: number;\\n        directionalHintFixed: boolean;\\n    };\\n    private _classNames;\\n    private _expandedElem;\\n    private _async;\\n    constructor(props: IExpandingCardProps);\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    render(): JSX.Element;\\n    private _onKeyDown;\\n    private _onRenderCompactCard;\\n    private _onRenderExpandedCard;\\n    private _checkNeedsScroll;\\n}\\n\\n/**\\n * {@docCategory HoverCard}\\n */\\nexport declare enum ExpandingCardMode {\\n    /**\\n     * To have top compact card only\\n     */\\n    compact = 0,\\n    /**\\n     * To have both top compact and bottom expanded card\\n     */\\n    expanded = 1\\n}\\n\\n/**\\n * {@docCategory ExtendedPeoplePicker}\\n */\\nexport declare class ExtendedPeoplePicker extends BaseExtendedPeoplePicker {\\n}\\n\\nexport declare class ExtendedSelectedItem extends React.Component<ISelectedPeopleItemProps, IPeoplePickerItemState> {\\n    protected persona: React.RefObject<HTMLDivElement>;\\n    constructor(props: ISelectedPeopleItemProps);\\n    render(): JSX.Element;\\n    private _onClickIconButton;\\n}\\n\\nexport declare const Fabric: import(\\\"react\\\").ForwardRefExoticComponent<IFabricProps & import(\\\"react\\\").RefAttributes<FabricBase>>;\\n\\nexport declare class FabricBase extends React.Component<IFabricProps> {\\n    private _rootElement;\\n    private _removeClassNameFromBody?;\\n    render(): JSX.Element;\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    private _getClassNames;\\n    private _addClassNameToBody;\\n}\\n\\nexport declare enum FabricSlots {\\n    themePrimary = 0,\\n    themeLighterAlt = 1,\\n    themeLighter = 2,\\n    themeLight = 3,\\n    themeTertiary = 4,\\n    themeSecondary = 5,\\n    themeDarkAlt = 6,\\n    themeDark = 7,\\n    themeDarker = 8,\\n    neutralLighterAlt = 9,\\n    neutralLighter = 10,\\n    neutralLight = 11,\\n    neutralQuaternaryAlt = 12,\\n    neutralQuaternary = 13,\\n    neutralTertiaryAlt = 14,\\n    neutralTertiary = 15,\\n    neutralSecondary = 16,\\n    neutralPrimaryAlt = 17,\\n    neutralPrimary = 18,\\n    neutralDark = 19,\\n    black = 20,\\n    white = 21\\n}\\n\\n/**\\n * The Facepile shows a list of faces or initials in a horizontal lockup. Each circle represents a person.\\n */\\nexport declare const Facepile: React.FunctionComponent<IFacepileProps>;\\n\\n/**\\n * FacePile with no default styles.\\n * [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Component-Styling)\\n */\\nexport declare class FacepileBase extends React.Component<IFacepileProps, {}> {\\n    static defaultProps: IFacepileProps;\\n    private _ariaDescriptionId;\\n    private _classNames;\\n    constructor(props: IFacepileProps);\\n    render(): JSX.Element;\\n    protected onRenderAriaDescription(): \\\"\\\" | JSX.Element | undefined;\\n    private _onRenderVisiblePersonas;\\n    private _getPersonaControl;\\n    private _getPersonaCoinControl;\\n    private _getElementWithOnClickEvent;\\n    private _getElementWithoutOnClickEvent;\\n    private _getElementProps;\\n    private _getOverflowElement;\\n    private _getDescriptiveOverflowElement;\\n    private _getIconElement;\\n    private _getAddNewElement;\\n    private _onPersonaClick;\\n    private _onPersonaMouseMove;\\n    private _onPersonaMouseOut;\\n    private _renderInitials;\\n    private _renderInitialsNotPictured;\\n}\\nexport { FirstWeekOfYear }\\n\\nexport declare class FloatingPeoplePicker extends BaseFloatingPeoplePicker {\\n    static defaultProps: any;\\n}\\n\\n/**\\n * A special Callout that uses FocusTrapZone to trap focus\\n * @param props - Props for the component\\n */\\nexport declare const FocusTrapCallout: React.FunctionComponent<IFocusTrapCalloutProps>;\\n\\nexport declare class FocusTrapZone extends React.Component<IFocusTrapZoneProps, {}> implements IFocusTrapZone {\\n    private static _focusStack;\\n    private _root;\\n    private _firstBumper;\\n    private _lastBumper;\\n    private _hasFocus;\\n    private _unmodalize?;\\n    private _previouslyFocusedElementOutsideTrapZone;\\n    private _previouslyFocusedElementInTrapZone?;\\n    private _disposeFocusHandler;\\n    private _disposeClickHandler;\\n    constructor(props: IFocusTrapZoneProps);\\n    componentDidMount(): void;\\n    UNSAFE_componentWillReceiveProps(nextProps: IFocusTrapZoneProps): void;\\n    componentDidUpdate(prevProps: IFocusTrapZoneProps): void;\\n    componentWillUnmount(): void;\\n    render(): JSX.Element;\\n    focus(): void;\\n    private _focusAsync;\\n    private _onRootFocus;\\n    private _onRootBlur;\\n    private _onFirstBumperFocus;\\n    private _onLastBumperFocus;\\n    private _onBumperFocus;\\n    private _bringFocusIntoZone;\\n    private _returnFocusToInitiator;\\n    private _updateEventHandlers;\\n    private _onFocusCapture;\\n    private _isBumper;\\n    private _forceFocusInTrap;\\n    private _forceClickInTrap;\\n    private _getDocument;\\n}\\n\\n/**\\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\\n * {@docCategory Icon}\\n */\\nexport declare const FontIcon: React.FunctionComponent<IFontIconProps>;\\n\\nexport declare function getAllSelectedOptions(options: ISelectableOption[], selectedIndices: number[]): ISelectableOption[];\\n\\n/**\\n * Gets the aria-describedby value to put on the component with this keytip.\\n *\\n * @param keySequences - KeySequences of the keytip.\\n * @returns The aria-describedby value to set on the component with this keytip.\\n */\\nexport declare function getAriaDescribedBy(keySequences: string[]): string;\\n\\nexport declare function getBackgroundShade(color: IColor, shade: Shade, isInverted?: boolean): IColor | null;\\n\\nexport declare function getBoundsFromTargetWindow(target: Element | MouseEvent | Point | Rectangle | null, targetWindow: IWindowWithSegments): IRectangle;\\n\\n/**\\n * Converts an HSV color (and optional alpha value) to a color object.\\n * If `a` is not given, a default of 100 is used.\\n * Hex in the returned value will *not* be prefixed with #.\\n * If `a` is unspecified or 100, the result's `str` property will contain a hex value\\n * (*not* prefixed with #)\\n */\\nexport declare function getColorFromHSV(hsv: IHSV, a?: number): IColor;\\n\\n/** Converts an RGBA color to a color object (alpha defaults to 100). */\\nexport declare function getColorFromRGBA(rgba: IRGB): IColor;\\n\\n/**\\n * Converts a CSS color string to a color object.\\n * Note that hex colors *must* be prefixed with # to be considered valid.\\n *\\n * `inputColor` will be used unmodified as the `str` property of the returned object.\\n * Alpha defaults to 100 if not specified in `inputColor`.\\n * Returns undefined if the color string is invalid/not recognized.\\n */\\nexport declare function getColorFromString(inputColor: string): IColor | undefined;\\n\\nexport declare function getContrastRatio(color1: IColor, color2: IColor): number;\\n\\nexport declare const getDetailsRowStyles: (props: IDetailsRowStyleProps) => IDetailsRowStyles;\\n\\n/**\\n * Memoized helper for rendering a FontIcon.\\n * @param iconName - The name of the icon to use from the icon font.\\n * @param className - Class name for styling the icon.\\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\\n * {@docCategory Icon}\\n */\\nexport declare const getFontIcon: (iconName: string, className?: string | undefined, ariaLabel?: string | undefined) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | null;\\n\\n/**\\n * Converts a color hue to an HTML color string (with # prefix).\\n * This implementation ignores all components of `color` except hue.\\n */\\nexport declare function getFullColorString(color: IColor): string;\\n\\nexport declare const getIconContent: (iconName?: string | undefined) => IIconContent | null;\\n\\n/**\\n * Gets the maximum height that a rectangle can have in order to fit below or above a target.\\n * If the directional hint specifies a left or right edge (i.e. leftCenter) it will limit the height to the topBorder\\n * of the target given.\\n * If no bounds are provided then the window is treated as the bounds.\\n */\\nexport declare function getMaxHeight(target: Element | MouseEvent | Point | Rectangle, targetEdge: DirectionalHint, gapSpace?: number, bounds?: IRectangle, coverTarget?: boolean): number;\\n\\n/**\\n * Returns a simple object is able to store measurements with a given key.\\n */\\nexport declare const getMeasurementCache: () => {\\n    /**\\n     * Checks if the provided data has a cacheKey. If it has a cacheKey and there is a\\n     * corresponding entry in the measurementsCache, then it will return that value.\\n     * Returns undefined otherwise.\\n     */\\n    getCachedMeasurement: (data: any) => number | undefined;\\n    /**\\n     * Should be called whenever there is a new measurement associated with a given data object.\\n     * If the data has a cacheKey, store that measurement in the measurementsCache.\\n     */\\n    addMeasurementToCache: (data: any, measurement: number) => void;\\n};\\n\\nexport declare const getMenuItemStyles: (theme: ITheme) => IMenuItemStyles;\\n\\n/**\\n * Returns a function that is able to compute the next state for the ResizeGroup given the current\\n * state and any measurement updates.\\n */\\nexport declare const getNextResizeGroupStateProvider: (measurementCache?: {\\n    /**\\n     * Checks if the provided data has a cacheKey. If it has a cacheKey and there is a\\n     * corresponding entry in the measurementsCache, then it will return that value.\\n     * Returns undefined otherwise.\\n     */\\n    getCachedMeasurement: (data: any) => number | undefined;\\n    /**\\n     * Should be called whenever there is a new measurement associated with a given data object.\\n     * If the data has a cacheKey, store that measurement in the measurementsCache.\\n     */\\n    addMeasurementToCache: (data: any, measurement: number) => void;\\n}) => {\\n    getNextState: (props: IResizeGroupProps, currentState: IResizeGroupState, getElementToMeasureDimension: () => number, newContainerDimension?: number | undefined) => IResizeGroupState | undefined;\\n    shouldRenderDataForMeasurement: (dataToMeasure: any) => boolean;\\n    getInitialResizeGroupState: (data: any) => IResizeGroupState;\\n};\\n\\n/**\\n * Returns the opposite edge of the given RectangleEdge.\\n */\\nexport declare function getOppositeEdge(edge: RectangleEdge): RectangleEdge;\\n\\n/**\\n * Gets the hex color string (prefixed with #) for the given persona props.\\n * This is the logic used internally by the Persona control.\\n * @param props - Current persona props\\n * @returns Hex color string prefixed with #\\n */\\nexport declare function getPersonaInitialsColor(props: Pick<IPersonaProps, 'primaryText' | 'text' | 'initialsColor'>): string;\\n\\n/**\\n * Given a color and a shade specification, generates the requested shade of the color.\\n * Logic:\\n * if white\\n *  darken via tables defined above\\n * if black\\n *  lighten\\n * if light\\n *  strongen\\n * if dark\\n *  soften\\n * else default\\n *  soften or strongen depending on shade#\\n * @param color - The base color whose shade is to be computed\\n * @param shade - The shade of the base color to compute\\n * @param isInverted - Default false. Whether the given theme is inverted (reverse strongen/soften logic)\\n */\\nexport declare function getShade(color: IColor, shade: Shade, isInverted?: boolean): IColor | null;\\n\\nexport declare const getSplitButtonClassNames: (styles: IButtonStyles, disabled: boolean, expanded: boolean, checked: boolean, primaryDisabled?: boolean | undefined) => ISplitButtonClassNames;\\n\\nexport declare function getSubmenuItems(item: IContextualMenuItem): IContextualMenuItem[] | undefined;\\n\\n/**\\n * @deprecated - use ButtonGrid instead\\n */\\nexport declare const Grid: React.FunctionComponent<IButtonGridProps>;\\n\\n/**\\n * @deprecated - use ButtonGridCell instead\\n */\\nexport declare const GridCell: typeof ButtonGridCell;\\n\\nexport declare const GroupedList: React.FunctionComponent<IGroupedListProps>;\\n\\nexport declare class GroupedListBase extends React.Component<IGroupedListProps, IGroupedListState> implements IGroupedList {\\n    static defaultProps: {\\n        selectionMode: SelectionMode;\\n        isHeaderVisible: boolean;\\n        groupProps: {};\\n        compact: boolean;\\n    };\\n    private _classNames;\\n    private _list;\\n    private _isSomeGroupExpanded;\\n    static getDerivedStateFromProps(nextProps: IGroupedListProps, previousState: IGroupedListState): IGroupedListState;\\n    constructor(props: IGroupedListProps);\\n    scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void;\\n    getStartItemIndexInView(): number;\\n    componentDidMount(): void;\\n    render(): JSX.Element;\\n    forceUpdate(): void;\\n    toggleCollapseAll(allCollapsed: boolean): void;\\n    private _setGroupsCollapsedState;\\n    private _renderGroup;\\n    private _returnOne;\\n    private _getDefaultGroupItemLimit;\\n    private _getGroupItemLimit;\\n    private _getGroupHeight;\\n    private _getPageHeight;\\n    private _getGroupKey;\\n    private _getGroupNestingDepth;\\n    private _onToggleCollapse;\\n    private _onToggleSelectGroup;\\n    private _isInnerZoneKeystroke;\\n    private _forceListUpdates;\\n    private _onToggleSummarize;\\n    private _getPageSpecification;\\n    private _computeIsSomeGroupExpanded;\\n    private _updateIsSomeGroupExpanded;\\n}\\n\\nexport declare class GroupedListSection extends React.Component<IGroupedListSectionProps, IGroupedListSectionState> {\\n    private _root;\\n    private _list;\\n    private _subGroupRefs;\\n    private _id;\\n    private _events;\\n    private _dragDropSubscription;\\n    private _droppingClassName;\\n    constructor(props: IGroupedListSectionProps);\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    componentDidUpdate(previousProps: IGroupedListSectionProps): void;\\n    render(): JSX.Element;\\n    forceUpdate(): void;\\n    forceListUpdate(): void;\\n    private _onRenderGroupHeader;\\n    private _onRenderGroupShowAll;\\n    private _onRenderGroupFooter;\\n    private _onSelectionChange;\\n    private _onRenderGroupCell;\\n    private _onRenderGroup;\\n    private _renderSubGroup;\\n    private _returnOne;\\n    private _getGroupKey;\\n    /**\\n     * collect all the data we need to enable drag/drop for a group\\n     */\\n    private _getGroupDragDropOptions;\\n    /**\\n     * update groupIsDropping state based on the input value, which is used to change style during drag and drop\\n     *\\n     * @param newValue - new isDropping state value\\n     * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\\n     */\\n    private _updateDroppingState;\\n    /**\\n     * get the correct css class to reflect the dropping state for a given group\\n     *\\n     * If the group is the current drop target, return the default dropping class name\\n     * Otherwise, return '';\\n     *\\n     */\\n    private _getDroppingClassName;\\n}\\n\\nexport declare const GroupFooter: React.FunctionComponent<IGroupFooterProps>;\\n\\nexport declare const GroupHeader: React.FunctionComponent<IGroupHeaderProps>;\\n\\nexport declare const GroupShowAll: React.FunctionComponent<IGroupShowAllProps>;\\n\\nexport declare const GroupSpacer: React.FunctionComponent<IGroupSpacerProps>;\\n\\n/** Regular expression matching only valid hexadecimal chars */\\nexport declare const HEX_REGEX: RegExp;\\n\\nexport declare const HoverCard: React.FunctionComponent<IHoverCardProps>;\\n\\nexport declare class HoverCardBase extends React.Component<IHoverCardProps, IHoverCardState> implements IHoverCard {\\n    static defaultProps: {\\n        cardOpenDelay: number;\\n        cardDismissDelay: number;\\n        expandedCardOpenDelay: number;\\n        instantOpenOnClick: boolean;\\n        setInitialFocus: boolean;\\n        openHotKey: number;\\n        type: HoverCardType;\\n    };\\n    private _hoverCard;\\n    private _dismissTimerId;\\n    private _openTimerId;\\n    private _currentMouseTarget;\\n    private _nativeDismissEvent;\\n    private _childDismissEvent;\\n    private _classNames;\\n    private _async;\\n    private _events;\\n    constructor(props: IHoverCardProps);\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    componentDidUpdate(prevProps: IHoverCardProps, prevState: IHoverCardState): void;\\n    dismiss: (withTimeOut?: boolean | undefined) => void;\\n    render(): JSX.Element;\\n    private _getTargetElement;\\n    private _shouldBlockHoverCard;\\n    private _cardOpen;\\n    private _executeCardOpen;\\n    /**\\n     * Hide HoverCard\\n     * How we dismiss the card depends on where the callback is coming from.\\n     * This is provided by the `isNativeEvent` argument.\\n     *  true: Event is coming from event listeners set up in componentDidMount.\\n     *  false: Event is coming from the `onLeave` prop from the HoverCard component.\\n     */\\n    private _cardDismiss;\\n    private _setDismissedState;\\n    private _instantOpenAsExpanded;\\n    private _setEventListeners;\\n}\\n\\n/**\\n * {@docCategory HoverCard}\\n */\\nexport declare enum HoverCardType {\\n    /**\\n     * Plain card consisting of one part responsive to the size of content.\\n     */\\n    plain = \\\"PlainCard\\\",\\n    /**\\n     * File card consisting of two parts: compact and expanded. Has some default sizes if not specified.\\n     */\\n    expanding = \\\"ExpandingCard\\\"\\n}\\n\\n/** Converts HSL components to an HSV color. */\\nexport declare function hsl2hsv(h: number, s: number, l: number): IHSV;\\n\\n/** Converts HSL components to an RGB color. Does not set the alpha value. */\\nexport declare function hsl2rgb(h: number, s: number, l: number): IRGB;\\n\\n/** Converts HSV components to a hex color string (without # prefix). */\\nexport declare function hsv2hex(h: number, s: number, v: number): string;\\n\\n/** Converts HSV components to an HSL color. */\\nexport declare function hsv2hsl(h: number, s: number, v: number): IHSL;\\n\\n/** Converts HSV components to an RGB color. Does not set the alpha value. */\\nexport declare function hsv2rgb(h: number, s: number, v: number): IRGB;\\n\\n/**\\n * {@docCategory IAccessiblePopupProps}\\n */\\nexport declare interface IAccessiblePopupProps {\\n    /**\\n     * Sets the element to focus on when exiting the control's FocusTrapZone.\\n     * @defaultvalue The `element.target` that triggered the control opening.\\n     */\\n    elementToFocusOnDismiss?: HTMLElement;\\n    /**\\n     * If false (the default), the control's FocusTrapZone will restore focus to the element which\\n     * activated it once the trap zone is unmounted or disabled. Set to true to disable this behavior.\\n     * @defaultvalue false\\n     */\\n    ignoreExternalFocusing?: boolean;\\n    /**\\n     * Whether control should force focus inside its focus trap zone.\\n     * @defaultvalue true\\n     */\\n    forceFocusInsideTrap?: boolean;\\n    /**\\n     * Class name (not actual selector) for first focusable item. Do not append a dot.\\n     */\\n    firstFocusableSelector?: string | (() => string);\\n    /**\\n     * Aria label on close button.\\n     */\\n    closeButtonAriaLabel?: string;\\n    /**\\n     * Whether this control will allow clicks outside its FocusTrapZone.\\n     * @defaultvalue false\\n     */\\n    isClickableOutsideFocusTrap?: boolean;\\n}\\n\\n/**\\n * {@docCategory ActivityItem}\\n */\\nexport declare interface IActivityItemProps extends React.AllHTMLAttributes<HTMLElement> {\\n    /**\\n     * An element describing the activity that took place. If no activityDescription, activityDescriptionText, or\\n     * onRenderActivityDescription are included, no description of the activity is shown.\\n     */\\n    activityDescription?: React.ReactNode[] | React.ReactNode;\\n    /**\\n     * Text describing the activity that occurred and naming the people involved in it.\\n     * Deprecated, use `activityDescription` instead.\\n     * @deprecated Use `activityDescription` instead.\\n     */\\n    activityDescriptionText?: string;\\n    /**\\n     * An element containing an icon shown next to the activity item.\\n     */\\n    activityIcon?: React.ReactNode;\\n    /**\\n     * If activityIcon is not set, then the persona props in this array will be used as the icon for this activity item.\\n     */\\n    activityPersonas?: Array<IPersonaSharedProps>;\\n    /**\\n     * An element containing the text of comments or \\\\@mention messages.\\n     * If no comments, commentText, or onRenderComments are included, no comments are shown.\\n     */\\n    comments?: React.ReactNode[] | React.ReactNode;\\n    /**\\n     * Text of comments or \\\\@mention messages.\\n     * Deprecated, use `comments` instead.\\n     * @deprecated Use `comments` instead.\\n     */\\n    commentText?: string;\\n    /**\\n     * Indicated if the compact styling should be used.\\n     */\\n    isCompact?: boolean;\\n    /**\\n     * A renderer for the description of the current activity.\\n     */\\n    onRenderActivityDescription?: IRenderFunction<IActivityItemProps>;\\n    /**\\n     * A renderer that adds the text of a comment below the activity description.\\n     */\\n    onRenderComments?: IRenderFunction<IActivityItemProps>;\\n    /**\\n     * A renderer to create the icon next to the activity item.\\n     */\\n    onRenderIcon?: IRenderFunction<IActivityItemProps>;\\n    /**\\n     * A renderer adds a time stamp. If not included, timeStamp is shown as plain text below the activity.\\n     */\\n    onRenderTimeStamp?: IRenderFunction<IActivityItemProps>;\\n    /**\\n     * Optional styling for the elements within the Activity Item.\\n     */\\n    styles?: IActivityItemStyles;\\n    /**\\n     * Element shown as a timestamp on this activity. If not included, no timestamp is shown.\\n     */\\n    timeStamp?: string | React.ReactNode[] | React.ReactNode;\\n    /**\\n     * Beacon color one\\n     */\\n    beaconColorOne?: string;\\n    /**\\n     * Beacon color two\\n     */\\n    beaconColorTwo?: string;\\n    /**\\n     * Enables/Disables the beacon that radiates\\n     * from the center of the center of the activity icon. Signals an activity has started.\\n     * @defaultvalue false\\n     */\\n    animateBeaconSignal?: boolean;\\n}\\n\\n/**\\n * {@docCategory ActivityItem}\\n */\\nexport declare interface IActivityItemStyles {\\n    /**\\n     * Styles applied to the root activity item container.\\n     */\\n    root?: IStyle;\\n    /**\\n     * Styles applied to the root activity item container.\\n     */\\n    pulsingBeacon?: IStyle;\\n    /**\\n     * Styles applied to the main container of the activity's description.\\n     */\\n    activityContent?: IStyle;\\n    /**\\n     * Styles applied to the persona of the user that did this activity.\\n     */\\n    activityPersona?: IStyle;\\n    /**\\n     * Styles applied to the activity's description.\\n     */\\n    activityText?: IStyle;\\n    /**\\n     * Styles applied to the icon indicating the type of the activity. Only shown when personas are unavailable.\\n     */\\n    activityTypeIcon?: IStyle;\\n    /**\\n     * Styles applied to the text of comments.\\n     */\\n    commentText?: IStyle;\\n    /**\\n     * Styles applied to personas when two users are involved in a single activity.\\n     */\\n    doublePersona?: IStyle;\\n    /**\\n     * Styles applied to root in the compact variant.\\n     */\\n    isCompactRoot?: IStyle;\\n    /**\\n     * Styles applied to personas and icons in the compact variant.\\n     */\\n    isCompactIcon?: IStyle;\\n    /**\\n     * Styles applied to main text container in the compact variant.\\n     */\\n    isCompactContent?: IStyle;\\n    /**\\n     * Styles applied to personas in the compact variant.\\n     */\\n    isCompactPersona?: IStyle;\\n    /**\\n     * Styles applied to a wrapper around personas in the compact variant.\\n     */\\n    isCompactPersonaContainer?: IStyle;\\n    /**\\n     * Styles applied to the container of the persona image or activity type icon.\\n     */\\n    personaContainer?: IStyle;\\n    /**\\n     * Styles applied to the timestamp at the end of each activity item.\\n     */\\n    timeStamp?: IStyle;\\n    /**\\n     * Styles applied to the timestamp in compact mode.\\n     * This can occur if a host overrides the render behavior to force the timestamp to render.\\n     */\\n    isCompactTimeStamp?: IStyle;\\n}\\n\\n/**\\n * {@docCategory Announced}\\n */\\nexport declare interface IAnnouncedProps extends React.Props<AnnouncedBase>, React.HTMLAttributes<HTMLDivElement> {\\n    /**\\n     * The status message provided as screen reader output\\n     */\\n    message?: string;\\n    /**\\n     * Priority with which the screen reader should treat updates to this region\\n     * @default 'polite'\\n     */\\n    'aria-live'?: 'off' | 'polite' | 'assertive';\\n    /**\\n     * Optionally render the root of this component as another component type or primitive.\\n     * The custom type **must** preserve any children or native props passed in.\\n     * @default 'div'\\n     */\\n    as?: React.ElementType;\\n    /** Call to provide customized styling that will layer on top of the variant rules. */\\n    styles?: IStyleFunctionOrObject<{}, IAnnouncedStyles>;\\n}\\n\\n/**\\n * {@docCategory Announced}\\n */\\nexport declare type IAnnouncedStyleProps = Pick<IAnnouncedProps, 'className'>;\\n\\n/**\\n * {@docCategory Announced}\\n */\\nexport declare interface IAnnouncedStyles {\\n    /**\\n     * Style override for the root element.\\n     */\\n    root: IStyle;\\n    /**\\n     * Style override for the screen reader text.\\n     */\\n    screenReaderText: IStyle;\\n}\\n\\n/**\\n * {@docCategory Autofill}\\n */\\nexport declare interface IAutofill {\\n    /**\\n     * The current index of the cursor in the input area. Returns -1 if the input element\\n     * is not ready.\\n     */\\n    cursorLocation: number | null;\\n    /**\\n     * A boolean for whether or not there is a value selected in the input area.\\n     */\\n    isValueSelected: boolean;\\n    /**\\n     * The current text value that the user has entered.\\n     */\\n    value: string;\\n    /**\\n     * The current index of where the selection starts. Returns -1 if the input element\\n     * is not ready.\\n     */\\n    selectionStart: number | null;\\n    /**\\n     * the current index of where the selection ends. Returns -1 if the input element\\n     * is not ready.\\n     */\\n    selectionEnd: number | null;\\n    /**\\n     * The current input element.\\n     */\\n    inputElement: HTMLInputElement | null;\\n    /**\\n     * Focus the input element.\\n     */\\n    focus(): void;\\n    /**\\n     * Clear all text in the input. Sets value to '';\\n     */\\n    clear(): void;\\n}\\n\\n/**\\n * {@docCategory Autofill}\\n */\\nexport declare interface IAutofillProps extends React.InputHTMLAttributes<HTMLInputElement | Autofill> {\\n    /**\\n     * Gets the compoonent ref.\\n     */\\n    componentRef?: IRefObject<IAutofill>;\\n    /**\\n     * The suggested autofill value that will display.\\n     */\\n    suggestedDisplayValue?: string;\\n    /**\\n     * A callback for when the current input value changes.\\n     *\\n     * @param composing - true if the change event was triggered while the\\n     * inner input was in the middle of a multi-character composition.\\n     * (for example, jp-hiragana IME input)\\n     */\\n    onInputValueChange?: (newValue?: string, composing?: boolean) => void;\\n    /**\\n     * When the user uses left arrow, right arrow, clicks, or deletes text autofill is disabled\\n     * Since the user has taken control. It is automatically reenabled when the user enters text and the\\n     * cursor is at the end of the text in the input box. This specifies other key presses that will reenabled\\n     * autofill.\\n     * @defaultvalue [KeyCodes.down, KeyCodes.up]\\n     */\\n    enableAutofillOnKeyPress?: KeyCodes[];\\n    /**\\n     * The default value to be visible. This is different from placeholder\\n     * because it actually sets the current value of the picker\\n     * Note: This will only be set upon component creation\\n     * and will not update with subsequent prop updates.\\n     */\\n    defaultVisibleValue?: string;\\n    /**\\n     * Handler for checking and updating the value if needed\\n     * in componentWillReceiveProps\\n     *\\n     * @returns - the updated value to set, if needed\\n     */\\n    updateValueInWillReceiveProps?: () => string | null;\\n    /**\\n     * Handler for checking if the full value of the input should\\n     * be seleced in componentDidUpdate\\n     *\\n     * @returns - should the full value of the input be selected?\\n     */\\n    shouldSelectFullInputValueInComponentDidUpdate?: () => boolean;\\n    /**\\n     * A callback used to modify the input string.\\n     *\\n     * @param composing - true if the change event was triggered while the\\n     * inner input was in the middle of a multi-character composition.\\n     * (for example, jp-hiragana IME input)\\n     */\\n    onInputChange?: (value: string, composing: boolean) => string;\\n    /**\\n     * Should the value of the input be selected? True if we're focused on our input, false otherwise.\\n     * We need to explicitly not select the text in the autofill if we are no longer focused.\\n     * In IE11, selecting a input will also focus the input, causing other element's focus to be stolen.\\n     */\\n    preventValueSelection?: boolean;\\n}\\n\\nexport declare interface IAutofillState {\\n    displayValue?: string;\\n}\\n\\n/**\\n * Deprecated, do not use.\\n * @deprecated do not use, will be removed in 6.0\\n * {@docCategory Autofill}\\n */\\nexport declare interface IBaseAutoFill extends IAutofill {\\n}\\n\\n/**\\n * Deprecated, do not use.\\n * @deprecated do not use, will be removed in 6.0\\n * {@docCategory Autofill}\\n */\\nexport declare interface IBaseAutoFillProps extends IAutofillProps {\\n}\\n\\n/**\\n * {@docCategory Button}\\n */\\nexport declare interface IBaseButtonProps extends IButtonProps {\\n    baseClassName?: string;\\n    variantClassName?: string;\\n}\\n\\nexport declare interface IBaseButtonState {\\n    menuHidden: boolean;\\n}\\n\\n/**\\n * Interface containing props common for all types of cards.\\n */\\ndeclare interface IBaseCardProps<TComponent, TStyles, TStyleProps> extends React.HTMLAttributes<HTMLDivElement> {\\n    /**\\n     * Optional callback to access the TComponent interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<TComponent>;\\n    /**\\n     * Additional CSS class(es) to apply to the Card content wrapper div.\\n     */\\n    className?: string;\\n    /**\\n     * How the element should be positioned\\n     * @defaultvalue DirectionalHint.bottomLeftEdge\\n     */\\n    directionalHint?: DirectionalHint;\\n    /**\\n     * Make callout content show on the set side\\n     * @defaultvalue true\\n     */\\n    directionalHintFixed?: boolean;\\n    /**\\n     * Focus on first element by default on card or not\\n     */\\n    firstFocus?: boolean;\\n    /**\\n     * The gap between the card and the target\\n     * @defaultvalue 0\\n     */\\n    gapSpace?: number;\\n    /**\\n     * Callback upon focus or mouse enter event\\n     */\\n    onEnter?: (ev?: any) => void;\\n    /**\\n     * Callback upon blur or mouse leave event\\n     */\\n    onLeave?: (ev?: any) => void;\\n    /**\\n     *  Item to be returned with onRender functions\\n     */\\n    renderData?: any;\\n    /**\\n     * Custom styles for this component\\n     */\\n    styles?: IStyleFunctionOrObject<TStyleProps, {\\n        [P in keyof TStyles]: IStyle;\\n    }>;\\n    /**\\n     * Element to anchor the card to.\\n     */\\n    targetElement?: HTMLElement;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Trap focus or not\\n     */\\n    trapFocus?: boolean;\\n    /**\\n     * Custom overriding props to Callout\\n     */\\n    calloutProps?: ICalloutProps;\\n}\\n\\n/**\\n * Interface containing styleProps common for all types of cards.\\n */\\ndeclare interface IBaseCardStyleProps {\\n    /**\\n     * ClassName to inject into wrapper div of the content.\\n     */\\n    className?: string;\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme: ITheme;\\n}\\n\\n/**\\n * Interface containing style sections common for all types of cards.\\n */\\ndeclare interface IBaseCardStyles {\\n    /**\\n     * Style for the root element in the default enabled, non-toggled state.\\n     */\\n    root?: IStyle;\\n}\\n\\nexport declare interface IBaseExtendedPicker<T> {\\n    /** Forces the picker to resolve */\\n    forceResolve?: () => void;\\n    /** Gets the current value of the input. */\\n    items: T[] | undefined;\\n    /** Sets focus to the input. */\\n    focus: () => void;\\n}\\n\\nexport declare interface IBaseExtendedPickerProps<T> {\\n    /**\\n     * Ref of the component\\n     */\\n    componentRef?: IRefObject<IBaseExtendedPicker<T>>;\\n    /**\\n     * Header/title element for the picker\\n     */\\n    headerComponent?: JSX.Element;\\n    /**\\n     * Initial items that have already been selected and should appear in the people picker.\\n     */\\n    defaultSelectedItems?: T[];\\n    /**\\n     * A callback for when the selected list of items changes.\\n     */\\n    onChange?: (items?: T[]) => void;\\n    /**\\n     * A callback for when text is pasted into the input\\n     */\\n    onPaste?: (pastedText: string) => T[];\\n    /**\\n     * A callback for when the user put focus on the picker\\n     */\\n    onFocus?: React.FocusEventHandler<HTMLInputElement | Autofill>;\\n    /**\\n     * A callback for when the user moves the focus away from the picker\\n     */\\n    onBlur?: React.FocusEventHandler<HTMLInputElement | Autofill>;\\n    /**\\n     * ClassName for the picker.\\n     */\\n    className?: string;\\n    /**\\n     * Function that specifies how the floating picker will appear.\\n     */\\n    onRenderFloatingPicker: React.ComponentType<IBaseFloatingPickerProps<T>>;\\n    /**\\n     * Function that specifies how the floating picker will appear.\\n     */\\n    onRenderSelectedItems: React.ComponentType<IBaseSelectedItemsListProps<T>>;\\n    /**\\n     * Floating picker properties\\n     */\\n    floatingPickerProps: IBaseFloatingPickerProps<T>;\\n    /**\\n     * Selected items list properties\\n     */\\n    selectedItemsListProps: IBaseSelectedItemsListProps<T>;\\n    /**\\n     * Autofill input native props\\n     * @defaultvalue undefined\\n     */\\n    inputProps?: IInputProps;\\n    /**\\n     * Flag for disabling the picker.\\n     * @defaultvalue false\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Restrict the amount of selectable items.\\n     * @defaultvalue undefined\\n     */\\n    itemLimit?: number;\\n    /**\\n     * A callback to process a selection after the user selects a suggestion from the picker.\\n     * The returned item will be added to the selected items list\\n     */\\n    onItemSelected?: (selectedItem?: T) => T | PromiseLike<T>;\\n    /**\\n     * A callback on when an item was added to the selected item list\\n     */\\n    onItemAdded?: (addedItem: T) => void;\\n    /**\\n     * A callback on when an item or items were removed from the selected item list\\n     */\\n    onItemsRemoved?: (removedItems: T[]) => void;\\n    /**\\n     * If using as a controlled component use selectedItems here instead of the SelectedItemsList\\n     */\\n    selectedItems?: T[];\\n    /**\\n     * If using as a controlled component use suggestionItems here instead of FloatingPicker\\n     */\\n    suggestionItems?: T[];\\n    /**\\n     * Focus zone props\\n     */\\n    focusZoneProps?: IFocusZoneProps;\\n    /**\\n     * Current rendered query string that's corealte to current rendered result\\n     **/\\n    currentRenderedQueryString?: string;\\n}\\n\\nexport declare interface IBaseExtendedPickerState<T> {\\n    queryString: string | null;\\n    selectedItems: T[] | null;\\n    suggestionItems: T[] | null;\\n}\\n\\nexport declare interface IBaseFloatingPicker {\\n    /** Whether the suggestions are shown */\\n    isSuggestionsShown: boolean;\\n    /** On queryString changed */\\n    onQueryStringChanged: (input: string) => void;\\n    /** Hides the picker */\\n    hidePicker: () => void;\\n    /** Shows the picker\\n     * @param updateValue - Optional param to indicate whether to update the query string\\n     */\\n    showPicker: (updateValue?: boolean) => void;\\n    /** Gets the suggestions */\\n    suggestions: any[];\\n    /** Gets the input text */\\n    inputText: string;\\n}\\n\\nexport declare interface IBaseFloatingPickerProps<T> extends React.ClassAttributes<any> {\\n    componentRef?: IRefObject<IBaseFloatingPicker>;\\n    /**\\n     * The suggestions store\\n     */\\n    suggestionsStore: SuggestionsStore<T>;\\n    /**\\n     * The suggestions to show on zero query, return null if using as a controlled component\\n     */\\n    onZeroQuerySuggestion?: (selectedItems?: T[]) => T[] | PromiseLike<T[]> | null;\\n    /**\\n     * The input element to listen on events\\n     */\\n    inputElement?: HTMLInputElement | null;\\n    /**\\n     * Function that specifies how an individual suggestion item will appear.\\n     */\\n    onRenderSuggestionsItem?: (props: T, itemProps: ISuggestionItemProps<T>) => JSX.Element;\\n    /**\\n     * A callback for what should happen when a person types text into the input.\\n     * Returns the already selected items so the resolver can filter them out.\\n     * If used in conjunction with resolveDelay this will only kick off after the delay throttle.\\n     * Return null if using as a controlled component\\n     */\\n    onResolveSuggestions: (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]> | null;\\n    /**\\n     * A callback for when the input has been changed\\n     */\\n    onInputChanged?: (filter: string) => void;\\n    /**\\n     * The delay time in ms before resolving suggestions, which is kicked off when input has been changed.\\n     * e.g. If a second input change happens within the resolveDelay time, the timer will start over.\\n     * Only until after the timer completes will onResolveSuggestions be called.\\n     */\\n    resolveDelay?: number;\\n    /**\\n     * A callback for when a suggestion is clicked\\n     */\\n    onChange?: (item: T) => void;\\n    /**\\n     * ClassName for the picker.\\n     */\\n    className?: string;\\n    /**\\n     * The properties that will get passed to the Suggestions component.\\n     */\\n    pickerSuggestionsProps?: IBaseFloatingPickerSuggestionProps;\\n    /**\\n     * The properties that will get passed to the Callout component.\\n     */\\n    pickerCalloutProps?: ICalloutProps;\\n    /**\\n     * A callback for when an item is removed from the suggestion list\\n     */\\n    onRemoveSuggestion?: (item: T) => void;\\n    /**\\n     * A function used to validate if raw text entered into the well can be added\\n     */\\n    onValidateInput?: (input: string) => boolean;\\n    /**\\n     * The text to display while searching for more results in a limited suggestions list\\n     */\\n    searchingText?: ((props: {\\n        input: string;\\n    }) => string) | string;\\n    /**\\n     * Function that specifies how arbitrary text entered into the well is handled.\\n     */\\n    createGenericItem?: (input: string, isValid: boolean) => ISuggestionModel<T>;\\n    /**\\n     * The callback that should be called to see if the force resolve command should be shown\\n     */\\n    showForceResolve?: () => boolean;\\n    /**\\n     * The items that the base picker should currently display as selected.\\n     * If this is provided then the picker will act as a controlled component.\\n     */\\n    selectedItems?: T[];\\n    /**\\n     * A callback to get text from an item. Used to autofill text in the pickers.\\n     */\\n    getTextFromItem?: (item: T, currentValue?: string) => string;\\n    /**\\n     * Width for the suggestions callout\\n     */\\n    calloutWidth?: number;\\n    /**\\n     * The callback that should be called when the suggestions are shown\\n     */\\n    onSuggestionsShown?: () => void;\\n    /**\\n     * The callback that should be called when the suggestions are hiden\\n     */\\n    onSuggestionsHidden?: () => void;\\n    /**\\n     * If using as a controlled component, the items to show in the suggestion list\\n     */\\n    suggestionItems?: T[];\\n}\\n\\nexport declare interface IBaseFloatingPickerState {\\n    queryString: string;\\n    suggestionsVisible?: boolean;\\n    didBind: boolean;\\n}\\n\\n/**\\n * Props which are passed on to the inner Suggestions component\\n */\\nexport declare type IBaseFloatingPickerSuggestionProps = Pick<ISuggestionsControlProps<any>, 'shouldSelectFirstItem' | 'headerItemsProps' | 'footerItemsProps' | 'showRemoveButtons'>;\\n\\n/**\\n * BasePicker component.\\n * {@docCategory Pickers}\\n */\\nexport declare interface IBasePicker<T> {\\n    /** Gets the current value of the input. */\\n    items: T[] | undefined;\\n    /** Sets focus to the focus zone. */\\n    focus: () => void;\\n    /** Set focus to the input */\\n    focusInput: () => void;\\n    /**\\n     * When called, will take the currently selected suggestion and complete it.\\n     * If called with forceComplete true, it will attempt to force the current suggestion\\n     * to complete, must provide both createGenericSuggestion, so the text can be turned into\\n     * an object in the right shape, and onValidateInput, so the object knows if it's correct or not.\\n     */\\n    completeSuggestion: (forceComplete?: boolean) => void;\\n}\\n\\n/**\\n * Type T is the type of the item that is displayed\\n * and searched for by the picker. For example, if the picker is\\n * displaying persona's then type T could either be of Persona or IPersona props\\n * {@docCategory Pickers}\\n */\\nexport declare interface IBasePickerProps<T> extends React.Props<any> {\\n    /**\\n     * Optional callback to access the IBasePicker interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IBasePicker<T>>;\\n    /**\\n     * Function that specifies how the selected item will appear.\\n     */\\n    onRenderItem?: (props: IPickerItemProps<T>) => JSX.Element;\\n    /**\\n     * Function that specifies how an individual suggestion item will appear.\\n     */\\n    onRenderSuggestionsItem?: (props: T, itemProps: ISuggestionItemProps<T>) => JSX.Element;\\n    /**\\n     * A callback for what should happen when a person types text into the input.\\n     * Returns the already selected items so the resolver can filter them out.\\n     * If used in conjunction with resolveDelay this will only kick off after the delay throttle.\\n     */\\n    onResolveSuggestions: (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]>;\\n    /**\\n     * The delay time in ms before resolving suggestions, which is kicked off when input has been changed.\\n     * e.g. If a second input change happens within the resolveDelay time, the timer will start over.\\n     * Only until after the timer completes will onResolveSuggestions be called.\\n     */\\n    resolveDelay?: number;\\n    /**\\n     * A callback for what should happen when a user clicks within the input area.\\n     * @deprecated Please use onEmptyResolveSuggestions instead, as the suggestions aren't about\\n     * setting focus as they are about resolving suggestions when there is no input.\\n     */\\n    onEmptyInputFocus?: (selectedItems?: T[]) => T[] | PromiseLike<T[]>;\\n    /**\\n     * A callback for what should happen when suggestions are shown without\\n     * input provided.\\n     * Returns the already selected items so the resolver can filter them out.\\n     * If used in conjunction with resolveDelay this will only kick off after the delay throttle.\\n     */\\n    onEmptyResolveSuggestions?: (selectedItems?: T[]) => T[] | PromiseLike<T[]>;\\n    /**\\n     * Initial items that have already been selected and should appear in the people picker.\\n     */\\n    defaultSelectedItems?: T[];\\n    /**\\n     * A callback for when the selected list of items changes.\\n     */\\n    onChange?: (items?: T[]) => void;\\n    /**\\n     * A callback for when the user put focus on the picker\\n     * @deprecated Use `inputProps.onFocus` instead\\n     */\\n    onFocus?: React.FocusEventHandler<HTMLInputElement | Autofill>;\\n    /**\\n     * A callback for when the user moves the focus away from the picker\\n     */\\n    onBlur?: React.FocusEventHandler<HTMLInputElement | Autofill>;\\n    /**\\n     * A callback to get text from an item. Used to autofill text in the pickers.\\n     */\\n    getTextFromItem?: (item: T, currentValue?: string) => string;\\n    /**\\n     * A callback that gets the rest of the results when a user clicks get more results.\\n     */\\n    onGetMoreResults?: (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]>;\\n    /**\\n     * ClassName for the picker.\\n     */\\n    className?: string;\\n    /**\\n     * The properties that will get passed to the Suggestions component.\\n     */\\n    pickerSuggestionsProps?: IBasePickerSuggestionsProps;\\n    /**\\n     * The properties that will get passed to the Callout component.\\n     */\\n    pickerCalloutProps?: ICalloutProps;\\n    /**\\n     * AutoFill input native props\\n     * @defaultvalue undefined\\n     */\\n    inputProps?: IInputProps;\\n    /**\\n     * A callback for when an item is removed from the suggestion list\\n     */\\n    onRemoveSuggestion?: (item: T) => void;\\n    /**\\n     * A function used to validate if raw text entered into the well can be added into the selected items list\\n     */\\n    onValidateInput?: (input: string) => ValidationState;\\n    /**\\n     * The text to display while searching for more results in a limited suggestions list\\n     */\\n    searchingText?: ((props: {\\n        input: string;\\n    }) => string) | string;\\n    /**\\n     * Flag for disabling the picker.\\n     * @defaultvalue false\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Restrict the amount of selectable items.\\n     * @defaultvalue undefined\\n     */\\n    itemLimit?: number;\\n    /**\\n     * Function that specifies how arbitrary text entered into the well is handled.\\n     */\\n    createGenericItem?: (input: string, ValidationState: ValidationState) => ISuggestionModel<T> | T;\\n    /**\\n     * Aria label for the \\\"X\\\" button in the selected item component.\\n     * @defaultvalue ''\\n     */\\n    removeButtonAriaLabel?: string;\\n    /**\\n     * Aria label for the picker component. Will be applied to the element with role=\\\"combobox\\\"\\n     * If it's supplied, the input element with also have aria-labelledby added and point to the\\n     * element with role=combobox\\n     * @defaultvalue undefined\\n     */\\n    ['aria-label']?: string;\\n    /**\\n     * A callback to process a selection after the user selects something from the picker. If the callback returns null,\\n     * the item will not be added to the picker.\\n     */\\n    onItemSelected?: (selectedItem?: T) => T | PromiseLike<T> | null;\\n    /**\\n     * The items that the base picker should currently display as selected.\\n     * If this is provided then the picker will act as a controlled component.\\n     */\\n    selectedItems?: T[];\\n    /**\\n     * A callback used to modify the input string.\\n     */\\n    onInputChange?: (input: string) => string;\\n    /**\\n     * A callback to override the default behavior of adding the selected suggestion on dismiss. If it returns true or\\n     * nothing, the selected item will be added on dismiss. If false, the selected item will not be added on dismiss.\\n     *\\n     */\\n    onDismiss?: (ev?: any, selectedItem?: T) => boolean | void;\\n    /**\\n     * Adds an additional alert for the currently selected suggestion. This prop should be set to true for IE11 and below,\\n     * as it enables proper screen reader behavior for each suggestion (since aria-activedescendant does not work\\n     * with IE11). It should not be set for modern browsers (Edge, Chrome).\\n     * @defaultvalue false\\n     */\\n    enableSelectedSuggestionAlert?: boolean;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IBasePickerStyleProps, IBasePickerStyles>;\\n    /**\\n     * Theme provided by styled() function.\\n     */\\n    theme?: ITheme;\\n}\\n\\nexport declare interface IBasePickerState {\\n    items?: any;\\n    suggestedDisplayValue?: string;\\n    moreSuggestionsAvailable?: boolean;\\n    isFocused?: boolean;\\n    isSearching?: boolean;\\n    isMostRecentlyUsedVisible?: boolean;\\n    suggestionsVisible?: boolean;\\n    suggestionsLoading?: boolean;\\n    isResultsFooterVisible?: boolean;\\n    selectedIndices?: number[];\\n}\\n\\n/**\\n * The props needed to construct styles.\\n * {@docCategory Pickers}\\n */\\nexport declare type IBasePickerStyleProps = Pick<IBasePickerProps<any>, 'theme' | 'className' | 'disabled'> & {\\n    /** Whether text style area is focused */\\n    isFocused?: boolean;\\n    /** Optional pickerInput className */\\n    inputClassName?: string;\\n};\\n\\n/**\\n * Represents the stylable areas of the control.\\n * {@docCategory Pickers}\\n */\\nexport declare interface IBasePickerStyles {\\n    /** Root element of any picker extending from BasePicker (wraps all the elements). */\\n    root: IStyle;\\n    /**\\n     * Refers to the elements already selected (picked) wrapped by `itemsWrapper` along with the input to type\\n     * a new selection.\\n     */\\n    text: IStyle;\\n    /** Refers to the items already selected (picked). */\\n    itemsWrapper: IStyle;\\n    /** Refers to the input were to type new selections (picks). */\\n    input: IStyle;\\n    /** Refers to helper element used for accessibility tools (hidden from view on screen). */\\n    screenReaderText: IStyle;\\n}\\n\\n/**\\n * Subset of picker options that may be legally passed through a picker to its\\n * internal Suggestions component.\\n * {@docCategory Pickers}\\n */\\nexport declare interface IBasePickerSuggestionsProps<T = any> extends Pick<ISuggestionsProps<T>, 'onRenderNoResultFound' | 'suggestionsHeaderText' | 'mostRecentlyUsedHeaderText' | 'noResultsFoundText' | 'className' | 'suggestionsClassName' | 'suggestionsItemClassName' | 'searchForMoreText' | 'forceResolveText' | 'loadingText' | 'searchingText' | 'resultsFooterFull' | 'resultsFooter' | 'resultsMaximumNumber' | 'showRemoveButtons' | 'suggestionsAvailableAlertText' | 'suggestionsContainerAriaLabel' | 'showForceResolve'> {\\n}\\n\\nexport declare interface IBaseSelectedItemsList<T> {\\n    /** Gets the current value of the input. */\\n    items: T[] | undefined;\\n    addItems: (items: T[]) => void;\\n}\\n\\nexport declare interface IBaseSelectedItemsListProps<T> extends React.ClassAttributes<any> {\\n    componentRef?: IRefObject<IBaseSelectedItemsList<T>>;\\n    /**\\n     * The selection\\n     */\\n    selection?: Selection;\\n    /**\\n     * A callback for when items are copied\\n     */\\n    onCopyItems?: (items: T[]) => string;\\n    /**\\n     * Function that specifies how the selected item will appear.\\n     */\\n    onRenderItem?: (props: ISelectedItemProps<T>) => JSX.Element;\\n    /**\\n     * Initial items that have already been selected and should appear in the people picker.\\n     */\\n    defaultSelectedItems?: T[];\\n    /**\\n     * A callback for when the selected list of items changes.\\n     */\\n    onChange?: (items?: T[]) => void;\\n    /**\\n     * Function that specifies how arbitrary text entered into the well is handled.\\n     */\\n    createGenericItem?: (input: string, ValidationState: ValidationState) => ISuggestionModel<T>;\\n    /**\\n     * A callback to process a selection after the user selects something from the picker.\\n     */\\n    onItemSelected?: (selectedItem?: T) => T | PromiseLike<T>;\\n    /**\\n     * The items that the base picker should currently display as selected.\\n     * If this is provided then the picker will act as a controlled component.\\n     */\\n    selectedItems?: T[];\\n    /**\\n     * Aria label for the 'X' button in the selected item component.\\n     * @defaultvalue ''\\n     */\\n    removeButtonAriaLabel?: string;\\n    /**\\n     * A callback when an item is deleted\\n     * @deprecated Use `onItemsDeleted` instead.\\n     */\\n    onItemDeleted?: (deletedItem: T) => void;\\n    /**\\n     * A callback when and item or items are deleted\\n     */\\n    onItemsDeleted?: (deletedItems: T[]) => void;\\n    /**\\n     * A callback on whether this item can be deleted\\n     */\\n    canRemoveItem?: (item: T) => boolean;\\n}\\n\\nexport declare interface IBaseSelectedItemsListState<T = any> {\\n    items: T[];\\n}\\n\\n/**\\n * {@docCategory Breadcrumb}\\n */\\nexport declare interface IBreadcrumb {\\n    /**\\n     * Sets focus to the first breadcrumb link.\\n     */\\n    focus(): void;\\n}\\n\\n/** @deprecated Use IBreadcrumbData */\\nexport declare type IBreadCrumbData = IBreadcrumbData;\\n\\n/**\\n * {@docCategory Breadcrumb}\\n */\\nexport declare interface IBreadcrumbData {\\n    props: IBreadcrumbProps;\\n    renderedItems: IBreadcrumbItem[];\\n    renderedOverflowItems: IBreadcrumbItem[];\\n}\\n\\n/**\\n * {@docCategory Breadcrumb}\\n */\\nexport declare interface IBreadcrumbItem extends React.AllHTMLAttributes<HTMLElement> {\\n    /**\\n     * Text to display to the user for the breadcrumb item.\\n     */\\n    text: string;\\n    /**\\n     * Arbitrary unique string associated with the breadcrumb item.\\n     */\\n    key: string;\\n    /**\\n     * Callback issued when the breadcrumb item is selected.\\n     */\\n    onClick?: (ev?: React.MouseEvent<HTMLElement>, item?: IBreadcrumbItem) => void;\\n    /**\\n     * Url to navigate to when this breadcrumb item is clicked.\\n     */\\n    href?: string;\\n    /**\\n     * Whether this is the breadcrumb item the user is currently navigated to.\\n     * If true, `aria-current=\\\"page\\\"` will be applied to this breadcrumb item.\\n     */\\n    isCurrentItem?: boolean;\\n    /**\\n     * Optional prop to render the item as a heading of your choice.\\n     *\\n     * You can also use this to force items to render as links instead of buttons (by default,\\n     * any item with a `href` renders as a link, and any item without a `href` renders as a button).\\n     * This is not generally recommended because it may prevent activating the link using the keyboard.\\n     */\\n    as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'a';\\n    /**\\n     * Optional role for the breadcrumb item (which renders as a button by default)\\n     */\\n    role?: string;\\n}\\n\\n/**\\n * {@docCategory Breadcrumb}\\n */\\nexport declare interface IBreadcrumbProps extends React.HTMLAttributes<HTMLElement> {\\n    /**\\n     * Optional callback to access the IBreadcrumb interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IBreadcrumb>;\\n    /**\\n     * Collection of breadcrumbs to render\\n     */\\n    items: IBreadcrumbItem[];\\n    /**\\n     * Optional class for the root breadcrumb element.\\n     */\\n    className?: string;\\n    /**\\n     * Render a custom divider in place of the default chevron `>`\\n     */\\n    dividerAs?: IComponentAs<IDividerAsProps>;\\n    /**\\n     * Render a custom overflow icon in place of the default icon `...`\\n     */\\n    onRenderOverflowIcon?: IRenderFunction<IButtonProps>;\\n    /**\\n     * Custom component for the overflow button.\\n     */\\n    overflowButtonAs?: IComponentAs<IButtonProps>;\\n    /**\\n     * The maximum number of breadcrumbs to display before coalescing.\\n     * If not specified, all breadcrumbs will be rendered.\\n     */\\n    maxDisplayedItems?: number;\\n    /** Custom render function for each breadcrumb item. */\\n    onRenderItem?: IRenderFunction<IBreadcrumbItem>;\\n    /**\\n     * Method that determines how to reduce the length of the breadcrumb.\\n     * Return undefined to never reduce breadcrumb length.\\n     */\\n    onReduceData?: (data: IBreadcrumbData) => IBreadcrumbData | undefined;\\n    /**\\n     * Method that determines how to group the length of the breadcrumb.\\n     * Return undefined to never increase breadcrumb length.\\n     */\\n    onGrowData?: (data: IBreadcrumbData) => IBreadcrumbData | undefined;\\n    /**\\n     * Aria label for the root element of the breadcrumb (which is a navigation landmark).\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * Aria label for the overflow button.\\n     */\\n    overflowAriaLabel?: string;\\n    /**\\n     * Optional index where overflow items will be collapsed. Defaults to 0.\\n     */\\n    overflowIndex?: number;\\n    styles?: IStyleFunctionOrObject<IBreadcrumbStyleProps, IBreadcrumbStyles>;\\n    theme?: ITheme;\\n    /**\\n     * Extra props for the root FocusZone.\\n     */\\n    focusZoneProps?: IFocusZoneProps;\\n    /**\\n     * Extra props for the TooltipHost which wraps each breadcrumb item.\\n     */\\n    tooltipHostProps?: ITooltipHostProps;\\n}\\n\\n/**\\n * {@docCategory Breadcrumb}\\n */\\nexport declare interface IBreadcrumbStyleProps {\\n    className?: string;\\n    theme: ITheme;\\n}\\n\\n/**\\n * {@docCategory Breadcrumb}\\n */\\nexport declare interface IBreadcrumbStyles {\\n    root: IStyle;\\n    list: IStyle;\\n    listItem: IStyle;\\n    chevron: IStyle;\\n    overflow: IStyle;\\n    overflowButton: IStyle;\\n    itemLink: IStyle;\\n    item: IStyle;\\n}\\n\\n/**\\n * {@docCategory Button}\\n */\\nexport declare interface IButton {\\n    /**\\n     * Sets focus to the button.\\n     */\\n    focus: () => void;\\n    /**\\n     * If there is a menu associated with this button and it is visible, this will dismiss the menu\\n     */\\n    dismissMenu: () => void;\\n    /**\\n     * If there is a menu associated with this button and it is visible, this will open the menu.\\n     * Params are optional overrides to the ones defined in `menuProps` to apply to just this instance of\\n     * opening the menu.\\n     *\\n     * @param shouldFocusOnContainer - override to the ContextualMenu shouldFocusOnContainer prop.\\n     * BaseButton implementation defaults to 'undefined'.\\n     * @param shouldFocusOnMount - override to the ContextualMenu shouldFocusOnMount prop. BaseButton implementation\\n     * defaults to `true`.\\n     */\\n    openMenu: (shouldFocusOnContainer?: boolean, shouldFocusOnMount?: boolean) => void;\\n}\\n\\nexport declare interface IButtonClassNames {\\n    root?: string;\\n    flexContainer?: string;\\n    textContainer?: string;\\n    icon?: string;\\n    label?: string;\\n    menuIcon?: string;\\n    description?: string;\\n    screenReaderText?: string;\\n}\\n\\nexport declare interface IButtonGrid {\\n}\\n\\nexport declare interface IButtonGridCellProps<T> {\\n    /**\\n     * The option that will be made available to the user\\n     */\\n    item: T;\\n    /**\\n     * Arbitrary unique string associated with this option\\n     */\\n    id: string;\\n    /**\\n     * Optional, if the this option should be diabled\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Optional, if the cell is currently selected\\n     */\\n    selected?: boolean;\\n    /**\\n     * The on click handler\\n     */\\n    onClick?: (item: T) => void;\\n    /**\\n     * The render callback to handle rendering the item\\n     */\\n    onRenderItem: (item: T) => JSX.Element;\\n    /**\\n     * Optional, the onHover handler\\n     */\\n    onHover?: (item?: T) => void;\\n    /**\\n     * Optional, the onFocus handler\\n     */\\n    onFocus?: (item: T) => void;\\n    /**\\n     * The accessible role for this option\\n     */\\n    role?: string;\\n    /**\\n     * Optional, className(s) to apply\\n     */\\n    className?: string;\\n    /**\\n     * Optional, the CSS class used for when the cell is disabled\\n     */\\n    cellDisabledStyle?: string[];\\n    /**\\n     * Optional, the CSS class used for when the cell is selected\\n     */\\n    cellIsSelectedStyle?: string[];\\n    /**\\n     * Index for this option\\n     */\\n    index?: number;\\n    /**\\n     * The label for this item.\\n     * Visible text if this item is a header,\\n     * tooltip if is this item is normal\\n     */\\n    label?: string;\\n    /**\\n     * Method to provide the classnames to style a button.\\n     * The default value for this prop is the getClassnames func\\n     * defined in BaseButton.classnames.\\n     */\\n    getClassNames?: (theme: ITheme, className: string, variantClassName: string, iconClassName: string | undefined, menuIconClassName: string | undefined, disabled: boolean, checked: boolean, expanded: boolean, isSplit: boolean | undefined) => IButtonClassNames;\\n    /**\\n     * Optional, mouseEnter handler.\\n     * @returns true if the event should be processed, false otherwise\\n     */\\n    onMouseEnter?: (ev: React.MouseEvent<HTMLButtonElement>) => boolean;\\n    /**\\n     * Optional, mouseMove handler\\n     * @returns true if the event should be processed, false otherwise\\n     */\\n    onMouseMove?: (ev: React.MouseEvent<HTMLButtonElement>) => boolean;\\n    /**\\n     * Optional, mouseLeave handler\\n     */\\n    onMouseLeave?: (ev: React.MouseEvent<HTMLButtonElement>) => void;\\n    /**\\n     * Optional, onWheel handler\\n     */\\n    onWheel?: (ev: React.MouseEvent<HTMLButtonElement>) => void;\\n    /**\\n     * Optional, onkeydown handler\\n     */\\n    onKeyDown?: (ev: React.KeyboardEvent<HTMLButtonElement>) => void;\\n}\\n\\nexport declare interface IButtonGridProps extends React.TableHTMLAttributes<HTMLTableElement> {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<IButtonGrid>;\\n    /**\\n     * Items to display in a ButtonGrid with the specified number of columns.\\n     */\\n    items: any[];\\n    /**\\n     * The number of columns.\\n     */\\n    columnCount: number;\\n    /**\\n     * Custom renderer for the individual items.\\n     */\\n    onRenderItem: (item: any, index: number) => JSX.Element;\\n    /**\\n     * Whether focus should cycle back to the beginning once the user navigates past the end (and vice versa).\\n     * Only relevant if `doNotContainWithinFocusZone` is not true.\\n     */\\n    shouldFocusCircularNavigate?: boolean;\\n    /**\\n     * If false (the default), the ButtonGrid is contained inside a FocusZone.\\n     * If true, a FocusZone is not used.\\n     * @default false\\n     */\\n    doNotContainWithinFocusZone?: boolean;\\n    /**\\n     * Class name for the FocusZone container for the ButtonGrid.\\n     * @deprecated Use `styles.focusedContainer` to define styling for the focus zone container\\n     */\\n    containerClassName?: string;\\n    /**\\n     * Handler for when focus leaves the ButtonGrid.\\n     */\\n    onBlur?: () => void;\\n    /**\\n     * Position this ButtonGrid is in the parent set (index in a parent menu, for example)\\n     */\\n    ariaPosInSet?: number;\\n    /**\\n     * @deprecated Use `ariaPosInSet`\\n     */\\n    positionInSet?: number;\\n    /**\\n     * Size of the parent set (size of parent menu, for example)\\n     */\\n    ariaSetSize?: number;\\n    /**\\n     * @deprecated Use `ariaSetSize`\\n     */\\n    setSize?: number;\\n    /**\\n     * Theme to apply to the component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Optional styles for the component.\\n     */\\n    styles?: IStyleFunctionOrObject<IButtonGridStyleProps, IButtonGridStyles>;\\n}\\n\\n/**\\n * Properties required to build the styles for the ButtonGrid component.\\n */\\nexport declare interface IButtonGridStyleProps {\\n    /**\\n     * Theme to apply to the ButtonGrid.\\n     */\\n    theme: ITheme;\\n}\\n\\n/**\\n * Styles for the ButtonGrid Component.\\n */\\nexport declare interface IButtonGridStyles {\\n    /**\\n     * Style for the table container of a ButtonGrid.\\n     */\\n    root: IStyle;\\n    /**\\n     * Style for the table cells of the ButtonGrid.\\n     */\\n    tableCell: IStyle;\\n    /**\\n     * Style for the FocusZone container for the ButtonGrid.\\n     */\\n    focusedContainer?: IStyle;\\n}\\n\\n/**\\n * {@docCategory Button}\\n */\\nexport declare interface IButtonProps extends React.AllHTMLAttributes<HTMLAnchorElement | HTMLButtonElement | HTMLDivElement | BaseButton | Button | HTMLSpanElement> {\\n    /**\\n     * Optional callback to access the IButton interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IButton>;\\n    /**\\n     * Optional callback to access the root DOM element.\\n     * @deprecated Temporary solution which will be replaced with ref in the V8 release.\\n     */\\n    elementRef?: React.Ref<HTMLElement>;\\n    /**\\n     * If provided, this component will be rendered as an anchor.\\n     * @defaultvalue ElementType.anchor\\n     */\\n    href?: string;\\n    /**\\n     * Changes the visual presentation of the button to be emphasized (if defined)\\n     * @defaultvalue false\\n     */\\n    primary?: boolean;\\n    /**\\n     * Unique id to identify the item. Typically a duplicate of key value.\\n     */\\n    uniqueId?: string | number;\\n    /**\\n     * Whether the button is disabled\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Whether the button can have focus in disabled mode\\n     */\\n    allowDisabledFocus?: boolean;\\n    /**\\n     * If set to true and if this is a splitButton (split == true) then the primary action of a split button is disabled.\\n     */\\n    primaryDisabled?: boolean;\\n    /**\\n     * Custom styling for individual elements within the button DOM.\\n     */\\n    styles?: IButtonStyles;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Whether the button is checked\\n     */\\n    checked?: boolean;\\n    /**\\n     * Whether button is a toggle button with distinct on and off states. This should be true for buttons that permanently\\n     * change state when a press event finishes, such as a volume mute button.\\n     */\\n    toggle?: boolean;\\n    /**\\n     * If provided, additional class name to provide on the root element.\\n     */\\n    className?: string;\\n    /**\\n     * The aria label of the button for the benefit of screen readers.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * Detailed description of the button for the benefit of screen readers.\\n     *\\n     * Besides the compound button, other button types will need more information provided to screen reader.\\n     */\\n    ariaDescription?: string;\\n    /**\\n     * If provided and is true it adds an 'aria-hidden' attribute instructing screen readers to ignore the element.\\n     */\\n    ariaHidden?: boolean;\\n    /**\\n     * Text to render button label. If text is supplied, it will override any string in button children.\\n     * Other children components will be passed through after the text.\\n     */\\n    text?: string;\\n    /**\\n     * The props for the icon shown in the button.\\n     */\\n    iconProps?: IIconProps;\\n    /**\\n     * Props for button menu. Providing this will default to showing the menu icon. See menuIconProps for overriding\\n     * how the default icon looks. Providing this in addition of onClick and setting the split property to true will\\n     * render a SplitButton.\\n     */\\n    menuProps?: IContextualMenuProps;\\n    /**\\n     * Callback that runs after Button's contextual menu was closed (removed from the DOM)\\n     */\\n    onAfterMenuDismiss?: () => void;\\n    /**\\n     * If set to true, and if menuProps and onClick are provided, the button will render as a SplitButton.\\n     * @defaultvalue false\\n     */\\n    split?: boolean;\\n    /**\\n     * The props for the icon shown when providing a menu dropdown.\\n     */\\n    menuIconProps?: IIconProps;\\n    /**\\n     * Accessible label for the dropdown chevron button if this button is split.\\n     */\\n    splitButtonAriaLabel?: string;\\n    /**\\n     * Optional callback when menu is clicked.\\n     */\\n    onMenuClick?: (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, button?: IButtonProps) => void;\\n    /**\\n     * Custom render function for the icon\\n     */\\n    onRenderIcon?: IRenderFunction<IButtonProps>;\\n    /**\\n     * Custom render function for the label text.\\n     */\\n    onRenderText?: IRenderFunction<IButtonProps>;\\n    /**\\n     * Custom render function for the desciption text.\\n     */\\n    onRenderDescription?: IRenderFunction<IButtonProps>;\\n    /**\\n     * Custom render function for the aria description element.\\n     */\\n    onRenderAriaDescription?: IRenderFunction<IButtonProps>;\\n    /**\\n     * Custom render function for rendering the button children.\\n     */\\n    onRenderChildren?: IRenderFunction<IButtonProps>;\\n    /**\\n     * Custom render function for button menu icon\\n     */\\n    onRenderMenuIcon?: IRenderFunction<IButtonProps>;\\n    /**\\n     * Deprecated at v6.3.2, to be removed at \\\\>= v7.0.0. Use `menuAs` instead.\\n     * @deprecated Use `menuAs` instead.\\n     */\\n    onRenderMenu?: IRenderFunction<IContextualMenuProps>;\\n    /**\\n     * Render a custom menu in place of the normal one.\\n     */\\n    menuAs?: IComponentAs<IContextualMenuProps>;\\n    /**\\n     * Description of the action this button takes.\\n     * Only used for compound buttons\\n     */\\n    secondaryText?: string;\\n    /**\\n     * Deprecated at v1.2.3, to be removed at \\\\>= v2.0.0. Use specific button component instead.\\n     * @defaultvalue ButtonType.default\\n     * @deprecated Use specific button component instead.\\n     */\\n    buttonType?: ButtonType;\\n    /**\\n     * Deprecated at v0.56.2, to be removed at \\\\>= v1.0.0. Just pass in button props instead.\\n     * they will be mixed into the button/anchor element rendered by the component.\\n     * @deprecated Use button props instead.\\n     */\\n    rootProps?: React.ButtonHTMLAttributes<HTMLButtonElement> | React.AnchorHTMLAttributes<HTMLAnchorElement>;\\n    /**\\n     * Any custom data the developer wishes to associate with the menu item.\\n     * Deprecated, use `checked` if setting state.\\n     * @deprecated unused, use `checked` if setting state.\\n     */\\n    toggled?: boolean;\\n    /**\\n     * Any custom data the developer wishes to associate with the menu item.\\n     */\\n    data?: any;\\n    /**\\n     * Method to provide the classnames to style a button.\\n     * The default value for this prop is the getClassnames func\\n     * defined in BaseButton.classnames.\\n     * @defaultvalue getBaseButtonClassNames\\n     */\\n    getClassNames?: (theme: ITheme, className: string, variantClassName: string, iconClassName: string | undefined, menuIconClassName: string | undefined, disabled: boolean, checked: boolean, expanded: boolean, hasMenu: boolean, isSplit: boolean | undefined, allowDisabledFocus: boolean) => IButtonClassNames;\\n    /**\\n     * Method to provide the classnames to style a button.\\n     * The default value for this prop is the getClassnames func\\n     * defined in BaseButton.classnames.\\n     * @defaultvalue getBaseSplitButtonClassNames\\n     */\\n    getSplitButtonClassNames?: (disabled: boolean, expanded: boolean, checked: boolean, allowDisabledFocus: boolean) => ISplitButtonClassNames;\\n    /**\\n     * Provides a custom KeyCode that can be used to open the button menu.\\n     * The default KeyCode is the down arrow.\\n     * A value of null can be provided to disable the key codes for opening the button menu.\\n     */\\n    menuTriggerKeyCode?: KeyCodes | null;\\n    /**\\n     * Optional keytip for this button\\n     */\\n    keytipProps?: IKeytipProps;\\n    /**\\n     * Menu will not be created or destroyed when opened or closed, instead it\\n     * will be hidden. This will improve perf of the menu opening but could potentially\\n     * impact overall perf by having more elements in the dom. Should only be used\\n     * when perf is important.\\n     * Note: This may increase the amount of time it takes for the button itself to mount.\\n     */\\n    persistMenu?: boolean;\\n    /**\\n     * If true, the persisted menu is rendered hidden when the button\\n     * initially mounts. Non-persisted menus will\\n     * not be in the component tree unless they are being shown\\n     *\\n     * Note: This increases the time the button will take to mount, but\\n     * can improve perceived menu open perf. when the user opens the menu.\\n     *\\n     * @defaultvalue undefined, equivalent to false\\n     *\\n     * @deprecated There is known bug in Edge when this prop is true where scrollbars\\n     * overlap with the content when a menu is first rendered hidden.\\n     * See: https://github.com/microsoft/fluentui/issues/9034\\n     * Please do not start using this. If you are already using this,\\n     * please make sure that you are doing so only in non-Edge browsers\\n     */\\n    renderPersistedMenuHiddenOnMount?: boolean;\\n    /**\\n     * Experimental prop that get passed into the menuButton that's rendered as part of\\n     * split button. Anything passed in will likely need to have accompanying\\n     * style changes.\\n     */\\n    splitButtonMenuProps?: IButtonProps;\\n    /**\\n     * Style for the description text if applicable (for compound buttons.)\\n     * Deprecated, use `secondaryText` instead.\\n     * @deprecated Use `secondaryText` instead.\\n     */\\n    description?: IStyle;\\n    /**\\n     * yet unknown docs\\n     */\\n    defaultRender?: any;\\n    /**\\n     * Optional props to be applied only to the primary action button of SplitButton and not to the\\n     * overall SplitButton container\\n     */\\n    primaryActionButtonProps?: IButtonProps;\\n}\\n\\n/**\\n * {@docCategory Button}\\n */\\nexport declare interface IButtonStyles {\\n    /**\\n     * Style for the root element in the default enabled, non-toggled state.\\n     */\\n    root?: IStyle;\\n    /**\\n     * Style override for the root element in a checked state, layered on top of the root style.\\n     */\\n    rootChecked?: IStyle;\\n    /**\\n     * Style override for the root element in a disabled state, layered on top of the root style.\\n     */\\n    rootDisabled?: IStyle;\\n    /**\\n     * Style override applied to the root on hover in the default, enabled, non-toggled state.\\n     */\\n    rootHovered?: IStyle;\\n    /**\\n     * Style override applied to the root on focus in the default, enabled, non-toggled state.\\n     */\\n    rootFocused?: IStyle;\\n    /**\\n     * Style override applied to the root on pressed in the default, enabled, non-toggled state.\\n     */\\n    rootPressed?: IStyle;\\n    /**\\n     * Style override applied to the root on when menu is expanded in the default, enabled, non-toggled state.\\n     */\\n    rootExpanded?: IStyle;\\n    /**\\n     * Style override applied to the root on hover in a checked, enabled state\\n     */\\n    rootCheckedHovered?: IStyle;\\n    /**\\n     * Style override applied to the root on pressed in a checked, enabled state\\n     */\\n    rootCheckedPressed?: IStyle;\\n    /**\\n     * Style override applied to the root on hover in a checked, disabled state\\n     */\\n    rootCheckedDisabled?: IStyle;\\n    /**\\n     * Style override applied to the root on hover in a expanded state on hover\\n     */\\n    rootExpandedHovered?: IStyle;\\n    /**\\n     * Style override for the root element when it has a menu button, layered on top of the root style.\\n     */\\n    rootHasMenu?: IStyle;\\n    /**\\n     * Style for the flexbox container within the root element.\\n     */\\n    flexContainer?: IStyle;\\n    /**\\n     * Style for the text container within the flexbox container element (and contains the text and description).\\n     */\\n    textContainer?: IStyle;\\n    /**\\n     * Style for the icon on the near side of the label.\\n     */\\n    icon?: IStyle;\\n    /**\\n     * Style for the icon on the near side of the label on hover.\\n     */\\n    iconHovered?: IStyle;\\n    /**\\n     * Style for the icon on the near side of the label when pressed.\\n     */\\n    iconPressed?: IStyle;\\n    /**\\n     * Style for the icon on the near side of the label when expanded.\\n     */\\n    iconExpanded?: IStyle;\\n    /**\\n     * Style for the icon on the near side of the label when expanded and hovered.\\n     */\\n    iconExpandedHovered?: IStyle;\\n    /**\\n     * Style override for the icon when the button is disabled.\\n     */\\n    iconDisabled?: IStyle;\\n    /**\\n     * Style override for the icon when the button is checked.\\n     */\\n    iconChecked?: IStyle;\\n    /**\\n     * Style for the text content of the button.\\n     */\\n    label?: IStyle;\\n    /**\\n     * Style override for the text content when the button is hovered.\\n     */\\n    labelHovered?: IStyle;\\n    /**\\n     * Style override for the text content when the button is disabled.\\n     */\\n    labelDisabled?: IStyle;\\n    /**\\n     * Style override for the text content when the button is checked.\\n     */\\n    labelChecked?: IStyle;\\n    /**\\n     * Style for the menu chevron.\\n     */\\n    menuIcon?: IStyle;\\n    /**\\n     * Style for the menu chevron on hover.\\n     */\\n    menuIconHovered?: IStyle;\\n    /**\\n     * Style for the menu chevron when pressed.\\n     */\\n    menuIconPressed?: IStyle;\\n    /**\\n     * Style for the menu chevron when expanded.\\n     */\\n    menuIconExpanded?: IStyle;\\n    /**\\n     * Style for the menu chevron when expanded and hovered.\\n     */\\n    menuIconExpandedHovered?: IStyle;\\n    /**\\n     * Style override for the menu chevron when the button is disabled.\\n     */\\n    menuIconDisabled?: IStyle;\\n    /**\\n     * Style override for the menu chevron when the button is checked.\\n     */\\n    menuIconChecked?: IStyle;\\n    /**\\n     * Style for the description text if applicable (for compound buttons.)\\n     */\\n    description?: IStyle;\\n    /**\\n     * Style for the description text if applicable (for compound buttons.)\\n     */\\n    secondaryText?: IStyle;\\n    /**\\n     * Style override for the description text when the button is hovered.\\n     */\\n    descriptionHovered?: IStyle;\\n    /**\\n     * Style for the description text when the button is pressed.\\n     */\\n    descriptionPressed?: IStyle;\\n    /**\\n     * Style override for the description text when the button is disabled.\\n     */\\n    descriptionDisabled?: IStyle;\\n    /**\\n     * Style override for the description text when the button is checked.\\n     */\\n    descriptionChecked?: IStyle;\\n    /**\\n     * Style override for the screen reader text.\\n     */\\n    screenReaderText?: IStyle;\\n    /**\\n     * Style override for the container div around a SplitButton element\\n     */\\n    splitButtonContainer?: IStyle;\\n    /**\\n     * Style for container div around a SplitButton element when the button is hovered.\\n     */\\n    splitButtonContainerHovered?: IStyle;\\n    /**\\n     * Style for container div around a SplitButton element when the button is focused.\\n     */\\n    splitButtonContainerFocused?: IStyle;\\n    /**\\n     * Style for container div around a SplitButton element when the button is checked.\\n     */\\n    splitButtonContainerChecked?: IStyle;\\n    /**\\n     * Style for container div around a SplitButton element when the button is checked and hovered.\\n     */\\n    splitButtonContainerCheckedHovered?: IStyle;\\n    /**\\n     * Style override for the container div around a SplitButton element in a disabled state\\n     */\\n    splitButtonContainerDisabled?: IStyle;\\n    /**\\n     * Style override for the divider element that appears between the button and menu button\\n     * for a split button.\\n     */\\n    splitButtonDivider?: IStyle;\\n    /**\\n     * Style override for the divider element that appears between the button and menu button\\n     * for a split button in a disabled state.\\n     */\\n    splitButtonDividerDisabled?: IStyle;\\n    /**\\n     * Style override for the SplitButton menu button\\n     */\\n    splitButtonMenuButton?: IStyle;\\n    /**\\n     * Style override for the SplitButton menu button element in a disabled state.\\n     */\\n    splitButtonMenuButtonDisabled?: IStyle;\\n    /**\\n     * Style override for the SplitButton menu button element in a checked state\\n     */\\n    splitButtonMenuButtonChecked?: IStyle;\\n    /**\\n     * Style override for the SplitButton menu button element in an expanded state\\n     */\\n    splitButtonMenuButtonExpanded?: IStyle;\\n    /**\\n     * Style override for the SplitButton menu icon element\\n     */\\n    splitButtonMenuIcon?: IStyle;\\n    /**\\n     * Style override for the SplitButton menu icon element in a disabled state\\n     */\\n    splitButtonMenuIconDisabled?: IStyle;\\n    /**\\n     * Style override for the SplitButton FlexContainer.\\n     */\\n    splitButtonFlexContainer?: IStyle;\\n    /**\\n     * Style override for the SplitButton when only primaryButton is in a disabled state\\n     */\\n    splitButtonMenuFocused?: IStyle;\\n}\\n\\n/**\\n * {@docCategory Calendar}\\n */\\nexport declare interface ICalendar {\\n    /** Sets focus to the selected date. */\\n    focus: () => void;\\n}\\n\\n/**\\n * {@docCategory Calendar}\\n */\\nexport declare interface ICalendarFormatDateCallbacks {\\n    /**\\n     * Callback to apply formatting to mmmm d, yyyy formated dates\\n     */\\n    formatMonthDayYear: (date: Date, strings?: ICalendarStrings) => string;\\n    /**\\n     * Callback to apply formatting to the month and year in the Day Picker header\\n     */\\n    formatMonthYear: (date: Date, strings?: ICalendarStrings) => string;\\n    /**\\n     * Callback to apply formatting to the days in the Day Picker calendar\\n     */\\n    formatDay: (date: Date) => string;\\n    /**\\n     * Callback to apply formatting to the year in the Month Picker header\\n     */\\n    formatYear: (date: Date) => string;\\n}\\n\\n/**\\n * {@docCategory Calendar}\\n */\\nexport declare interface ICalendarIconStrings {\\n    /**\\n     * FabricMDL2Icons name for the left navigation icon.  Previous default: ChevronLeft.\\n     * @defaultvalue 'Up'\\n     */\\n    leftNavigation?: string;\\n    /**\\n     * FabricMDL2Icons name for the right navigation icon.  Previous default: ChevronRight.\\n     * @defaultvalue 'Down'\\n     */\\n    rightNavigation?: string;\\n    /**\\n     * Close icon\\n     * @defaultvalue 'CalculatorMultiply'\\n     */\\n    closeIcon?: string;\\n}\\n\\n/**\\n * {@docCategory Calendar}\\n */\\nexport declare interface ICalendarProps extends IBaseProps<ICalendar>, React.HTMLAttributes<HTMLElement> {\\n    /**\\n     * Optional callback to access the ICalendar interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<ICalendar>;\\n    /**\\n     * Optional class name to add to the root element.\\n     */\\n    className?: string;\\n    /**\\n     * Callback issued when a date is selected\\n     * @param date - The date the user selected\\n     * @param selectedDateRangeArray - The resultant list of dates that are selected based on the date range type set\\n     * for the component.\\n     */\\n    onSelectDate?: (date: Date, selectedDateRangeArray?: Date[]) => void;\\n    /**\\n     * Callback issued when calendar is closed\\n     */\\n    onDismiss?: () => void;\\n    /**\\n     * Whether the month picker is shown beside the day picker or hidden.\\n     * @defaultvalue true\\n     */\\n    isMonthPickerVisible?: boolean;\\n    /**\\n     * Whether the day picker is shown beside the month picker or hidden.\\n     * @defaultvalue true\\n     */\\n    isDayPickerVisible?: boolean;\\n    /**\\n     * Show month picker on top of date picker when visible.\\n     * @defaultvalue false\\n     */\\n    showMonthPickerAsOverlay?: boolean;\\n    /**\\n     * Value of today. If null, current time in client machine will be used.\\n     */\\n    today?: Date;\\n    /**\\n     * Default value of the Calendar, if any\\n     */\\n    value?: Date;\\n    /**\\n     * The first day of the week for your locale.\\n     * @defaultvalue DayOfWeek.Sunday\\n     */\\n    firstDayOfWeek?: DayOfWeek;\\n    /**\\n     * The date range type indicating how  many days should be selected as the user\\n     * selects days\\n     * @defaultvalue DateRangeType.Day\\n     */\\n    dateRangeType?: DateRangeType;\\n    /**\\n     * Whether the month view should automatically navigate to the next or previous date range\\n     * depending on the selected date. If this property is set to true and the currently displayed\\n     * month is March 2017, if the user clicks on a day outside the month, i.e., April 1st, the\\n     * picker will automatically navigate to the month of April.\\n     * @defaultvalue false\\n     */\\n    autoNavigateOnSelection?: boolean;\\n    /**\\n     * Whether the \\\"Go to today\\\" link should be shown or not\\n     */\\n    showGoToToday?: boolean;\\n    /**\\n     * This property has been removed at 0.80.0 in place of the `focus` method, to be removed \\\\@ 1.0.0.\\n     * @deprecated Replaced with the `focus` method.\\n     */\\n    shouldFocusOnMount?: boolean;\\n    /**\\n     * Localized strings to use in the Calendar\\n     */\\n    strings: ICalendarStrings | null;\\n    /**\\n     * Whether the month picker should highlight the current month\\n     * @defaultvalue false\\n     */\\n    highlightCurrentMonth?: boolean;\\n    /**\\n     * Whether the month picker should highlight the selected month\\n     * @defaultvalue false\\n     */\\n    highlightSelectedMonth?: boolean;\\n    /**\\n     * Customize navigation icons using ICalendarIconStrings\\n     */\\n    navigationIcons?: ICalendarIconStrings;\\n    /**\\n     * Whether the calendar should show the week number (weeks 1 to 53) before each week row\\n     * @defaultvalue false\\n     */\\n    showWeekNumbers?: boolean;\\n    /**\\n     * Defines when the first week of the year should start, FirstWeekOfYear.FirstDay,\\n     * FirstWeekOfYear.FirstFullWeek or FirstWeekOfYear.FirstFourDayWeek are the possible values\\n     * @defaultvalue FirstWeekOfYear.FirstDay\\n     */\\n    firstWeekOfYear?: FirstWeekOfYear;\\n    /**\\n     * Apply additional formating to dates, for example localized date formatting.\\n     */\\n    dateTimeFormatter?: ICalendarFormatDateCallbacks;\\n    /**\\n     * If set the Calendar will not allow navigation to or selection of a date earlier than this value.\\n     */\\n    minDate?: Date;\\n    /**\\n     * If set the Calendar will not allow navigation to or selection of a date later than this value.\\n     */\\n    maxDate?: Date;\\n    /**\\n     * If set the Calendar will not allow selection of dates in this array.\\n     */\\n    restrictedDates?: Date[];\\n    /**\\n     * Whether the calendar should show 6 weeks by default.\\n     * @defaultvalue false\\n     */\\n    showSixWeeksByDefault?: boolean;\\n    /**\\n     * The days that are selectable when dateRangeType is WorkWeek.\\n     * If dateRangeType is not WorkWeek this property does nothing.\\n     * @defaultvalue [Monday,Tuesday,Wednesday,Thursday,Friday]\\n     */\\n    workWeekDays?: DayOfWeek[];\\n    /**\\n     * When clicking on \\\"Today\\\", select the date and close the calendar.\\n     * @defaultvalue false\\n     */\\n    selectDateOnClick?: boolean;\\n    /**\\n     * Whether the close button should be shown or not\\n     * @defaultvalue false\\n     */\\n    showCloseButton?: boolean;\\n    /**\\n     * Allows all dates and buttons to be focused, including disabled ones\\n     * @defaultvalue false\\n     */\\n    allFocusable?: boolean;\\n    /**\\n     * Whether the year picker is enabled\\n     * @defaultvalue false\\n     */\\n    yearPickerHidden?: boolean;\\n}\\n\\nexport declare interface ICalendarState {\\n    /** The currently focused date in the day picker, but not necessarily selected */\\n    navigatedDayDate?: Date;\\n    /** The currently focused date in the month picker, but not necessarily selected */\\n    navigatedMonthDate?: Date;\\n    /** The currently selected date in the calendar */\\n    selectedDate?: Date;\\n    /** State used to show/hide month picker */\\n    isMonthPickerVisible?: boolean;\\n    /** State used to show/hide day picker */\\n    isDayPickerVisible?: boolean;\\n}\\n\\n/**\\n * {@docCategory Calendar}\\n */\\nexport declare interface ICalendarStrings {\\n    /**\\n     * An array of strings for the full names of months.\\n     * The array is 0-based, so months[0] should be the full name of January.\\n     */\\n    months: string[];\\n    /**\\n     * An array of strings for the short names of months.\\n     * The array is 0-based, so shortMonths[0] should be the short name of January.\\n     */\\n    shortMonths: string[];\\n    /**\\n     * An array of strings for the full names of days of the week.\\n     * The array is 0-based, so days[0] should be the full name of Sunday.\\n     */\\n    days: string[];\\n    /**\\n     * An array of strings for the initials of the days of the week.\\n     * The array is 0-based, so days[0] should be the initial of Sunday.\\n     */\\n    shortDays: string[];\\n    /**\\n     * String to render for button to direct the user to today's date.\\n     */\\n    goToToday: string;\\n    /**\\n     * Aria-label for the \\\"previous month\\\" button.\\n     */\\n    prevMonthAriaLabel?: string;\\n    /**\\n     * Aria-label for the \\\"next month\\\" button.\\n     */\\n    nextMonthAriaLabel?: string;\\n    /**\\n     * Aria-label for the \\\"previous year\\\" button.\\n     */\\n    prevYearAriaLabel?: string;\\n    /**\\n     * Aria-label for the \\\"next year\\\" button.\\n     */\\n    nextYearAriaLabel?: string;\\n    /**\\n     * Aria-label for the \\\"previous year range\\\" button.\\n     */\\n    prevYearRangeAriaLabel?: string;\\n    /**\\n     * Aria-label for the \\\"next year range\\\" button.\\n     */\\n    nextYearRangeAriaLabel?: string;\\n    /**\\n     * Aria-label for the \\\"close\\\" button.\\n     */\\n    closeButtonAriaLabel?: string;\\n    /**\\n     * Aria-label format string for the week number header. Should have 1 string param e.g. \\\"week number \\\\{0\\\\}\\\"\\n     */\\n    weekNumberFormatString?: string;\\n    /**\\n     * Aria-label format string for the header button in the month picker. Should have 1 string param, e.g. \\\"`{0}`,\\n     * select to change the year\\\". This aria-label will only be applied if the year picker is enabled; otherwise\\n     * the label will default to the header string, e.g. \\\"2019\\\".\\n     */\\n    monthPickerHeaderAriaLabel?: string;\\n    /**\\n     * Aria-label format string for the header button in the year picker.\\n     * Should have 1 string param, e.g. \\\"`{0}`, select to change the month\\\"\\n     */\\n    yearPickerHeaderAriaLabel?: string;\\n}\\n\\nexport declare interface ICalloutBeakPositionedInfo extends IPositionedData {\\n    closestEdge: RectangleEdge;\\n}\\n\\n/**\\n * {@docCategory Callout}\\n */\\nexport declare interface ICalloutContentStyleProps {\\n    /**\\n     * Theme to apply to the calloutContent.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Width for callout including borders.\\n     */\\n    calloutWidth?: number;\\n    /**\\n     * CSS class to apply to the callout.\\n     */\\n    className?: string;\\n    /**\\n     * Callout positioning data\\n     */\\n    positions?: ICalloutPositionedInfo;\\n    /**\\n     * Whether or not to clip content of the callout,\\n     * if it overflows vertically.\\n     */\\n    overflowYHidden?: boolean;\\n    /**\\n     * Background color for the beak and callout.\\n     */\\n    backgroundColor?: string;\\n    /**\\n     * Width of Callout beak\\n     */\\n    beakWidth?: number;\\n    /**\\n     * Max width for callout including borders.\\n     */\\n    calloutMaxWidth?: number;\\n    /**\\n     * Min width for callout including borders.\\n     */\\n    calloutMinWidth?: number;\\n}\\n\\n/**\\n * {@docCategory Callout}\\n */\\nexport declare interface ICalloutContentStyles {\\n    /**\\n     * Style for wrapper of Callout component.\\n     */\\n    container: IStyle;\\n    /**\\n     * Style for callout container root element.\\n     */\\n    root: IStyle;\\n    /**\\n     * Style for callout beak.\\n     */\\n    beak: IStyle;\\n    /**\\n     * Style for callout beak curtain.\\n     */\\n    beakCurtain: IStyle;\\n    /**\\n     * Style for content component of the callout.\\n     */\\n    calloutMain: IStyle;\\n}\\n\\nexport declare interface ICalloutPositionedInfo extends IPositionedData {\\n    beakPosition: ICalloutBeakPositionedInfo;\\n}\\n\\nexport declare interface ICalloutPositionProps extends IPositionProps {\\n    /**\\n     * The width of the beak.\\n     */\\n    beakWidth?: number;\\n    /**\\n     * Whether or not the beak is visible\\n     */\\n    isBeakVisible?: boolean;\\n}\\n\\n/**\\n * {@docCategory Callout}\\n */\\nexport declare interface ICalloutProps extends React.HTMLAttributes<HTMLDivElement> {\\n    /**\\n     * The target that the Callout should try to position itself based on.\\n     * It can be either an Element a querySelector string of a valid Element\\n     * or a MouseEvent. If MouseEvent is given then the origin point of the event will be used.\\n     */\\n    target?: Target;\\n    /**\\n     * How the element should be positioned\\n     * @defaultvalue DirectionalHint.BottomAutoEdge\\n     */\\n    directionalHint?: DirectionalHint;\\n    /**\\n     * How the element should be positioned in RTL layouts.\\n     * If not specified, a mirror of the `directionalHint` alignment edge will be used instead.\\n     * This means that `DirectionalHint.BottomLeft` will change to `DirectionalHint.BottomRight` but\\n     * `DirectionalHint.LeftAuto` will not change.\\n     */\\n    directionalHintForRTL?: DirectionalHint;\\n    /**\\n     * The gap between the Callout and the target\\n     * @defaultvalue 0\\n     */\\n    gapSpace?: number;\\n    /**\\n     * The width of the beak.\\n     * @defaultvalue 16\\n     */\\n    beakWidth?: number;\\n    /**\\n     * Custom width for callout including borders. If value is 0, no width is applied.\\n     * @defaultvalue 0\\n     */\\n    calloutWidth?: number;\\n    /**\\n     * Maximum width for callout including borders. If value is 0, no width is applied.\\n     * @defaultvalue 0\\n     */\\n    calloutMaxWidth?: number;\\n    /**\\n     * Minimum width for callout including borders. If value is 0, no width is applied.\\n     * @defaultvalue 0\\n     */\\n    calloutMinWidth?: number;\\n    /**\\n     * The background color of the Callout in hex format ie. #ffffff.\\n     * @defaultvalue $ms-color-white\\n     */\\n    backgroundColor?: string;\\n    /**\\n     * The bounding rectangle (or callback that returns a rectangle) for which  the contextual menu can appear in.\\n     */\\n    bounds?: IRectangle | ((target?: Target, targetWindow?: Window) => IRectangle | undefined);\\n    /**\\n     * The minimum distance the callout will be away from the edge of the screen.\\n     *  @defaultvalue 8\\n     */\\n    minPagePadding?: number;\\n    /**\\n     * If true then the beak is visible. If false it will not be shown.\\n     * @defaultvalue true\\n     */\\n    isBeakVisible?: boolean;\\n    /**\\n     * If true then the callout will not dismiss on scroll\\n     * @defaultvalue false\\n     * @deprecated use preventDismissOnEvent callback instead\\n     */\\n    preventDismissOnScroll?: boolean;\\n    /**\\n     * If true then the callout will not dismiss on resize\\n     * @defaultvalue false\\n     * @deprecated use preventDismissOnEvent callback instead\\n     */\\n    preventDismissOnResize?: boolean;\\n    /**\\n     * If true then the callout will not dismiss when it loses focus\\n     * @defaultvalue false\\n     * @deprecated use preventDismissOnEvent callback instead\\n     */\\n    preventDismissOnLostFocus?: boolean;\\n    /**\\n     * If true then the callout will dismiss when the target element is clicked\\n     * @defaultvalue false\\n     */\\n    dismissOnTargetClick?: boolean;\\n    /**\\n     * If true then the callout will dismiss when the window gets focus\\n     * @defaultvalue false\\n     */\\n    shouldDismissOnWindowFocus?: boolean;\\n    /**\\n     * If defined, then takes priority over preventDismissOnLostFocus, preventDismissOnResize,\\n     * and preventDismissOnScroll.\\n     * If it returns true, then callout will not dismiss for this event.\\n     * If not defined or returns false, callout can dismiss for this event.\\n     */\\n    preventDismissOnEvent?: (ev: Event | React.FocusEvent | React.KeyboardEvent | React.MouseEvent) => boolean;\\n    /**\\n     * If true the position returned will have the menu element cover the target.\\n     * If false then it will position next to the target;\\n     * @defaultvalue false\\n     */\\n    coverTarget?: boolean;\\n    /**\\n     * If true the positioning logic will prefer to flip edges rather than to nudge the rectangle to fit within bounds,\\n     * thus making sure the element aligns perfectly with target's alignment edge\\n     */\\n    alignTargetEdge?: boolean;\\n    /**\\n     * Aria role assigned to the callout (Eg. dialog, alertdialog).\\n     */\\n    role?: string;\\n    /**\\n     * Accessible label text for callout.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     *  Defines the element id referencing the element containing label text for callout.\\n     */\\n    ariaLabelledBy?: string;\\n    /**\\n     * Defines the element id referencing the element containing the description for the callout.\\n     */\\n    ariaDescribedBy?: string;\\n    /**\\n     * CSS class to apply to the callout.\\n     * @defaultvalue null\\n     */\\n    className?: string;\\n    /**\\n     * CSS style to apply to the callout.\\n     *\\n     * If you set `overflowY` in this object, it provides a performance optimization by preventing\\n     * Popup (underlying component of Callout) from calculating whether it needs a scroll bar.\\n     */\\n    style?: React.CSSProperties;\\n    /**\\n     * Optional callback when the layer content has mounted.\\n     */\\n    onLayerMounted?: () => void;\\n    /**\\n     * Optional props to pass to the Layer component hosting the panel.\\n     */\\n    layerProps?: ILayerProps;\\n    /**\\n     * Optional callback that is called once the callout has been correctly positioned.\\n     * @param positions - Gives the user information about how the callout is positioned such as the\\n     * final edge of the target that it positioned against, the beak position, and the beaks relationship to the\\n     * edges of the callout.\\n     */\\n    onPositioned?: (positions?: ICalloutPositionedInfo) => void;\\n    /**\\n     * Callback when the Callout tries to close.\\n     */\\n    onDismiss?: (ev?: any) => void;\\n    /**\\n     * If true do not render on a new layer. If false render on a new layer.\\n     */\\n    doNotLayer?: boolean;\\n    /**\\n     * If true the position will not change sides in an attempt to fit the callout within bounds.\\n     * It will still attempt to align it to whatever bounds are given.\\n     * @defaultvalue false\\n     */\\n    directionalHintFixed?: boolean;\\n    /**\\n     * Specify the final height of the content.\\n     * To be used when expanding the content dynamically so that callout can adjust its position.\\n     */\\n    finalHeight?: number;\\n    /**\\n     * Manually set OverflowYHidden style prop to true on calloutMain element\\n     * A variety of callout load animations will need this to hide the scollbar that can appear\\n     */\\n    hideOverflow?: boolean;\\n    /**\\n     * If true then the callout will attempt to focus the first focusable element that it contains.\\n     * If it doesn't find an element, no focus will be set and the method will return false.\\n     * This means that it's the contents responsibility to either set focus or have\\n     * focusable items.\\n     * @returns True if focus was set, false if it was not.\\n     */\\n    setInitialFocus?: boolean;\\n    /**\\n     * Set max height of callout\\n     * When not set the callout will expand with contents up to the bottom of the screen\\n     */\\n    calloutMaxHeight?: number;\\n    /**\\n     * Callback when the Callout body is scrolled.\\n     */\\n    onScroll?: () => void;\\n    /**\\n     * Optional theme for component\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Optional styles for the component.\\n     */\\n    styles?: IStyleFunctionOrObject<ICalloutContentStyleProps, ICalloutContentStyles>;\\n    /**\\n     * If specified, renders the Callout in a hidden state.\\n     * Use this flag, rather than rendering a callout conditionally based on visibility,\\n     * to improve rendering performance when it becomes visible.\\n     * Note: When callout is hidden its content will not be rendered. It will only render\\n     * once the callout is visible.\\n     */\\n    hidden?: boolean;\\n    /**\\n     * If true, the component will be updated even when hidden=true.\\n     * Note that this would consume resources to update even though\\n     * nothing is being shown to the user.\\n     * This might be helpful though if your updates are small and you want the\\n     * callout to be revealed fast to the user when hidden is set to false.\\n     */\\n    shouldUpdateWhenHidden?: boolean;\\n    /**\\n     * If true, when this component is unmounted, focus will be restored to the element that had focus when the component\\n     * first mounted.\\n     * @defaultvalue true\\n     * @deprecated use onRestoreFocus callback instead\\n     */\\n    shouldRestoreFocus?: boolean;\\n    /**\\n     * Called when the component is unmounting, and focus needs to be restored.\\n     * Argument passed down contains two variables, the element that the underlying\\n     * popup believes focus should go to * and whether or not the popup currently\\n     * contains focus. If this is provided, focus will not be restored automatically,\\n     * you'll need to call originalElement.focus()\\n     */\\n    onRestoreFocus?: (options: {\\n        originalElement?: HTMLElement | Window;\\n        containsFocus: boolean;\\n        documentContainsFocus: boolean;\\n    }) => void;\\n}\\n\\nexport declare interface ICalloutState {\\n    positions?: ICalloutPositionedInfo;\\n    slideDirectionalClassName?: string;\\n    calloutElementRect?: ClientRect;\\n    heightOffset?: number;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface ICellStyleProps {\\n    cellLeftPadding: number;\\n    cellRightPadding: number;\\n    cellExtraRightPadding: number;\\n}\\n\\n/**\\n * Checkbox class interface.\\n * {@docCategory Checkbox}\\n */\\nexport declare interface ICheckbox {\\n    /** Gets the current indeterminate state. */\\n    indeterminate: boolean;\\n    /** Gets the current checked state. */\\n    checked: boolean;\\n    /** Sets focus to the checkbox. */\\n    focus: () => void;\\n}\\n\\n/**\\n * Checkbox properties.\\n * {@docCategory Checkbox}\\n */\\nexport declare interface ICheckboxProps extends React.ButtonHTMLAttributes<HTMLElement | HTMLInputElement> {\\n    /**\\n     * Optional callback to access the ICheckbox interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<ICheckbox>;\\n    /**\\n     * Additional class name to provide on the root element, in addition to the ms-Checkbox class.\\n     */\\n    className?: string;\\n    /**\\n     * Checked state. Mutually exclusive to \\\"defaultChecked\\\". Use this if you control the checked state at a higher\\n     * level and plan to pass in the correct value based on handling onChange events and re-rendering.\\n     */\\n    checked?: boolean;\\n    /**\\n     * Default checked state. Mutually exclusive to \\\"checked\\\". Use this if you want an uncontrolled component, and\\n     * want the Checkbox instance to maintain its own state.\\n     */\\n    defaultChecked?: boolean;\\n    /**\\n     * Label to display next to the checkbox.\\n     */\\n    label?: string;\\n    /**\\n     * Disabled state of the checkbox.\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Callback that is called when the checked value has changed.\\n     */\\n    onChange?: (ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => void;\\n    /**\\n     * Optional input props that will be mixed into the input element, *before* other props are applied. This allows\\n     * you to extend the input element with additional attributes, such as data-automation-id needed for automation.\\n     * Note that if you provide, for example, \\\"disabled\\\" as well as \\\"inputProps.disabled\\\", the former will take\\n     * precedence over the later.\\n     */\\n    inputProps?: React.ButtonHTMLAttributes<HTMLElement | HTMLButtonElement>;\\n    /**\\n     * Allows you to set the checkbox to be at the before (start) or after (end) the label.\\n     * @defaultvalue 'start'\\n     */\\n    boxSide?: 'start' | 'end';\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Accessible label for the checkbox.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * ID for element that contains label information for the checkbox.\\n     */\\n    ariaLabelledBy?: string;\\n    /**\\n     * ID for element that provides extended information for the checkbox.\\n     */\\n    ariaDescribedBy?: string;\\n    /**\\n     * The position in the parent set (if in a set) for aria-posinset.\\n     */\\n    ariaPositionInSet?: number;\\n    /**\\n     * The total size of the parent set (if in a set) for aria-setsize.\\n     */\\n    ariaSetSize?: number;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<ICheckboxStyleProps, ICheckboxStyles>;\\n    /**\\n     * Custom render function for the label.\\n     */\\n    onRenderLabel?: IRenderFunction<ICheckboxProps>;\\n    /**\\n     * Custom icon props for the check mark rendered by the checkbox\\n     */\\n    checkmarkIconProps?: IIconProps;\\n    /**\\n     * Optional keytip for this checkbox\\n     */\\n    keytipProps?: IKeytipProps;\\n    /**\\n     * Optional controlled indeterminate visual state for checkbox. Setting indeterminate state takes visual precedence\\n     * over checked or defaultChecked props given but does not affect checked state.\\n     * This should not be a toggleable state. On load the checkbox will receive indeterminate visual state\\n     * and after the first user click it should be removed by your supplied onChange callback\\n     * function exposing the true state of the checkbox.\\n     */\\n    indeterminate?: boolean;\\n    /**\\n     * Optional uncontrolled indeterminate visual state for checkbox. Setting indeterminate state takes visual precedence\\n     * over checked or defaultChecked props given but does not affect checked state.\\n     * This is not a toggleable state. On load the checkbox will receive indeterminate visual state\\n     * and after the user's first click it will be removed exposing the true state of the checkbox.\\n     */\\n    defaultIndeterminate?: boolean;\\n}\\n\\nexport declare interface ICheckboxState {\\n    /** Is true when Uncontrolled control is checked. */\\n    isChecked?: boolean;\\n    isIndeterminate?: boolean;\\n}\\n\\n/**\\n * {@docCategory Checkbox}\\n */\\nexport declare interface ICheckboxStyleProps {\\n    theme: ITheme;\\n    className?: string;\\n    disabled?: boolean;\\n    checked?: boolean;\\n    reversed?: boolean;\\n    indeterminate?: boolean;\\n    isUsingCustomLabelRender: boolean;\\n}\\n\\n/**\\n * {@docCategory Checkbox}\\n */\\nexport declare interface ICheckboxStyles {\\n    /**\\n     * Style for the root element (a button) of the checkbox component in the default enabled/unchecked state.\\n     */\\n    root?: IStyle;\\n    /**\\n     * INTERNAL: This is mostly an internal implementation detail which you should avoid styling.\\n     * This refers to the <input type=\\\"checkbox\\\"> element that is typically hidden and not rendered on screen.\\n     */\\n    input?: IStyle;\\n    /**\\n     * Style for the label part (contains the customized checkbox + text) when enabled.\\n     */\\n    label?: IStyle;\\n    /**\\n     * Style for checkbox in its default unchecked/enabled state.\\n     */\\n    checkbox?: IStyle;\\n    /**\\n     * Style for the checkmark in the default enabled/unchecked state.\\n     */\\n    checkmark?: IStyle;\\n    /**\\n     * Style for text appearing with the checkbox in its default enabled state.\\n     */\\n    text?: IStyle;\\n}\\n\\n/**\\n * {@docCategory Check}\\n */\\nexport declare interface ICheckProps {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<ICheckProps>;\\n    /**\\n     * Whether or not this menu item is currently checked.\\n     * @defaultvalue false\\n     */\\n    checked?: boolean;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<ICheckStyleProps, ICheckStyles>;\\n    /**\\n     * @deprecated Not used\\n     */\\n    alwaysShowCheck?: boolean;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Additional css class to apply to the Check\\n     */\\n    className?: string;\\n    /**\\n     * Whether to use fast icon components. The icons can't be targeted by customization but are\\n     * still customizable via class names.\\n     * @defaultvalue true\\n     */\\n    useFastIcons?: boolean;\\n}\\n\\n/**\\n * {@docCategory Check}\\n */\\nexport declare type ICheckStyleProps = Required<Pick<ICheckProps, 'theme'>> & Pick<ICheckProps, 'className' | 'checked'> & {\\n    /**\\n     * Custom height/width for the checkbox.\\n     * @defaultvalue '18px'\\n     */\\n    height?: string;\\n    /**\\n     * Custom height/width for the checkbox.\\n     * @defaultvalue '18px'\\n     * @deprecated Use `height`\\n     */\\n    checkBoxHeight?: string;\\n};\\n\\n/**\\n * {@docCategory Check}\\n */\\nexport declare interface ICheckStyles {\\n    /**\\n     * Style for the root element.\\n     */\\n    root: IStyle;\\n    /**\\n     * The 'check' icon styles.\\n     */\\n    check: IStyle;\\n    /**\\n     * The 'circle' icon styles.\\n     */\\n    circle: IStyle;\\n    /**\\n     * Check host style\\n     * @deprecated Not used directly within the component. Instead, use `CheckGlobalClassNames.checkHost` from\\n     * `Check.styles.ts` to get the static class name to apply to the parent element of the Check.\\n     */\\n    checkHost: IStyle;\\n}\\n\\n/**\\n * {@docCategory ChoiceGroup}\\n */\\nexport declare interface IChoiceGroup {\\n    /**\\n     * Gets the current checked option.\\n     */\\n    checkedOption: IChoiceGroupOption | undefined;\\n    /**\\n     * Sets focus to the checked option or the first enabled option in the ChoiceGroup.\\n     */\\n    focus: () => void;\\n}\\n\\n/**\\n * {@docCategory ChoiceGroup}\\n */\\nexport declare interface IChoiceGroupOption extends React.InputHTMLAttributes<HTMLElement | HTMLInputElement> {\\n    /**\\n     * A required key to uniquely identify the option.\\n     */\\n    key: string;\\n    /**\\n     * The text string for the option.\\n     */\\n    text: string;\\n    /**\\n     * Used to customize option rendering.\\n     */\\n    onRenderField?: IRenderFunction<IChoiceGroupOption>;\\n    /**\\n     * Used to customize label rendering.\\n     */\\n    onRenderLabel?: IRenderFunction<IChoiceGroupOption>;\\n    /**\\n     * Props for an icon to display with this option.\\n     */\\n    iconProps?: IIconProps;\\n    /**\\n     * Image to display with this option.\\n     */\\n    imageSrc?: string;\\n    /**\\n     * Alt text if the option is an image.\\n     * @default '' (empty string)\\n     */\\n    imageAlt?: string;\\n    /**\\n     * The src of image for choice field which is selected.\\n     */\\n    selectedImageSrc?: string;\\n    /**\\n     * The width and height of the image in px for choice field.\\n     * @defaultvalue `{ width: 32, height: 32 }`\\n     */\\n    imageSize?: {\\n        width: number;\\n        height: number;\\n    };\\n    /**\\n     * Whether or not the option is disabled.\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Whether or not the option is checked.\\n     * @deprecated Do not track checked state in the options themselves. Instead, either pass\\n     * `defaultSelectedKey` to the `ChoiceGroup` and allow it to track selection state internally\\n     * (uncontrolled), or pass `selectedKey` and `onChange` to the `ChoiceGroup` to track/update\\n     * the selection state manually (controlled).\\n     */\\n    checked?: boolean;\\n    /**\\n     * ID used on the option's input element.\\n     */\\n    id?: string;\\n    /**\\n     * ID used on the option's label.\\n     */\\n    labelId?: string;\\n    /**\\n     * Aria label of the option for the benefit of screen reader users.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IChoiceGroupOptionStyleProps, IChoiceGroupOptionStyles>;\\n}\\n\\n/**\\n * {@docCategory ChoiceGroup}\\n */\\nexport declare interface IChoiceGroupOptionProps extends IChoiceGroupOption {\\n    /**\\n     * Optional callback to access the IChoiceGroup interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IChoiceGroupOption>;\\n    /**\\n     * A callback for receiving a notification when the choice has been changed.\\n     */\\n    onChange?: (evt?: React.FormEvent<HTMLElement | HTMLInputElement>, props?: IChoiceGroupOption) => void;\\n    /**\\n     * A callback for receiving a notification when the choice has received focus.\\n     */\\n    onFocus?: (ev?: React.FocusEvent<HTMLElement | HTMLInputElement>, props?: IChoiceGroupOption) => void | undefined;\\n    /**\\n     * A callback for receiving a notification when the choice has lost focus.\\n     */\\n    onBlur?: (ev: React.FocusEvent<HTMLElement>, props?: IChoiceGroupOption) => void;\\n    /**\\n     * Indicates if the ChoiceGroupOption should appear focused, visually\\n     */\\n    focused?: boolean;\\n    /**\\n     * Theme (provided through customization.)\\n     */\\n    theme?: ITheme;\\n    /**\\n     * If true, it specifies that an option must be selected in the ChoiceGroup before submitting the form\\n     */\\n    required?: boolean;\\n    /**\\n     * This value is used to group each ChoiceGroupOption into the same logical ChoiceGroup\\n     */\\n    name?: string;\\n}\\n\\n/**\\n * Defines props needed to construct styles.\\n * This represents the simplified set of immutable things which control the class names.\\n * {@docCategory ChoiceGroup}\\n */\\nexport declare interface IChoiceGroupOptionStyleProps {\\n    /** Theme provided by High-Order Component. */\\n    theme: ITheme;\\n    /** Whether the option has an icon. */\\n    hasIcon?: boolean;\\n    /** Whether the option icon is an image. */\\n    hasImage?: boolean;\\n    /** Whether the option is checked or not. */\\n    checked?: boolean;\\n    /** Whether the option is disabled or not. */\\n    disabled?: boolean;\\n    /** Whether the image width or height are higher than `71`. */\\n    imageIsLarge?: boolean;\\n    /**\\n     * Image sizes used when `hasImage` or `hasIcon` style props are enabled.\\n     * @defaultvalue \\\\{height: 32, width: 32\\\\}\\n     */\\n    imageSize?: {\\n        height: number;\\n        width: number;\\n    };\\n    /** Whether the option is in focus or not. */\\n    focused?: boolean;\\n}\\n\\n/**\\n * {@docCategory ChoiceGroup}\\n */\\nexport declare interface IChoiceGroupOptionStyles {\\n    root?: IStyle;\\n    choiceFieldWrapper?: IStyle;\\n    input?: IStyle;\\n    field?: IStyle;\\n    innerField?: IStyle;\\n    imageWrapper?: IStyle;\\n    selectedImageWrapper?: IStyle;\\n    iconWrapper?: IStyle;\\n    labelWrapper?: IStyle;\\n}\\n\\n/**\\n * {@docCategory ChoiceGroup}\\n */\\nexport declare interface IChoiceGroupProps extends React.InputHTMLAttributes<HTMLElement | HTMLInputElement> {\\n    /**\\n     * Optional callback to access the IChoiceGroup interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IChoiceGroup>;\\n    /**\\n     * The options for the choice group.\\n     */\\n    options?: IChoiceGroupOption[];\\n    /**\\n     * The key of the option that will be initially checked.\\n     */\\n    defaultSelectedKey?: string | number;\\n    /**\\n     * The key of the selected option. If you provide this, you must maintain selection\\n     * state by observing onChange events and passing a new value in when changed.\\n     */\\n    selectedKey?: string | number;\\n    /**\\n     * A callback for receiving a notification when the choice has been changed.\\n     */\\n    onChange?: (ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOption) => void;\\n    /**\\n     * Descriptive label for the choice group.\\n     */\\n    label?: string;\\n    /**\\n     * Deprecated and will be removed by 07/17/2017. Use `onChange` instead.\\n     * @deprecated Use `onChange` instead.\\n     */\\n    onChanged?: (option: IChoiceGroupOption, evt?: React.FormEvent<HTMLElement | HTMLInputElement>) => void;\\n    /**\\n     * Theme (provided through customization).\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IChoiceGroupStyleProps, IChoiceGroupStyles>;\\n    /**\\n     * ID of an element to use as the aria label for this ChoiceGroup.\\n     */\\n    ariaLabelledBy?: string;\\n}\\n\\nexport declare interface IChoiceGroupState {\\n    /**\\n     * Current selected option, for **internal use only**.\\n     * External users should access `IChoiceGroup.checkedOption` instead.\\n     */\\n    keyChecked?: string | number;\\n    /** Is set when the control has focus. */\\n    keyFocused?: string | number;\\n}\\n\\n/**\\n * {@docCategory ChoiceGroup}\\n */\\nexport declare interface IChoiceGroupStyleProps {\\n    theme: ITheme;\\n    className?: string;\\n    optionsContainIconOrImage?: boolean;\\n}\\n\\n/**\\n * {@docCategory ChoiceGroup}\\n */\\nexport declare interface IChoiceGroupStyles {\\n    /**\\n     * The actual root of the component.\\n     * @deprecated Styles will be merged with `root` in a future release.\\n     */\\n    applicationRole?: IStyle;\\n    /**\\n     * Not currently the actual root of the component (will be fixed in a future release).\\n     * For now, to style the actual root, use `applicationRole`.\\n     */\\n    root?: IStyle;\\n    label?: IStyle;\\n    flexContainer?: IStyle;\\n}\\n\\n/**\\n * Circle element interface\\n * {@docCategory Shimmer}\\n */\\nexport declare interface ICircle extends IShimmerElement {\\n    /**\\n     * Sets the height of the shimmer circle in pixels.\\n     * Minimum supported 10px.\\n     * @defaultvalue 24px\\n     */\\n    height?: number;\\n}\\n\\n/**\\n * {@docCategory Coachmark}\\n */\\nexport declare interface ICoachmark {\\n    /**\\n     * Forces the Coachmark to dismiss\\n     */\\n    dismiss?: (ev?: any) => void;\\n}\\n\\n/**\\n * Coachmark component props\\n * {@docCategory Coachmark}\\n */\\nexport declare interface ICoachmarkProps extends React.ClassAttributes<CoachmarkBase> {\\n    /**\\n     * Optional callback to access the ICoachmark interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<ICoachmark>;\\n    /**\\n     * If provided, additional class name to provide on the root element.\\n     */\\n    className?: string;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<ICoachmarkStyleProps, ICoachmarkStyles>;\\n    /**\\n     * The target that the Coachmark should try to position itself based on.\\n     */\\n    target: HTMLElement | string | null;\\n    /**\\n     * Props to pass to the PositioningContainer component. Specify the `directionalHint` to indicate\\n     * on which edge the Coachmark/TeachingBubble should be positioned.\\n     * @defaultvalue directionalHint: DirectionalHint.bottomAutoEdge\\n     */\\n    positioningContainerProps?: IPositioningContainerProps;\\n    /**\\n     * Whether or not to force the Coachmark/TeachingBubble content to fit within the window bounds.\\n     * @defaultvalue true\\n     */\\n    isPositionForced?: boolean;\\n    /**\\n     * The starting collapsed state for the Coachmark.  Use `isCollapsed` instead.\\n     * @defaultvalue true\\n     * @deprecated Use `isCollapsed` instead.\\n     */\\n    collapsed?: boolean;\\n    /**\\n     * The starting collapsed state for the Coachmark.\\n     * @defaultvalue true\\n     */\\n    isCollapsed?: boolean;\\n    /**\\n     * The distance in pixels the mouse is located\\n     * before opening up the Coachmark.\\n     * @defaultvalue 10\\n     */\\n    mouseProximityOffset?: number;\\n    /**\\n     * Callback when the opening animation begins.\\n     */\\n    onAnimationOpenStart?: () => void;\\n    /**\\n     * Callback when the opening animation completes.\\n     */\\n    onAnimationOpenEnd?: () => void;\\n    /**\\n     * The width of the Beak component.\\n     * @deprecated No longer used.\\n     */\\n    beakWidth?: number;\\n    /**\\n     * The height of the Beak component.\\n     * @deprecated No longer used.\\n     */\\n    beakHeight?: number;\\n    /**\\n     * Delay before allowing mouse movements to open the Coachmark.\\n     * @defaultvalue 3600\\n     */\\n    delayBeforeMouseOpen?: number;\\n    /**\\n     * Delay in milliseconds before Coachmark animation appears.\\n     * @defaultvalue 0\\n     */\\n    delayBeforeCoachmarkAnimation?: number;\\n    /**\\n     * Callback to run when the mouse moves.\\n     */\\n    onMouseMove?: (e: MouseEvent) => void;\\n    /**\\n     * The width of the Coachmark.\\n     * @deprecated No longer used.\\n     */\\n    width?: number;\\n    /**\\n     * The height of the Coachmark.\\n     * @deprecated No longer used.\\n     */\\n    height?: number;\\n    /**\\n     * Color of the Coachmark/TeachingBubble.\\n     */\\n    color?: string;\\n    /**\\n     * Beacon color one.\\n     */\\n    beaconColorOne?: string;\\n    /**\\n     * Beacon color two.\\n     */\\n    beaconColorTwo?: string;\\n    /**\\n     * Text to announce to screen reader / narrator when Coachmark is displayed\\n     */\\n    ariaAlertText?: string;\\n    /**\\n     * Ref for TeachingBubble\\n     * @deprecated Coachmark uses `focusFirstChild` utility instead to focus on TeachingBubbleContent\\n     */\\n    teachingBubbleRef?: ITeachingBubble;\\n    /**\\n     *  Defines the element id referencing the element containing label text for Coachmark.\\n     */\\n    ariaLabelledBy?: string;\\n    /**\\n     * Defines the element id referencing the element containing the description for the Coachmark.\\n     */\\n    ariaDescribedBy?: string;\\n    /**\\n     *  Defines the text content for the ariaLabelledBy element\\n     */\\n    ariaLabelledByText?: string;\\n    /**\\n     * Defines the text content for the ariaDescribedBy element\\n     */\\n    ariaDescribedByText?: string;\\n    /**\\n     * If true then the Coachmark will not dismiss when it loses focus\\n     * @defaultvalue false\\n     */\\n    preventDismissOnLostFocus?: boolean;\\n    /**\\n     * If true then the Coachmark beak (arrow pointing towards target) will always be visible as long as\\n     * Coachmark is visible\\n     * @defaultvalue false\\n     */\\n    persistentBeak?: boolean;\\n    /**\\n     * If true then focus will not be set to the Coachmark when it mounts. Useful in cases where focus on coachmark\\n     * is causing other components in page to dismiss upon losing focus.\\n     * @defaultvalue false\\n     */\\n    preventFocusOnMount?: boolean;\\n    /**\\n     * Callback when the Coachmark tries to close.\\n     */\\n    onDismiss?: (ev?: any) => void;\\n    /**\\n     * Theme provided by higher order component.\\n     */\\n    theme?: ITheme;\\n}\\n\\nexport declare interface ICoachmarkState {\\n    /**\\n     * Is the Coachmark currently collapsed into\\n     * a tear drop shape\\n     */\\n    isCollapsed: boolean;\\n    /**\\n     * Enables/Disables the beacon that radiates\\n     * from the center of the coachmark.\\n     */\\n    isBeaconAnimating: boolean;\\n    /**\\n     * Is the teaching bubble currently retreiving the\\n     * original dimensions of the hosted entity.\\n     */\\n    isMeasuring: boolean;\\n    /**\\n     * Is the Coachmark done measuring the hosted entity\\n     */\\n    isMeasured: boolean;\\n    /**\\n     * Cached width and height of _entityInnerHostElement\\n     */\\n    entityInnerHostRect: IEntityRect;\\n    /**\\n     * Is the mouse in proximity of the default target element\\n     */\\n    isMouseInProximity: boolean;\\n    /**\\n     * The left position of the beak\\n     */\\n    beakLeft?: string;\\n    /**\\n     * The right position of the beak\\n     */\\n    beakTop?: string;\\n    /**\\n     * The right position of the beak\\n     */\\n    beakRight?: string;\\n    /**\\n     * The bottom position of the beak\\n     */\\n    beakBottom?: string;\\n    /**\\n     * Alignment edge of callout in relation to target\\n     */\\n    targetAlignment?: RectangleEdge;\\n    /**\\n     * Position of Coachmark/TeachingBubble in relation to target\\n     */\\n    targetPosition?: RectangleEdge;\\n    /**\\n     * Transform origin of teaching bubble callout\\n     */\\n    transformOrigin?: string;\\n    /**\\n     * ARIA alert text to read aloud with Narrator once the Coachmark is mounted\\n     */\\n    alertText?: string;\\n}\\n\\n/**\\n * The props needed to construct styles.\\n * {@docCategory Coachmark}\\n */\\nexport declare interface ICoachmarkStyleProps {\\n    /**\\n     * ClassName to provide on the root style area.\\n     */\\n    className?: string;\\n    /**\\n     * Current theme.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Is the Coachmark collapsed.\\n     * Deprecated, use `isCollapsed` instead.\\n     * @deprecated Use `isCollapsed` instead.\\n     */\\n    collapsed?: boolean;\\n    /**\\n     * Is the Coachmark collapsed\\n     */\\n    isCollapsed: boolean;\\n    /**\\n     * Is the beacon currently animating.\\n     * @deprecated Property is never used\\n     */\\n    isBeaconAnimating: boolean;\\n    /**\\n     * Is the component taking measurements\\n     */\\n    isMeasuring: boolean;\\n    /**\\n     * Is the Coachmark finished measuring the dimensions of innerHostElement\\n     * @deprecated Value is always the inverse of `isMeasuring`\\n     */\\n    isMeasured: boolean;\\n    /**\\n     * The height measured before the component has been mounted\\n     * in pixels\\n     */\\n    entityHostHeight?: string;\\n    /**\\n     * The width measured in pixels\\n     */\\n    entityHostWidth?: string;\\n    /**\\n     * Width of the coachmark\\n     */\\n    width?: string;\\n    /**\\n     * Height of the coachmark\\n     */\\n    height?: string;\\n    /**\\n     * Color\\n     */\\n    color?: string;\\n    /**\\n     * Beacon color one\\n     */\\n    beaconColorOne?: string;\\n    /**\\n     * Beacon color two\\n     */\\n    beaconColorTwo?: string;\\n    /**\\n     * Transform origin for teaching bubble content\\n     */\\n    transformOrigin?: string;\\n    /**\\n     * Delay time for the animation to start\\n     */\\n    delayBeforeCoachmarkAnimation?: string;\\n}\\n\\n/**\\n * Represents the stylable areas of the control.\\n * {@docCategory Coachmark}\\n */\\nexport declare interface ICoachmarkStyles {\\n    /**\\n     * Style for the root element in the default enabled/unchecked state.\\n     */\\n    root?: IStyle;\\n    /**\\n     * The pulsing beacon that animates when the Coachmark is collapsed.\\n     */\\n    pulsingBeacon?: IStyle;\\n    /**\\n     * The layer, or div, that the translate animation will be applied to.\\n     */\\n    translateAnimationContainer?: IStyle;\\n    /**\\n     * The layer the Scale animation will be applied to.\\n     */\\n    scaleAnimationLayer?: IStyle;\\n    /**\\n     * The layer the Rotate animation will be applied to.\\n     */\\n    rotateAnimationLayer?: IStyle;\\n    /**\\n     * The layer that content/components/elements will be hosted in.\\n     */\\n    entityHost?: IStyle;\\n    /**\\n     * The inner layer that components will be hosted in\\n     * and primary purpose is scaling the layer down while the\\n     * Coachmark collapsed.\\n     */\\n    entityInnerHost: IStyle;\\n    /**\\n     * The layer that directly contains the TeachingBubbleContent\\n     */\\n    childrenContainer: IStyle;\\n    /**\\n     * The styles applied when the Coachmark has collapsed.\\n     */\\n    collapsed?: IStyle;\\n    /**\\n     * The styles applied to the ARIA attribute container\\n     */\\n    ariaContainer?: IStyle;\\n}\\n\\n/**\\n * @deprecated No longer used.\\n * {@docCategory Coachmark}\\n */\\nexport declare type ICoachmarkTypes = ICoachmarkProps;\\n\\nexport declare interface IColor extends IRGB, IHSV {\\n    /** Hex string for the color (excluding alpha component), *not* prefixed with #. */\\n    hex: string;\\n    /** CSS color string. If a hex value, it must be prefixed with #. */\\n    str: string;\\n    /** Transparency value, range 0 (opaque) to 100 (transparent). Usually assumed to be 0 if not specified. */\\n    t?: number;\\n}\\n\\n/**\\n * {@docCategory SwatchColorPicker}\\n */\\nexport declare interface IColorCellProps {\\n    /**\\n     * Arbitrary unique string associated with this option\\n     */\\n    id: string;\\n    /**\\n     * Tooltip and aria label for this item\\n     */\\n    label?: string;\\n    /**\\n     * The CSS-compatible string to describe the color\\n     */\\n    color?: string;\\n    /**\\n     * Index for this option\\n     */\\n    index?: number;\\n}\\n\\n/**\\n * {@docCategory ColorPicker}\\n */\\nexport declare interface IColorPicker {\\n    /** The currently selected color. */\\n    color: IColor;\\n}\\n\\n/**\\n * {@docCategory SwatchColorPicker}\\n */\\nexport declare interface IColorPickerGridCellProps {\\n    /**\\n     * Item to render\\n     */\\n    item: IColorCellProps;\\n    /**\\n     * Used as a PREFIX for the cell's ID (the cell will not have this literal string as its ID).\\n     * @deprecated Deprecated due to misleading name. Use `idPrefix` instead.\\n     */\\n    id?: string;\\n    /**\\n     * Prefix for this cell's ID. Will be required in a future version once `id` is removed.\\n     */\\n    idPrefix?: string;\\n    /**\\n     * Tooltip and aria label for this item\\n     */\\n    label?: string;\\n    /**\\n     * The CSS-compatible string to describe the color\\n     */\\n    color?: string;\\n    /**\\n     * Index for this option\\n     */\\n    index?: number;\\n    /**\\n     * The theme object to use for styling.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * True if this cell should be rendered as a circle, false if it should be a square.\\n     * @default `true` (render as circle)\\n     */\\n    circle?: boolean;\\n    /**\\n     * Whether this cell should be disabled\\n     * @default false\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Whether this cell is currently selected\\n     */\\n    selected: boolean;\\n    /**\\n     * Height of the cell, in pixels\\n     * @defaultvalue 20\\n     */\\n    height?: number;\\n    /**\\n     * Width of the cell, in pixels\\n     * @defaultvalue 20\\n     */\\n    width?: number;\\n    /**\\n     * Width of the border that indicates a selected/hovered cell, in pixels.\\n     * @defaultvalue 2 if `cellWidth` is less than 24; otherwise 4\\n     */\\n    borderWidth?: number;\\n    /**\\n     * Handler for when a color cell is clicked.\\n     */\\n    onClick?: (item: IColorCellProps) => void;\\n    onHover?: (item?: IColorCellProps) => void;\\n    onFocus?: (item: IColorCellProps) => void;\\n    /**\\n     * Custom styles for the component.\\n     */\\n    styles?: IStyleFunctionOrObject<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>;\\n    /**\\n     * Mouse enter handler. Returns true if the event should be processed, false otherwise.\\n     */\\n    onMouseEnter?: (ev: React.MouseEvent<HTMLButtonElement>) => boolean;\\n    /**\\n     * Mouse move handler. Returns true if the event should be processed, false otherwise.\\n     */\\n    onMouseMove?: (ev: React.MouseEvent<HTMLButtonElement>) => boolean;\\n    onMouseLeave?: (ev: React.MouseEvent<HTMLButtonElement>) => void;\\n    onWheel?: (ev: React.MouseEvent<HTMLButtonElement>) => void;\\n    onKeyDown?: (ev: React.KeyboardEvent<HTMLButtonElement>) => void;\\n}\\n\\n/**\\n * {@docCategory SwatchColorPicker}\\n */\\nexport declare interface IColorPickerGridCellStyleProps {\\n    /**\\n     * Theme to apply to the cell.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Whether the component is disabled or not.\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Whether the cell is currently selected or not.\\n     */\\n    selected?: boolean;\\n    /**\\n     * Whether the svg color element should be rendered as a circle or not.\\n     */\\n    circle?: boolean;\\n    /**\\n     * Whether the color being rendered is white or not. If it is white we show a border around it.\\n     */\\n    isWhite?: boolean;\\n    /**\\n     * The height of this cell, in pixels.\\n     */\\n    height?: number;\\n    /**\\n     * The width of this cell, in pixels.\\n     */\\n    width?: number;\\n    /**\\n     * The width of the border indicating a hovered or selected cell, in pixels.\\n     */\\n    borderWidth?: number;\\n}\\n\\n/**\\n * {@docCategory SwatchColorPicker}\\n */\\nexport declare interface IColorPickerGridCellStyles {\\n    /**\\n     * Style to apply to a colorCell in the color picker.\\n     */\\n    colorCell: IStyle;\\n    /**\\n     * Style to apply to the svg element that renders the color.\\n     */\\n    svg: IStyle;\\n}\\n\\n/**\\n * {@docCategory ColorPicker}\\n */\\nexport declare interface IColorPickerProps {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<IColorPicker>;\\n    /**\\n     * Object or CSS-compatible string to describe the color.\\n     */\\n    color: IColor | string;\\n    /**\\n     * Labels for elements within the ColorPicker. Defaults are provided in English only.\\n     */\\n    strings?: IColorPickerStrings;\\n    /**\\n     * Callback for when the user changes the color.\\n     * (Not called when the color is changed via props.)\\n     */\\n    onChange?: (ev: React.SyntheticEvent<HTMLElement>, color: IColor) => void;\\n    /**\\n     * `alpha` (the default) means display a slider and text field for editing alpha values.\\n     * `transparency` also displays a slider and text field but for editing transparency values.\\n     * `none` hides these controls.\\n     *\\n     * Alpha represents the opacity of the color, whereas transparency represents the transparentness\\n     * of the color: i.e. a 30% transparent color has 70% opaqueness.\\n     *\\n     * @defaultvalue 'alpha'\\n     */\\n    alphaType?: 'alpha' | 'transparency' | 'none';\\n    /**\\n     * Whether to hide the alpha (or transparency) slider and text field.\\n     * @deprecated Use `alphaType: 'none'`\\n     */\\n    alphaSliderHidden?: boolean;\\n    /**\\n     * Label for the hex text field.\\n     * @defaultvalue Hex\\n     * @deprecated Use `strings`\\n     */\\n    hexLabel?: string;\\n    /**\\n     * Label for the red text field.\\n     * @defaultvalue Red\\n     * @deprecated Use `strings`\\n     */\\n    redLabel?: string;\\n    /**\\n     * Label for the green text field.\\n     * @defaultvalue Green\\n     * @deprecated Use `strings`\\n     */\\n    greenLabel?: string;\\n    /**\\n     * Label for the blue text field.\\n     * @defaultvalue Blue\\n     * @deprecated Use `strings`\\n     */\\n    blueLabel?: string;\\n    /**\\n     * Label for the alpha textfield.\\n     * @defaultvalue Alpha\\n     * @deprecated Use `strings`\\n     */\\n    alphaLabel?: string;\\n    /**\\n     * Additional CSS class(es) to apply to the ColorPicker.\\n     */\\n    className?: string;\\n    /**\\n     * Theme (provided through customization).\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IColorPickerStyleProps, IColorPickerStyles>;\\n    /**\\n     * Whether to show color preview box.\\n     * @defaultvalue false\\n     */\\n    showPreview?: boolean;\\n}\\n\\nexport declare interface IColorPickerState {\\n    /** Most recently selected color */\\n    color: IColor;\\n    /** Color component currently being edited via a text field (if intermediate value is invalid) */\\n    editingColor?: {\\n        /** Which color component is being edited */\\n        component: ColorComponent;\\n        /** Currently entered value, which is not valid */\\n        value: string;\\n    };\\n}\\n\\nexport declare interface IColorPickerStrings {\\n    /**\\n     * Accessible label for the root of the color picker region.\\n     * The string should contain a placeholder `{0}` for the currently selected color.\\n     * @defaultvalue `'Color picker, {0} selected.'`\\n     */\\n    rootAriaLabelFormat?: string;\\n    /**\\n     * Label for the hex text field.\\n     * @defaultvalue Hex\\n     */\\n    hex?: string;\\n    /**\\n     * Label for the red text field.\\n     * @defaultvalue Red\\n     */\\n    red?: string;\\n    /**\\n     * Label for the green text field.\\n     * @defaultvalue Green\\n     */\\n    green?: string;\\n    /**\\n     * Label for the blue text field.\\n     * @defaultvalue Blue\\n     */\\n    blue?: string;\\n    /**\\n     * Label for the alpha text field.\\n     * Also used as the aria label for the alpha slider if `alphaAriaLabel` is not provided.\\n     * @defaultvalue Alpha\\n     */\\n    alpha?: string;\\n    /**\\n     * Label for the transparency text field.\\n     * @defaultvalue Transparency\\n     */\\n    transparency?: string;\\n    /**\\n     * Customized aria-label for the alpha slider.\\n     */\\n    alphaAriaLabel?: string;\\n    /**\\n     * Customized aria-label for the transparency slider.\\n     */\\n    transparencyAriaLabel?: string;\\n    /**\\n     * Aria label for the hue slider.\\n     * @defaultvalue Hue\\n     */\\n    hueAriaLabel?: string;\\n    /**\\n     * Aria label for the hue slider.\\n     * @deprecated Use `hueAriaLabel`\\n     */\\n    hue?: string;\\n    /**\\n     * Aria label for the color rectangle, which adjusts saturation and value (brightness).\\n     * @defaultvalue 'Saturation and brightness'\\n     */\\n    svAriaLabel?: string;\\n    /**\\n     * Format string for the current values of the color rectangle.\\n     * The string must include descriptions and two placeholders for the current values:\\n     * `{0}` for saturation and `{1}` for value/brightness.\\n     * @defaultvalue `'Saturation {0} brightness {1}'`\\n     */\\n    svAriaValueFormat?: string;\\n    /**\\n     * Detailed description for how to use the color rectangle. Moving the thumb horizontally adjusts\\n     * saturation and moving it vertically adjusts value (essentially, brightness).\\n     * @defaultvalue 'Use left and right arrow keys to set saturation. Use up and down arrow keys to set brightness.'\\n     */\\n    svAriaDescription?: string;\\n}\\n\\n/**\\n * {@docCategory ColorPicker}\\n */\\nexport declare type IColorPickerStyleProps = Required<Pick<IColorPickerProps, 'theme'>> & Pick<IColorPickerProps, 'className' | 'alphaType'>;\\n\\n/**\\n * {@docCategory ColorPicker}\\n */\\nexport declare interface IColorPickerStyles {\\n    /**\\n     * Style set for the root element.\\n     */\\n    root?: IStyle;\\n    /**\\n     * Style set for the panel element that contains the color rectangle, color sliders and inputs .\\n     */\\n    panel?: IStyle;\\n    /**\\n     * Style set for the panel element that contains the color rectangle\\n     */\\n    colorRectangle?: IStyle;\\n    /**\\n     * Style set for the table element that contains the color sliders and inputs.\\n     */\\n    table?: IStyle;\\n    /**\\n     * Style set for the table header that contains the labels.\\n     */\\n    tableHeader?: IStyle;\\n    /**\\n     * Style set for the table cell that contains the hex label.\\n     */\\n    tableHexCell?: IStyle;\\n    /**\\n     * Style set for the table cell that contains the alpha or transparency label.\\n     */\\n    tableAlphaCell?: IStyle;\\n    /**\\n     * Style set for each text field input.\\n     */\\n    input?: IStyle;\\n    /**\\n     * Color Square\\n     */\\n    colorSquare?: IStyle;\\n    /**\\n     * flexContainer\\n     */\\n    flexContainer?: IStyle;\\n    /**\\n     * flexSlider\\n     */\\n    flexSlider?: IStyle;\\n    /**\\n     * flexPreviewBox\\n     */\\n    flexPreviewBox?: IStyle;\\n}\\n\\n/**\\n * {@docCategory ColorPicker}\\n */\\nexport declare interface IColorRectangle {\\n    /** Currently selected color. */\\n    color: IColor;\\n}\\n\\n/**\\n * {@docCategory ColorPicker}\\n */\\nexport declare interface IColorRectangleProps {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<IColorRectangle>;\\n    /**\\n     * Current color of the rectangle.\\n     */\\n    color: IColor;\\n    /**\\n     * Label of the ColorRectangle for the benefit of screen reader users.\\n     * @defaultvalue 'Saturation and brightness'\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * Format string for the color rectangle's current value as read by screen readers.\\n     * The string must include descriptions and two placeholders for the current values:\\n     * `{0}` for saturation and `{1}` for value/brightness.\\n     * @defaultvalue `'Saturation {0} brightness {1}'`\\n     */\\n    ariaValueFormat?: string;\\n    /**\\n     * Detailed description for how to use the color rectangle. Moving the thumb horizontally adjusts\\n     * saturation and moving it vertically adjusts value (essentially, brightness).\\n     * @defaultvalue 'Use left and right arrow keys to set saturation. Use up and down arrow keys to set brightness.'\\n     */\\n    ariaDescription?: string;\\n    /**\\n     * Minimum width and height.\\n     */\\n    minSize?: number;\\n    /**\\n     * Additional CSS class(es) to apply to the ColorRectangle.\\n     */\\n    className?: string;\\n    /**\\n     * Theme (provided through customization).\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IColorRectangleStyleProps, IColorRectangleStyles>;\\n    /**\\n     * Callback for when the color changes.\\n     */\\n    onChange?: (ev: React.MouseEvent | React.KeyboardEvent, color: IColor) => void;\\n}\\n\\n/**\\n * {@docCategory ColorPicker}\\n */\\nexport declare interface IColorRectangleStyleProps {\\n    /**\\n     * Theme (provided through customization).\\n     */\\n    theme: ITheme;\\n    /**\\n     * Additional CSS class(es) to apply to the ColorRectangle.\\n     */\\n    className?: string;\\n    /**\\n     * Minimum width and height.\\n     */\\n    minSize?: number;\\n}\\n\\n/**\\n * {@docCategory ColorPicker}\\n */\\nexport declare interface IColorRectangleStyles {\\n    /**\\n     * Style set for the root element.\\n     */\\n    root?: IStyle;\\n    /**\\n     * Style set for the light-colored rectangle.\\n     */\\n    light?: IStyle;\\n    /**\\n     * Style set for the dark-colored rectangle.\\n     */\\n    dark?: IStyle;\\n    /**\\n     * Style set for the draggable thumb element.\\n     */\\n    thumb?: IStyle;\\n    /**\\n     * Style for a hidden detailed description for screen reader users.\\n     */\\n    description?: IStyle;\\n}\\n\\n/**\\n * {@docCategory ColorPicker}\\n */\\nexport declare interface IColorSlider {\\n    /** Current value of the slider. */\\n    value: number;\\n}\\n\\n/**\\n * {@docCategory ColorPicker}\\n */\\nexport declare interface IColorSliderProps {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<IColorSlider>;\\n    /**\\n     * Minimum value of the slider.\\n     * @deprecated Will always be 0\\n     */\\n    minValue?: number;\\n    /**\\n     * Maximum value of the slider.\\n     * @deprecated Will be 100 for alpha or transparency sliders, or 359 for hue sliders.\\n     */\\n    maxValue?: number;\\n    /**\\n     * Current value of the slider.\\n     */\\n    value?: number;\\n    /**\\n     * Label of the ColorSlider for the benefit of screen reader users.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * Type of slider to display.\\n     * @defaultvalue 'hue'\\n     */\\n    type?: 'hue' | 'alpha' | 'transparency';\\n    /**\\n     * If true, the slider represents an alpha slider and will display a gray checkered pattern\\n     * in the background. Otherwise, the slider represents a hue slider.\\n     * @defaultvalue false\\n     * @deprecated Use `type`\\n     */\\n    isAlpha?: boolean;\\n    /**\\n     * Hex color to use when rendering an alpha or transparency slider's overlay, *without* the `#`.\\n     */\\n    overlayColor?: string;\\n    /**\\n     * CSS-compatible string for the color of the thumb element.\\n     * @deprecated Not used. Use `styles.sliderThumb` instead.\\n     */\\n    thumbColor?: string;\\n    /**\\n     * Custom style for the overlay element.\\n     * @deprecated Use `overlayColor` instead\\n     */\\n    overlayStyle?: React.CSSProperties;\\n    /**\\n     * Callback issued when the value changes.\\n     */\\n    onChange?: (event: React.MouseEvent | React.KeyboardEvent, newValue?: number) => void;\\n    /**\\n     * Additional CSS class(es) to apply to the ColorSlider.\\n     */\\n    className?: string;\\n    /**\\n     * Theme (provided through customization).\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IColorSliderStyleProps, IColorSliderStyles>;\\n}\\n\\n/**\\n * {@docCategory ColorPicker}\\n */\\nexport declare type IColorSliderStyleProps = Required<Pick<IColorSliderProps, 'theme'>> & Pick<IColorSliderProps, 'className' | 'type'> & {\\n    /**\\n     * @deprecated Use `type`\\n     */\\n    isAlpha?: boolean;\\n};\\n\\n/**\\n * {@docCategory ColorPicker}\\n */\\nexport declare interface IColorSliderStyles {\\n    /**\\n     * Style set for the root element.\\n     */\\n    root?: IStyle;\\n    /**\\n     * Style set for the draggable thumb element.\\n     */\\n    sliderThumb?: IStyle;\\n    /**\\n     * Style set for the overlay element.\\n     */\\n    sliderOverlay?: IStyle;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IColumn {\\n    /** A unique key for identifying the column. */\\n    key: string;\\n    /** Name to render on the column header. */\\n    name: string;\\n    /**\\n     * The field to pull the text value from for the column.\\n     * Can be unset if a custom `onRender` method is provided.\\n     */\\n    fieldName?: string;\\n    /**\\n     * If specified, the width of the column is a portion of the available space equal to this value divided by the sum\\n     * of all proportional column widths in the list. For example, if there is a list with two proportional columns that\\n     * have widths of 1 and 3, they will respectively occupy (1/4) = 25% and (3/4) = 75% of the remaining space. Note that\\n     * this relies on viewport measures and will not work well with skipViewportMeasures.\\n     */\\n    flexGrow?: number;\\n    /** Class name to apply to the column cell within each row. */\\n    className?: string;\\n    /** Custom overrides to the themed or default styles. */\\n    styles?: IStyleFunctionOrObject<IDetailsColumnStyleProps, IDetailsColumnStyles>;\\n    /** Minimum width for the column. */\\n    minWidth: number;\\n    /**\\n     * If specified, the width of the column is a portion of the available space equal to this value divided by the sum\\n     * of all proportional column widths in the list. For example, if there is a list with two proportional columns that\\n     * have widths of 1 and 3, they will respectively occupy (1/4) = 25% and (2/4) = 75% of the remaining space. Note that\\n     * this relies on viewport measures and will not work well with skipViewportMeasures.\\n     */\\n    targetWidthProportion?: number;\\n    /**\\n     * Accessible label for the column. The column name will still be used as the primary label,\\n     * but this text (if specified) will be read after the column name.\\n     */\\n    ariaLabel?: string;\\n    /** Whether the column is a header for the given row. There should be only one column with this set to true. */\\n    isRowHeader?: boolean;\\n    /** Maximum width for the column, if stretching is allowed in justified scenarios. */\\n    maxWidth?: number;\\n    /**\\n     * Defines how the column's header should render.\\n     * @defaultvalue ColumnActionsMode.clickable\\n     */\\n    columnActionsMode?: ColumnActionsMode;\\n    /** Custom icon to use in the column header. */\\n    iconName?: string;\\n    /**\\n     * Whether only the icon should be displayed in the column header.\\n     * If true, the column name and dropdown chevron will not be displayed.\\n     */\\n    isIconOnly?: boolean;\\n    /** Class name for the icon within the header. */\\n    iconClassName?: string;\\n    /**\\n     * If true, allow the column to be collapsed when rendered in justified layout.\\n     * @deprecated Use `isCollapsible`\\n     */\\n    isCollapsable?: boolean;\\n    /** If true, allow the column to be collapsed when rendered in justified layout. */\\n    isCollapsible?: boolean;\\n    /** Determines if the column is currently sorted. Renders a sort arrow in the column header. */\\n    isSorted?: boolean;\\n    /** Determines if the sort arrow is pointed down (descending) or up. */\\n    isSortedDescending?: boolean;\\n    /** Determines if the column can be resized. */\\n    isResizable?: boolean;\\n    /** Determines if the column can render multi-line text. */\\n    isMultiline?: boolean;\\n    /** Custom renderer for cell content, instead of the default text rendering. */\\n    onRender?: (item?: any, index?: number, column?: IColumn) => any;\\n    /** Custom override for the parent list's `getCellValueKey`. */\\n    getValueKey?: (item?: any, index?: number, column?: IColumn) => string;\\n    /** Custom renderer for column header divider. */\\n    onRenderDivider?: IRenderFunction<IDetailsColumnProps>;\\n    /** Custom renderer for column header content, instead of the default text rendering. */\\n    onRenderHeader?: IRenderFunction<IDetailsColumnProps>;\\n    /** Whether the list is filtered by this column. If true, shows a filter icon next to this column's name. */\\n    isFiltered?: boolean;\\n    /** Callback for when the user clicks on the column header. */\\n    onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\\n    /** Callback for when the user opens the column header context menu. */\\n    onColumnContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;\\n    /**\\n     * Callback for when the column is resized (`width` is the current width).\\n     *\\n     * Prefer this over `DetailsList`'s `onColumnResize` if you require the `IColumn` to report its width\\n     * after every resize event. Consider debouncing the callback if resize events occur frequently.\\n     */\\n    onColumnResize?: (width?: number) => void;\\n    /** Whether the list is grouped by this column. If true, shows a grouped icon next to this column's name. */\\n    isGrouped?: boolean;\\n    /** Arbitrary data passthrough which can be used by the caller. */\\n    data?: any;\\n    /** Internal only value. */\\n    calculatedWidth?: number;\\n    /**\\n     * Internal only value.\\n     * Remembers the actual width of the column in any case.\\n     * `calculatedWidth` is only saved when it's defined by user, not for justified calculations.\\n     */\\n    currentWidth?: number;\\n    /** Class name to apply to the column header cell. */\\n    headerClassName?: string;\\n    /** If true, add additional LTR padding-right to column and cells. */\\n    isPadded?: boolean;\\n    /**\\n     * Accessible label for indicating that the list is sorted by this column in ascending order.\\n     * This will be read after the main column header label.\\n     */\\n    sortAscendingAriaLabel?: string;\\n    /**\\n     * Accessible label for indicating that the list is sorted by this column in descending order.\\n     * This will be read after the main column header label.\\n     */\\n    sortDescendingAriaLabel?: string;\\n    /** Accessible label for the status of this column when grouped. */\\n    groupAriaLabel?: string;\\n    /** Accessible label for the status of this column when filtered. */\\n    filterAriaLabel?: string;\\n    /** Whether a dropdown menu is open so that the appropriate ARIA attributes are rendered. */\\n    isMenuOpen?: boolean;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IColumnDragDropDetails {\\n    /**\\n     * Specifies the source column index\\n     * @defaultvalue -1\\n     */\\n    draggedIndex: number;\\n    /**\\n     * Specifies the target column index\\n     * @defaultvalue -1\\n     */\\n    targetIndex: number;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IColumnReorderHeaderProps extends IColumnReorderOptions {\\n    /** Callback to notify the column dragEnd event to List\\n     * Need this to check whether the dragEnd has happened on\\n     * corresponding list or outside of the list\\n     */\\n    onColumnDragEnd?: (props: {\\n        dropLocation?: ColumnDragEndLocation;\\n    }, event: MouseEvent) => void;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IColumnReorderOptions {\\n    /**\\n     * Specifies the number fixed columns from left\\n     * @defaultvalue 0\\n     */\\n    frozenColumnCountFromStart?: number;\\n    /**\\n     * Specifies the number fixed columns from right\\n     * @defaultvalue 0\\n     */\\n    frozenColumnCountFromEnd?: number;\\n    /**\\n     * Callback to handle when dragging on this column's DetailsHeader has started.\\n     */\\n    onColumnDragStart?: (dragStarted: boolean) => void;\\n    /**\\n     * Callback to handle column reordering.\\n     * `draggedIndex` is the source column index, which should be placed at `targetIndex`.\\n     * @deprecated Use `onColumnDrop` instead.\\n     */\\n    handleColumnReorder?: (draggedIndex: number, targetIndex: number) => void;\\n    /**\\n     * Callback to handle column reordering.\\n     * `draggedIndex` is the source column index, which should be placed at `targetIndex`.\\n     */\\n    onColumnDrop?: (dragDropDetails: IColumnDragDropDetails) => void;\\n    /**\\n     * Callback to handle when dragging on this column's DetailsHeader has finished.\\n     */\\n    onDragEnd?: (columnDropLocationDetails: ColumnDragEndLocation) => void;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IColumnResizeDetails {\\n    columnIndex: number;\\n    originX?: number;\\n    columnMinWidth: number;\\n}\\n\\n/**\\n * {@docCategory ComboBox}\\n */\\nexport declare interface IComboBox {\\n    /**\\n     * All selected options\\n     */\\n    readonly selectedOptions: IComboBoxOption[];\\n    /**\\n     * If there is a menu open this will dismiss the menu\\n     */\\n    dismissMenu: () => void;\\n    /**\\n     * Sets focus to the input in the comboBox\\n     * @param shouldOpenOnFocus - Determines if we should open the ComboBox menu when the input gets focus\\n     * @param useFocusAsync - Determines if we should focus the input asynchronously\\n     * @returns True if focus could be set, false if no operation was taken.\\n     */\\n    focus(shouldOpenOnFocus?: boolean, useFocusAsync?: boolean): boolean;\\n}\\n\\n/**\\n * {@docCategory ComboBox}\\n */\\nexport declare interface IComboBoxClassNames {\\n    container: string;\\n    label: string;\\n    root: string;\\n    input: string;\\n    errorMessage: string;\\n    callout: string;\\n    optionsContainer: string;\\n    header: string;\\n    divider: string;\\n    optionsContainerWrapper: string;\\n    screenReaderText: string;\\n}\\n\\n/**\\n * {@docCategory ComboBox}\\n */\\nexport declare interface IComboBoxOption extends ISelectableOption {\\n    /**\\n     * Specific styles for each comboBox option. If you intend to give\\n     * common styles to all comboBox option please use\\n     * the prop comboBoxOptionStyles\\n     */\\n    styles?: Partial<IComboBoxOptionStyles>;\\n    /**\\n     * In scenarios where embedded data is used at the text prop, we will use the ariaLabel prop\\n     * to set the aria-label and preview text. Default to false\\n     * @defaultvalue false;\\n     */\\n    useAriaLabelAsText?: boolean;\\n}\\n\\n/**\\n * {@docCategory ComboBox}\\n */\\nexport declare interface IComboBoxOptionClassNames {\\n    optionText: string;\\n    root: string;\\n    optionTextWrapper: string;\\n}\\n\\n/**\\n * {@docCategory ComboBox}\\n */\\nexport declare interface IComboBoxOptionStyles extends IButtonStyles {\\n    /**\\n     * Styles for the text inside the comboBox option.\\n     * This should be used instead of the description\\n     * inside IButtonStyles because we custom render the text\\n     * in the comboBox options.\\n     */\\n    optionText: IStyle;\\n    /**\\n     * Styles for the comboBox option text's wrapper.\\n     */\\n    optionTextWrapper: IStyle;\\n}\\n\\n/**\\n * {@docCategory ComboBox}\\n */\\nexport declare interface IComboBoxProps extends ISelectableDroppableTextProps<IComboBox, IComboBox> {\\n    /**\\n     * Optional callback to access the IComboBox interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IComboBox>;\\n    /**\\n     * Collection of options for this ComboBox\\n     */\\n    options: IComboBoxOption[];\\n    /**\\n     * Callback issued when a ComboBox item is clicked.\\n     */\\n    onItemClick?: (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number) => void;\\n    /**\\n     * Callback issued when either:\\n     * 1) the selected option changes\\n     * 2) a manually edited value is submitted. In this case there may not be a matched option if allowFreeform\\n     *    is also true (and hence only value would be true, the other parameter would be null in this case)\\n     */\\n    onChange?: (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) => void;\\n    /**\\n     * Callback issued when the user changes the pending value in ComboBox.\\n     * This will be called any time the component is updated and there is a current\\n     * pending value. Option, index, and value will all be undefined if no change\\n     * has taken place and the previously entered pending value is still valid.\\n     */\\n    onPendingValueChanged?: (option?: IComboBoxOption, index?: number, value?: string) => void;\\n    /**\\n     * Function that gets invoked when the ComboBox menu is launched\\n     */\\n    onMenuOpen?: () => void;\\n    /**\\n     * Function that gets invoked when the ComboBox menu is dismissed\\n     */\\n    onMenuDismissed?: () => void;\\n    /**\\n     * Function that gets invoked before the menu gets dismissed\\n     */\\n    onMenuDismiss?: () => void;\\n    /**\\n     * Callback issued when the options should be resolved, if they have been updated or\\n     * if they need to be passed in the first time\\n     */\\n    onResolveOptions?: (options: IComboBoxOption[]) => IComboBoxOption[] | PromiseLike<IComboBoxOption[]>;\\n    /**\\n     * Callback issued when the ComboBox requests the list to scroll to a specific element\\n     */\\n    onScrollToItem?: (itemIndex: number) => void;\\n    /**\\n     * Whether the ComboBox is free form, meaning that the user input is not bound to provided options. Defaults to false.\\n     */\\n    allowFreeform?: boolean;\\n    /**\\n     * Whether the ComboBox auto completes. As the user is inputing text, it will be suggested potential matches from\\n     * the list of options. If the combo box is expanded, this will also scroll to the suggested option, and give it a\\n     * selected style.\\n     *\\n     * @defaultvalue \\\"on\\\"\\n     */\\n    autoComplete?: 'on' | 'off';\\n    /**\\n     * Value to show in the input, does not have to map to a combobox option\\n     */\\n    text?: string;\\n    /**\\n     * When multiple items are selected, this will be used to separate values in the combobox input.\\n     *\\n     * @defaultvalue \\\", \\\"\\n     */\\n    multiSelectDelimiter?: string;\\n    /**\\n     * The IconProps to use for the button aspect of the combobox\\n     */\\n    buttonIconProps?: IIconProps;\\n    /**\\n     * The AutofillProps to be passed into the Autofill component inside combobox\\n     */\\n    autofill?: IAutofillProps;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Custom styles for this component\\n     */\\n    styles?: Partial<IComboBoxStyles>;\\n    /**\\n     * Custom function for providing the classNames for the ComboBox. Can be used to provide\\n     * all styles for the component instead of applying them on top of the default styles.\\n     */\\n    getClassNames?: (theme: ITheme, isOpen: boolean, disabled: boolean, required: boolean, focused: boolean, allowFreeForm: boolean, hasErrorMessage: boolean, className?: string) => IComboBoxClassNames;\\n    /**\\n     * Styles for the caret down button.\\n     */\\n    caretDownButtonStyles?: Partial<IButtonStyles>;\\n    /**\\n     * Default styles that should be applied to ComboBox options,\\n     * in case an option does not come with user-defined custom styles\\n     */\\n    comboBoxOptionStyles?: Partial<IComboBoxOptionStyles>;\\n    /**\\n     * When options are scrollable the selected option is positioned at the top of the callout when it is opened\\n     * (unless it has reached the end of the scrollbar).\\n     * @defaultvalue false;\\n     */\\n    scrollSelectedToTop?: boolean;\\n    /**\\n     * Add additional content above the callout list.\\n     */\\n    onRenderUpperContent?: IRenderFunction<IComboBoxProps>;\\n    /**\\n     * Add additional content below the callout list.\\n     */\\n    onRenderLowerContent?: IRenderFunction<IComboBoxProps>;\\n    /**\\n     * Custom width for dropdown (unless useComboBoxAsMenuWidth is undefined or false)\\n     */\\n    dropdownWidth?: number;\\n    /**\\n     * Whether to use the ComboBoxes width as the menu's width\\n     */\\n    useComboBoxAsMenuWidth?: boolean;\\n    /**\\n     * Custom max width for dropdown\\n     */\\n    dropdownMaxWidth?: number;\\n    /**\\n     * Sets the 'aria-hidden' attribute on the ComboBox's button element instructing screen readers how to handle\\n     * the element. This element is hidden by default because all functionality is handled by the input element and\\n     * the arrow button is only meant to be decorative.\\n     * @defaultvalue true\\n     */\\n    isButtonAriaHidden?: boolean;\\n    /**\\n     * Optional prop to add a string id that can be referenced inside the aria-describedby attribute\\n     */\\n    ariaDescribedBy?: string;\\n    /**\\n     * Optional keytip for this combo box\\n     */\\n    keytipProps?: IKeytipProps;\\n    /**\\n     * Menu will not be created or destroyed when opened or closed, instead it\\n     * will be hidden. This will improve perf of the menu opening but could potentially\\n     * impact overall perf by having more elements in the dom. Should only be used\\n     * when perf is important.\\n     * Note: This may increase the amount of time it takes for the comboBox itself to mount.\\n     */\\n    persistMenu?: boolean;\\n    /**\\n     * When specified, determines whether the callout (the menu which drops down) should\\n     * restore the focus after being dismissed or not.  If false, then the menu will not try\\n     * to set focus to whichever element had focus before the menu was opened.\\n     * @defaultvalue true;\\n     */\\n    shouldRestoreFocus?: boolean;\\n    /**\\n     * Optional iconButton props on combo box\\n     */\\n    iconButtonProps?: IButtonProps;\\n    /**\\n     * Custom render function for the label text.\\n     */\\n    onRenderLabel?: IRenderFunction<IOnRenderComboBoxLabelProps>;\\n}\\n\\nexport declare interface IComboBoxState {\\n    /** The open state */\\n    isOpen?: boolean;\\n    /** The currently selected indices */\\n    selectedIndices?: number[];\\n    /** The focused state of the comboBox */\\n    focusState?: 'none' | 'focused' | 'focusing';\\n    /** This value is used for the autocomplete hint value */\\n    suggestedDisplayValue?: string;\\n    /** The options currently available for the callout */\\n    currentOptions: IComboBoxOption[];\\n    /**\\n     * When taking input, this will store the index that the options input matches\\n     * (-1 if no input or match)\\n     */\\n    currentPendingValueValidIndex: number;\\n    /**\\n     * Stores the hovered over value in the dropdown\\n     * (used for styling the options without updating the input)\\n     */\\n    currentPendingValueValidIndexOnHover: number;\\n    /** When taking input, this will store the actual text that is being entered */\\n    currentPendingValue?: string;\\n}\\n\\n/**\\n * {@docCategory ComboBox}\\n */\\nexport declare interface IComboBoxStyles {\\n    /**\\n     * Style for the container which has the ComboBox and the label\\n     */\\n    container: IStyle;\\n    /**\\n     * Style for the label element of the ComboBox.\\n     */\\n    label: IStyle;\\n    /**\\n     * Style for the label element of the ComboBox in the disabled state.\\n     */\\n    labelDisabled: IStyle;\\n    /**\\n     * Base styles for the root element of all ComboBoxes.\\n     */\\n    root: IStyle;\\n    /**\\n     * Styles for the root element for variant of ComboBox with an errorMessage in the props.\\n     */\\n    rootError: IStyle;\\n    /**\\n     * Styles for variant of ComboBox where allowFreeForm is false in the props.\\n     */\\n    rootDisallowFreeForm: IStyle;\\n    /**\\n     * Styles for when the ComboBox is hovered. These styles are applied for all comboBoxes except when\\n     * the comboBox is disabled.\\n     */\\n    rootHovered: IStyle;\\n    /**\\n     * Styles for when the ComboBox is active. These styles are applied for all comboBoxes except when\\n     * the comboBox is disabled.\\n     */\\n    rootPressed: IStyle;\\n    /**\\n     * Styles for when the ComboBox is focused. These styles are applied for all comboBoxes except when\\n     * the comboBox is disabled.\\n     */\\n    rootFocused: IStyle;\\n    /**\\n     * Styles for when the comboBox is disabled. These styles override all the other styles.\\n     * NOTE : Hover (or) Focused (or) active styles are not applied for disabled comboBoxes.\\n     */\\n    rootDisabled: IStyle;\\n    /**\\n     * Base styles for the input element - which contains the currently selected\\n     * option.\\n     */\\n    input: IStyle;\\n    /**\\n     * Style override for the input element when comboBox is disabled.\\n     */\\n    inputDisabled: IStyle;\\n    /**\\n     * Styles for the error Message text of the comboBox.\\n     */\\n    errorMessage: IStyle;\\n    /**\\n     * Styles for the callout.\\n     */\\n    callout: IStyle;\\n    /**\\n     * Styles for the optionsContainerWrapper.\\n     */\\n    optionsContainerWrapper: IStyle;\\n    /**\\n     * Styles for the container of all the Combobox options\\n     * Includes the headers and dividers.\\n     */\\n    optionsContainer: IStyle;\\n    /**\\n     * Styles for a header in the options.\\n     */\\n    header: IStyle;\\n    /**\\n     * Styles for a divider in the options.\\n     */\\n    divider: IStyle;\\n    /**\\n     * Styles for hidden screen reader text.\\n     */\\n    screenReaderText: IStyle;\\n}\\n\\n/**\\n * {@docCategory CommandBar}\\n */\\nexport declare interface ICommandBar {\\n    /**\\n     * Sets focus to the active command in the list.\\n     */\\n    focus(): void;\\n    /**\\n     * Remeasures the available space.\\n     */\\n    remeasure(): void;\\n}\\n\\nexport declare interface ICommandBarData {\\n    /**\\n     * Items being rendered in the primary region\\n     */\\n    primaryItems: ICommandBarItemProps[];\\n    /**\\n     * Items being rendered in the overflow\\n     */\\n    overflowItems: ICommandBarItemProps[];\\n    /**\\n     * Items being rendered on the far side\\n     */\\n    farItems: ICommandBarItemProps[] | undefined;\\n    /**\\n     * Length of original overflowItems to ensure that they are not moved into primary region on resize\\n     */\\n    minimumOverflowItems: number;\\n    /**\\n     * Unique string used to cache the width of the command bar\\n     */\\n    cacheKey: string;\\n}\\n\\n/**\\n * ICommandBarItemProps extends IContextualMenuItem and adds a few CommandBar-specific props.\\n * {@docCategory CommandBar}\\n */\\nexport declare interface ICommandBarItemProps extends IContextualMenuItem {\\n    /**\\n     * Show only an icon for this item, not text.\\n     * Does not apply if item is in the overflow.\\n     * @defaultvalue false\\n     */\\n    iconOnly?: boolean;\\n    /**\\n     * Props for the tooltip when in `iconOnly` mode.\\n     */\\n    tooltipHostProps?: ITooltipHostProps;\\n    /**\\n     * Custom styles for individual button\\n     */\\n    buttonStyles?: IButtonStyles;\\n    /**\\n     * A custom cache key to be used for this item. If `cacheKey` is changed, the cache will invalidate.\\n     * Defaults to `key` value.\\n     */\\n    cacheKey?: string;\\n    /**\\n     * Context under which the item is being rendered.\\n     * This value is mutated by the CommandBar and is useful for adjusting the `onRender` function.\\n     */\\n    renderedInOverflow?: boolean;\\n    /**\\n     * Method to override the render of the individual command bar button.\\n     * Not used when item is rendered in overflow.\\n     * @defaultvalue CommandBarButton\\n     */\\n    commandBarButtonAs?: IComponentAs<ICommandBarItemProps>;\\n}\\n\\n/**\\n * {@docCategory CommandBar}\\n */\\nexport declare interface ICommandBarProps extends React.HTMLAttributes<HTMLDivElement> {\\n    /**\\n     * Optional callback to access the ICommandBar interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<ICommandBar>;\\n    /**\\n     * Items to render. ICommandBarItemProps extends IContextualMenuItem.\\n     */\\n    items: ICommandBarItemProps[];\\n    /**\\n     * Items to render on the right side (or left, in RTL). ICommandBarItemProps extends IContextualMenuItem.\\n     */\\n    farItems?: ICommandBarItemProps[];\\n    /**\\n     * Default items to have in the overflow menu. ICommandBarItemProps extends IContextualMenuItem.\\n     */\\n    overflowItems?: ICommandBarItemProps[];\\n    /**\\n     * Props to be passed to overflow button.\\n     * If `menuProps` are passed through this prop, any items provided will be prepended to any\\n     * computed overflow items.\\n     */\\n    overflowButtonProps?: IButtonProps;\\n    /**\\n     * Custom component for the overflow button.\\n     */\\n    overflowButtonAs?: IComponentAs<IButtonProps>;\\n    /**\\n     * Custom component for the near and far item buttons. Not used for overflow menu items.\\n     */\\n    buttonAs?: IComponentAs<IButtonProps>;\\n    /**\\n     * When true, items will be 'shifted' off the front of the array when reduced, and unshifted during grow.\\n     */\\n    shiftOnReduce?: boolean;\\n    /**\\n     * Custom function to reduce data if items do not fit in given space.\\n     * Return `undefined` if no more steps can be taken to avoid infinate loop.\\n     */\\n    onReduceData?: (data: ICommandBarData) => ICommandBarData | undefined;\\n    /**\\n     * Custom function to grow data if items are too small for the given space.\\n     * Return `undefined` if no more steps can be taken to avoid infinate loop.\\n     */\\n    onGrowData?: (data: ICommandBarData) => ICommandBarData | undefined;\\n    /**\\n     * Callback invoked when data has been reduced.\\n     */\\n    onDataReduced?: (movedItem: ICommandBarItemProps) => void;\\n    /**\\n     * Callback invoked when data has been grown.\\n     */\\n    onDataGrown?: (movedItem: ICommandBarItemProps) => void;\\n    /**\\n     * Function to be called every time data is rendered. It provides the data that was actually rendered.\\n     * A use case would be adding telemetry when a particular control is shown in an overflow or dropped\\n     * as a result of `onReduceData`, or to count the number of renders that an implementation of\\n     * `onReduceData` triggers.\\n     */\\n    dataDidRender?: (renderedData: any) => void;\\n    /**\\n     * Additional css class to apply to the command bar\\n     */\\n    className?: string;\\n    /**\\n     * Accessibility text to be read by the screen reader when the user's\\n     * focus enters the command bar. The screen reader will read this text\\n     * after reading information about the first focusable item in the command bar.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * Customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<ICommandBarStyleProps, ICommandBarStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n}\\n\\n/**\\n * {@docCategory CommandBar}\\n */\\nexport declare interface ICommandBarStyleProps {\\n    theme: ITheme;\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory CommandBar}\\n */\\nexport declare interface ICommandBarStyles {\\n    root?: IStyle;\\n    primarySet?: IStyle;\\n    secondarySet?: IStyle;\\n}\\n\\n/**\\n * Legacy Icon component which can be targeted by customization. It's recommended to use `FontIcon`\\n * or `ImageIcon` instead, especially in scenarios where rendering performance is important.\\n * {@docCategory Icon}\\n */\\nexport declare const Icon: React.FunctionComponent<IIconProps>;\\n\\nexport declare class IconBase extends React.Component<IIconProps, IIconState> {\\n    constructor(props: IIconProps);\\n    render(): JSX.Element;\\n    private _onImageLoadingStateChange;\\n}\\n\\n/**\\n * {@docCategory Button}\\n */\\nexport declare class IconButton extends React.Component<IButtonProps, {}> {\\n    render(): JSX.Element;\\n}\\n\\n/**\\n * {@docCategory ContextualMenu}\\n */\\nexport declare interface IContextualMenu {\\n}\\n\\n/**\\n * @deprecated in favor of mergeStyles API.\\n */\\nexport declare interface IContextualMenuClassNames {\\n    container?: string;\\n    root?: string;\\n    list?: string;\\n    header?: string;\\n    title?: string;\\n    subComponentStyles?: IContextualMenuSubComponentStyles;\\n}\\n\\n/**\\n * {@docCategory ContextualMenu}\\n */\\nexport declare interface IContextualMenuItem {\\n    /**\\n     * Optional callback to access the IContextualMenuRenderItem interface.\\n     * This will get passed down to ContextualMenuItem.\\n     */\\n    componentRef?: IRefObject<IContextualMenuRenderItem>;\\n    /**\\n     * Unique id to identify the item\\n     */\\n    key: string;\\n    /**\\n     * Text of the menu item.\\n     * If a standard hyphen (-) is passed in, then the item will be rendered as a divider.\\n     * If a dash must appear as text, use an emdash (—), figuredash (‒), or minus symbol (−) instead.\\n     */\\n    text?: string;\\n    /**\\n     * Seconday description for the menu item to display\\n     */\\n    secondaryText?: string;\\n    itemType?: ContextualMenuItemType;\\n    /**\\n     * Props for an icon to display next to the item.\\n     */\\n    iconProps?: IIconProps;\\n    /**\\n     * Custom render function for the menu item icon\\n     */\\n    onRenderIcon?: IRenderFunction<IContextualMenuItemProps>;\\n    /**\\n     * Props for the Icon used for the chevron.\\n     */\\n    submenuIconProps?: IIconProps;\\n    /**\\n     * Whether the menu item is disabled\\n     * @defaultvalue false\\n     */\\n    disabled?: boolean;\\n    /**\\n     * If the menu item is a split button, this prop disables purely the primary action of the button.\\n     * @defaultvalue false\\n     */\\n    primaryDisabled?: boolean;\\n    /**\\n     * @deprecated Not used\\n     */\\n    shortCut?: string;\\n    /**\\n     * Whether or not this menu item can be checked\\n     * @defaultvalue false\\n     */\\n    canCheck?: boolean;\\n    /**\\n     * Whether or not this menu item is currently checked.\\n     * @defaultvalue false\\n     */\\n    checked?: boolean;\\n    /**\\n     * Whether or not this menu item is a splitButton.\\n     * @defaultvalue false\\n     */\\n    split?: boolean;\\n    /**\\n     * Any custom data the developer wishes to associate with the menu item.\\n     */\\n    data?: any;\\n    /**\\n     * Callback for when the menu item is invoked. If `ev.preventDefault()` is called in `onClick`,\\n     * the click will not close the menu.\\n     *\\n     * Only for ContextualMenu items, returning true will dismiss the menu even if `ev.preventDefault()`\\n     * was called (does not apply for button or CommandBar sub-menu items).\\n     */\\n    onClick?: (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, item?: IContextualMenuItem) => boolean | void;\\n    /**\\n     * Navigate to this URL when the menu item is clicked.\\n     */\\n    href?: string;\\n    /**\\n     * Target window when using `href`.\\n     */\\n    target?: string;\\n    /**\\n     * Link relation setting when using `href`.\\n     * If `target` is `_blank`, `rel` is defaulted to a value to prevent clickjacking.\\n     */\\n    rel?: string;\\n    /**\\n     * Properties to apply to a submenu to this item.\\n     *\\n     * The ContextualMenu will provide default values for `target`, `onDismiss`, `isSubMenu`,\\n     * `id`, `shouldFocusOnMount`, `directionalHint`, `className`, and `gapSpace`, all of which\\n     * can be overridden.\\n     */\\n    subMenuProps?: IContextualMenuProps;\\n    /**\\n     * Method to provide the classnames to style the individual items inside a menu.\\n     * @deprecated Use `styles` prop of `IContextualMenuItemProps` to leverage mergeStyles API.\\n     */\\n    getItemClassNames?: (theme: ITheme, disabled: boolean, expanded: boolean, checked: boolean, isAnchorLink: boolean, knownIcon: boolean, itemClassName?: string, dividerClassName?: string, iconClassName?: string, subMenuClassName?: string, primaryDisabled?: boolean) => IMenuItemClassNames;\\n    /**\\n     * Optional IContextualMenuItemProps overrides to customize behaviors such as item styling via `styles`.\\n     */\\n    itemProps?: Partial<IContextualMenuItemProps>;\\n    /**\\n     * Method to provide the classnames to style the Vertical Divider of a split button inside a menu.\\n     * Default value is the `getSplitButtonVerticalDividerClassNames` func defined in `ContextualMenu.classnames.ts`.\\n     * @defaultvalue getSplitButtonVerticalDividerClassNames\\n     */\\n    getSplitButtonVerticalDividerClassNames?: (theme: ITheme) => IVerticalDividerClassNames;\\n    /**\\n     * Properties to apply to render this item as a section.\\n     * This prop is mutually exclusive with `subMenuProps`.\\n     */\\n    sectionProps?: IContextualMenuSection;\\n    /**\\n     * Additional CSS class to apply to the menu item.\\n     */\\n    className?: string;\\n    /**\\n     * Additional styles to apply to the menu item\\n     * @deprecated in favor of the `styles` prop to leverage mergeStyles API.\\n     */\\n    style?: React.CSSProperties;\\n    /**\\n     * Custom accessible label for the element.\\n     * If no override is specified, the `aria-label` attribute will contain the item name.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * Title (tooltip) text displayed when hovering over an item.\\n     */\\n    title?: string;\\n    /**\\n     * Method to custom render this menu item.\\n     * For keyboard accessibility, the top-level rendered item should be a focusable element\\n     * (like an anchor or a button) or have the `data-is-focusable` property set to true.\\n     *\\n     * @param item - Item to render. Will typically be of type `IContextualMenuItem`.\\n     * (When rendering a command bar item, will be `ICommandBarItemProps`.)\\n     * @param dismissMenu - Function to dismiss the menu. Can be used to ensure that a custom menu\\n     * item click dismisses the menu. (Will be undefined if rendering a command bar item.)\\n     */\\n    onRender?: (item: any, dismissMenu: (ev?: any, dismissAll?: boolean) => void) => React.ReactNode;\\n    /**\\n     * Method to customize sub-components rendering of this menu item.\\n     *\\n     * @param props - Props used to pass into render functions\\n     * @param defaultRenders - Default render functions that renders default sub-components\\n     */\\n    onRenderContent?: (props: IContextualMenuItemProps, defaultRenders: IContextualMenuItemRenderFunctions) => React.ReactNode;\\n    /**\\n     * A function to be executed on mouse down. This is executed before an `onClick` event and can\\n     * be used to interrupt native on click events as well. The click event should still handle\\n     * the commands. This should only be used in special cases when react and non-react are mixed.\\n     */\\n    onMouseDown?: (item: IContextualMenuItem, event: React.MouseEvent<HTMLElement>) => void;\\n    /**\\n     * Optional override for the menu button's role. Defaults to `menuitem` or `menuitemcheckbox`.\\n     */\\n    role?: string;\\n    /**\\n     * When rendering a custom menu component that is passed in, the component might also be a list of\\n     * elements. We want to keep track of the correct index our menu is using based off of\\n     * the length of the custom list. It is up to the user to increment the count for their list.\\n     */\\n    customOnRenderListLength?: number;\\n    /**\\n     * Keytip for this contextual menu item\\n     */\\n    keytipProps?: IKeytipProps;\\n    /**\\n     * Any additional properties to use when custom rendering menu items.\\n     */\\n    [propertyName: string]: any;\\n    /**\\n     * Detailed description of the menu item for the benefit of screen readers.\\n     */\\n    ariaDescription?: string;\\n    /**\\n     * This prop is no longer used. All contextual menu items are now focusable when disabled.\\n     * @deprecated in 6.38.2 will be removed in 7.0.0\\n     */\\n    inactive?: boolean;\\n    /**\\n     * Text of the menu item.\\n     * @deprecated Use `text` instead.\\n     */\\n    name?: string;\\n}\\n\\n/**\\n * {@docCategory ContextualMenu}\\n */\\nexport declare interface IContextualMenuItemProps extends React.HTMLAttributes<IContextualMenuItemProps> {\\n    /**\\n     * Optional callback to access the IContextualMenuRenderItem interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IContextualMenuRenderItem>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IContextualMenuItemStyleProps, IContextualMenuItemStyles>;\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Additional css class to apply to the ContextualMenuItem\\n     * @defaultvalue undefined\\n     */\\n    className?: string;\\n    /**\\n     * The item to display\\n     */\\n    item: IContextualMenuItem;\\n    /**\\n     * Classnames for different aspects of a menu item\\n     */\\n    classNames: IMenuItemClassNames;\\n    /**\\n     * Index of the item\\n     */\\n    index: number;\\n    /**\\n     * If this item has icons\\n     */\\n    hasIcons: boolean | undefined;\\n    /**\\n     * Click handler for the checkmark\\n     */\\n    onCheckmarkClick?: (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>) => void;\\n    /**\\n     * This prop will get set by ContextualMenu and can be called to open this item's subMenu, if present.\\n     */\\n    openSubMenu?: (item: any, target: HTMLElement) => void;\\n    /**\\n     * This prop will get set by ContextualMenu and can be called to close this item's subMenu, if present.\\n     */\\n    dismissSubMenu?: () => void;\\n    /**\\n     * This prop will get set by ContextualMenu and can be called to close the menu this item belongs to.\\n     * If dismissAll is true, all menus will be closed.\\n     */\\n    dismissMenu?: (ev?: any, dismissAll?: boolean) => void;\\n    /**\\n     * This prop will get set by the wrapping component and will return the element that wraps this ContextualMenuItem.\\n     * Used for openSubMenu.\\n     */\\n    getSubmenuTarget?: () => HTMLElement | undefined;\\n}\\n\\nexport declare interface IContextualMenuItemRenderFunctions {\\n    /**\\n     * Rendering function for check mark icon\\n     */\\n    renderCheckMarkIcon: (props: IContextualMenuItemProps, customClassNames?: string[]) => React.ReactNode;\\n    /**\\n     * Rendering function for item icon\\n     */\\n    renderItemIcon: (props: IContextualMenuItemProps, customClassNames?: string[]) => React.ReactNode;\\n    /**\\n     * Rendering function for item label\\n     */\\n    renderItemName: (props: IContextualMenuItemProps, customClassNames?: string[]) => React.ReactNode;\\n    /**\\n     * Rendering function for secondary text label\\n     */\\n    renderSecondaryText: (props: IContextualMenuItemProps, customClassNames?: string[]) => React.ReactNode;\\n    /**\\n     * Rendering function for submenu icon\\n     */\\n    renderSubMenuIcon: (props: IContextualMenuItemProps, customClassNames?: string[]) => React.ReactNode;\\n}\\n\\n/**\\n * {@docCategory ContextualMenu}\\n */\\nexport declare interface IContextualMenuItemRenderProps extends IContextualMenuItem {\\n    index: number;\\n    focusableElementIndex: number;\\n    totalItemCount: number;\\n    hasCheckmarks: boolean;\\n    hasIcons: boolean;\\n}\\n\\n/**\\n * {@docCategory ContextualMenu}\\n */\\nexport declare interface IContextualMenuItemStyleProps {\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Accept custom classNames\\n     */\\n    className?: string;\\n    /**\\n     * Whether or not the menu item is disabled.\\n     */\\n    disabled: boolean;\\n    /**\\n     * Whether or not the menu item is expanded.\\n     */\\n    expanded: boolean;\\n    /**\\n     * Whether or not the menu item is checked.\\n     */\\n    checked: boolean;\\n    /**\\n     * Indicates if a menu item is an anchor link.\\n     */\\n    isAnchorLink: boolean;\\n    /**\\n     * Indicates if the icon used is of the known set of icons.\\n     */\\n    knownIcon: boolean;\\n    /**\\n     * The optional class name to apply to the item element.\\n     */\\n    itemClassName?: string;\\n    /**\\n     * The optional class name to apply to the divider element.\\n     */\\n    dividerClassName?: string;\\n    /**\\n     * The optional class name to apply to the icon element.\\n     */\\n    iconClassName?: string;\\n    /**\\n     * The optional class name to apply to the sub-menu if present.\\n     */\\n    subMenuClassName?: string;\\n    /**\\n     * Whether or not the primary section of a split menu item is disabled.\\n     */\\n    primaryDisabled?: boolean;\\n}\\n\\n/**\\n * {@docCategory ContextualMenu}\\n */\\nexport declare interface IContextualMenuItemStyles extends IButtonStyles {\\n    /**\\n     * Style for the root element.\\n     */\\n    root?: IStyle;\\n    /**\\n     * Styles for a menu item that is an anchor link.\\n     */\\n    item?: IStyle;\\n    /**\\n     * Styles for a divider item of a ContextualMenu.\\n     */\\n    divider?: IStyle;\\n    /**\\n     * Styles for the content inside the button/link of the menuItem.\\n     */\\n    linkContent?: IStyle;\\n    /**\\n     * Styles for a menu item that is an anchor link.\\n     */\\n    anchorLink?: IStyle;\\n    /**\\n     * Styles for the icon element of a menu item.\\n     */\\n    icon?: IStyle;\\n    /**\\n     * Default icon color style for known icons.\\n     */\\n    iconColor?: IStyle;\\n    /**\\n     * Default style for checkmark icons.\\n     */\\n    checkmarkIcon?: IStyle;\\n    /**\\n     * Styles for the submenu icon of a menu item.\\n     */\\n    subMenuIcon?: IStyle;\\n    /**\\n     * Styles for the label of a menu item.\\n     */\\n    label?: IStyle;\\n    /**\\n     * Styles for the secondary text of a menu item.\\n     */\\n    secondaryText?: IStyle;\\n    /**\\n     * Styles for the container of a split menu item.\\n     */\\n    splitContainer?: IStyle;\\n    /**\\n     * Styles for the primary portion of a split menu item.\\n     */\\n    splitPrimary?: IStyle;\\n    /**\\n     * Styles for the menu portion of a split menu item.\\n     */\\n    splitMenu?: IStyle;\\n    /**\\n     * Styles for a menu item that is a link.\\n     */\\n    linkContentMenu?: IStyle;\\n    /**\\n     * Styles for hidden screen reader text.\\n     */\\n    screenReaderText?: IStyle;\\n}\\n\\n/**\\n * {@docCategory ContextualMenu}\\n */\\nexport declare interface IContextualMenuListProps {\\n    items: IContextualMenuItem[];\\n    totalItemCount: number;\\n    hasCheckmarks: boolean;\\n    hasIcons: boolean;\\n    defaultMenuItemRenderer: (item: IContextualMenuItemRenderProps) => React.ReactNode;\\n    role?: string;\\n}\\n\\n/**\\n * {@docCategory ContextualMenu}\\n */\\nexport declare interface IContextualMenuProps extends IBaseProps<IContextualMenu>, IWithResponsiveModeState {\\n    /**\\n     * Optional callback to access the IContextualMenu interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IContextualMenu>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IContextualMenuStyleProps, IContextualMenuStyles>;\\n    /**\\n     * Theme provided by higher-order component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Additional CSS class to apply to the ContextualMenu.\\n     */\\n    className?: string;\\n    /**\\n     * The target that the ContextualMenu should try to position itself based on.\\n     * It can be either an element, a query selector string resolving to a valid element,\\n     * or a MouseEvent. If a MouseEvent is given, the origin point of the event will be used.\\n     */\\n    target?: Target;\\n    /**\\n     * How the menu should be positioned\\n     * @defaultvalue DirectionalHint.bottomAutoEdge\\n     */\\n    directionalHint?: DirectionalHint;\\n    /**\\n     * How the menu should be positioned in RTL layouts.\\n     * If not specified, a mirror of `directionalHint` will be used.\\n     */\\n    directionalHintForRTL?: DirectionalHint;\\n    /**\\n     * The gap between the ContextualMenu and the target\\n     * @defaultvalue 0\\n     */\\n    gapSpace?: number;\\n    /**\\n     * The width of the beak.\\n     * @defaultvalue 16\\n     */\\n    beakWidth?: number;\\n    /**\\n     * If true the context menu will render as the same width as the target element\\n     * @defaultvalue false\\n     */\\n    useTargetWidth?: boolean;\\n    /**\\n     * If true the context menu will have a minimum width equal to the width of the target element\\n     * @defaultvalue false\\n     */\\n    useTargetAsMinWidth?: boolean;\\n    /**\\n     * The bounding rectangle (or callback that returns a rectangle) which the contextual menu can appear in.\\n     */\\n    bounds?: IRectangle | ((target?: Target, targetWindow?: Window) => IRectangle | undefined);\\n    /**\\n     * If true then the beak is visible. If false it will not be shown.\\n     */\\n    isBeakVisible?: boolean;\\n    /**\\n     * If true, the menu will be positioned to cover the target.\\n     * If false, it will be positioned next to the target.\\n     * @defaultvalue false\\n     */\\n    coverTarget?: boolean;\\n    /**\\n     * If true the positioning logic will prefer to flip edges rather than to nudge the rectangle to fit within bounds,\\n     * thus making sure the element aligns perfectly with target's alignment edge\\n     */\\n    alignTargetEdge?: boolean;\\n    /**\\n     * Menu items to display.\\n     */\\n    items: IContextualMenuItem[];\\n    /**\\n     * Used as `aria-labelledby` for the menu element inside the callout.\\n     */\\n    labelElementId?: string;\\n    /**\\n     * Whether to focus on the menu when mounted.\\n     * @defaultvalue true\\n     */\\n    shouldFocusOnMount?: boolean;\\n    /**\\n     * Whether to focus on the contextual menu container (as opposed to the first menu item).\\n     */\\n    shouldFocusOnContainer?: boolean;\\n    /**\\n     * Callback when the ContextualMenu tries to close. If `dismissAll` is true then all\\n     * submenus will be dismissed.\\n     */\\n    onDismiss?: (ev?: React.MouseEvent | React.KeyboardEvent, dismissAll?: boolean) => void;\\n    /**\\n     * Click handler which is invoked if `onClick` is not passed for individual contextual\\n     * menu item.\\n     * Returning true will dismiss the menu even if `ev.preventDefault()` was called.\\n     */\\n    onItemClick?: (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, item?: IContextualMenuItem) => boolean | void;\\n    /**\\n     * Whether this menu is a submenu of another menu.\\n     */\\n    isSubMenu?: boolean;\\n    /**\\n     * ID for the ContextualMenu's root element (inside the callout).\\n     * Should be used for `aria-owns` and other such uses, rather than direct reference for programmatic purposes.\\n     */\\n    id?: string;\\n    /**\\n     * Accessible label for the ContextualMenu's root element (inside the callout).\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * If true do not render on a new layer. If false render on a new layer.\\n     * @defaultvalue false\\n     */\\n    doNotLayer?: boolean;\\n    /**\\n     * If true the position will not change sides in an attempt to fit the ContextualMenu within bounds.\\n     * It will still attempt to align it to whatever bounds are given.\\n     * @defaultvalue false\\n     */\\n    directionalHintFixed?: boolean;\\n    /**\\n     * Callback for when the menu has been opened.\\n     */\\n    onMenuOpened?: (contextualMenu?: IContextualMenuProps) => void;\\n    /**\\n     * Callback for when the menu is being closed (removing from the DOM).\\n     */\\n    onMenuDismissed?: (contextualMenu?: IContextualMenuProps) => void;\\n    /**\\n     * Additional custom props for the Callout.\\n     */\\n    calloutProps?: ICalloutProps;\\n    /**\\n     * Title to be displayed at the top of the menu, above the items.\\n     */\\n    title?: string;\\n    /**\\n     * Method to provide the classnames to style the contextual menu.\\n     * @deprecated Use `styles` instead to leverage mergeStyles API.\\n     */\\n    getMenuClassNames?: (theme: ITheme, className?: string) => IContextualMenuClassNames;\\n    /** Custom render function for a submenu. */\\n    onRenderSubMenu?: IRenderFunction<IContextualMenuProps>;\\n    /**\\n     * Method to override the render of the list of menu items.\\n     */\\n    onRenderMenuList?: IRenderFunction<IContextualMenuListProps>;\\n    /**\\n     * Delay (in milliseconds) to wait before expanding / dismissing a submenu on mouseEnter or mouseLeave\\n     */\\n    subMenuHoverDelay?: number;\\n    /**\\n     * Custom component to use for rendering individual menu items.\\n     * @defaultvalue ContextualMenuItem\\n     */\\n    contextualMenuItemAs?: React.ComponentClass<IContextualMenuItemProps> | React.FunctionComponent<IContextualMenuItemProps>;\\n    /**\\n     * Props to pass down to the FocusZone.\\n     * NOTE: the default FocusZoneDirection will be used unless a direction\\n     * is specified in the focusZoneProps (even if other focusZoneProps are defined)\\n     * @defaultvalue \\\\{ direction: FocusZoneDirection.vertical \\\\}\\n     */\\n    focusZoneProps?: IFocusZoneProps;\\n    /**\\n     * If true, renders the ContextualMenu in a hidden state.\\n     * Use this flag, rather than rendering a ContextualMenu conditionally based on visibility,\\n     * to improve rendering performance when it becomes visible.\\n     * Note: When ContextualMenu is hidden its content will not be rendered. It will only render\\n     * once the ContextualMenu is visible.\\n     */\\n    hidden?: boolean;\\n    /**\\n     * If true, the menu will be updated even when `hidden=true`. Note that this will consume\\n     * resources to update even when nothing is being shown to the user. This might be helpful if\\n     * your updates are small and you want the menu to display quickly when `hidden` is set to false.\\n     */\\n    shouldUpdateWhenHidden?: boolean;\\n    /**\\n     * If true, the contextual menu will not be updated until focus enters the menu via other means.\\n     * This will only result in different behavior when `shouldFocusOnMount = false`.\\n     */\\n    delayUpdateFocusOnHover?: boolean;\\n    /**\\n     * Called when the component is unmounting, and focus needs to be restored.\\n     * Argument passed down contains two variables, the element that the underlying\\n     * popup believes focus should go to and whether or not the popup currently\\n     * contains focus. If this prop is provided, focus will not be restored automatically,\\n     * you'll need to call originalElement.focus()\\n     */\\n    onRestoreFocus?: (options: {\\n        originalElement?: HTMLElement | Window;\\n        containsFocus: boolean;\\n        documentContainsFocus: boolean;\\n    }) => void;\\n}\\n\\n/**\\n * {@docCategory ContextualMenu}\\n */\\nexport declare interface IContextualMenuRenderItem {\\n    /**\\n     * Function to open this item's subMenu, if present.\\n     */\\n    openSubMenu: () => void;\\n    /**\\n     * Function to close this item's subMenu, if present.\\n     */\\n    dismissSubMenu: () => void;\\n    /**\\n     * Dismiss the menu this item belongs to.\\n     */\\n    dismissMenu: (dismissAll?: boolean) => void;\\n}\\n\\n/**\\n * {@docCategory ContextualMenu}\\n */\\nexport declare interface IContextualMenuSection extends React.ClassAttributes<any> {\\n    /**\\n     * The items to include inside the section.\\n     */\\n    items: IContextualMenuItem[];\\n    /**\\n     * The optional section title.\\n     */\\n    title?: string | IContextualMenuItem;\\n    /**\\n     * If set to true, the section will display a divider at the top of the section.\\n     */\\n    topDivider?: boolean;\\n    /**\\n     * If set to true, the section will display a divider at the bottom of the section.\\n     */\\n    bottomDivider?: boolean;\\n}\\n\\nexport declare interface IContextualMenuState {\\n    expandedMenuItemKey?: string;\\n    /** True if the menu was expanded by mouse click OR hover (as opposed to by keyboard) */\\n    expandedByMouseClick?: boolean;\\n    dismissedMenuItemKey?: string;\\n    contextualMenuItems?: IContextualMenuItem[];\\n    contextualMenuTarget?: Element;\\n    submenuTarget?: Element;\\n    positions?: any;\\n    slideDirectionalClassName?: string;\\n    subMenuId?: string;\\n    submenuDirection?: DirectionalHint;\\n}\\n\\n/**\\n * {@docCategory ContextualMenu}\\n */\\nexport declare interface IContextualMenuStyleProps {\\n    theme: ITheme;\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory ContextualMenu}\\n */\\nexport declare interface IContextualMenuStyles {\\n    /**\\n     * Style override for the contextual menu title.\\n     */\\n    title: IStyle;\\n    /**\\n     * Style for the container which parents all menu items.\\n     */\\n    container: IStyle;\\n    /**\\n     * Base styles for the root element of all ContextualMenus.\\n     */\\n    root: IStyle;\\n    /**\\n     * Styles for the header item of a ContextualMenu\\n     */\\n    header: IStyle;\\n    /**\\n     * Styles for the list that contains all menuItems.\\n     */\\n    list: IStyle;\\n    /**\\n     * SubComponent styles.\\n     */\\n    subComponentStyles: IContextualMenuSubComponentStyles;\\n}\\n\\n/**\\n * {@docCategory ContextualMenu}\\n */\\nexport declare interface IContextualMenuSubComponentStyles {\\n    /** Styles for the callout that hosts the ContextualMenu options. */\\n    callout: IStyleFunctionOrObject<ICalloutContentStyleProps, any>;\\n    /** Styles for each menu item. */\\n    menuItem: IStyleFunctionOrObject<IContextualMenuItemStyleProps, any>;\\n}\\n\\n/**\\n * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`\\n * {@docCategory Icon}\\n */\\nexport declare enum IconType {\\n    /**\\n     * Render using the fabric icon font.\\n     * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`\\n     */\\n    default = 0,\\n    /**\\n     * Render using an image, where imageProps would be used.\\n     * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`\\n     */\\n    image = 1,\\n    /**\\n     * Deprecated, use `default`.\\n     * @deprecated Use `default`.\\n     */\\n    Default = 100000,\\n    /**\\n     * Deprecated, use `image`.\\n     * @deprecated Use `image`.\\n     */\\n    Image = 100001\\n}\\n\\n/**\\n * {@docCategory DatePicker}\\n */\\nexport declare interface IDatePicker {\\n    /** Sets focus to the text field */\\n    focus(): void;\\n    /** Reset the state of the picker to the default */\\n    reset(): void;\\n}\\n\\n/**\\n * {@docCategory DatePicker}\\n */\\nexport declare interface IDatePickerProps extends IBaseProps<IDatePicker>, React.HTMLAttributes<HTMLElement> {\\n    /**\\n     * Optional callback to access the IDatePicker interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IDatePicker>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IDatePickerStyleProps, IDatePickerStyles>;\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Pass callout props to callout component\\n     */\\n    calloutProps?: ICalloutProps;\\n    /**\\n     * Pass calendar props to calendar component\\n     */\\n    calendarProps?: ICalendarProps;\\n    /**\\n     * Pass textField props to textField component.\\n     * Prop name is \\\"textField\\\" for compatiblity with upcoming slots work.\\n     */\\n    textField?: ITextFieldProps;\\n    /**\\n     * Custom Calendar to be used for date picking\\n     */\\n    calendarAs?: IComponentAs<ICalendarProps>;\\n    /**\\n     * Callback issued when a date is selected\\n     */\\n    onSelectDate?: (date: Date | null | undefined) => void;\\n    /**\\n     * Label for the DatePicker\\n     */\\n    label?: string;\\n    /**\\n     * Whether the DatePicker is a required field or not\\n     * @defaultvalue false\\n     */\\n    isRequired?: boolean;\\n    /**\\n     * Disabled state of the DatePicker.\\n     * @defaultvalue false\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Aria Label for TextField of the DatePicker for screen reader users.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * Whether or not the Textfield of the DatePicker is underlined.\\n     * @defaultvalue false\\n     */\\n    underlined?: boolean;\\n    /**\\n     * Aria label for date picker popup for screen reader users.\\n     * @defaultvalue Calendar\\n     */\\n    pickerAriaLabel?: string;\\n    /**\\n     * Whether the month picker is shown beside the day picker or hidden.\\n     * @defaultvalue true\\n     */\\n    isMonthPickerVisible?: boolean;\\n    /**\\n     * Show month picker on top of date picker when visible.\\n     * @defaultvalue false\\n     */\\n    showMonthPickerAsOverlay?: boolean;\\n    /**\\n     * Whether the DatePicker allows input a date string directly or not\\n     * @defaultvalue false\\n     */\\n    allowTextInput?: boolean;\\n    /**\\n     * Whether the DatePicker should open automatically when the control is focused\\n     * @defaultvalue false\\n     */\\n    disableAutoFocus?: boolean;\\n    /**\\n     * Placeholder text for the DatePicker\\n     */\\n    placeholder?: string;\\n    /**\\n     * Value of today. If null, current time in client machine will be used.\\n     */\\n    today?: Date;\\n    /**\\n     * Default value of the DatePicker, if any\\n     */\\n    value?: Date;\\n    /**\\n     * Optional method to format the chosen date to a string to display in the DatePicker\\n     * @defaultvalue date.toString()\\n     */\\n    formatDate?: (date?: Date) => string;\\n    /**\\n     * Optional method to parse the text input value to date, it is only useful when allowTextInput is set to true\\n     * @defaultvalue new Date(Date.parse(dateStr))\\n     */\\n    parseDateFromString?: (dateStr: string) => Date | null;\\n    /**\\n     * The first day of the week for your locale.\\n     * @defaultvalue DayOfWeek.Sunday\\n     */\\n    firstDayOfWeek?: DayOfWeek;\\n    /**\\n     * Localized strings to use in the DatePicker\\n     */\\n    strings?: IDatePickerStrings;\\n    /**\\n     * Whether the month picker should highlight the current month\\n     * @defaultvalue false\\n     */\\n    highlightCurrentMonth?: boolean;\\n    /**\\n     * Whether the month picker should highlight the selected month\\n     * @defaultvalue false\\n     */\\n    highlightSelectedMonth?: boolean;\\n    /**\\n     * Whether the calendar should show the week number (weeks 1 to 53) before each week row\\n     * @defaultvalue false\\n     */\\n    showWeekNumbers?: boolean;\\n    /**\\n     * Defines when the first week of the year should start, FirstWeekOfYear.FirstDay,\\n     * FirstWeekOfYear.FirstFullWeek or FirstWeekOfYear.FirstFourDayWeek are the possible values\\n     * @defaultvalue FirstWeekOfYear.FirstFullWeek\\n     */\\n    firstWeekOfYear?: FirstWeekOfYear;\\n    /**\\n     * Whether the \\\"Go to today\\\" link should be shown or not\\n     */\\n    showGoToToday?: boolean;\\n    /**\\n     * Determines if DatePicker has a border.\\n     * @defaultvalue false\\n     */\\n    borderless?: boolean;\\n    /**\\n     * Optional Classname for datepicker root element .\\n     */\\n    className?: string;\\n    /**\\n     * Apply additional formating to dates, for example localized date formatting.\\n     */\\n    dateTimeFormatter?: ICalendarFormatDateCallbacks;\\n    /**\\n     * The minimum allowable date.\\n     */\\n    minDate?: Date;\\n    /**\\n     * The maximum allowable date.\\n     */\\n    maxDate?: Date;\\n    /**\\n     * The initially highlighted date in the calendar picker\\n     */\\n    initialPickerDate?: Date;\\n    /**\\n     * Allows all elements to be focused, including disabled ones\\n     * @defaultvalue false\\n     */\\n    allFocusable?: boolean;\\n    /**\\n     * Callback that runs after DatePicker's menu (Calendar) is closed\\n     */\\n    onAfterMenuDismiss?: () => void;\\n    /**\\n     * Whether the CalendarDay close button should be shown or not.\\n     */\\n    showCloseButton?: boolean;\\n    /**\\n     * The tabIndex of the TextField\\n     */\\n    tabIndex?: number;\\n}\\n\\nexport declare interface IDatePickerState {\\n    selectedDate?: Date;\\n    formattedDate?: string;\\n    isDatePickerShown?: boolean;\\n    errorMessage?: string;\\n}\\n\\n/**\\n * {@docCategory DatePicker}\\n */\\nexport declare interface IDatePickerStrings extends ICalendarStrings {\\n    /**\\n     * Error message to render for TextField if isRequired validation fails.\\n     */\\n    isRequiredErrorMessage?: string;\\n    /**\\n     * Error message to render for TextField if input date string parsing fails.\\n     */\\n    invalidInputErrorMessage?: string;\\n    /**\\n     * Error message to render for TextField if date boundary (minDate, maxDate) validation fails.\\n     */\\n    isOutOfBoundsErrorMessage?: string;\\n}\\n\\n/**\\n * {@docCategory DatePicker}\\n */\\nexport declare interface IDatePickerStyleProps {\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Accept custom classNames\\n     */\\n    className?: string;\\n    disabled?: boolean;\\n    label?: boolean;\\n    isDatePickerShown?: boolean;\\n}\\n\\n/**\\n * {@docCategory DatePicker}\\n */\\nexport declare interface IDatePickerStyles {\\n    /**\\n     * Style for the root element.\\n     */\\n    root: IStyle;\\n    textField: IStyle;\\n    callout: IStyle;\\n    icon: IStyle;\\n    wrapper?: IStyle;\\n}\\n\\nexport declare interface IDetailsCheckboxProps {\\n    checked: boolean;\\n    theme?: ITheme;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsColumnProps extends React.ClassAttributes<DetailsColumnBase> {\\n    /**\\n     * The theme object to respect during render.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * The component styles to respect during render.\\n     */\\n    styles?: IStyleFunctionOrObject<IDetailsColumnStyleProps, IDetailsColumnStyles>;\\n    /**\\n     * A reference to the component instance.\\n     */\\n    componentRef?: () => void;\\n    /**\\n     * The column definition for the component instance.\\n     */\\n    column: IColumn;\\n    /**\\n     * The column index for the component instance.\\n     */\\n    columnIndex: number;\\n    /**\\n     * Parent ID used for accessibility label(s).\\n     */\\n    parentId?: string;\\n    /**\\n     * Render function for providing a column header tooltip.\\n     */\\n    onRenderColumnHeaderTooltip?: IRenderFunction<IDetailsColumnRenderTooltipProps>;\\n    /**\\n     * Callback fired when click event occurs.\\n     */\\n    onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\\n    /**\\n     * Callback fired on contextual menu event to provide contextual menu UI.\\n     */\\n    onColumnContextMenu?: (column: IColumn, ev: React.MouseEvent<HTMLElement>) => void;\\n    /**\\n     * The drag and drop helper for the component instance.\\n     */\\n    dragDropHelper?: IDragDropHelper | null;\\n    /**\\n     * Whether or not the column can be re-ordered via drag and drop.\\n     */\\n    isDraggable?: boolean;\\n    /**\\n     * @deprecated use `updateDragInfo`\\n     */\\n    setDraggedItemIndex?: (itemIndex: number) => void;\\n    /**\\n     * Callback on drag and drop event.\\n     */\\n    updateDragInfo?: (props: {\\n        itemIndex: number;\\n    }, event?: MouseEvent) => void;\\n    /**\\n     * Whether or not the column has been dropped via drag and drop.\\n     */\\n    isDropped?: boolean;\\n    /**\\n     * Custom styles for cell rendering.\\n     */\\n    cellStyleProps?: ICellStyleProps;\\n    /**\\n     * Whether to use fast icon and check components. The icons can't be targeted by customization\\n     * but are still customizable via class names.\\n     * @defaultvalue true\\n     */\\n    useFastIcons?: boolean;\\n}\\n\\n/**\\n * {@docgategory DetailsList}\\n */\\nexport declare interface IDetailsColumnRenderTooltipProps extends ITooltipHostProps {\\n    /**\\n     * Information about the column for which the tooltip is being rendered.\\n     * Use this to format status information about the column, such as its filter or sort state.\\n     */\\n    column?: IColumn;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare type IDetailsColumnStyleProps = Required<Pick<IDetailsColumnProps, 'theme' | 'cellStyleProps'>> & {\\n    /**\\n     * Classname to provide for header region.\\n     */\\n    headerClassName?: string;\\n    /**\\n     * Whether or not the column is actionable.\\n     */\\n    isActionable?: boolean;\\n    /**\\n     * Whether or not the column contains contents.\\n     */\\n    isEmpty?: boolean;\\n    /**\\n     * Whether or not the column has a visible icon.\\n     */\\n    isIconVisible?: boolean;\\n    /**\\n     * Whether or not the column is padded.\\n     */\\n    isPadded?: boolean;\\n    /**\\n     * Whether or not the column has icon only content/\\n     */\\n    isIconOnly?: boolean;\\n    /**\\n     * Classname to provide for the header's icon region.\\n     */\\n    iconClassName?: string;\\n    /**\\n     * CSS transition duration on drag event.\\n     */\\n    transitionDurationDrag?: number;\\n    /**\\n     * CSS transition duration on drop event.\\n     */\\n    transitionDurationDrop?: number;\\n};\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsColumnStyles {\\n    /**\\n     * Styleable root region.\\n     */\\n    root: IStyle;\\n    /**\\n     * Styleable resize glyph region.\\n     */\\n    gripperBarVerticalStyle: IStyle;\\n    /**\\n     * Styleable cell tooltip region.\\n     */\\n    cellTooltip: IStyle;\\n    /**\\n     * Styleable cell title region.\\n     */\\n    cellTitle: IStyle;\\n    /**\\n     * Styleable cell name region.\\n     */\\n    cellName: IStyle;\\n    /**\\n     * Styleable icon region.\\n     */\\n    iconClassName: IStyle;\\n    /**\\n     * Styleable margin by icon region.\\n     */\\n    nearIcon: IStyle;\\n    /**\\n     * Styleable label region.\\n     */\\n    accessibleLabel: IStyle;\\n    /**\\n     * Styleable column sort icon region.\\n     */\\n    sortIcon: IStyle;\\n    /**\\n     * Styleable filter glyph.\\n     */\\n    filterChevron: IStyle;\\n    /**\\n     * Styleable border region after drag & drop.\\n     */\\n    borderAfterDropping: IStyle;\\n    /**\\n     * Transparent no border region after drag & drop to avoid content shift.\\n     */\\n    noBorderAfterDropping: IStyle;\\n    /**\\n     * Styleable border while drag & drop occurs.\\n     */\\n    borderWhileDragging: IStyle;\\n    /**\\n     * Transparent no border region while drag & drop occurs to avoid content shift.\\n     */\\n    noBorderWhileDragging: IStyle;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsFooterBaseProps extends IDetailsItemProps {\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsFooterProps extends IDetailsFooterBaseProps {\\n    /**\\n     * Column metadata\\n     */\\n    columns: IColumn[];\\n    /**\\n     * Selection from utilities\\n     */\\n    selection: ISelection;\\n    /**\\n     * Selection mode\\n     */\\n    selectionMode: SelectionMode;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsGroupDividerProps extends IGroupDividerProps, IDetailsItemProps {\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsGroupRenderProps extends IGroupRenderProps {\\n    onRenderFooter?: IRenderFunction<IDetailsGroupDividerProps>;\\n    onRenderHeader?: IRenderFunction<IDetailsGroupDividerProps>;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsHeader {\\n    /** sets focus into the header */\\n    focus: () => boolean;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsHeaderBaseProps extends React.ClassAttributes<DetailsHeaderBase>, IDetailsItemProps {\\n    /** Theme from the Higher Order Component */\\n    theme?: ITheme;\\n    /** Call to provide customized styling that will layer on top of the variant rules. */\\n    styles?: IStyleFunctionOrObject<IDetailsHeaderStyleProps, IDetailsHeaderStyles>;\\n    /** Ref to the component itself */\\n    componentRef?: IRefObject<IDetailsHeader>;\\n    /** Layout mode - fixedColumns or justified */\\n    layoutMode: DetailsListLayoutMode;\\n    /** Callback for when column sizing has changed */\\n    onColumnIsSizingChanged?: (column: IColumn, isSizing: boolean) => void;\\n    /** Callback for when column is resized */\\n    onColumnResized?: (column: IColumn, newWidth: number, columnIndex: number) => void;\\n    /** Callback for when column is automatically resized */\\n    onColumnAutoResized?: (column: IColumn, columnIndex: number) => void;\\n    /** Callback for when the column is clicked */\\n    onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\\n    /** Callback for when the column needs to show a context menu */\\n    onColumnContextMenu?: (column: IColumn, ev: React.MouseEvent<HTMLElement>) => void;\\n    /** Callback to render a tooltip for the column header */\\n    onRenderColumnHeaderTooltip?: IRenderFunction<IDetailsColumnRenderTooltipProps>;\\n    /** Whether to collapse for all visibility */\\n    collapseAllVisibility?: CollapseAllVisibility;\\n    /** Whether or not all is collapsed */\\n    isAllCollapsed?: boolean;\\n    /** Callback for when collapse all is toggled */\\n    onToggleCollapseAll?: (isAllCollapsed: boolean) => void;\\n    /** ariaLabel for the entire header */\\n    ariaLabel?: string;\\n    /** ariaLabel for expand/collapse group button */\\n    ariaLabelForToggleAllGroupsButton?: string;\\n    /** ariaLabel for the header checkbox that selects or deselects everything */\\n    ariaLabelForSelectAllCheckbox?: string;\\n    /** ariaLabel for the selection column */\\n    ariaLabelForSelectionColumn?: string;\\n    /** Select all button visibility */\\n    selectAllVisibility?: SelectAllVisibility;\\n    /** Column reordering options */\\n    columnReorderOptions?: IColumnReorderOptions;\\n    /** Column reordering options */\\n    columnReorderProps?: IColumnReorderHeaderProps;\\n    /** Minimum pixels to be moved before dragging is registered */\\n    minimumPixelsForDrag?: number;\\n    /** Overriding class name */\\n    className?: string;\\n    /** If provided, can be used to render a custom checkbox */\\n    onRenderDetailsCheckbox?: IRenderFunction<IDetailsCheckboxProps>;\\n    /**\\n     * Whether to use fast icon and check components. The icons can't be targeted by customization\\n     * but are still customizable via class names.\\n     * @defaultvalue true\\n     */\\n    useFastIcons?: boolean;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsHeaderProps extends IDetailsHeaderBaseProps {\\n    /**\\n     * Column metadata\\n     */\\n    columns: IColumn[];\\n    /**\\n     * Selection from utilities\\n     */\\n    selection: ISelection;\\n    /**\\n     * Selection mode\\n     */\\n    selectionMode: SelectionMode;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsHeaderState {\\n    columnResizeDetails?: IColumnResizeDetails;\\n    isAllSelected?: boolean;\\n    isSizing?: boolean;\\n    isAllCollapsed?: boolean;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare type IDetailsHeaderStyleProps = Required<Pick<IDetailsHeaderProps, 'theme'>> & Pick<IDetailsHeaderProps, 'className'> & {\\n    /** Whether to hide select all checkbox */\\n    isSelectAllHidden?: boolean;\\n    /** Whether the \\\"select all\\\" checkbox is checked */\\n    isAllSelected?: boolean;\\n    /** Is column being resized */\\n    isResizingColumn?: boolean;\\n    /** Are all columns collapsed */\\n    isAllCollapsed?: boolean;\\n    /** Whether the header is sizing */\\n    isSizing?: boolean;\\n    /** Whether checkbox is hidden  */\\n    isCheckboxHidden?: boolean;\\n    cellStyleProps?: ICellStyleProps;\\n};\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsHeaderStyles {\\n    root: IStyle;\\n    check: IStyle;\\n    /**\\n     * @deprecated Not used\\n     */\\n    cellWrapperPadded: IStyle;\\n    cellIsCheck: IStyle;\\n    /**\\n     * @deprecated Not used\\n     */\\n    cellIsActionable: IStyle;\\n    /**\\n     * @deprecated Not used\\n     */\\n    cellIsEmpty: IStyle;\\n    cellSizer: IStyle;\\n    cellSizerStart: IStyle;\\n    cellSizerEnd: IStyle;\\n    cellIsResizing: IStyle;\\n    cellIsGroupExpander: IStyle;\\n    collapseButton: IStyle;\\n    checkTooltip: IStyle;\\n    sizingOverlay: IStyle;\\n    dropHintCircleStyle: IStyle;\\n    dropHintCaretStyle: IStyle;\\n    dropHintLineStyle: IStyle;\\n    dropHintStyle: IStyle;\\n    accessibleLabel: IStyle;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsItemProps {\\n    /**\\n     * Column metadata\\n     */\\n    columns?: IColumn[];\\n    /**\\n     * Nesting depth of a grouping\\n     */\\n    groupNestingDepth?: number;\\n    /**\\n     * How much to indent\\n     */\\n    indentWidth?: number | undefined;\\n    /**\\n     * Selection from utilities\\n     */\\n    selection?: ISelection | undefined;\\n    /**\\n     * Selection mode\\n     */\\n    selectionMode?: SelectionMode | undefined;\\n    /**\\n     * View port of the virtualized list\\n     *\\n     * @deprecated use rowWidth instead\\n     */\\n    viewport?: IViewport | undefined;\\n    /**\\n     * Checkbox visibility\\n     */\\n    checkboxVisibility?: CheckboxVisibility | undefined;\\n    /**\\n     * Rules for rendering column cells.\\n     */\\n    cellStyleProps?: ICellStyleProps;\\n    /**\\n     * Minimum width of the row.\\n     *\\n     * @defaultvalue 0\\n     */\\n    rowWidth?: number;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsList extends IList {\\n    /**\\n     * Ensures that the list content is updated. Call this in cases where the list prop updates don't change, but the list\\n     * still needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change,\\n     * you can call this to force a re-evaluation. Be aware that this can be an expensive operation and should be\\n     * done sparingly.\\n     */\\n    forceUpdate: () => void;\\n    /**\\n     * Scroll to and focus the item at the given index. focusIndex will call scrollToIndex on the specified index.\\n     *\\n     * @param index - Index of item to scroll to\\n     * @param forceIntoFirstElement - If true, focus will be set to the first focusable child element of the item rather\\n     *  than the item itself.\\n     * @param measureItem - Optional callback to measure the height of an individual item\\n     * @param scrollToMode - Optional setting to determine where in the window the item should be scrolled to\\n     * when focused.\\n     */\\n    focusIndex: (index: number, forceIntoFirstElement?: boolean, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode) => void;\\n    /**\\n     * Get the start index of the page that is currently in view\\n     */\\n    getStartItemIndexInView: () => number;\\n}\\n\\nexport declare interface IDetailsListCheckboxProps extends IDetailsCheckboxProps {\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsListProps extends IBaseProps<IDetailsList>, IWithViewportProps {\\n    /** Theme provided by a higher-order component. */\\n    theme?: ITheme;\\n    /** Custom overrides to the themed or default styles. */\\n    styles?: IStyleFunctionOrObject<IDetailsListStyleProps, IDetailsListStyles>;\\n    /**\\n     * Callback to access the IDetailsList interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IDetailsList>;\\n    /** A key that uniquely identifies the given items. If provided, the selection will be reset when the key changes. */\\n    setKey?: string;\\n    /** The items to render. */\\n    items: any[];\\n    /** Set this to true to indicate that the items being displayed are placeholder data. */\\n    isPlaceholderData?: boolean;\\n    /** Properties to pass through to the List components being rendered. */\\n    listProps?: IListProps;\\n    /** Default index to set focus to once the items have rendered and the index exists. */\\n    initialFocusedIndex?: number;\\n    /** Class name to add to the root element. */\\n    className?: string;\\n    /** Grouping instructions. */\\n    groups?: IGroup[];\\n    /** Override properties to render groups. */\\n    groupProps?: IDetailsGroupRenderProps;\\n    /** Override for the indent width used for group nesting. */\\n    indentWidth?: number;\\n    /** Selection model to track selection state.  */\\n    selection?: ISelection;\\n    /** Controls how/if the details list manages selection. Options include none, single, multiple */\\n    selectionMode?: SelectionMode;\\n    /**\\n     * By default, selection is cleared when clicking on an empty (non-focusable) section of the screen.\\n     * Setting this value to true overrides that behavior and maintains selection.\\n     * @defaultvalue false\\n     **/\\n    selectionPreservedOnEmptyClick?: boolean;\\n    /**\\n     * Additional props to pass through to the SelectionZone created by default.\\n     */\\n    selectionZoneProps?: ISelectionZoneProps;\\n    /** Controls how the columns are adjusted. */\\n    layoutMode?: DetailsListLayoutMode;\\n    /**\\n     * Controls the visibility of selection check box.\\n     * @defaultvalue CheckboxVisibility.onHover\\n     */\\n    checkboxVisibility?: CheckboxVisibility;\\n    /**\\n     * Controls the visibility of the header.\\n     * @defaultvalue true\\n     */\\n    isHeaderVisible?: boolean;\\n    /** column defitions. If none are provided, default columns will be created based on the items' properties. */\\n    columns?: IColumn[];\\n    /** Controls how the list contrains overflow. */\\n    constrainMode?: ConstrainMode;\\n    /** Event names and corresponding callbacks that will be registered to rendered row elements. */\\n    rowElementEventMap?: {\\n        eventName: string;\\n        callback: (context: IDragDropContext, event?: any) => void;\\n    }[];\\n    /** Callback for when the list has been updated. Useful for telemetry tracking externally. */\\n    onDidUpdate?: (detailsList?: DetailsListBase) => void;\\n    /**\\n     * Callback for when a given row has been mounted. Useful for identifying when a row has been rendered on the page.\\n     */\\n    onRowDidMount?: (item?: any, index?: number) => void;\\n    /**\\n     * Callback for when a given row has been unmounted.\\n     * Useful for identifying when a row has been removed from the page.\\n     */\\n    onRowWillUnmount?: (item?: any, index?: number) => void;\\n    /** Callback for when the user clicks on the column header. */\\n    onColumnHeaderClick?: (ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => void;\\n    /** Callback for when the user asks for a contextual menu (usually via right click) from a column header. */\\n    onColumnHeaderContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;\\n    /** Callback fired on column resize */\\n    onColumnResize?: (column?: IColumn, newWidth?: number, columnIndex?: number) => void;\\n    /** Callback for when a given row has been invoked (by pressing enter while it is selected.) */\\n    onItemInvoked?: (item?: any, index?: number, ev?: Event) => void;\\n    /**\\n     * Callback for when the context menu of an item has been accessed.\\n     * If undefined or false is returned, `ev.preventDefault()` will be called.\\n     */\\n    onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\\n    /**\\n     * Callback to override the default row rendering.\\n     */\\n    onRenderRow?: IRenderFunction<IDetailsRowProps>;\\n    /**\\n     * If provided, will be the \\\"default\\\" item column renderer method.\\n     * This affects cells within the rows, not the rows themselves.\\n     * If a column definition provides its own `onRender` method, that will be used instead of this.\\n     */\\n    onRenderItemColumn?: (item?: any, index?: number, column?: IColumn) => React.ReactNode;\\n    /**\\n     * If provided, will be the \\\"default\\\" item column cell value return.\\n     * A column's `getValueKey` can override `getCellValueKey`.\\n     */\\n    getCellValueKey?: (item?: any, index?: number, column?: IColumn) => string;\\n    /** Map of callback functions related to row drag and drop functionality. */\\n    dragDropEvents?: IDragDropEvents;\\n    /** Callback for what to render when the item is missing. */\\n    onRenderMissingItem?: (index?: number, rowProps?: IDetailsRowProps) => React.ReactNode;\\n    /** An override to render the details header. */\\n    onRenderDetailsHeader?: IRenderFunction<IDetailsHeaderProps>;\\n    /** An override to render the details footer. */\\n    onRenderDetailsFooter?: IRenderFunction<IDetailsFooterProps>;\\n    /**  If provided, can be used to render a custom checkbox. */\\n    onRenderCheckbox?: IRenderFunction<IDetailsListCheckboxProps>;\\n    /** Viewport info, provided by the `withViewport` decorator. */\\n    viewport?: IViewport;\\n    /**\\n     * Callback for when an item in the list becomes active by clicking anywhere inside the row or navigating to it\\n     * with the keyboard.\\n     */\\n    onActiveItemChanged?: (item?: any, index?: number, ev?: React.FocusEvent<HTMLElement>) => void;\\n    /** Accessible label for the list header. */\\n    ariaLabelForListHeader?: string;\\n    /** Accessible label for the select all checkbox. */\\n    ariaLabelForSelectAllCheckbox?: string;\\n    /** Accessible label for the name of the selection column. */\\n    ariaLabelForSelectionColumn?: string;\\n    /** Callback to get the aria-label string for a given item. */\\n    getRowAriaLabel?: (item: any) => string;\\n    /** Callback to get the aria-describedby IDs (space-separated strings) of elements that describe the item. */\\n    getRowAriaDescribedBy?: (item: any) => string;\\n    /**\\n     * Callback to get the item key, to be used in the selection and on render.\\n     * Must be provided if sorting or filtering is enabled.\\n     */\\n    getKey?: (item: any, index?: number) => string;\\n    /** Accessible label describing or summarizing the list. */\\n    ariaLabel?: string;\\n    /** Accessible label for the check button. */\\n    checkButtonAriaLabel?: string;\\n    /** Accessible label for the grid within the list. */\\n    ariaLabelForGrid?: string;\\n    /** An optional margin for proportional columns, to e.g. account for scrollbars when laying out width. */\\n    flexMargin?: number;\\n    /**\\n     * Whether the role `application` should be applied to the list.\\n     * @defaultvalue false\\n     */\\n    shouldApplyApplicationRole?: boolean;\\n    /**\\n     * The minimum mouse move distance to interpret the action as drag event.\\n     * @defaultvalue 5\\n     */\\n    minimumPixelsForDrag?: number;\\n    /**\\n     * Whether to render in compact mode.\\n     * @defaultvalue false\\n     */\\n    compact?: boolean;\\n    /**\\n     * Whether to enable render page caching. This is an experimental performance optimization that is off by default.\\n     * @defaultvalue false\\n     */\\n    usePageCache?: boolean;\\n    /**\\n     * Callback to determine whether the list should be rendered in full, or virtualized.\\n     *\\n     * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\\n     * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance\\n     * for smaller lists.\\n     *\\n     * The default implementation will virtualize when this callback is not provided.\\n     */\\n    onShouldVirtualize?: (props: IListProps) => boolean;\\n    /** Class name to add to the cell of a checkbox. */\\n    checkboxCellClassName?: string;\\n    /** Whether the selection zone should enter modal state on touch. */\\n    enterModalSelectionOnTouch?: boolean;\\n    /** Options for column reordering using drag and drop. */\\n    columnReorderOptions?: IColumnReorderOptions;\\n    /** Callback to override default group height calculation used by list virtualization. */\\n    getGroupHeight?: IGroupedListProps['getGroupHeight'];\\n    /**\\n     * Whether to re-render a row only when props changed. Might cause regression when depending on external updates.\\n     * @defaultvalue false\\n     */\\n    useReducedRowRenderer?: boolean;\\n    /**\\n     * Props impacting the render style of cells. Since these have an impact on calculated column widths, they are\\n     * handled separately from normal theme styling, but they are passed to the styling system.\\n     */\\n    cellStyleProps?: ICellStyleProps;\\n    /** Whether to disable the built-in SelectionZone, so the host component can provide its own. */\\n    disableSelectionZone?: boolean;\\n    /** Whether to animate updates */\\n    enableUpdateAnimations?: boolean;\\n    /**\\n     * Whether to use fast icon and check components. The icons can't be targeted by customization\\n     * but are still customizable via class names.\\n     * @defaultvalue true\\n     */\\n    useFastIcons?: boolean;\\n    /** Role for the list. */\\n    role?: string;\\n}\\n\\nexport declare interface IDetailsListState {\\n    focusedItemIndex: number;\\n    lastWidth?: number;\\n    lastSelectionMode?: SelectionMode;\\n    adjustedColumns: IColumn[];\\n    isCollapsed?: boolean;\\n    isSizing?: boolean;\\n    isSomeGroupExpanded?: boolean;\\n    /**\\n     * A unique object used to force-update the List when it changes.\\n     */\\n    version: {};\\n    getDerivedStateFromProps(nextProps: IDetailsListProps, previousState: IDetailsListState): IDetailsListState;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare type IDetailsListStyleProps = Required<Pick<IDetailsListProps, 'theme'>> & Pick<IDetailsListProps, 'className'> & {\\n    /** Whether the list is horizontally constrained */\\n    isHorizontalConstrained?: boolean;\\n    /** Whether the list is in compact mode */\\n    compact?: boolean;\\n    /** Whether the list is fixed in size */\\n    isFixed?: boolean;\\n};\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsListStyles {\\n    root: IStyle;\\n    focusZone: IStyle;\\n    headerWrapper: IStyle;\\n    contentWrapper: IStyle;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsRow {\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsRowBaseProps extends Pick<IDetailsListProps, 'onRenderItemColumn' | 'getCellValueKey'>, IBaseProps<IDetailsRow>, IDetailsItemProps {\\n    /**\\n     * Theme provided by styled() function\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Overriding styles to this row\\n     */\\n    styles?: IStyleFunctionOrObject<IDetailsRowStyleProps, IDetailsRowStyles>;\\n    /**\\n     * Ref of the component\\n     */\\n    componentRef?: IRefObject<IDetailsRow>;\\n    /**\\n     * Data source for this component\\n     */\\n    item: any;\\n    /**\\n     * Index of the collection of items of the DetailsList\\n     */\\n    itemIndex: number;\\n    /**\\n     * Whether to render in compact mode\\n     */\\n    compact?: boolean;\\n    /**\\n     * A list of events to register\\n     */\\n    eventsToRegister?: {\\n        eventName: string;\\n        callback: (item?: any, index?: number, event?: any) => void;\\n    }[];\\n    /**\\n     * Callback for did mount for parent\\n     */\\n    onDidMount?: (row?: DetailsRowBase) => void;\\n    /**\\n     * Callback for will mount for parent\\n     */\\n    onWillUnmount?: (row?: DetailsRowBase) => void;\\n    /**\\n     * Callback for rendering a checkbox\\n     */\\n    onRenderCheck?: (props: IDetailsRowCheckProps) => JSX.Element;\\n    /**\\n     * If provided, can be used to render a custom checkbox\\n     */\\n    onRenderDetailsCheckbox?: IRenderFunction<IDetailsCheckboxProps>;\\n    /**\\n     * Handling drag and drop events\\n     */\\n    dragDropEvents?: IDragDropEvents;\\n    /**\\n     * Helper for the drag and drop\\n     */\\n    dragDropHelper?: IDragDropHelper;\\n    /**\\n     * Collapse all visibility\\n     */\\n    collapseAllVisibility?: CollapseAllVisibility;\\n    /**\\n     * Callback for getting the row aria label\\n     */\\n    getRowAriaLabel?: (item: any) => string;\\n    /**\\n     * Callback for getting the row aria-describedby\\n     */\\n    getRowAriaDescribedBy?: (item: any) => string;\\n    /**\\n     * Check button's aria label\\n     */\\n    checkButtonAriaLabel?: string;\\n    /**\\n     * Class name for the checkbox cell\\n     */\\n    checkboxCellClassName?: string;\\n    /**\\n     * DOM element into which to render row field\\n     */\\n    rowFieldsAs?: React.ComponentType<IDetailsRowFieldsProps>;\\n    /**\\n     * Overriding class name\\n     */\\n    className?: string;\\n    /** Whether to animate updates */\\n    enableUpdateAnimations?: boolean;\\n    /**\\n     * Rerender DetailsRow only when props changed. Might cause regression when depending on external updates.\\n     * @defaultvalue false\\n     */\\n    useReducedRowRenderer?: boolean;\\n    /**\\n     * Optional pre-rendered content per column. Preferred over onRender or onRenderItemColumn if provided.\\n     */\\n    cellsByColumn?: {\\n        [columnKey: string]: React.ReactNode;\\n    };\\n    /**\\n     * Whether to use fast icon and check components. The icons can't be targeted by customization\\n     * but are still customizable via class names.\\n     * @defaultvalue true\\n     */\\n    useFastIcons?: boolean;\\n    /** Role for the row. */\\n    role?: string;\\n    /**\\n     * Id for row\\n     */\\n    id?: string;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsRowCheckProps extends React.HTMLAttributes<HTMLElement> {\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Style override\\n     */\\n    styles?: IStyleFunctionOrObject<IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>;\\n    /**\\n     * Is the check part of the header in a DetailsList\\n     */\\n    isHeader?: boolean;\\n    /**\\n     * Whether or not this check is selected\\n     */\\n    selected?: boolean;\\n    /**\\n     * Is any selected - also true for isSelectionModal\\n     */\\n    anySelected?: boolean;\\n    /**\\n     * Can this checkbox be selectable\\n     */\\n    canSelect: boolean;\\n    /**\\n     * Is this in compact mode?\\n     */\\n    compact?: boolean;\\n    /**\\n     * Optional className to attach to the slider root element.\\n     */\\n    className?: string;\\n    /**\\n     * The classname to be passed down to Check component\\n     */\\n    checkClassName?: string;\\n    /**\\n     * Whether or not this checkbox is visible\\n     */\\n    isVisible?: boolean;\\n    /**\\n     * If provided, can be used to render a custom checkbox\\n     */\\n    onRenderDetailsCheckbox?: IRenderFunction<IDetailsCheckboxProps>;\\n    /**\\n     * Whether to use fast icon and check components. The icons can't be targeted by customization\\n     * but are still customizable via class names.\\n     * @defaultvalue true\\n     */\\n    useFastIcons?: boolean;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare type IDetailsRowCheckStyleProps = Required<Pick<IDetailsRowCheckProps, 'theme'>> & Pick<IDetailsRowCheckProps, 'compact' | 'isHeader' | 'selected' | 'anySelected' | 'canSelect' | 'className'> & {\\n    /** Is checkbox visible */\\n    isVisible?: boolean;\\n};\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsRowCheckStyles {\\n    root: IStyle;\\n    /** @deprecated Use `root` (they're applied to the same element) */\\n    check: IStyle;\\n    isDisabled: IStyle;\\n}\\n\\n/**\\n * Props interface for the DetailsRowFields component.\\n *\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsRowFieldsProps extends IOverrideColumnRenderProps {\\n    /**\\n     * Data source for this component\\n     */\\n    item: any;\\n    /**\\n     * The item index of the collection for the DetailsList\\n     */\\n    itemIndex: number;\\n    /**\\n     * Index to start for the column\\n     */\\n    columnStartIndex: number;\\n    /**\\n     * Columns metadata\\n     */\\n    columns: IColumn[];\\n    /**\\n     * whether to render as a compact field\\n     */\\n    compact?: boolean;\\n    /**\\n     * Subset of classnames currently generated in DetailsRow that are used within DetailsRowFields.\\n     */\\n    rowClassNames: {\\n        [k in keyof Pick<IDetailsRowStyles, 'isMultiline' | 'isRowHeader' | 'cell' | 'cellAnimation' | 'cellPadded' | 'cellUnpadded' | 'fields'>]: string;\\n    };\\n    /**\\n     * Id for the current row's row-header\\n     */\\n    rowHeaderId?: string;\\n    /**\\n     * Style properties to customize cell render output.\\n     */\\n    cellStyleProps?: ICellStyleProps;\\n    enableUpdateAnimations?: boolean;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsRowProps extends IDetailsRowBaseProps {\\n    /**\\n     * Column metadata\\n     */\\n    columns: IColumn[];\\n    /**\\n     * Selection from utilities\\n     */\\n    selection: ISelection;\\n    /**\\n     * Selection mode\\n     */\\n    selectionMode: SelectionMode;\\n}\\n\\nexport declare interface IDetailsRowSelectionState {\\n    isSelected: boolean;\\n    isSelectionModal: boolean;\\n}\\n\\nexport declare interface IDetailsRowState {\\n    selectionState: IDetailsRowSelectionState;\\n    columnMeasureInfo?: {\\n        index: number;\\n        column: IColumn;\\n        onMeasureDone: (measuredWidth: number) => void;\\n    };\\n    isDropping?: boolean;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare type IDetailsRowStyleProps = Required<Pick<IDetailsRowProps, 'theme'>> & {\\n    /** Whether the row is selected  */\\n    isSelected?: boolean;\\n    /** Whether there are any rows in the list selected */\\n    anySelected?: boolean;\\n    /** Whether this row can be selected */\\n    canSelect?: boolean;\\n    /** Class name of when this becomes a drop target. */\\n    droppingClassName?: string;\\n    /** Is the checkbox visible */\\n    isCheckVisible?: boolean;\\n    /** Is this a row header */\\n    isRowHeader?: boolean;\\n    /** A class name from the checkbox cell, so proper styling can be targeted */\\n    checkboxCellClassName?: string;\\n    /** CSS class name for the component */\\n    className?: string;\\n    /** Is list in compact mode */\\n    compact?: boolean;\\n    cellStyleProps?: ICellStyleProps;\\n    /** Whether to animate updates */\\n    enableUpdateAnimations?: boolean;\\n};\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDetailsRowStyles {\\n    root: IStyle;\\n    cell: IStyle;\\n    cellAnimation: IStyle;\\n    cellUnpadded: IStyle;\\n    cellPadded: IStyle;\\n    checkCell: IStyle;\\n    isRowHeader: IStyle;\\n    isMultiline: IStyle;\\n    fields: IStyle;\\n    cellMeasurer: IStyle;\\n    checkCover: IStyle;\\n    check: IStyle;\\n}\\n\\n/**\\n * {@docCategory Dialog}\\n */\\nexport declare interface IDialog {\\n}\\n\\n/**\\n * {@docCategory Dialog}\\n */\\nexport declare interface IDialogContent {\\n}\\n\\n/**\\n * {@docCategory Dialog}\\n */\\nexport declare interface IDialogContentProps extends React.ClassAttributes<DialogContentBase> {\\n    /**\\n     * Optional callback to access the IDialogContent interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IDialogContent>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<IDialogContentStyleProps, IDialogContentStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Is inside a multiline wrapper\\n     */\\n    isMultiline?: boolean;\\n    /**\\n     * Show an 'x' close button in the upper-right corner\\n     */\\n    showCloseButton?: boolean;\\n    /**\\n     * Other top buttons that will show up next to the close button\\n     */\\n    topButtonsProps?: IButtonProps[];\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n    /**\\n     * Callback for when the Dialog is dismissed from the close button or light dismiss, before the animation completes.\\n     */\\n    onDismiss?: (ev?: React.MouseEvent<HTMLButtonElement>) => any;\\n    /**\\n     * The Id for subText container\\n     */\\n    subTextId?: string;\\n    /**\\n     * The subtext to display in the dialog\\n     */\\n    subText?: string;\\n    /**\\n     * The Id for title container\\n     *\\n     * @deprecated use the `id` attribute in `titleProps` instead.\\n     */\\n    titleId?: string;\\n    /**\\n     * The title text to display at the top of the dialog.\\n     */\\n    title?: string | JSX.Element;\\n    /**\\n     * The props for title container.\\n     */\\n    titleProps?: React.HTMLAttributes<HTMLDivElement>;\\n    /**\\n     * Responsive mode passed in from decorator.\\n     */\\n    responsiveMode?: ResponsiveMode;\\n    /**\\n     * Label to be passed to to aria-label of close button\\n     * @defaultvalue Close\\n     */\\n    closeButtonAriaLabel?: string;\\n    /**\\n     * The type of Dialog to display.\\n     * @defaultvalue DialogType.normal\\n     */\\n    type?: DialogType;\\n    /**\\n     * The classname for when the header is draggable\\n     */\\n    draggableHeaderClassName?: string;\\n}\\n\\n/**\\n * {@docCategory Dialog}\\n */\\nexport declare interface IDialogContentStyleProps {\\n    /**\\n     * Accept theme prop.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Accept custom classNames\\n     */\\n    className?: string;\\n    isLargeHeader?: boolean;\\n    isClose?: boolean;\\n    hidden?: boolean;\\n    /**\\n     * Is inside a multiline wrapper\\n     */\\n    isMultiline?: boolean;\\n    /**\\n     * The classname for when the header is draggable\\n     */\\n    draggableHeaderClassName?: string;\\n}\\n\\n/**\\n * {@docCategory Dialog}\\n */\\nexport declare interface IDialogContentStyles {\\n    /**\\n     * Style for the content element.\\n     */\\n    content: IStyle;\\n    subText: IStyle;\\n    header: IStyle;\\n    button: IStyle;\\n    inner: IStyle;\\n    innerContent: IStyle;\\n    title: IStyle;\\n    topButton: IStyle;\\n}\\n\\n/**\\n * {@docCategory Dialog}\\n */\\nexport declare interface IDialogFooter {\\n}\\n\\n/**\\n * {@docCategory Dialog}\\n */\\nexport declare interface IDialogFooterProps extends React.Props<DialogFooterBase> {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<IDialogFooter>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<IDialogFooterStyleProps, IDialogFooterStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory Dialog}\\n */\\nexport declare interface IDialogFooterStyleProps {\\n    /**\\n     * Accept theme prop.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory Dialog}\\n */\\nexport declare interface IDialogFooterStyles {\\n    /**\\n     * Style for the actions element.\\n     */\\n    actions: IStyle;\\n    actionsRight: IStyle;\\n    action: IStyle;\\n}\\n\\n/**\\n * {@docCategory Dialog}\\n */\\nexport declare interface IDialogProps extends React.ClassAttributes<DialogBase>, IWithResponsiveModeState, IAccessiblePopupProps {\\n    /**\\n     * Optional callback to access the IDialog interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     * @deprecated Unused, returns no value\\n     */\\n    componentRef?: IRefObject<IDialog>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<IDialogStyleProps, IDialogStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Props to be passed through to Dialog Content\\n     */\\n    dialogContentProps?: IDialogContentProps;\\n    /**\\n     * A callback function for when the Dialog is dismissed from the close button or light dismiss.\\n     * Can also be specified separately in content and modal.\\n     */\\n    onDismiss?: (ev?: React.MouseEvent<HTMLButtonElement>) => any;\\n    /**\\n     * Whether the dialog is hidden.\\n     * @defaultvalue true\\n     */\\n    hidden?: boolean;\\n    /**\\n     * Props to be passed through to Modal\\n     */\\n    modalProps?: IModalProps;\\n    /**\\n     * Whether the dialog is displayed.\\n     * Deprecated, use `hidden` instead.\\n     * @defaultvalue false\\n     * @deprecated Use `hidden` instead\\n     */\\n    isOpen?: boolean;\\n    /**\\n     * Whether the overlay is dark themed.\\n     * @defaultvalue true\\n     * @deprecated Pass through via `modalProps` instead\\n     */\\n    isDarkOverlay?: boolean;\\n    /**\\n     * A callback function which is called after the Dialog is dismissed and the animation is complete.\\n     * @deprecated Pass through via `modalProps` instead\\n     */\\n    onDismissed?: () => any;\\n    /**\\n     * Whether the dialog can be light dismissed by clicking outside the dialog (on the overlay).\\n     * @defaultvalue false\\n     * @deprecated Pass through via `modalProps` instead\\n     */\\n    isBlocking?: boolean;\\n    /**\\n     * Optional class name to be added to the root class\\n     * @deprecated Pass through via `modalProps.className` instead\\n     */\\n    className?: string;\\n    /**\\n     * Optional override for container class\\n     * @deprecated Pass through via `modalProps.className` instead\\n     */\\n    containerClassName?: string;\\n    /**\\n     * A callback function for when the Dialog content is mounted on the overlay layer\\n     * @deprecated Pass through via `modalProps.layerProps` instead\\n     */\\n    onLayerDidMount?: () => void;\\n    /**\\n     * Deprecated at 0.81.2, use `onLayerDidMount` instead.\\n     * @deprecated Use `onLayerDidMount` instead.\\n     */\\n    onLayerMounted?: () => void;\\n    /**\\n     * The type of Dialog to display.\\n     * @defaultvalue DialogType.normal\\n     * @deprecated Pass through via `dialogContentProps` instead.\\n     */\\n    type?: DialogType;\\n    /**\\n     * The title text to display at the top of the dialog.\\n     * @deprecated Pass through via `dialogContentProps` instead.\\n     */\\n    title?: string | JSX.Element;\\n    /**\\n     * The subtext to display in the dialog.\\n     * @deprecated Pass through via `dialogContentProps` instead.\\n     */\\n    subText?: string;\\n    /**\\n     * Optional override content class\\n     * @deprecated Pass through via `dialogContentProps` instead as `className`.\\n     */\\n    contentClassName?: string;\\n    /**\\n     * Other top buttons that will show up next to the close button\\n     * @deprecated Pass through via `dialogContentProps` instead.\\n     */\\n    topButtonsProps?: IButtonProps[];\\n    /**\\n     * Optional id for aria-LabelledBy\\n     * @deprecated Pass through via `modalProps.titleAriaId` instead.\\n     */\\n    ariaLabelledById?: string;\\n    /**\\n     * Optional id for aria-DescribedBy\\n     * @deprecated Pass through via `modalProps.subtitleAriaId` instead.\\n     */\\n    ariaDescribedById?: string;\\n    /**\\n     * Sets the minimum width of the dialog. It limits the width property to be not\\n     * smaller than the value specified in min-width.\\n     */\\n    minWidth?: ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Sets the maximum width for the dialog. It limits the width property to be larger\\n     * than the value specified in max-width.\\n     */\\n    maxWidth?: ICSSRule | ICSSPixelUnitRule;\\n}\\n\\nexport declare interface IDialogState {\\n    isOpen?: boolean;\\n    isVisible?: boolean;\\n    isVisibleClose?: boolean;\\n    id?: string;\\n    hasBeenOpened?: boolean;\\n    modalRectangleTop?: number;\\n    isModalMenuOpen?: boolean;\\n    isInKeyboardMoveMode?: boolean;\\n    x: number;\\n    y: number;\\n}\\n\\n/**\\n * {@docCategory Dialog}\\n */\\nexport declare interface IDialogStyleProps {\\n    /**\\n     * Accept theme prop.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Accept custom classNames\\n     */\\n    className?: string;\\n    /**\\n     * Optional override for container class\\n     * @deprecated Pass through via `modalProps.className` instead.\\n     */\\n    containerClassName?: string;\\n    /**\\n     * Optional override content class\\n     * @deprecated Pass through via `dialogContentProps` instead as `className`.\\n     */\\n    contentClassName?: string;\\n    /**\\n     * Whether the dialog is hidden.\\n     * @defaultvalue false\\n     */\\n    hidden?: boolean;\\n    /**\\n     * Default min-width for the dialog box.\\n     * @defaultvalue '288px'\\n     */\\n    dialogDefaultMinWidth?: string | ICSSRule | ICSSPixelUnitRule;\\n    /**\\n     * Default max-width for the dialog box.\\n     * @defaultvalue '340px'\\n     */\\n    dialogDefaultMaxWidth?: string | ICSSRule | ICSSPixelUnitRule;\\n}\\n\\n/**\\n * {@docCategory Dialog}\\n */\\nexport declare interface IDialogStyles {\\n    /**\\n     * Style for the root element.\\n     */\\n    root: IStyle;\\n    main: IStyle;\\n}\\n\\n/**\\n * {@docCategory Breadcrumb}\\n */\\nexport declare interface IDividerAsProps extends IIconProps {\\n    /**\\n     * Breadcrumb item to left of the divider to be passed for custom rendering.\\n     * For overflowed items, it will be last item in the list.\\n     */\\n    item?: IBreadcrumbItem;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCard {\\n    /**\\n     * Sets focus to the DocumentCard.\\n     */\\n    focus: () => void;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardActions {\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardActionsProps extends React.ClassAttributes<DocumentCardActionsBase> {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<IDocumentCardActions>;\\n    /**\\n     * The actions available for this document.\\n     */\\n    actions: IButtonProps[];\\n    /**\\n     * The number of views this document has received.\\n     */\\n    views?: Number;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<IDocumentCardActionsStyleProps, IDocumentCardActionsStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardActionsStyleProps {\\n    /**\\n     * Accept theme prop.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardActionsStyles {\\n    root: IStyle;\\n    action: IStyle;\\n    views: IStyle;\\n    viewsIcon: IStyle;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardActivity {\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardActivityPerson {\\n    /**\\n     * The name of the person.\\n     */\\n    name: string;\\n    /**\\n     * Path to the profile photo of the person.\\n     */\\n    profileImageSrc: string;\\n    /**\\n     * The user's initials to display in the profile photo area when there is no image.\\n     */\\n    initials?: string;\\n    /**\\n     * Whether initials are calculated for phone numbers and number sequences.\\n     * Example: Set property to true to get initials for project names consisting of numbers only.\\n     * @defaultvalue false\\n     */\\n    allowPhoneInitials?: boolean;\\n    /**\\n     * The background color when the user's initials are displayed.\\n     * @defaultvalue PersonaInitialsColor.blue\\n     */\\n    initialsColor?: PersonaInitialsColor;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardActivityProps extends React.ClassAttributes<DocumentCardActivityBase> {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<IDocumentCardActivity>;\\n    /**\\n     * Describes the activity that has taken place, such as \\\"Created Feb 23, 2016\\\".\\n     */\\n    activity: string;\\n    /**\\n     * One or more people who are involved in this activity.\\n     */\\n    people: IDocumentCardActivityPerson[];\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<IDocumentCardActivityStyleProps, IDocumentCardActivityStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardActivityStyleProps {\\n    /**\\n     * Accept theme prop.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n    /**\\n     * Indicates if multiple people are being shown.\\n     */\\n    multiplePeople?: boolean;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardActivityStyles {\\n    root: IStyle;\\n    avatars: IStyle;\\n    avatar: IStyle;\\n    details: IStyle;\\n    name: IStyle;\\n    activity: IStyle;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardDetails {\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardDetailsProps extends React.Props<DocumentCardDetailsBase> {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<IDocumentCardDetails>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<IDocumentCardDetailsStyleProps, IDocumentCardDetailsStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardDetailsStyleProps {\\n    /**\\n     * Accept theme prop.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardDetailsStyles {\\n    root: IStyle;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardImage {\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardImageProps extends IBaseProps<{}> {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<IDocumentCardImage>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<IDocumentCardImageStyleProps, IDocumentCardImageStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n    /**\\n     * Path to the preview image.\\n     */\\n    imageSrc?: string;\\n    /**\\n     * The props for the icon associated with this document type.\\n     */\\n    iconProps?: IIconProps;\\n    /**\\n     * If provided, forces the preview image to be this width.\\n     */\\n    width?: number;\\n    /**\\n     * If provided, forces the preview image to be this height.\\n     */\\n    height?: number;\\n    /**\\n     * Used to determine how to size the image to fit the dimensions of the component.\\n     * If both dimensions are provided, then the image is fit using ImageFit.scale, otherwise ImageFit.none is used.\\n     */\\n    imageFit?: ImageFit;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardImageStyleProps extends IDocumentCardImageProps {\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardImageStyles {\\n    root: IStyle;\\n    cornerIcon: IStyle;\\n    centeredIcon: IStyle;\\n    centeredIconWrapper: IStyle;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardLocation {\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardLocationProps extends React.ClassAttributes<DocumentCardLocationBase> {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<IDocumentCardLocation>;\\n    /**\\n     * Text for the location of the document.\\n     */\\n    location: string;\\n    /**\\n     * URL to navigate to for this location.\\n     */\\n    locationHref?: string;\\n    /**\\n     * Function to call when the location is clicked.\\n     */\\n    onClick?: (ev?: React.MouseEvent<HTMLElement>) => void;\\n    /**\\n     * Aria label for the link to the document location.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<IDocumentCardLocationStyleProps, IDocumentCardLocationStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardLocationStyleProps {\\n    /**\\n     * Accept theme prop.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardLocationStyles {\\n    root: IStyle;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardLogo {\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardLogoProps extends React.ClassAttributes<DocumentCardLogoBase> {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<IDocumentCardLogo>;\\n    /**\\n     * Describes DocumentCard Logo badge.\\n     */\\n    logoIcon: string;\\n    /**\\n     * Describe Logo name, optional.\\n     */\\n    logoName?: string;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<IDocumentCardLogoStyleProps, IDocumentCardLogoStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardLogoStyleProps {\\n    /**\\n     * Accept theme prop.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardLogoStyles {\\n    root: IStyle;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardPreview {\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardPreviewImage {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<{}>;\\n    /**\\n     * File name for the document this preview represents.\\n     */\\n    name?: string;\\n    /**\\n     * URL to view the file.\\n     * @deprecated Use `href` inside of `linkProps` instead.\\n     */\\n    url?: string;\\n    /**\\n     * Props to pass to Link component\\n     */\\n    linkProps?: ILinkProps;\\n    /**\\n     * Path to the preview image.\\n     */\\n    previewImageSrc?: string;\\n    /**\\n     * Deprecated at v1.3.6, to be removed at \\\\>= v2.0.0.\\n     * @deprecated To be removed at v2.0.0.\\n     */\\n    errorImageSrc?: string;\\n    /**\\n     * Path to the icon associated with this document type.\\n     *\\n     */\\n    iconSrc?: string;\\n    /**\\n     * If provided, forces the preview image to be this width.\\n     */\\n    width?: number;\\n    /**\\n     * If provided, forces the preview image to be this height.\\n     */\\n    height?: number;\\n    /**\\n     * Used to determine how to size the image to fit the dimensions of the component.\\n     * If both dimensions are provided, then the image is fit using ImageFit.scale, otherwise ImageFit.none is used.\\n     */\\n    imageFit?: ImageFit;\\n    /**\\n     * Hex color value of the line below the preview, which should correspond to the document type.\\n     *\\n     * Deprecated at v4.17.1, to be removed at \\\\>= v5.0.0.\\n     * @deprecated To be removed at v5.0.0.\\n     */\\n    accentColor?: string;\\n    /**\\n     * The props for the preview icon.\\n     * If provided, icon will be rendered instead of image.\\n     */\\n    previewIconProps?: IIconProps;\\n    /**\\n     * The props for the preview icon container classname.\\n     * If provided, icon container classname will be used..\\n     */\\n    previewIconContainerClass?: string;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardPreviewProps extends IBaseProps<{}> {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<IDocumentCardPreview>;\\n    /**\\n     * One or more preview images to display.\\n     */\\n    previewImages: IDocumentCardPreviewImage[];\\n    /**\\n     * The function return string that will describe the number of overflow documents.\\n     * such as  (overflowCount: number) =\\\\> `+${ overflowCount } more`,\\n     */\\n    getOverflowDocumentCountText?: (overflowCount: number) => string;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<IDocumentCardPreviewStyleProps, IDocumentCardPreviewStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardPreviewStyleProps {\\n    /**\\n     * Accept theme prop.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n    /**\\n     * Is it a list of files rather than a preview image?\\n     */\\n    isFileList?: boolean;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardPreviewStyles {\\n    root: IStyle;\\n    previewIcon: IStyle;\\n    icon: IStyle;\\n    fileList: IStyle;\\n    fileListIcon: IStyle;\\n    fileListLink: IStyle;\\n    fileListOverflowText: IStyle;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardProps extends IBaseProps<IDocumentCard>, React.HTMLAttributes<HTMLDivElement> {\\n    /**\\n     * Optional callback to access the IDocumentCard interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IDocumentCard>;\\n    /**\\n     * The type of DocumentCard to display.\\n     * @defaultvalue DocumentCardType.normal\\n     */\\n    type?: DocumentCardType;\\n    /**\\n     * Function to call when the card is clicked or keyboard Enter/Space is pushed.\\n     */\\n    onClick?: (ev?: React.SyntheticEvent<HTMLElement>) => void;\\n    /**\\n     * A URL to navigate to when the card is clicked. If a function has also been provided,\\n     * it will be used instead of the URL.\\n     */\\n    onClickHref?: string;\\n    /**\\n     * A target browser context for opening the link. If not specified, will open in the same tab/window.\\n     */\\n    onClickTarget?: string;\\n    /**\\n     * Aria role assigned to the documentCard (Eg. button, link).\\n     * Use this to override the default assignment.\\n     * @defaultvalue When `onClick` is provided, default role will be 'button'.\\n     * When `onClickHref` is provided, default role will be 'link'.\\n     */\\n    role?: string;\\n    /**\\n     * Hex color value of the line below the card, which should correspond to the document type.\\n     * This should only be supplied when using the 'compact' card layout.\\n     *\\n     * Deprecated at v4.17.1, to be removed at \\\\>= v5.0.0.\\n     * @deprecated To be removed at v5.0.0.\\n     */\\n    accentColor?: string;\\n    /**\\n     * Child components to render within the card.\\n     */\\n    children?: React.ReactNode;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<IDocumentCardStyleProps, IDocumentCardStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardStatus {\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardStatusProps extends React.Props<DocumentCardStatusBase> {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<IDocumentCardStatus>;\\n    /**\\n     * Describes DocumentCard status icon.\\n     */\\n    statusIcon?: string;\\n    /**\\n     * Describe status information. Required field.\\n     */\\n    status: string;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<IDocumentCardStatusStyleProps, IDocumentCardStatusStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardStatusStyleProps {\\n    /**\\n     * Accept theme prop.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardStatusStyles {\\n    root: IStyle;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardStyleProps {\\n    /**\\n     * Accept theme prop.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n    /**\\n     * True when the card has a click action.\\n     */\\n    actionable?: boolean;\\n    /**\\n     * Compact variant of the card.\\n     */\\n    compact?: boolean;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardStyles {\\n    root: IStyle;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardTitle {\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardTitleProps extends React.ClassAttributes<DocumentCardTitleBase> {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<IDocumentCardTitle>;\\n    /**\\n     * Title text.\\n     * If the card represents more than one document, this should be the title of one document and a \\\"+X\\\" string.\\n     * For example, a collection of four documents would have a string of \\\"Document.docx +3\\\".\\n     */\\n    title: string;\\n    /**\\n     * Whether we truncate the title to fit within the box. May have a performance impact.\\n     * @defaultvalue true\\n     */\\n    shouldTruncate?: boolean;\\n    /**\\n     * Whether show as title as secondary title style such as smaller font and lighter color.\\n     * @defaultvalue false\\n     */\\n    showAsSecondaryTitle?: boolean;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<IDocumentCardTitleStyleProps, IDocumentCardTitleStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n}\\n\\ndeclare interface IDocumentCardTitleState {\\n    truncatedTitleFirstPiece?: string;\\n    truncatedTitleSecondPiece?: string;\\n    clientWidth?: number;\\n    previousTitle: string;\\n    /**\\n     * In measuring, it will render a same style text with whiteSpace: 'nowrap', to get overflow rate.\\n     * So that the logic can predict truncated text well.\\n     */\\n    needMeasurement: boolean;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardTitleStyleProps {\\n    /**\\n     * Accept theme prop.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Optional override class name\\n     */\\n    className?: string;\\n    /**\\n     * Is this a secondary title?\\n     */\\n    showAsSecondaryTitle?: boolean;\\n}\\n\\n/**\\n * {@docCategory DocumentCard}\\n */\\nexport declare interface IDocumentCardTitleStyles {\\n    root: IStyle;\\n}\\n\\n/**\\n * Drag & drop event contextual information.\\n *\\n * {@docCategory IDragDropHelper}\\n */\\nexport declare interface IDragDropContext {\\n    /**\\n     * Data associated with drag & drop action.\\n     */\\n    data: any;\\n    /**\\n     * Index of drag & drop action.\\n     */\\n    index: number;\\n    /**\\n     * Whether or not drag & drop region is indivual or group of content.\\n     */\\n    isGroup?: boolean;\\n}\\n\\n/**\\n * {@docCategory IDragDropHelper}\\n */\\nexport declare interface IDragDropEvent {\\n    /**\\n     * Whether or not the drag & drop event was handled.\\n     */\\n    isHandled?: boolean;\\n}\\n\\n/**\\n * Drag & drop event callback interface.\\n *\\n * {@docCategory IDragDropHelper}\\n */\\nexport declare interface IDragDropEvents {\\n    /**\\n     * Whether or not drop action is allowed.\\n     */\\n    canDrop?: (dropContext?: IDragDropContext, dragContext?: IDragDropContext) => boolean;\\n    /**\\n     * Whether or not drag action is allowed.\\n     */\\n    canDrag?: (item?: any) => boolean;\\n    /**\\n     * On drag enter region event callback.\\n     * Returned string is the css classes that will be added to the entering element.\\n     */\\n    onDragEnter?: (item?: any, event?: DragEvent) => string;\\n    /**\\n     * On drag leave region event callback.\\n     */\\n    onDragLeave?: (item?: any, event?: DragEvent) => void;\\n    /**\\n     * On drop event callback.\\n     */\\n    onDrop?: (item?: any, event?: DragEvent) => void;\\n    /**\\n     * On drag start event callback.\\n     */\\n    onDragStart?: (item?: any, itemIndex?: number, selectedItems?: any[], event?: MouseEvent) => void;\\n    /**\\n     * On drag end event callback.\\n     */\\n    onDragEnd?: (item?: any, event?: DragEvent) => void;\\n    /**\\n     * On drag over event callback.\\n     */\\n    onDragOver?: (item?: any, event?: DragEvent) => void;\\n    /**\\n     * Whether the whole group is draggable. This applies after canDrag returns true for the group.\\n     */\\n    canDragGroups?: boolean;\\n}\\n\\n/**\\n * Helper for subscribing and unsubscribing to\\n * drag and drop events on an HTMLElement.\\n *\\n * {@docCategory IDragDropHelper}\\n */\\nexport declare interface IDragDropHelper {\\n    /**\\n     * Subscribe to events on a DOM node with drag and drop configuration.\\n     */\\n    subscribe: (root: HTMLElement, events: EventGroup, options: IDragDropOptions) => {\\n        key: string;\\n        dispose: () => void;\\n    };\\n    /**\\n     * Unsubscribe to events registered on a DOM node with key.\\n     */\\n    unsubscribe: (root: HTMLElement, key: string) => void;\\n    /**\\n     * Dispose of listeners bound to instance of helper.\\n     */\\n    dispose: () => void;\\n}\\n\\nexport declare interface IDragDropHelperParams {\\n    selection: ISelection;\\n    minimumPixelsForDrag?: number;\\n}\\n\\n/**\\n * The drag and drop event listener configuration.\\n *\\n * {@docCategory IDragDropHelper}\\n */\\nexport declare interface IDragDropOptions {\\n    /**\\n     * Unique key to associate with instance.\\n     */\\n    key?: string;\\n    /**\\n     * Map of event name to callback function to subscribe to.\\n     */\\n    eventMap?: {\\n        eventName: string;\\n        callback: (context: IDragDropContext, event?: any) => void;\\n    }[];\\n    /**\\n     * Selection index on drag and drop event.\\n     */\\n    selectionIndex: number;\\n    /**\\n     * Context associated with drag and drop event.\\n     */\\n    context: IDragDropContext;\\n    /**\\n     * Callback on drop state update.\\n     */\\n    updateDropState: (isDropping: boolean, event: DragEvent) => void;\\n    /**\\n     * Whether or not drop action is allowed.\\n     */\\n    canDrop?: (dropContext?: IDragDropContext, dragContext?: IDragDropContext) => boolean;\\n    /**\\n     * Whether or not drag action is allowed.\\n     */\\n    canDrag?: (item?: any) => boolean;\\n    /**\\n     * On drag start event callback.\\n     */\\n    onDragStart?: (item?: any, itemIndex?: number, selectedItems?: any[], event?: MouseEvent) => void;\\n    /**\\n     * On drop event callback.\\n     */\\n    onDrop?: (item?: any, event?: DragEvent) => void;\\n    /**\\n     * On drag end event callback.\\n     */\\n    onDragEnd?: (item?: any, event?: DragEvent) => void;\\n    /**\\n     * On drag over element(s) event callback.\\n     */\\n    onDragOver?: (item?: any, event?: DragEvent) => void;\\n}\\n\\nexport declare interface IDragDropTarget {\\n    root: HTMLElement;\\n    options: IDragDropOptions;\\n    key: string;\\n}\\n\\nexport declare interface IDragOptions {\\n    /**\\n     * Optional selector for the element where the drag can be initiated. If not supplied when\\n     * isDraggable is true dragging can be initated by the whole contents of the modal\\n     */\\n    dragHandleSelector?: string;\\n    /**\\n     * IconProps for the icon used to indicate that the dialog is in keyboard move mode\\n     */\\n    keyboardMoveIconProps?: IIconProps;\\n    /**\\n     * The text to use for the modal move menu item\\n     */\\n    moveMenuItemText: string;\\n    /**\\n     * The text to use for the modal close menu item\\n     */\\n    closeMenuItemText: string;\\n    /**\\n     * The Draggable Control Menu so that the draggable zone can be moved via the keyboard\\n     */\\n    menu: React.FunctionComponent<IContextualMenuProps>;\\n    /**\\n     * Whether the draggable content should be prevented from going off-screen\\n     */\\n    keepInBounds?: boolean;\\n}\\n\\n/**\\n * {@docCategory Dropdown}\\n */\\nexport declare interface IDropdown {\\n    /**\\n     * All selected options\\n     */\\n    readonly selectedOptions: IDropdownOption[];\\n    focus: (shouldOpenOnFocus?: boolean) => void;\\n}\\n\\n/** Internal only props interface to support mixing in responsive mode */\\nexport declare interface IDropdownInternalProps extends IDropdownProps, IWithResponsiveModeState {\\n}\\n\\n/**\\n * {@docCategory Dropdown}\\n */\\nexport declare interface IDropdownOption extends ISelectableOption {\\n    /**\\n     * Deprecated at v.65.1, use `selected` instead.\\n     * @deprecated Use `selected` instead.\\n     */\\n    isSelected?: boolean;\\n}\\n\\n/**\\n * {@docCategory Dropdown}\\n */\\nexport declare interface IDropdownProps extends ISelectableDroppableTextProps<IDropdown, HTMLDivElement> {\\n    /**\\n     * Input placeholder text. Displayed until an option is selected.\\n     * @deprecated Use `placeholder`\\n     */\\n    placeHolder?: string;\\n    /**\\n     * Options for the dropdown. If using `defaultSelectedKey` or `defaultSelectedKeys`, options must be\\n     * pure for correct behavior.\\n     */\\n    options: IDropdownOption[];\\n    /**\\n     * Callback for when the selected option changes.\\n     */\\n    onChange?: (event: React.FormEvent<HTMLDivElement>, option?: IDropdownOption, index?: number) => void;\\n    /**\\n     * @deprecated Use `onChange` instead.\\n     */\\n    onChanged?: (option: IDropdownOption, index?: number) => void;\\n    /**\\n     * Custom renderer for the label.\\n     */\\n    onRenderLabel?: IRenderFunction<IDropdownProps>;\\n    /**\\n     * Custom renderer for placeholder text\\n     */\\n    onRenderPlaceholder?: IRenderFunction<IDropdownProps>;\\n    /**\\n     * Custom renderer for placeholder text\\n     * @deprecated Use `onRenderPlaceholder`\\n     */\\n    onRenderPlaceHolder?: IRenderFunction<IDropdownProps>;\\n    /**\\n     * Custom renderer for selected option displayed in input\\n     */\\n    onRenderTitle?: IRenderFunction<IDropdownOption[]>;\\n    /**\\n     * Custom renderer for chevron icon\\n     */\\n    onRenderCaretDown?: IRenderFunction<IDropdownProps>;\\n    /**\\n     * Custom width for dropdown. If value is 0, width of the input field is used.\\n     * If value is 'auto', width of the input field is used by default, and it can grow wider to fit the content.\\n     * @defaultvalue 0\\n     */\\n    dropdownWidth?: number | 'auto';\\n    /**\\n     * By default, the dropdown will render the standard way for screen sizes `large` and above, or\\n     * in a panel on `small` and `medium` screens. Manually set this prop to override this behavior.\\n     */\\n    responsiveMode?: ResponsiveMode;\\n    /**\\n     * Keys that will be initially used to set selected items. This prop is only used when `multiSelect`\\n     * is true (use `defaultSelectedKey` for single select). Mutually exclusive with `selectedKeys`.\\n     */\\n    defaultSelectedKeys?: string[] | number[];\\n    /**\\n     * Keys of the selected items, only used when `multiSelect` is true (use `selectedKey` for single\\n     * select). If you provide this, you must maintain selection state by observing onChange events\\n     * and passing a new prop value in when changed. Passing null will clear the selection.\\n     * Mutually exclusive with `defaultSelectedKeys`.\\n     */\\n    selectedKeys?: string[] | number[] | null;\\n    /**\\n     * When multiple items are selected, this will be used to separate values in the dropdown input.\\n     *\\n     * @defaultvalue \\\", \\\"\\n     */\\n    multiSelectDelimiter?: string;\\n    /**\\n     * If true, `onChange` will still be called when an already-selected item is clicked again in\\n     * single select mode. (Normally it would not be called in this case.)\\n     */\\n    notifyOnReselect?: boolean;\\n    /**\\n     * Deprecated at v0.52.0, use `disabled` instead.\\n     * @deprecated Use `disabled` instead.\\n     */\\n    isDisabled?: boolean;\\n    /**\\n     * Optional keytip for this dropdown\\n     */\\n    keytipProps?: IKeytipProps;\\n    /**\\n     * Theme provided by higher order component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IDropdownStyleProps, IDropdownStyles>;\\n}\\n\\nexport declare interface IDropdownState {\\n    isOpen: boolean;\\n    selectedIndices: number[];\\n    /** Whether the root dropdown element has focus. */\\n    hasFocus: boolean;\\n    calloutRenderEdge?: RectangleEdge;\\n}\\n\\n/**\\n * The props needed to construct styles.\\n * This represents the simplified set of immutable things which control the class names.\\n * {@docCategory Dropdown}\\n */\\nexport declare type IDropdownStyleProps = Pick<IDropdownProps, 'theme' | 'className' | 'disabled' | 'required'> & {\\n    /**\\n     * Whether the dropdown is in an error state.\\n     */\\n    hasError: boolean;\\n    /**\\n     * Specifies if the dropdown has label content.\\n     */\\n    hasLabel: boolean;\\n    /**\\n     * Whether the dropdown is in an opened state.\\n     */\\n    isOpen: boolean;\\n    /**\\n     * Whether the dropdown is currently rendering placeholder text instead of a selected option.\\n     */\\n    isRenderingPlaceholder: boolean;\\n    /**\\n     * Custom className for the panel that displays in small viewports, hosting the Dropdown options.\\n     * This is primarily provided for backwards compatibility.\\n     */\\n    panelClassName?: string;\\n    /**\\n     * Custom className for the callout that displays in larger viewports, hosting the Dropdown options.\\n     * This is primarily provided for backwards compatibility.\\n     */\\n    calloutClassName?: string;\\n    /**\\n     * Which edge the dropdown callout was positioned on relative to the title.\\n     */\\n    calloutRenderEdge?: RectangleEdge;\\n};\\n\\n/**\\n * Represents the stylable areas of the control.\\n * {@docCategory Dropdown}\\n */\\nexport declare interface IDropdownStyles {\\n    /** Root element of the Dropdown (includes Label and the actual Dropdown). */\\n    root: IStyle;\\n    /** Refers to the label associated with the dropdown. This is enclosed by the root. */\\n    label: IStyle;\\n    /** Refers to the actual Dropdown element. */\\n    dropdown: IStyle;\\n    /** Refers to the primary title of the Dropdown (rendering the selected options/placeholder/etc.). */\\n    title: IStyle;\\n    /** Refers to the wrapping container around the downward pointing caret users click on to expand the Dropdown. */\\n    caretDownWrapper: IStyle;\\n    /** Refers to the downward pointing caret icon users click on to expand the Dropdown. */\\n    caretDown: IStyle;\\n    /** Refers to the error message being rendered under the Dropdown (if any). */\\n    errorMessage: IStyle;\\n    /** Refers to the element that wraps `dropdownItems`. */\\n    dropdownItemsWrapper: IStyle;\\n    /** Refers to the FocusZone wrapping the individual dropdown items. */\\n    dropdownItems: IStyle;\\n    /** Refers to the individual dropdown item. */\\n    dropdownItem: IStyle;\\n    /** Style for a dropdown item when it is being selected. */\\n    dropdownItemSelected: IStyle;\\n    /** Style for a dropdown item when it is disabled. */\\n    dropdownItemDisabled: IStyle;\\n    /** Style for a dropdown item when it is both selected and disabled. */\\n    dropdownItemSelectedAndDisabled: IStyle;\\n    /** Style for a dropdown item when it is hidden */\\n    dropdownItemHidden: IStyle;\\n    /**\\n     * Refers to the text element that renders the actual dropdown item/option text. This would be wrapped by the element\\n     * referred to by `dropdownItem`.\\n     */\\n    dropdownOptionText: IStyle;\\n    /** Refers to the dropdown separator. */\\n    dropdownDivider: IStyle;\\n    /** Refers to the individual dropdown items that are being rendered as a header. */\\n    dropdownItemHeader: IStyle;\\n    /**\\n     * Refers to the panel that hosts the Dropdown options in small viewports.\\n     * @deprecated Use `subComponentStyles.panel` instead.\\n     */\\n    panel: IStyle;\\n    /** Refers to the callout that hosts Dropdown options in larger viewports. */\\n    callout: IStyle;\\n    /** Subcomponent styles. */\\n    subComponentStyles: IDropdownSubComponentStyles;\\n}\\n\\n/**\\n * {@docCategory Dropdown}\\n */\\nexport declare interface IDropdownSubComponentStyles {\\n    /** Refers to the panel that hosts the Dropdown options in small viewports. */\\n    panel: IStyleFunctionOrObject<IPanelStyleProps, IPanelStyles>;\\n    /** Refers to the primary label for the Dropdown. */\\n    label: IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>;\\n    /** Refers to the individual dropdown item when the multiSelect prop is true. */\\n    multiSelectItem: IStyleFunctionOrObject<ICheckboxStyleProps, ICheckboxStyles>;\\n}\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IDropHintDetails {\\n    originX: number;\\n    startX: number;\\n    endX: number;\\n    dropHintElementRef: HTMLElement;\\n}\\n\\nexport declare interface IEditingSelectedPeopleItemProps extends ISelectedPeopleItemProps {\\n    onEditingComplete: (oldItem: any, newItem: any) => void;\\n    onRenderFloatingPicker?: React.ComponentType<IBaseFloatingPickerProps<IPersonaProps>>;\\n    floatingPickerProps?: IBaseFloatingPickerProps<IPersonaProps>;\\n    getEditingItemText?: (item: IExtendedPersonaProps) => string;\\n}\\n\\nexport declare interface IEditingSelectedPeopleItemStyles {\\n    root: IStyle;\\n    input: IStyle;\\n}\\n\\nexport declare interface IEditingSelectedPeopleItemStylesProps {\\n}\\n\\n/**\\n * Do not call methods from this directly, use either positionCallout or positionElement or make another function that\\n * utilizes them.\\n * START Private functions and interfaces\\n */\\nexport declare interface IElementPosition {\\n    elementRectangle: Rectangle;\\n    targetEdge: RectangleEdge;\\n    alignmentEdge: RectangleEdge | undefined;\\n}\\n\\nexport declare interface IElementPositionInfo extends IElementPosition {\\n    targetRectangle: Rectangle;\\n}\\n\\n/**\\n * An interface for the cached dimensions of entity inner host.\\n */\\nexport declare interface IEntityRect {\\n    width: number;\\n    height: number;\\n}\\n\\n/**\\n * {@docCategory HoverCard}\\n */\\nexport declare interface IExpandingCard {\\n}\\n\\n/**\\n * ExpandingCard component props.\\n * {@docCategory HoverCard}\\n */\\nexport declare interface IExpandingCardProps extends IBaseCardProps<IExpandingCard, IExpandingCardStyles, IExpandingCardStyleProps> {\\n    /**\\n     * Height of compact card\\n     * @defaultvalue 156\\n     */\\n    compactCardHeight?: number;\\n    /**\\n     * Height of expanded card\\n     * @defaultvalue 384\\n     */\\n    expandedCardHeight?: number;\\n    /**\\n     * Use to open the card in expanded format and not wait for the delay\\n     * @defaultvalue ExpandingCardMode.compact\\n     */\\n    mode?: ExpandingCardMode;\\n    /**\\n     *  Render function to populate compact content area\\n     */\\n    onRenderCompactCard?: IRenderFunction<any>;\\n    /**\\n     *  Render function to populate expanded content area\\n     */\\n    onRenderExpandedCard?: IRenderFunction<any>;\\n}\\n\\nexport declare interface IExpandingCardState {\\n    firstFrameRendered: boolean;\\n    needsScroll: boolean;\\n}\\n\\n/**\\n * {@docCategory HoverCard}\\n */\\nexport declare interface IExpandingCardStyleProps extends IBaseCardStyleProps {\\n    /**\\n     * Height of the compact section of the card.\\n     */\\n    compactCardHeight?: number;\\n    /**\\n     * Boolean flag that expanded card is in Expanded.mode === expanded && first frame was rendered.\\n     */\\n    expandedCardFirstFrameRendered?: boolean;\\n    /**\\n     * Height of the expanded section of the card.\\n     */\\n    expandedCardHeight?: number;\\n    /**\\n     * Whether the content of the expanded card overflows vertically.\\n     */\\n    needsScroll?: boolean;\\n}\\n\\n/**\\n * {@docCategory HoverCard}\\n */\\nexport declare interface IExpandingCardStyles extends IBaseCardStyles {\\n    /**\\n     * Style for the main card element.\\n     */\\n    compactCard?: IStyle;\\n    /**\\n     * Base Style for the expanded card content.\\n     */\\n    expandedCard?: IStyle;\\n    /**\\n     * Style for the expanded card scroll content.\\n     */\\n    expandedCardScroll?: IStyle;\\n}\\n\\n/**\\n * {@docCategory ExtendedPeoplePicker}\\n */\\nexport declare interface IExtendedPeoplePickerProps extends IBaseExtendedPickerProps<IPersonaProps> {\\n}\\n\\n/**\\n * {@docCategory SelectedPeopleList}\\n */\\nexport declare interface IExtendedPersonaProps extends IPersonaProps {\\n    key?: React.Key;\\n    isValid: boolean;\\n    blockRecipientRemoval?: boolean;\\n    shouldBlockSelection?: boolean;\\n    canExpand?: boolean;\\n    isEditing?: boolean;\\n}\\n\\nexport declare interface IFabricProps extends React.HTMLAttributes<HTMLDivElement> {\\n    componentRef?: IRefObject<{}>;\\n    /**\\n     * Overrides the root element type, defaults to `div`.\\n     */\\n    as?: React.ElementType;\\n    /**\\n     * Injected by the `styled` HOC wrapper.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Overrides the styles for the component.\\n     */\\n    styles?: IStyleFunctionOrObject<IFabricStyleProps, IFabricStyles>;\\n    /**\\n     * Applies the current body background specified in the theme to the root element.\\n     */\\n    applyTheme?: boolean;\\n    /**\\n     * Applies the current body background specified in the theme to the body element.\\n     */\\n    applyThemeToBody?: boolean;\\n    /**\\n     * Specifies the direction of the content. Will inject a `dir` attribute, and also ensure that the `rtl` flag of the\\n     * contextual theme object is set correctly so that css registered with merge-styles can be auto flipped correctly.\\n     */\\n    dir?: 'rtl' | 'ltr' | 'auto';\\n}\\n\\nexport declare interface IFabricStyleProps extends IFabricProps {\\n    theme: ITheme;\\n}\\n\\nexport declare interface IFabricStyles {\\n    root: IStyle;\\n    bodyThemed: IStyle;\\n}\\n\\n/**\\n * {@docCategory Facepile}\\n */\\nexport declare interface IFacepile {\\n}\\n\\n/**\\n * {@docCategory Facepile}\\n */\\nexport declare interface IFacepilePersona extends React.ButtonHTMLAttributes<HTMLButtonElement | HTMLDivElement> {\\n    /**\\n     * Name of the person.\\n     */\\n    personaName?: string;\\n    /**\\n     * Url to the image to use, should be a square aspect ratio and big enough to fit in the image area.\\n     */\\n    imageUrl?: string;\\n    /**\\n     * The user's initials to display in the image area when there is no image.\\n     * @defaultvalue [Derived from personaName]\\n     */\\n    imageInitials?: string;\\n    /**\\n     * Whether initials are calculated for phone numbers and number sequences.\\n     * Example: Set property to true to get initials for project names consisting of numbers only.\\n     * @defaultvalue false\\n     */\\n    allowPhoneInitials?: boolean;\\n    /**\\n     * The background color when the user's initials are displayed.\\n     * @defaultvalue [Derived from personaName]\\n     */\\n    initialsColor?: PersonaInitialsColor;\\n    /**\\n     * If provided, persona will be rendered with cursor:pointer and the handler will be\\n     * called on click.\\n     */\\n    onClick?: (ev?: React.MouseEvent<HTMLElement>, persona?: IFacepilePersona) => void;\\n    /**\\n     * If provided, the handler will be called on mouse move.\\n     */\\n    onMouseMove?: (ev?: React.MouseEvent<HTMLElement>, persona?: IFacepilePersona) => void;\\n    /**\\n     * If provided, the handler will be called when mouse moves out of the component.\\n     */\\n    onMouseOut?: (ev?: React.MouseEvent<HTMLElement>, persona?: IFacepilePersona) => void;\\n    /**\\n     * Extra data - not used directly but can be handy for passing additional data to custom event\\n     * handlers.\\n     */\\n    data?: any;\\n    /**\\n     * Optional keytip for this button that is only added when 'onClick' is defined for the persona\\n     */\\n    keytipProps?: IKeytipProps;\\n}\\n\\n/**\\n * {@docCategory Facepile}\\n */\\nexport declare interface IFacepileProps extends React.ClassAttributes<FacepileBase> {\\n    /**\\n     * Optional callback to access the IFacepile interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IFacepile>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IFacepileStyleProps, IFacepileStyles>;\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Additional css class to apply to the Facepile\\n     * @defaultvalue undefined\\n     */\\n    className?: string;\\n    /**\\n     * Array of IPersonaProps that define each Persona.\\n     */\\n    personas: IFacepilePersona[];\\n    /**\\n     * Personas to place in the overflow\\n     */\\n    overflowPersonas?: IFacepilePersona[];\\n    /** Maximum number of personas to show */\\n    maxDisplayablePersonas?: number;\\n    /** Size to display the personas */\\n    personaSize?: PersonaSize;\\n    /** ARIA label for persona list */\\n    ariaDescription?: string;\\n    /**\\n     * Defines the aria label that the screen readers use when focus goes on a list of personas.\\n     */\\n    ariaLabel?: string;\\n    /** Show add person button */\\n    showAddButton?: boolean;\\n    /** Button properties for the add face button */\\n    addButtonProps?: IButtonProps;\\n    /**\\n     * Deprecated at v0.70, use `overflowButtonProps` instead.\\n     * @deprecated Use `overflowButtonProps` instead.\\n     */\\n    chevronButtonProps?: IButtonProps;\\n    /** Properties for the overflow icon */\\n    overflowButtonProps?: IButtonProps;\\n    /** Type of overflow icon to use */\\n    overflowButtonType?: OverflowButtonType;\\n    /** Optional custom renderer for the persona, gets called when there is one persona in personas array*/\\n    onRenderPersona?: IRenderFunction<IFacepilePersona>;\\n    /** Optional custom renderer for the persona coins, gets called when there are multiple persona in personas array*/\\n    onRenderPersonaCoin?: IRenderFunction<IFacepilePersona>;\\n    /** Method to access properties on the underlying Persona control */\\n    getPersonaProps?: (persona: IFacepilePersona) => IPersonaSharedProps;\\n}\\n\\n/**\\n * {@docCategory Facepile}\\n */\\nexport declare interface IFacepileStyleProps {\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Accept custom classNames\\n     */\\n    className?: string;\\n    /**\\n     * Pixel value for spacing around button. Number value set in pixels\\n     */\\n    spacingAroundItemButton?: number;\\n}\\n\\n/**\\n * {@docCategory Facepile}\\n */\\nexport declare interface IFacepileStyles {\\n    /**\\n     * Style for the root element.\\n     */\\n    root: IStyle;\\n    addButton: IStyle;\\n    descriptiveOverflowButton: IStyle;\\n    itemContainer: IStyle;\\n    itemButton: IStyle;\\n    members: IStyle;\\n    member: IStyle;\\n    overflowButton: IStyle;\\n    overflowInitialsIcon: IStyle;\\n    screenReaderOnly: IStyle;\\n}\\n\\nexport declare interface IFocusTrapCalloutProps extends ICalloutProps {\\n    /**\\n     * Optional props to be passed on to FocusTrapZone\\n     */\\n    focusTrapProps?: IFocusTrapZoneProps;\\n}\\n\\n/**\\n * {@docCategory FocusTrapZone}\\n */\\nexport declare interface IFocusTrapZone {\\n    /**\\n     * Sets focus to a descendant in the Trap Zone.\\n     * See firstFocusableSelector and focusPreviouslyFocusedInnerElement for details.\\n     */\\n    focus: () => void;\\n}\\n\\n/**\\n * {@docCategory FocusTrapZone}\\n */\\nexport declare interface IFocusTrapZoneProps extends React.HTMLAttributes<HTMLDivElement> {\\n    /**\\n     * Optional callback to access the IFocusTrapZone interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IFocusTrapZone>;\\n    /**\\n     * Whether to disable the FocusTrapZone's focus trapping behavior.\\n     * @defaultvalue false\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Sets the element to focus on when exiting the FocusTrapZone.\\n     * @defaultvalue The `element.target` that triggered the FTZ.\\n     */\\n    elementToFocusOnDismiss?: HTMLElement;\\n    /**\\n     * Sets the aria-labelledby attribute.\\n     */\\n    ariaLabelledBy?: string;\\n    /**\\n     * Whether clicks are allowed outside this FocusTrapZone.\\n     * @defaultvalue false\\n     */\\n    isClickableOutsideFocusTrap?: boolean;\\n    /**\\n     * If false (the default), the trap zone will restore focus to the element which activated it\\n     * once the trap zone is unmounted or disabled. Set to true to disable this behavior.\\n     * @defaultvalue false\\n     */\\n    ignoreExternalFocusing?: boolean;\\n    /**\\n     * Whether the focus trap zone should force focus to stay inside of it.\\n     * @defaultvalue true\\n     */\\n    forceFocusInsideTrap?: boolean;\\n    /**\\n     * Class name (not actual selector) for first focusable item. Do not append a dot.\\n     * Only applies if `focusPreviouslyFocusedInnerElement` is false.\\n     * @deprecated Use `firstFocusableTarget`, since it is more generic. `firstFocusableTarget` takes precendence if\\n     * supplied.\\n     */\\n    firstFocusableSelector?: string | (() => string);\\n    /**\\n     * Either a full query selector for the first focusable element, or a function to select the focusable element\\n     * within the area directly.\\n     */\\n    firstFocusableTarget?: string | ((element: HTMLElement) => HTMLElement | null);\\n    /**\\n     * Do not put focus onto the first element inside the focus trap zone.\\n     * @defaultvalue false\\n     */\\n    disableFirstFocus?: boolean;\\n    /**\\n     * Specifies which descendant element to focus when `focus()` is called.\\n     * If false, use the first focusable descendant, filtered by the `firstFocusableSelector` property if present.\\n     * If true, use the element that was focused when the trap zone last had a focused descendant\\n     * (or fall back to the first focusable descendant if the trap zone has never been focused).\\n     * @defaultvalue false\\n     */\\n    focusPreviouslyFocusedInnerElement?: boolean;\\n    /**\\n     * Puts aria-hidden=true on all non-ancestors of the current element, for screen readers.\\n     * This is an experimental feature that will be graduated to default behavior after testing.\\n     * This flag will be removed with the next major release.\\n     */\\n    enableAriaHiddenSiblings?: boolean;\\n}\\n\\n/**\\n * Props for a basic icon component which only supports font glyphs and can't be targeted by customizations.\\n * {@docCategory Icon}\\n */\\nexport declare interface IFontIconProps extends React.HTMLAttributes<HTMLElement> {\\n    /**\\n     * The name of the icon to use from the icon font.\\n     * If string is empty, a placeholder icon will be rendered the same width as an icon.\\n     */\\n    iconName?: string;\\n    /**\\n     * Custom class to style the icon.\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * Gap element interface\\n * {@docCategory Shimmer}\\n */\\nexport declare interface IGap extends IShimmerElement {\\n    /**\\n     * Sets the height of the shimmer gap in pixels.\\n     * @defaultvalue 16px\\n     */\\n    height?: number;\\n    /**\\n     * Gap width value.\\n     * @defaultvalue 10px\\n     */\\n    width?: number | string;\\n}\\n\\n/**\\n * {@docCategory PeoplePicker}\\n */\\nexport declare interface IGenericItem {\\n    primaryText: string;\\n    imageInitials: string;\\n    ValidationState: ValidationState;\\n}\\n\\n/**\\n * @deprecated - use IButtonGrid instead.\\n */\\nexport declare interface IGrid extends IButtonGrid {\\n}\\n\\n/**\\n * @deprecated - use IButtonGridCellProps instead\\n */\\nexport declare interface IGridCellProps<T> extends IButtonGridCellProps<T> {\\n}\\n\\n/**\\n * @deprecated - use IButtonGridProps instead.\\n */\\nexport declare interface IGridProps extends IButtonGridProps {\\n}\\n\\n/**\\n * @deprecated - use IButtonGridStyleProps instead.\\n */\\nexport declare interface IGridStyleProps extends IButtonGridStyleProps {\\n}\\n\\n/**\\n * @deprecated - use IButtonGridStyles instead.\\n */\\nexport declare interface IGridStyles extends IButtonGridStyles {\\n}\\n\\n/**\\n * {@docCategory GroupedList}\\n */\\nexport declare interface IGroup {\\n    /**\\n     * Unique identifier for the group.\\n     */\\n    key: string;\\n    /**\\n     * Display name for the group, rendered on the header.\\n     */\\n    name: string;\\n    /**\\n     * Start index for the group within the given items.\\n     */\\n    startIndex: number;\\n    /**\\n     * How many items should be rendered within the group.\\n     */\\n    count: number;\\n    /**\\n     * Nested groups, if any.\\n     */\\n    children?: IGroup[];\\n    /**\\n     * Number indicating the level of nested groups.\\n     */\\n    level?: number;\\n    /**\\n     * Deprecated at 1.0.0, selection state will be controled by the selection store only.\\n     * @deprecated At 1.0.0, selection state wil be controlled by the selection store only.\\n     */\\n    isSelected?: boolean;\\n    /**\\n     * If all the items in the group are collapsed.\\n     */\\n    isCollapsed?: boolean;\\n    /**\\n     * If the items within the group are summarized or showing all.\\n     */\\n    isShowingAll?: boolean;\\n    /**\\n     * If drag/drop is enabled for the group header.\\n     */\\n    isDropEnabled?: boolean;\\n    /**\\n     * Arbitrary data required to be preserved by the caller.\\n     */\\n    data?: any;\\n    /**\\n     * Optional accessibility label (aria-label) attribute that will be stamped on to the element.\\n     * If none is specified, the arai-label attribute will contain the group name\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * Optional flag to indicate the group has more data to load than the current group count indicated.\\n     * This can be used to indicate that a plus should be rendered next to the group count in the header.\\n     */\\n    hasMoreData?: boolean;\\n}\\n\\n/**\\n * {@docCategory GroupedList}\\n */\\nexport declare interface IGroupDividerProps {\\n    componentRef?: IRefObject<{}>;\\n    /** Boolean value to indicate if the component should render in compact mode. Set to false by default */\\n    compact?: boolean;\\n    /** Callback to determine if a group has missing items and needs to load them from the server. */\\n    isGroupLoading?: (group: IGroup) => boolean;\\n    /** Text shown on group headers to indicate the group is being loaded. */\\n    loadingText?: string;\\n    /** The group to be rendered by the header. */\\n    group?: IGroup;\\n    /** The index of the group. */\\n    groupIndex?: number;\\n    /** The indent level of the group. */\\n    groupLevel?: number;\\n    /** Defines the number of columns a group header needs to span in the case of a grid or treegrid */\\n    ariaColSpan?: number;\\n    /** Defines the number of items in the current set of listitems or treeitems */\\n    ariaSetSize?: number;\\n    /** Defines an element's number or position in the current set of listitems or treeitems */\\n    ariaPosInSet?: number;\\n    /** Defines the number of items in the current set of grid items */\\n    ariaRowCount?: number;\\n    /** Defines an element's number or position in the current set of grid items */\\n    ariaRowIndex?: number;\\n    /**\\n     * Width corresponding to a single level.\\n     * This is multiplied by the groupLevel to get the full spacer width for the group.\\n     */\\n    indentWidth?: number;\\n    /** If all items in the group are selected. */\\n    selected?: boolean;\\n    /**\\n     * Deprecated at v.65.1 and will be removed by v 1.0. Use `selected` instead.\\n     * @deprecated Use `selected` instead.\\n     */\\n    isSelected?: boolean;\\n    /** A reference to the viewport in which the header is rendered. */\\n    viewport?: IViewport;\\n    /** The selection mode of the list the group lives within. */\\n    selectionMode?: SelectionMode;\\n    /** Text to display for the group footer. */\\n    footerText?: string;\\n    /** Text to display for the group \\\"Show All\\\" link. */\\n    showAllLinkText?: string;\\n    /** Callback for when the group \\\"Show All\\\" link is clicked */\\n    onToggleSummarize?: (group: IGroup) => void;\\n    /** Callback for when the group header is clicked. */\\n    onGroupHeaderClick?: (group: IGroup) => void;\\n    /** Callback for when the \\\"keyup\\\" event is fired on the group header . */\\n    onGroupHeaderKeyUp?: (ev: React.KeyboardEvent<HTMLElement>, group: IGroup) => void;\\n    /** Callback for when the group is expanded or collapsed. */\\n    onToggleCollapse?: (group: IGroup) => void;\\n    /** Callback for when the group is selected. */\\n    onToggleSelectGroup?: (group: IGroup) => void;\\n    /** Determines if the group selection check box is shown for collapsed groups. */\\n    isCollapsedGroupSelectVisible?: boolean;\\n    /** Override which allows the caller to provider a custom renderer for the GroupHeader title. */\\n    onRenderTitle?: IRenderFunction<IGroupHeaderProps>;\\n    /** Props for expand/collapse button\\n     * @deprecated Use {@link IGroupHeaderProps.expandButtonProps} instead.\\n     */\\n    expandButtonProps?: React.HTMLAttributes<HTMLButtonElement>;\\n    /** Stores parent group's children. */\\n    groups?: IGroup[];\\n    /** Custom className */\\n    className?: string;\\n    /** Theme provided by the Higher Order Component */\\n    theme?: ITheme;\\n}\\n\\n/**\\n * {@docCategory GroupedList}\\n */\\nexport declare interface IGroupedList extends IList {\\n    /**\\n     * Ensures that the list content is updated. Call this in cases where the list props don't change, but the list still\\n     * needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change, you can\\n     * call this to force a re-evaluation. Be aware that this can be an expensive operation and should be done sparingly.\\n     */\\n    forceUpdate: () => void;\\n    /**\\n     * Toggles the collapsed state of all the groups in the list.\\n     */\\n    toggleCollapseAll: (allCollapsed: boolean) => void;\\n}\\n\\n/**\\n * {@docCategory GroupedList}\\n */\\nexport declare interface IGroupedListProps extends React.ClassAttributes<GroupedListBase> {\\n    /**\\n     * Theme that is passed in from Higher Order Component\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Style function to be passed in to override the themed or default styles\\n     */\\n    styles?: IStyleFunctionOrObject<IGroupedListStyleProps, IGroupedListStyles>;\\n    /**\\n     * Optional callback to access the IGroupedList interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IGroupedList>;\\n    /** Optional class name to add to the root element. */\\n    className?: string;\\n    /** Boolean value to indicate if the component should render in compact mode. Set to false by default */\\n    compact?: boolean;\\n    /** Map of callback functions related to drag and drop functionality. */\\n    dragDropEvents?: IDragDropEvents;\\n    /** helper to manage drag/drop across item and groups */\\n    dragDropHelper?: IDragDropHelper;\\n    /** Event names and corresponding callbacks that will be registered to groups and rendered elements */\\n    eventsToRegister?: {\\n        eventName: string;\\n        callback: (context: IDragDropContext, event?: any) => void;\\n    }[];\\n    /** Optional override properties to render groups. */\\n    groupProps?: IGroupRenderProps;\\n    /** Optional grouping instructions. */\\n    groups?: IGroup[];\\n    /** List of items to render. */\\n    items: any[];\\n    /** Optional properties to pass through to the FocusZone. */\\n    focusZoneProps?: IFocusZoneProps;\\n    /** Optional properties to pass through to the list components being rendered. */\\n    listProps?: IListProps;\\n    /** Optional properties to pass through to the root list component being rendered. */\\n    rootListProps?: IListProps;\\n    /** Rendering callback to render the group items. */\\n    onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\\n    /** Override the default role for GroupedList.  */\\n    role?: string;\\n    /** Optional selection model to track selection state.  */\\n    selection?: ISelection;\\n    /** Controls how/if the list manages selection. */\\n    selectionMode?: SelectionMode;\\n    /** Optional Viewport, provided by the parent component. */\\n    viewport?: IViewport;\\n    /** Optional callback when the group expand state changes between all collapsed and at least one group is expanded. */\\n    onGroupExpandStateChanged?: (isSomeGroupExpanded: boolean) => void;\\n    /**\\n     * boolean to control if pages containing unchanged items should be cached, this is a perf optimization\\n     * The same property in List.Props\\n     */\\n    usePageCache?: boolean;\\n    /**\\n     * Optional callback to determine whether the list should be rendered in full, or virtualized.\\n     * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\\n     * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\\n     * smaller lists.\\n     * The default implementation will virtualize when this callback is not provided.\\n     */\\n    onShouldVirtualize?: (props: IListProps) => boolean;\\n    /**\\n     * Optional function to override default group height calculation used by list virtualization.\\n     */\\n    getGroupHeight?: (group: IGroup, groupIndex: number) => number;\\n}\\n\\nexport declare interface IGroupedListSectionProps extends React.ClassAttributes<GroupedListSection> {\\n    /** GroupedList resolved class names */\\n    groupedListClassNames?: IProcessedStyleSet<IGroupedListStyles>;\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: () => void;\\n    /** Whether to render in compact mode */\\n    compact?: boolean;\\n    /** Map of callback functions related to drag and drop functionality. */\\n    dragDropEvents?: IDragDropEvents;\\n    /** helper to manage drag/drop across item rows and groups */\\n    dragDropHelper?: IDragDropHelper;\\n    /** Event names and corresponding callbacks that will be registered to the group and the rendered elements */\\n    eventsToRegister?: {\\n        eventName: string;\\n        callback: (context: IDragDropContext, event?: any) => void;\\n    }[];\\n    /** Information to pass in to the group footer. */\\n    footerProps?: IGroupFooterProps;\\n    /** Grouping item limit. */\\n    getGroupItemLimit?: (group: IGroup) => number;\\n    /** Optional grouping instructions. */\\n    groupIndex?: number;\\n    /** Optional group nesting level. */\\n    groupNestingDepth?: number;\\n    /** Optional grouping instructions. */\\n    group?: IGroup;\\n    /** Optional override properties to render groups. */\\n    groupProps?: IGroupRenderProps;\\n    /** Information to pass in to the group header. */\\n    headerProps?: IGroupHeaderProps;\\n    /** List of items to render. */\\n    items: any[];\\n    /** Optional list props to pass to list renderer.  */\\n    listProps?: IListProps;\\n    /** Rendering callback to render the group items. */\\n    onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\\n    /** Optional selection model to track selection state.  */\\n    selection?: ISelection;\\n    /** Controls how/if the details list manages selection. */\\n    selectionMode?: SelectionMode;\\n    /** Information to pass in to the group Show All footer. */\\n    showAllProps?: IGroupShowAllProps;\\n    /** Optional Viewport, provided by the parent component. */\\n    viewport?: IViewport;\\n    /** Override for rendering the group header. */\\n    onRenderGroupHeader?: IRenderFunction<IGroupHeaderProps>;\\n    /** Override for rendering the group Show All link. */\\n    onRenderGroupShowAll?: IRenderFunction<IGroupShowAllProps>;\\n    /** Override for rendering the group footer. */\\n    onRenderGroupFooter?: IRenderFunction<IGroupFooterProps>;\\n    /**\\n     * Optional callback to determine whether the list should be rendered in full, or virtualized.\\n     * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\\n     * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\\n     * smaller lists.\\n     * The default implementation will virtualize when this callback is not provided.\\n     */\\n    onShouldVirtualize?: (props: IListProps) => boolean;\\n    /** Stores parent group's children. */\\n    groups?: IGroup[];\\n}\\n\\nexport declare interface IGroupedListSectionState {\\n    isDropping?: boolean;\\n    isSelected?: boolean;\\n}\\n\\nexport declare interface IGroupedListState {\\n    selectionMode?: IGroupedListProps['selectionMode'];\\n    compact?: IGroupedListProps['compact'];\\n    groups?: IGroup[];\\n    items?: IGroupedListProps['items'];\\n    listProps?: IGroupedListProps['listProps'];\\n    version: {};\\n}\\n\\n/**\\n * {@docCategory GroupedList}\\n */\\nexport declare type IGroupedListStyleProps = Required<Pick<IGroupedListProps, 'theme'>> & Pick<IGroupedListProps, 'className'> & {\\n    /** whether or not the group is collapsed */\\n    isCollapsed?: boolean;\\n    /** Whether the group is in compact mode or not */\\n    compact?: boolean;\\n};\\n\\n/**\\n * {@docCategory GroupedList}\\n */\\nexport declare interface IGroupedListStyles {\\n    root: IStyle;\\n    group: IStyle;\\n    groupIsDropping: IStyle;\\n}\\n\\n/**\\n * {@docCategory GroupedList}\\n */\\nexport declare interface IGroupFooterProps extends IGroupDividerProps {\\n    /**\\n     * Style function to be passed in to override the themed or default styles\\n     */\\n    styles?: IStyleFunctionOrObject<IGroupFooterStyleProps, IGroupFooterStyles>;\\n}\\n\\n/**\\n * {@docCategory GroupedList}\\n */\\nexport declare type IGroupFooterStyleProps = Required<Pick<IGroupFooterProps, 'theme'>> & Pick<IGroupFooterProps, 'selected' | 'className'> & {\\n    /** Whether the footer is collapsed */\\n    isCollapsed?: boolean;\\n};\\n\\n/**\\n * {@docCategory GroupedList}\\n */\\nexport declare interface IGroupFooterStyles {\\n    root: IStyle;\\n}\\n\\n/**\\n * {@docCategory GroupedList}\\n */\\nexport declare interface IGroupHeaderCheckboxProps {\\n    checked: boolean;\\n    theme?: ITheme;\\n}\\n\\n/**\\n * {@docCategory GroupedList}\\n */\\nexport declare interface IGroupHeaderProps extends IGroupDividerProps {\\n    /** Style function to be passed in to override the themed or default styles */\\n    styles?: IStyleFunctionOrObject<IGroupHeaderStyleProps, IGroupHeaderStyles>;\\n    /** GroupedList id for aria-controls */\\n    groupedListId?: string;\\n    /** Native props for the GroupHeader expand and collapse button */\\n    expandButtonProps?: React.HTMLAttributes<HTMLButtonElement>;\\n    /** Defines the name of a custom icon to be used for group headers. If not set, the default icon will be used */\\n    expandButtonIcon?: string;\\n    /** Native props for the GroupHeader select all button */\\n    selectAllButtonProps?: React.HTMLAttributes<HTMLButtonElement>;\\n    /**\\n     * If provided, can be used to render a custom checkbox\\n     */\\n    onRenderGroupHeaderCheckbox?: IRenderFunction<IGroupHeaderCheckboxProps>;\\n    /**\\n     * Whether to use fast icon and check components. The icons can't be targeted by customization\\n     * but are still customizable via class names.\\n     * @defaultvalue true\\n     */\\n    useFastIcons?: boolean;\\n}\\n\\n/**\\n * {@docCategory GroupedList}\\n */\\nexport declare type IGroupHeaderStyleProps = Required<Pick<IGroupHeaderProps, 'theme'>> & Pick<IGroupHeaderProps, 'selected' | 'className'> & {\\n    /** Is Header collapsed */\\n    isCollapsed?: boolean;\\n    /** Whether the group header is in compact mode or not */\\n    compact?: boolean;\\n};\\n\\n/**\\n * {@docCategory GroupedList}\\n */\\nexport declare interface IGroupHeaderStyles {\\n    root: IStyle;\\n    groupHeaderContainer: IStyle;\\n    headerCount: IStyle;\\n    check: IStyle;\\n    dropIcon: IStyle;\\n    expand: IStyle;\\n    expandIsCollapsed: IStyle;\\n    title: IStyle;\\n}\\n\\n/**\\n * {@docCategory GroupedList}\\n */\\nexport declare interface IGroupRenderProps {\\n    /** Boolean indicating if all groups are in collapsed state. */\\n    isAllGroupsCollapsed?: boolean;\\n    /** Grouping item limit. */\\n    getGroupItemLimit?: (group: IGroup) => number;\\n    /** Callback for when all groups are expanded or collapsed. */\\n    onToggleCollapseAll?: (isAllCollapsed: boolean) => void;\\n    /** Information to pass in to the group header. */\\n    headerProps?: IGroupHeaderProps;\\n    /** Information to pass in to the group Show all footer. */\\n    showAllProps?: IGroupShowAllProps;\\n    /** Information to pass in to the group footer. */\\n    footerProps?: IGroupFooterProps;\\n    /**\\n     * Override which allows the caller to provide a custom header.\\n     */\\n    onRenderHeader?: IRenderFunction<IGroupHeaderProps>;\\n    /**\\n     * Override which allows the caller to provide a custom Show All link.\\n     */\\n    onRenderShowAll?: IRenderFunction<IGroupShowAllProps>;\\n    /**\\n     * Override which allows the caller to provide a custom footer.\\n     */\\n    onRenderFooter?: IRenderFunction<IGroupFooterProps>;\\n    /**\\n     * Flag to indicate whether to ignore the collapsing icon on header.\\n     * @defaultvalue CollapseAllVisibility.visible\\n     */\\n    collapseAllVisibility?: CollapseAllVisibility;\\n    /**\\n     * Boolean indicating if empty groups are shown\\n     * @defaultvalue false\\n     */\\n    showEmptyGroups?: boolean;\\n    /**\\n     * Override which allows the caller to provide a custom aria role\\n     */\\n    role?: string;\\n}\\n\\n/**\\n * {@docCategory GroupedList}\\n */\\nexport declare interface IGroupShowAllProps extends IGroupDividerProps {\\n    /**\\n     * Style function to be passed in to override the themed or default styles\\n     */\\n    styles?: IStyleFunctionOrObject<IGroupShowAllStyleProps, IGroupShowAllStyles>;\\n    /**\\n     * The Show All link text.\\n     * @defaultvalue 'Show All'\\n     */\\n    showAllLinkText?: string;\\n}\\n\\n/**\\n * {@docCategory GroupedList}\\n */\\nexport declare type IGroupShowAllStyleProps = Required<Pick<IGroupShowAllProps, 'theme'>>;\\n\\n/**\\n * {@docCategory GroupedList}\\n */\\nexport declare interface IGroupShowAllStyles {\\n    root: IStyle;\\n}\\n\\n/**\\n * {@docCategory GroupedList}\\n */\\nexport declare interface IGroupSpacerProps {\\n    /**\\n     * Theme from Higher Order Component\\n     *\\n     * @deprecated unused, to be removed in 7.0\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Style function to be passed in to override the themed or default styles\\n     *\\n     * @deprecated unused, to be removed in 7.0\\n     */\\n    styles?: IStyleFunctionOrObject<IGroupSpacerStyleProps, IGroupSpacerStyles>;\\n    /** Count of spacer(s) */\\n    count: number;\\n    /** How much to indent */\\n    indentWidth?: number;\\n    /** Override the default role (presentation) */\\n    role?: string;\\n}\\n\\n/**\\n * {@docCategory GroupedList}\\n * @deprecated unused, to be removed in 7.0. Use {@link IGroupSpacerProps.indentWidth}\\n */\\nexport declare type IGroupSpacerStyleProps = Required<Pick<IGroupSpacerProps, 'theme'>> & {\\n    width?: number;\\n};\\n\\n/**\\n * {@docCategory GroupedList}\\n * @deprecated unused, to be removed in 7.0.\\n */\\nexport declare interface IGroupSpacerStyles {\\n    root: IStyle;\\n}\\n\\n/**\\n * {@docCategory HoverCard}\\n */\\nexport declare interface IHoverCard {\\n    /**\\n     * Public `dismiss` method to be used through `componentRef` of the HoverCard.\\n     * Boolean argument controls if the dismiss happens with a timeout delay.\\n     */\\n    dismiss: (withTimeOut?: boolean) => void;\\n}\\n\\n/**\\n * HoverCard component props.\\n * {@docCategory HoverCard}\\n */\\nexport declare interface IHoverCardProps extends React.HTMLAttributes<HTMLDivElement> {\\n    /**\\n     * Optional callback to access the IHoverCardHost interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IHoverCard>;\\n    /**\\n     * Additional CSS class(es) to apply to the HoverCard root element.\\n     */\\n    className?: string;\\n    /**\\n     * Length of card dismiss delay. A min number is necessary for pointer to hop between target and card\\n     * @defaultvalue 100\\n     */\\n    cardDismissDelay?: number;\\n    /**\\n     * Length of compact card delay\\n     * @defaultvalue 500\\n     */\\n    cardOpenDelay?: number;\\n    /**\\n     * Time in ms when expanded card should open after compact card\\n     * @defaultvalue 1500\\n     */\\n    expandedCardOpenDelay?: number;\\n    /**\\n     * Additional ExpandingCard props to pass through HoverCard like renderers, target. gapSpace etc.\\n     * Used along with 'type' prop set to HoverCardType.expanding.\\n     * Reference detail properties in ICardProps and IExpandingCardProps.\\n     */\\n    expandingCardProps?: IExpandingCardProps;\\n    /**\\n     * Enables instant open of the full card upon click\\n     * @defaultvalue false\\n     */\\n    instantOpenOnClick?: boolean;\\n    /**\\n     * Callback when card becomes visible\\n     */\\n    onCardVisible?: () => void;\\n    /**\\n     * Callback when card hides\\n     */\\n    onCardHide?: () => void;\\n    /**\\n     * HotKey used for opening the HoverCard when tabbed to target.\\n     * @defaultvalue 'KeyCodes.c'\\n     */\\n    openHotKey?: KeyCodes;\\n    /**\\n     * Additional PlainCard props to pass through HoverCard like renderers, target, gapSpace etc.\\n     * Used along with 'type' prop set to HoverCardType.plain.\\n     * See for more details ICardProps and IPlainCardProps interfaces.\\n     */\\n    plainCardProps?: IPlainCardProps;\\n    /**\\n     * Whether or not to mark the container as described by the hover card.\\n     * If not specified, the caller should mark as element as described by the hover card id.\\n     */\\n    setAriaDescribedBy?: boolean;\\n    /**\\n     * Callback when visible card is expanded.\\n     */\\n    onCardExpand?: () => void;\\n    /**\\n     * Set to true to set focus on the first focusable element in the card. Works in pair with the 'trapFocus' prop.\\n     * @defaultvalue false\\n     */\\n    setInitialFocus?: boolean;\\n    /**\\n     * Should block hover card or not\\n     */\\n    shouldBlockHoverCard?: () => void;\\n    /**\\n     * If true disables Card dismiss upon mouse leave, so that card sticks around.\\n     * @defaultvalue false\\n     */\\n    sticky?: boolean;\\n    /**\\n     * Custom styles for this component\\n     */\\n    styles?: IStyleFunctionOrObject<IHoverCardStyleProps, IHoverCardStyles>;\\n    /**\\n     * Optional target element to tag hover card on. If not provided and using HoverCard as a wrapper, don't set the\\n     * 'data-is-focusable=true' attribute to the root of the wrapped child.\\n     * If no target is given, HoverCard will use its root as a target and become the focusable element with a\\n     * focus listener attached to it.\\n     */\\n    target?: HTMLElement | string | null;\\n    /**\\n     * This prop is to separate the target to anchor hover card from the target to attach event listener.\\n     * If set, this prop separates the target to anchor the hover card from the target to attach the event listener.\\n     * When no `eventListenerTarget` given, HoverCard will use `target` prop or its root to set event listener.\\n     */\\n    eventListenerTarget?: HTMLElement | string | null;\\n    /**\\n     * Theme provided by higher order component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Set to true if you want to render the content of the HoverCard in a FocusTrapZone for accessibility reasons.\\n     * Optionally 'setInitialFocus' prop can be set to true to move focus inside the FocusTrapZone.\\n     */\\n    trapFocus?: boolean;\\n    /**\\n     * Type of the hover card to render.\\n     * @defaultvalue HoverCardType.expanding\\n     */\\n    type?: HoverCardType;\\n}\\n\\nexport declare interface IHoverCardState {\\n    isHoverCardVisible?: boolean;\\n    mode?: ExpandingCardMode;\\n    openMode?: OpenCardMode;\\n}\\n\\n/**\\n * {@docCategory HoverCard}\\n */\\nexport declare interface IHoverCardStyleProps {\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Optional className(s) for the host div of HoverCard.\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory HoverCard}\\n */\\nexport declare interface IHoverCardStyles {\\n    /**\\n     * Style for the host element in the default enabled, non-toggled state.\\n     */\\n    host?: IStyle;\\n}\\n\\nexport declare interface IHSL {\\n    /** Hue, range 0-359. */\\n    h: number;\\n    /** Saturation, range 0-100. */\\n    s: number;\\n    /** Lightness, range 0-100. */\\n    l: number;\\n}\\n\\nexport declare interface IHSV {\\n    /** Hue, range 0-359. */\\n    h: number;\\n    /** Saturation, range 0-100. */\\n    s: number;\\n    /** Value, range 0-100. */\\n    v: number;\\n}\\n\\nexport declare interface IIconContent {\\n    children?: string;\\n    iconClassName?: string;\\n    fontFamily?: string;\\n}\\n\\n/**\\n * {@docCategory Icon}\\n */\\nexport declare interface IIconProps extends IBaseProps, React.HTMLAttributes<HTMLElement> {\\n    /**\\n     * The name of the icon to use from the icon font.\\n     * If string is empty, a placeholder icon will be rendered the same width as an icon.\\n     */\\n    iconName?: string;\\n    /**\\n     * The aria label of the icon for the benefit of screen readers.\\n     * @deprecated Use the native prop `aria-label`\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * The type of icon to render (image or icon font).\\n     * @deprecated Inferred based on the presence of `imageProps`\\n     */\\n    iconType?: IconType;\\n    /**\\n     * If rendering an image icon, these props will be passed to the Image component.\\n     */\\n    imageProps?: IImageProps;\\n    /**\\n     * If rendering an image icon, this component will be rendered in the event that loading the image fails.\\n     */\\n    imageErrorAs?: React.ComponentType<IImageProps>;\\n    /**\\n     * Gets the styles for an Icon.\\n     */\\n    styles?: IStyleFunctionOrObject<IIconStyleProps, IIconStyles>;\\n    theme?: ITheme;\\n}\\n\\nexport declare interface IIconState {\\n    imageLoadError: boolean;\\n}\\n\\n/**\\n * {@docCategory Icon}\\n */\\nexport declare interface IIconStyleProps {\\n    className?: string;\\n    iconClassName?: string;\\n    isPlaceholder: boolean;\\n    isImage: boolean;\\n    styles?: Partial<IIconStyles>;\\n    theme?: ITheme;\\n}\\n\\n/**\\n * {@docCategory Icon}\\n */\\nexport declare interface IIconStyles {\\n    root?: IStyle;\\n    /**\\n     * Deprecated. Use `root`.\\n     * @deprecated Use `root`.\\n     */\\n    imageContainer?: IStyle;\\n}\\n\\n/**\\n * {@docCategory Image}\\n */\\nexport declare interface IImage {\\n}\\n\\n/**\\n * Props for a basic image icon component which doesn't directly provide image load error handling\\n * and can't be targeted by customizations.\\n * {@docCategory Icon}\\n */\\nexport declare interface IImageIconProps extends React.HTMLAttributes<HTMLElement> {\\n    /**\\n     * Props passed to the Image component.\\n     */\\n    imageProps: IImageProps;\\n    /**\\n     * Custom class to style the icon.\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory Image}\\n */\\nexport declare interface IImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<IImageStyleProps, IImageStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Additional css class to apply to the Component\\n     * @defaultvalue undefined\\n     */\\n    className?: string;\\n    /**\\n     * If true, fades the image in when loaded.\\n     * @defaultvalue true\\n     */\\n    shouldFadeIn?: boolean;\\n    /**\\n     * If true, the image starts as visible and is hidden on error. Otherwise, the image is hidden until\\n     * it is successfully loaded. This disables shouldFadeIn.\\n     * @defaultvalue false;\\n     */\\n    shouldStartVisible?: boolean;\\n    /**\\n     * Used to determine how the image is scaled and cropped to fit the frame.\\n     *\\n     * @defaultvalue If both dimensions are provided, then the image is fit using ImageFit.scale.\\n     * Otherwise, the image won't be scaled or cropped.\\n     */\\n    imageFit?: ImageFit;\\n    /**\\n     * Deprecated at v1.3.6, to replace the src in case of errors, use `onLoadingStateChange` instead and\\n     * rerender the Image with a difference src.\\n     * @deprecated Use `onLoadingStateChange` instead and\\n     * rerender the Image with a difference src.\\n     */\\n    errorSrc?: string;\\n    /**\\n     * If true, the image frame will expand to fill its parent container.\\n     */\\n    maximizeFrame?: boolean;\\n    /**\\n     * Optional callback method for when the image load state has changed.\\n     * The 'loadState' parameter indicates the current state of the Image.\\n     */\\n    onLoadingStateChange?: (loadState: ImageLoadState) => void;\\n    /**\\n     * Specifies the cover style to be used for this image. If not\\n     * specified, this will be dynamically calculated based on the\\n     * aspect ratio for the image.\\n     */\\n    coverStyle?: ImageCoverStyle;\\n}\\n\\nexport declare interface IImageState {\\n    loadState?: ImageLoadState;\\n}\\n\\n/**\\n * {@docCategory Image}\\n */\\nexport declare interface IImageStyleProps {\\n    /**\\n     * Accept theme prop.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Accept custom classNames\\n     */\\n    className?: string;\\n    /**\\n     * If true, the image frame will expand to fill its parent container.\\n     */\\n    maximizeFrame?: boolean;\\n    /**\\n     * If true, the image is loaded\\n     */\\n    isLoaded?: boolean;\\n    /**\\n     * If true, fades the image in when loaded.\\n     * @defaultvalue true\\n     */\\n    shouldFadeIn?: boolean;\\n    /**\\n     * If true, the image starts as visible and is hidden on error. Otherwise, the image is hidden until\\n     * it is successfully loaded. This disables shouldFadeIn.\\n     * @defaultvalue false;\\n     */\\n    shouldStartVisible?: boolean;\\n    /**\\n     * If true the image is coverStyle landscape instead of portrait\\n     */\\n    isLandscape?: boolean;\\n    /**\\n     * ImageFit booleans for center, cover, contain, centerContain, centerCover, none\\n     */\\n    isCenter?: boolean;\\n    isContain?: boolean;\\n    isCover?: boolean;\\n    isCenterContain?: boolean;\\n    isCenterCover?: boolean;\\n    isNone?: boolean;\\n    /**\\n     * if true image load is in error\\n     */\\n    isError?: boolean;\\n    /**\\n     * if true, imageFit is undefined\\n     */\\n    isNotImageFit?: boolean;\\n    /**\\n     * Image width value\\n     */\\n    width?: number | string;\\n    /**\\n     * Image height value\\n     */\\n    height?: number | string;\\n}\\n\\n/**\\n * {@docCategory Image}\\n */\\nexport declare interface IImageStyles {\\n    /**\\n     * Style set for the root div element.\\n     */\\n    root: IStyle;\\n    /**\\n     * Style set for the img element.\\n     */\\n    image: IStyle;\\n}\\n\\n/**\\n * Pickers' input props interface\\n * {@docCategory Pickers}\\n */\\nexport declare interface IInputProps extends React.InputHTMLAttributes<HTMLInputElement> {\\n    /**\\n     * Screen reader label to apply to an input element.\\n     */\\n    'aria-label'?: string;\\n    /**\\n     * The default value to be visible when the autofill first created.\\n     * This is different than placeholder text because the placeholder text will disappear and re-appear. This\\n     * text persists until deleted or changed.\\n     */\\n    defaultVisibleValue?: string;\\n}\\n\\nexport declare interface IKeytipConfig {\\n    keytips: IKeytipConfigItem[];\\n}\\n\\nexport declare interface IKeytipConfigItem {\\n    /**\\n     * Key Sequence for this keytip only\\n     * If sequence is not defined it will be derived from the content string\\n     */\\n    sequence?: string;\\n    /**\\n     * Content for the keytip\\n     */\\n    content: string;\\n    /**\\n     * Identifier for the keytip, to be used to access in the configMap\\n     */\\n    id: string;\\n    /**\\n     * Optional props in IKeytipProps\\n     */\\n    optionalProps?: Partial<IKeytipProps>;\\n    /**\\n     * Children keytips of this keytip\\n     */\\n    children?: IKeytipConfigItem[];\\n}\\n\\nexport declare interface IKeytipConfigMap {\\n    [id: string]: IKeytipProps;\\n}\\n\\ndeclare interface IKeytipDataProps {\\n    /**\\n     * IKeytipProps to create from this KeytipData\\n     * If no keytipProps are defined, a keytip won't be registered\\n     */\\n    keytipProps?: IKeytipProps;\\n    /**\\n     * String to add to the aria-describedby generated by this KeytipData\\n     * It will prepend this string to the generated aria-describedby property\\n     */\\n    ariaDescribedBy?: string;\\n    /**\\n     * T/F if this keytip should be disabled upon creation\\n     */\\n    disabled?: boolean;\\n}\\n\\n/**\\n * {@docCategory Keytips}\\n */\\nexport declare interface IKeytipLayer {\\n}\\n\\n/**\\n * {@docCategory Keytips}\\n */\\nexport declare interface IKeytipLayerProps extends React.ClassAttributes<IKeytipLayer> {\\n    /**\\n     * Optional callback to access the KeytipLayer component. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IKeytipLayer>;\\n    /**\\n     * String to put inside the layer to be used for the aria-describedby for the component with the keytip\\n     * Should be one of the starting sequences\\n     */\\n    content: string;\\n    /**\\n     * List of key sequences that will start keytips mode\\n     */\\n    keytipStartSequences?: IKeytipTransitionKey[];\\n    /**\\n     * List of key sequences that execute the return functionality in keytips\\n     * (going back to the previous level of keytips)\\n     */\\n    keytipReturnSequences?: IKeytipTransitionKey[];\\n    /**\\n     * List of key sequences that will exit keytips mode\\n     */\\n    keytipExitSequences?: IKeytipTransitionKey[];\\n    /**\\n     * Callback function triggered when keytip mode is exited.\\n     * ev is the Mouse or Keyboard Event that triggered the exit, if any.\\n     */\\n    onExitKeytipMode?: (ev?: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>) => void;\\n    /**\\n     * Callback function triggered when keytip mode is entered\\n     */\\n    onEnterKeytipMode?: () => void;\\n    /**\\n     * (Optional) Call to provide customized styling.\\n     */\\n    styles?: IStyleFunctionOrObject<IKeytipLayerStyleProps, IKeytipLayerStyles>;\\n}\\n\\nexport declare interface IKeytipLayerState {\\n    inKeytipMode: boolean;\\n    keytips: IKeytipProps[];\\n    visibleKeytips: IKeytipProps[];\\n}\\n\\n/**\\n * {@docCategory Keytips}\\n */\\nexport declare interface IKeytipLayerStyleProps {\\n}\\n\\n/**\\n * {@docCategory Keytips}\\n */\\nexport declare interface IKeytipLayerStyles {\\n    innerContent: IStyle;\\n}\\n\\n/**\\n * {@docCategory Keytips}\\n */\\nexport declare interface IKeytipProps {\\n    /**\\n     * Content to put inside the keytip\\n     */\\n    content: string;\\n    /**\\n     * Theme for the component\\n     */\\n    theme?: ITheme;\\n    /**\\n     * T/F if the corresponding control for this keytip is disabled\\n     */\\n    disabled?: boolean;\\n    /**\\n     * T/F if the keytip is visible\\n     */\\n    visible?: boolean;\\n    /**\\n     * Function to call when this keytip is activated.\\n     * 'executeTarget' is the DOM element marked with 'data-ktp-execute-target'.\\n     * 'target' is the DOM element marked with 'data-ktp-target'.\\n     */\\n    onExecute?: (executeTarget: HTMLElement | null, target: HTMLElement | null) => void;\\n    /**\\n     * Function to call when the keytip is the currentKeytip and a return sequence is pressed.\\n     * 'executeTarget' is the DOM element marked with 'data-ktp-execute-target'.\\n     * 'target' is the DOM element marked with 'data-ktp-target'.\\n     */\\n    onReturn?: (executeTarget: HTMLElement | null, target: HTMLElement | null) => void;\\n    /**\\n     * Array of KeySequences which is the full key sequence to trigger this keytip\\n     * Should not include initial 'start' key sequence\\n     */\\n    keySequences: string[];\\n    /**\\n     * Full KeySequence of the overflow set button, will be set automatically if this keytip is inside an overflow\\n     */\\n    overflowSetSequence?: string[];\\n    /**\\n     * ICalloutProps to pass to the callout element\\n     */\\n    calloutProps?: ICalloutProps;\\n    /**\\n     * Optional styles for the component.\\n     */\\n    styles?: IStyleFunctionOrObject<IKeytipStyleProps, IKeytipStyles>;\\n    /**\\n     * Offset x and y for the keytip, added from the top-left corner\\n     * By default the keytip will be anchored to the bottom-center of the element\\n     */\\n    offset?: Point;\\n    /**\\n     * Whether or not this keytip will have children keytips that are dynamically created (DOM is generated on\\n     * keytip activation). Common cases are a Pivot or Modal.\\n     */\\n    hasDynamicChildren?: boolean;\\n    /**\\n     * Whether or not this keytip belongs to a component that has a menu\\n     * Keytip mode will stay on when a menu is opened, even if the items in that menu have no keytips\\n     */\\n    hasMenu?: boolean;\\n}\\n\\n/**\\n * Props to style Keytip component\\n * {@docCategory Keytips}\\n */\\nexport declare interface IKeytipStyleProps {\\n    /**\\n     * The theme for the keytip.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Whether the keytip is disabled or not.\\n     */\\n    disabled?: boolean;\\n    /**\\n     * T/F if the keytip is visible\\n     */\\n    visible?: boolean;\\n}\\n\\n/**\\n * {@docCategory Keytips}\\n */\\nexport declare interface IKeytipStyles {\\n    /**\\n     * Style for the div container surrounding the keytip content.\\n     */\\n    container: IStyle;\\n    /**\\n     * Style for the keytip content element.\\n     */\\n    root: IStyle;\\n}\\n\\nexport declare interface IKeytipTransitionKey {\\n    key: string;\\n    modifierKeys?: KeytipTransitionModifier[];\\n}\\n\\ndeclare interface IKeytipTreeNode {\\n    /**\\n     * ID of the <Keytip> DOM element. Needed to locate the correct keytip in the KeytipLayer's 'keytip' state array\\n     */\\n    id: string;\\n    /**\\n     * KeySequence that invokes this KeytipTreeNode's onExecute function\\n     */\\n    keySequences: string[];\\n    /**\\n     * Overflow set sequence for this keytip\\n     */\\n    overflowSetSequence?: string[];\\n    /**\\n     * Control's execute function for when keytip is invoked, passed from the component to the Manager in the IKeytipProps\\n     */\\n    onExecute?: (executeTarget: HTMLElement | null, target: HTMLElement | null) => void;\\n    /**\\n     * Function to execute when we return to this keytip\\n     */\\n    onReturn?: (executeTarget: HTMLElement | null, target: HTMLElement | null) => void;\\n    /**\\n     * List of keytip IDs that should become visible when this keytip is pressed, can be empty\\n     */\\n    children: string[];\\n    /**\\n     * Parent keytip ID\\n     */\\n    parent: string;\\n    /**\\n     * Whether or not this keytip will have children keytips that are dynamically created (DOM is generated on\\n     * keytip activation). Common cases are keytips in a menu or modal.\\n     */\\n    hasDynamicChildren?: boolean;\\n    /**\\n     * Whether or not this keytip belongs to a component that has a menu\\n     * Keytip mode will stay on when a menu is opened, even if the items in that menu have no keytips\\n     */\\n    hasMenu?: boolean;\\n    /**\\n     * T/F if this keytip's component is currently disabled\\n     */\\n    disabled?: boolean;\\n    /**\\n     * T/F if this keytip is a persisted keytip\\n     */\\n    persisted?: boolean;\\n}\\n\\n/**\\n * {@docCategory Label}\\n */\\nexport declare interface ILabel {\\n}\\n\\n/**\\n * {@docCategory Label}\\n */\\nexport declare interface ILabelProps extends React.LabelHTMLAttributes<HTMLLabelElement> {\\n    /**\\n     * Render the root element as another type.\\n     */\\n    as?: IComponentAs<React.AllHTMLAttributes<HTMLElement>>;\\n    /**\\n     * Optional callback to access the ILabel interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<ILabel>;\\n    /**\\n     * Whether the associated form field is required or not\\n     * @defaultvalue false\\n     */\\n    required?: boolean;\\n    /**\\n     * Renders the label as disabled.\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Styles for the label.\\n     */\\n    styles?: IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>;\\n}\\n\\n/**\\n * {@docCategory Label}\\n */\\nexport declare interface ILabelStyleProps {\\n    /**\\n     *\\n     */\\n    theme: ITheme;\\n    className?: string;\\n    disabled?: boolean;\\n    required?: boolean;\\n}\\n\\n/**\\n * {@docCategory Label}\\n */\\nexport declare interface ILabelStyles {\\n    /**\\n     * Styles for the root element.\\n     */\\n    root: IStyle;\\n}\\n\\n/**\\n * {@docCategory Layer}\\n */\\nexport declare interface ILayer {\\n}\\n\\nexport declare type ILayerBaseState = {\\n    hostId?: string;\\n    layerElement?: HTMLElement;\\n};\\n\\ndeclare interface ILayerHost {\\n}\\n\\ndeclare interface ILayerHostProps extends React.HTMLAttributes<HTMLElement> {\\n    /**\\n     * Optional callback to access the ILayerHost interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<ILayerHost>;\\n    /**\\n     * Defines the id for the layer host that Layers can target (using the hostId property.)\\n     */\\n    id?: string;\\n}\\n\\n/**\\n * {@docCategory Layer}\\n */\\nexport declare interface ILayerProps extends React.HTMLAttributes<HTMLDivElement | LayerBase> {\\n    /**\\n     * Optional callback to access the ILayer interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<ILayer>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<ILayerStyleProps, ILayerStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Additional css class to apply to the Layer\\n     * @defaultvalue undefined\\n     */\\n    className?: string;\\n    /**\\n     * Callback for when the layer is mounted.\\n     * @deprecated Use onLayerDidMount.\\n     */\\n    onLayerMounted?: () => void;\\n    /**\\n     * Callback for when the layer is mounted.\\n     */\\n    onLayerDidMount?: () => void;\\n    /**\\n     * Callback for when the layer is unmounted.\\n     */\\n    onLayerWillUnmount?: () => void;\\n    /**\\n     * The optional id property provided on a LayerHost that this Layer should render within. The LayerHost does\\n     * not need to be immediately available but once has been rendered, and if missing, we'll avoid trying\\n     * to render the Layer content until the host is available. If an id is not provided, we will render the Layer\\n     * content in a fixed position element rendered at the end of the document.\\n     */\\n    hostId?: string;\\n    /**\\n     * When enabled, Layer allows events to bubble up from Layer content.\\n     * Traditionally Layer has not had this behavior. This prop preserves backwards compatibility by\\n     * default while allowing users to opt in to the new event bubbling functionality.\\n     */\\n    eventBubblingEnabled?: boolean;\\n    /**\\n     * Whether the layer should be added as the first child of the host.\\n     * If true, the layer will be inserted as the first child of the host\\n     * By default, the layer will be appended at the end to the host\\n     */\\n    insertFirst?: boolean;\\n}\\n\\n/**\\n * {@docCategory Layer}\\n */\\nexport declare interface ILayerStyleProps {\\n    /**\\n     * Accept theme prop.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Accept custom classNames\\n     */\\n    className?: string;\\n    /**\\n     * Check if Host\\n     */\\n    isNotHost?: boolean;\\n}\\n\\n/**\\n * {@docCategory Layer}\\n */\\nexport declare interface ILayerStyles {\\n    /**\\n     * Style for the root element when fixed.\\n     */\\n    root?: IStyle;\\n    /**\\n     * Style for the Fabric component.\\n     */\\n    content?: IStyle;\\n}\\n\\n/**\\n * Line element interface\\n * {@docCategory Shimmer}\\n */\\nexport declare interface ILine extends IShimmerElement {\\n    /**\\n     * Sets the height of the shimmer line in pixels.\\n     * @defaultvalue 16px\\n     */\\n    height?: number;\\n    /**\\n     * Line width value.\\n     * @defaultvalue 100%\\n     */\\n    width?: number | string;\\n}\\n\\n/**\\n * {@docCategory Link}\\n */\\nexport declare interface ILink {\\n    /** Sets focus to the link. */\\n    focus(): void;\\n}\\n\\n/**\\n * {@docCategory Link}\\n */\\nexport declare interface ILinkHTMLAttributes<T> extends React.HTMLAttributes<T> {\\n    type?: string;\\n    download?: any;\\n    href?: string;\\n    hrefLang?: string;\\n    media?: string;\\n    rel?: string;\\n    target?: string;\\n    autoFocus?: boolean;\\n    disabled?: boolean;\\n    form?: string;\\n    formAction?: string;\\n    formEncType?: string;\\n    formMethod?: string;\\n    formNoValidate?: boolean;\\n    formTarget?: string;\\n    name?: string;\\n    value?: string | string[] | number;\\n    [index: string]: any;\\n}\\n\\n/**\\n * {@docCategory Link}\\n */\\nexport declare interface ILinkProps extends ILinkHTMLAttributes<HTMLAnchorElement | HTMLButtonElement | HTMLElement | LinkBase> {\\n    /**\\n     * Optional callback to access the ILink interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<ILink>;\\n    /**\\n     * Whether the link is disabled\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<ILinkStyleProps, ILinkStyles>;\\n    /**\\n     * Theme (provided through customization.)\\n     */\\n    theme?: ITheme;\\n    /**\\n     * A component that should be used as the root element of the link returned from the Link component.\\n     */\\n    as?: string | React.ComponentClass | React.FunctionComponent;\\n    /**\\n     * Optional keytip for this Link\\n     */\\n    keytipProps?: IKeytipProps;\\n    /**\\n     * Whether the link is styled with an underline or not.\\n     * Should be used when the link is placed alongside other text content.\\n     */\\n    underline?: boolean;\\n}\\n\\n/**\\n * {@docCategory Link}\\n */\\nexport declare interface ILinkStyleProps {\\n    className?: string;\\n    isButton?: boolean;\\n    isDisabled?: boolean;\\n    isUnderlined?: boolean;\\n    theme: ITheme;\\n}\\n\\n/**\\n * {@docCategory Link}\\n */\\nexport declare interface ILinkStyles {\\n    root: IStyle;\\n}\\n\\n/**\\n * {@docCategory List}\\n */\\nexport declare interface IList {\\n    /**\\n     * Force the component to update.\\n     */\\n    forceUpdate: () => void;\\n    /**\\n     * Get the current height the list and it's pages.\\n     */\\n    getTotalListHeight?: () => number;\\n    /**\\n     * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\\n     * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\\n     *\\n     * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\\n     * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\\n     *\\n     * @param index - Index of item to scroll to\\n     * @param measureItem - Optional callback to measure the height of an individual item\\n     * @param scrollToMode - Optional defines the behavior of the scrolling alignment. Defaults to auto.\\n     *  Note: The scrollToMode requires the measureItem callback is provided to function.\\n     */\\n    scrollToIndex: (index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode) => void;\\n    /**\\n     * Get the start index of the page that is currently in view\\n     */\\n    getStartItemIndexInView: () => number;\\n}\\n\\n/**\\n * Props passed to the render override for the list root.\\n * {@docCategory List}\\n */\\nexport declare interface IListOnRenderRootProps<T> {\\n    /**\\n     * The ref to be applied to the list root.\\n     * The `List` uses this element to track scroll position and sizing.\\n     */\\n    rootRef: React.Ref<HTMLDivElement>;\\n    /**\\n     * Props to apply to the list root element.\\n     */\\n    divProps: React.HTMLAttributes<HTMLDivElement>;\\n    /**\\n     * The active pages to be rendered into the list.\\n     * These will have been rendered using `onRenderPage`.\\n     */\\n    pages: IPage<T>[];\\n    /**\\n     * The content to be rendered as the list surface element.\\n     * This will have been rendered using `onRenderSurface`.\\n     */\\n    surfaceElement: JSX.Element | null;\\n}\\n\\n/**\\n * Props passed to the render override for the list surface.\\n * {@docCategory List}\\n */\\nexport declare interface IListOnRenderSurfaceProps<T> {\\n    /**\\n     * A ref to be applied to the surface element.\\n     * The `List` uses this element to track content size and focus.\\n     */\\n    surfaceRef: React.Ref<HTMLDivElement>;\\n    /**\\n     * Props to apply to the list surface element.\\n     */\\n    divProps: React.HTMLAttributes<HTMLDivElement>;\\n    /**\\n     * The active pages to be rendered into the list.\\n     * These will have been rendered using `onRenderPage`.\\n     */\\n    pages: IPage<T>[];\\n    /**\\n     * The content to be rendered representing all active pages.\\n     */\\n    pageElements: JSX.Element[];\\n}\\n\\n/**\\n * {@docCategory List}\\n */\\nexport declare interface IListProps<T = any> extends React.HTMLAttributes<List<T> | HTMLDivElement> {\\n    /**\\n     * Optional callback to access the IList interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IList>;\\n    /** Optional classname to append to root list. */\\n    className?: string;\\n    /** Items to render. */\\n    items?: T[];\\n    /**\\n     * Method to call when trying to render an item.\\n     * @param item - The data associated with the cell that is being rendered.\\n     * @param index - The index of the cell being rendered.\\n     * @param isScrolling - True if the list is being scrolled. May be useful for rendering a placeholder if your cells\\n     * are complex.\\n     */\\n    onRenderCell?: (item?: T, index?: number, isScrolling?: boolean) => React.ReactNode;\\n    /**\\n     * Optional callback invoked when List rendering completed.\\n     * This can be on initial mount or on re-render due to scrolling.\\n     * This method will be called as a result of changes in List pages (added or removed),\\n     * and after ALL the changes complete.\\n     * To track individual page Add / Remove use onPageAdded / onPageRemoved instead.\\n     * @param pages - The current array of pages in the List.\\n     */\\n    onPagesUpdated?: (pages: IPage<T>[]) => void;\\n    /** Optional callback for monitoring when a page is added. */\\n    onPageAdded?: (page: IPage<T>) => void;\\n    /** Optional callback for monitoring when a page is removed. */\\n    onPageRemoved?: (page: IPage<T>) => void;\\n    /** Optional callback to get the item key, to be used on render. */\\n    getKey?: (item: T, index?: number) => string;\\n    /**\\n     * Called by the list to get the specification for a page.\\n     * Use this method to provide an allocation of items per page,\\n     * as well as an estimated rendered height for the page.\\n     * The list will use this to optimize virtualization.\\n     */\\n    getPageSpecification?: (itemIndex?: number, visibleRect?: IRectangle) => IPageSpecification;\\n    /**\\n     * Method called by the list to get how many items to render per page from specified index.\\n     * In general, use `getPageSpecification` instead.\\n     */\\n    getItemCountForPage?: (itemIndex?: number, visibleRect?: IRectangle) => number;\\n    /**\\n     * Method called by the list to get the pixel height for a given page. By default, we measure the first\\n     * page's height and default all other pages to that height when calculating the surface space. It is\\n     * ideal to be able to adequately predict page heights in order to keep the surface space from jumping\\n     * in pixels, which has been seen to cause browser performance issues.\\n     * In general, use `getPageSpecification` instead.\\n     */\\n    getPageHeight?: (itemIndex?: number, visibleRect?: IRectangle, itemCount?: number) => number;\\n    /**\\n     * Method called by the list to derive the page style object. For spacer pages, the list will derive\\n     * the height and passed in heights will be ignored.\\n     */\\n    getPageStyle?: (page: IPage<T>) => any;\\n    /**\\n     * In addition to the visible window, how many windowHeights should we render ahead.\\n     * @defaultvalue 2\\n     */\\n    renderedWindowsAhead?: number;\\n    /**\\n     * In addition to the visible window, how many windowHeights should we render behind.\\n     * @defaultvalue 2\\n     */\\n    renderedWindowsBehind?: number;\\n    /** Index in items array to start rendering from. Defaults to 0. */\\n    startIndex?: number;\\n    /** Number of items to render. Defaults to items.length. */\\n    renderCount?: number;\\n    /**\\n     * Boolean value to enable render page caching. This is an experimental performance optimization\\n     * that is off by default.\\n     * @defaultvalue false\\n     */\\n    usePageCache?: boolean;\\n    /**\\n     * Optional callback to determine whether the list should be rendered in full, or virtualized.\\n     * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\\n     * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\\n     * smaller lists.\\n     * The default implementation will virtualize when this callback is not provided.\\n     */\\n    onShouldVirtualize?: (props: IListProps<T>) => boolean;\\n    /**\\n     * The role to assign to the list root element.\\n     * Use this to override the default assignment of 'list' to the root and 'listitem' to the cells.\\n     */\\n    role?: string;\\n    /**\\n     * Called when the List will render a page.\\n     * Override this to control how cells are rendered within a page.\\n     */\\n    onRenderPage?: IRenderFunction<IPageProps<T>>;\\n    /**\\n     * Render override for the element at the root of the `List`.\\n     * Use this to apply some final attributes or structure to the content\\n     * each time the list is updated with new active pages or items.\\n     */\\n    onRenderRoot?: IRenderFunction<IListOnRenderRootProps<T>>;\\n    /**\\n     * Render override for the element representing the surface of the `List`.\\n     * Use this to alter the structure of the rendered content if necessary on each update.\\n     */\\n    onRenderSurface?: IRenderFunction<IListOnRenderSurfaceProps<T>>;\\n    /**\\n     * An object which can be passed in as a fresh instance to 'force update' the list.\\n     */\\n    version?: {};\\n    /**\\n     * Whether to disable scroll state updates. This causes the isScrolling arg in onRenderCell to always be undefined.\\n     * This is a performance optimization to let List skip a render cycle by not updating its scrolling state.\\n     */\\n    ignoreScrollingState?: boolean;\\n}\\n\\nexport declare interface IListState<T = any> {\\n    pages?: IPage<T>[];\\n    /** The last versionstamp for  */\\n    measureVersion?: number;\\n    isScrolling?: boolean;\\n    getDerivedStateFromProps(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T>;\\n    pagesVersion?: {};\\n}\\n\\nexport declare const Image: React.FunctionComponent<IImageProps>;\\n\\nexport declare class ImageBase extends React.Component<IImageProps, IImageState> {\\n    static defaultProps: {\\n        shouldFadeIn: boolean;\\n    };\\n    private static _svgRegex;\\n    private _coverStyle;\\n    private _imageElement;\\n    private _frameElement;\\n    constructor(props: IImageProps);\\n    UNSAFE_componentWillReceiveProps(nextProps: IImageProps): void;\\n    componentDidUpdate(prevProps: IImageProps, prevState: IImageState): void;\\n    render(): JSX.Element;\\n    private _onImageLoaded;\\n    private _checkImageLoaded;\\n    private _computeCoverStyle;\\n    private _onImageError;\\n}\\n\\n/**\\n * The cover style to be used on the image\\n * {@docCategory Image}\\n */\\nexport declare enum ImageCoverStyle {\\n    /**\\n     * The image will be shown at 100% height of container and the width will be scaled accordingly\\n     */\\n    landscape = 0,\\n    /**\\n     * The image will be shown at 100% width of container and the height will be scaled accordingly\\n     */\\n    portrait = 1\\n}\\n\\n/**\\n * The possible methods that can be used to fit the image.\\n * {@docCategory Image}\\n */\\nexport declare enum ImageFit {\\n    /**\\n     * The image is not scaled. The image is centered and cropped within the content box.\\n     */\\n    center = 0,\\n    /**\\n     * The image is scaled to maintain its aspect ratio while being fully contained within the frame. The image will\\n     * be centered horizontally and vertically within the frame. The space in the top and bottom or in the sides of\\n     * the frame will be empty depending on the difference in aspect ratio between the image and the frame.\\n     */\\n    contain = 1,\\n    /**\\n     * The image is scaled to maintain its aspect ratio while filling the frame. Portions of the image will be cropped\\n     * from the top and bottom, or the sides, depending on the difference in aspect ratio between the image and the frame.\\n     */\\n    cover = 2,\\n    /**\\n     * Neither the image nor the frame are scaled. If their sizes do not match, the image will either be cropped or the\\n     * frame will have empty space.\\n     */\\n    none = 3,\\n    /**\\n     * The image will be centered horizontally and vertically within the frame and maintains its aspect ratio. It will\\n     * behave as ImageFit.center if the image's natural height or width is less than the Image frame's height or width,\\n     * but if both natural height and width are larger than the frame it will behave as ImageFit.cover.\\n     */\\n    centerCover = 4,\\n    /**\\n     * The image will be centered horizontally and vertically within the frame and maintains its aspect ratio. It will\\n     * behave as ImageFit.center if the image's natural height and width is less than the Image frame's height and width,\\n     * but if either natural height or width are larger than the frame it will behave as ImageFit.contain.\\n     */\\n    centerContain = 5\\n}\\n\\n/**\\n * Fast icon component which only supports images (not font glyphs) and can't be targeted by customizations.\\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\\n * {@docCategory Icon}\\n */\\nexport declare const ImageIcon: React.FunctionComponent<IImageIconProps>;\\n\\n/**\\n * {@docCategory Image}\\n */\\nexport declare enum ImageLoadState {\\n    /**\\n     * The image has not yet been loaded, and there is no error yet.\\n     */\\n    notLoaded = 0,\\n    /**\\n     * The image has been loaded successfully.\\n     */\\n    loaded = 1,\\n    /**\\n     * An error has been encountered while loading the image.\\n     */\\n    error = 2,\\n    /**\\n     * Deprecated at v1.3.6, to replace the src in case of errors, use `onLoadingStateChange` instead\\n     * and rerender the Image with a difference src.\\n     * @deprecated Use `onLoadingStateChange` instead\\n     * and rerender the Image with a difference src.\\n     */\\n    errorLoaded = 3\\n}\\n\\n/**\\n * {@docCategory MarqueeSelection}\\n */\\nexport declare interface IMarqueeSelection {\\n}\\n\\n/**\\n * {@docCategory MarqueeSelection}\\n */\\nexport declare interface IMarqueeSelectionProps extends React.HTMLAttributes<HTMLDivElement> {\\n    /**\\n     * Optional callback to access the IMarqueeSelection interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IMarqueeSelection>;\\n    /**\\n     * The selection object to interact with when updating selection changes.\\n     */\\n    selection: ISelection;\\n    /**\\n     * Optional props to mix into the root DIV element.\\n     */\\n    rootProps?: React.HTMLAttributes<HTMLDivElement>;\\n    /**\\n     * Optional callback that is called, when the mouse down event occurs, in order to determine\\n     * if we should start a marquee selection. If true is returned, we will cancel the mousedown\\n     * event to prevent upstream mousedown handlers from executing.\\n     */\\n    onShouldStartSelection?: (ev: MouseEvent) => boolean;\\n    /**\\n     * Optional flag to control the enabled state of marquee selection. This allows you to render\\n     * it and have events all ready to go, but conditionally disable it. That way transitioning\\n     * between enabled/disabled generate no difference in the DOM.\\n     * @defaultvalue true\\n     */\\n    isEnabled?: boolean;\\n    /**\\n     * Optional flag to restrict the drag rect to the root element, instead of allowing the drag\\n     * rect to start outside of the root element boundaries.\\n     * @defaultvalue false\\n     */\\n    isDraggingConstrainedToRoot?: boolean;\\n    /**\\n     * Additional CSS class(es) to apply to the MarqueeSelection.\\n     */\\n    className?: string;\\n    /**\\n     * Theme (provided through customization.)\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunction<IMarqueeSelectionStyleProps, IMarqueeSelectionStyles>;\\n}\\n\\n/**\\n * {@docCategory MarqueeSelection}\\n */\\nexport declare interface IMarqueeSelectionStyleProps {\\n    theme: ITheme;\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory MarqueeSelection}\\n */\\nexport declare interface IMarqueeSelectionStyles {\\n    root?: IStyle;\\n    dragMask?: IStyle;\\n    box?: IStyle;\\n    boxFill?: IStyle;\\n}\\n\\n/**\\n * MaskedTextField component props.\\n * {@docCategory TextField}\\n */\\nexport declare interface IMaskedTextFieldProps extends ITextFieldProps {\\n    /**\\n     * The masking string that defines the mask's behavior.\\n     * A backslash will escape any character.\\n     * Special format characters are:\\n     * '9': [0-9]\\n     * 'a': [a-zA-Z]\\n     * '*': [a-zA-Z0-9]\\n     *\\n     * @example `Phone Number: (999) 999-9999`\\n     */\\n    mask?: string;\\n    /**\\n     * The character to show in place of unfilled characters of the mask.\\n     * @defaultvalue '_'\\n     */\\n    maskChar?: string;\\n    /**\\n     * An object defining the format characters and corresponding regexp values.\\n     * Default format characters: \\\\{\\n     *  '9': /[0-9]/,\\n     *  'a': /[a-zA-Z]/,\\n     *  '*': /[a-zA-Z0-9]/\\n     * \\\\}\\n     */\\n    maskFormat?: {\\n        [key: string]: RegExp;\\n    };\\n}\\n\\n/**\\n * State for the MaskedTextField component.\\n */\\nexport declare interface IMaskedTextFieldState {\\n    /**\\n     * The mask string formatted with the input value.\\n     * This is what is displayed inside the TextField\\n     * @example\\n     *  `Phone Number: 12_ - 4___`\\n     */\\n    displayValue: string;\\n    /** The index into the rendered value of the first unfilled format character */\\n    maskCursorPosition?: number;\\n}\\n\\n/**\\n * @deprecated in favor of mergeStyles API.\\n */\\nexport declare interface IMenuItemClassNames {\\n    item?: string;\\n    divider?: string;\\n    root?: string;\\n    linkContent?: string;\\n    icon?: string;\\n    checkmarkIcon?: string;\\n    subMenuIcon?: string;\\n    label?: string;\\n    secondaryText?: string;\\n    splitContainer?: string;\\n    splitPrimary?: string;\\n    splitMenu?: string;\\n    linkContentMenu?: string;\\n    screenReaderText?: string;\\n}\\n\\n/**\\n * {@docCategory ContextualMenu}\\n */\\nexport declare interface IMenuItemStyles extends IButtonStyles {\\n    /**\\n     * Styles for a menu item that is an anchor link.\\n     */\\n    item?: IStyle;\\n    /**\\n     * Styles for the content inside the button/link of the menuItem.\\n     */\\n    linkContent?: IStyle;\\n    /**\\n     * Styles for a menu item that is an anchor link.\\n     */\\n    anchorLink?: IStyle;\\n    /**\\n     * Default icon color style for known icons.\\n     */\\n    iconColor?: IStyle;\\n    /**\\n     * Default style for checkmark icons.\\n     */\\n    checkmarkIcon?: IStyle;\\n    /**\\n     * Styles for the submenu icon of a menu item.\\n     */\\n    subMenuIcon?: IStyle;\\n    /**\\n     * Styles for a divider item of a ConextualMenu.\\n     */\\n    divider?: IStyle;\\n}\\n\\n/**\\n * {@docCategory MessageBar}\\n */\\nexport declare interface IMessageBar {\\n}\\n\\n/**\\n * {@docCategory MessageBar}\\n */\\nexport declare interface IMessageBarProps extends React.HTMLAttributes<HTMLElement> {\\n    /**\\n     * Optional callback to access the IMessageBar interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IMessageBar>;\\n    /**\\n     * The type of MessageBar to render.\\n     * @defaultvalue MessageBarType.info\\n     */\\n    messageBarType?: MessageBarType;\\n    /**\\n     * The actions you want to show on the other side.\\n     */\\n    actions?: JSX.Element;\\n    /**\\n     * A description of the message bar for the benefit of screen readers.\\n     * @deprecated Use native prop `aria-label` instead.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * Whether the message bar has a dismiss button and its callback.\\n     * If null, we don't show a dismiss button.\\n     * @defaultvalue null\\n     */\\n    onDismiss?: (ev?: React.MouseEvent<HTMLElement | BaseButton | Button>) => any;\\n    /**\\n     * Determines if the message bar is multi lined.\\n     * If false, and the text overflows over buttons or to another line, it is clipped.\\n     * @defaultvalue true\\n     */\\n    isMultiline?: boolean;\\n    /**\\n     * Aria label on dismiss button if onDismiss is defined.\\n     */\\n    dismissButtonAriaLabel?: string;\\n    /**\\n     * Determines if the message bar text is truncated.\\n     * If true, a button will render to toggle between a single line view and multiline view.\\n     * This prop is for single line message bars with no buttons only in a limited space scenario.\\n     * @defaultvalue false\\n     */\\n    truncated?: boolean;\\n    /**\\n     * Aria label on overflow button if truncated is defined.\\n     */\\n    overflowButtonAriaLabel?: string;\\n    /**\\n     * Additional CSS class(es) to apply to the MessageBar.\\n     */\\n    className?: string;\\n    /**\\n     * Theme (provided through customization.)\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IMessageBarStyleProps, IMessageBarStyles>;\\n    /**\\n     * Custom icon prop to replace the dismiss icon.\\n     * If unset, default will be the Fabric Clear icon.\\n     */\\n    dismissIconProps?: IIconProps;\\n    /**\\n     * Custom icon prop to replace the message bar icon.\\n     * If unset, default will be the icon set by messageBarType.\\n     */\\n    messageBarIconProps?: IIconProps;\\n}\\n\\nexport declare interface IMessageBarState {\\n    labelId?: string;\\n    showContent?: boolean;\\n    expandSingleLine?: boolean;\\n}\\n\\n/**\\n * {@docCategory MessageBar}\\n */\\nexport declare interface IMessageBarStyleProps {\\n    /**\\n     * Theme (provided through customization).\\n     */\\n    theme: ITheme;\\n    /**\\n     * Additional CSS class(es).\\n     */\\n    className?: string;\\n    /**\\n     * Type of the MessageBar.\\n     */\\n    messageBarType?: MessageBarType;\\n    /**\\n     * Whether the MessageBar contains a dismiss button.\\n     */\\n    onDismiss?: boolean;\\n    /**\\n     * Whether the text is truncated.\\n     */\\n    truncated?: boolean;\\n    /**\\n     * Whether the MessageBar is rendered in multi line (as opposed to single line) mode.\\n     */\\n    isMultiline?: boolean;\\n    /**\\n     * Whether the single line MessageBar is being expanded.\\n     */\\n    expandSingleLine?: boolean;\\n    /**\\n     * Whether the MessageBar contains any action elements.\\n     */\\n    actions?: boolean;\\n}\\n\\n/**\\n * {@docCategory MessageBar}\\n */\\nexport declare interface IMessageBarStyles {\\n    /**\\n     * Style set for the root element.\\n     */\\n    root?: IStyle;\\n    /**\\n     * Style set for the element containing the icon, text, and optional dismiss button.\\n     */\\n    content?: IStyle;\\n    /**\\n     * Style set for the element containing the icon.\\n     */\\n    iconContainer?: IStyle;\\n    /**\\n     * Style set for the icon.\\n     */\\n    icon?: IStyle;\\n    /**\\n     * Style set for the element containing the text.\\n     */\\n    text?: IStyle;\\n    /**\\n     * Style set for the text.\\n     */\\n    innerText?: IStyle;\\n    /**\\n     * Style set for the optional dismiss button.\\n     */\\n    dismissal?: IStyle;\\n    /**\\n     * Style set for the icon used to expand and collapse the MessageBar.\\n     */\\n    expand?: IStyle;\\n    /**\\n     * Style set for the element containing the dismiss button.\\n     */\\n    dismissSingleLine?: IStyle;\\n    /**\\n     * Style set for the element containing the expand icon.\\n     */\\n    expandSingleLine?: IStyle;\\n    /**\\n     * Style set for the optional element containing the action elements.\\n     */\\n    actions?: IStyle;\\n}\\n\\n/**\\n * {@docCategory Modal}\\n */\\nexport declare interface IModal {\\n    /**\\n     * Sets focus on the first focusable, or configured, child in focus trap zone\\n     */\\n    focus: () => void;\\n}\\n\\n/**\\n * {@docCategory Modal}\\n */\\nexport declare interface IModalProps extends React.ClassAttributes<ModalBase>, IWithResponsiveModeState, IAccessiblePopupProps {\\n    /**\\n     * Optional callback to access the IDialog interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IModal>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IModalStyleProps, IModalStyles>;\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Whether the dialog is displayed.\\n     * @defaultvalue false\\n     */\\n    isOpen?: boolean;\\n    /**\\n     * Whether the overlay is dark themed.\\n     * @defaultvalue true\\n     */\\n    isDarkOverlay?: boolean;\\n    /**\\n     * A callback function for when the Modal is dismissed light dismiss, before the animation completes.\\n     */\\n    onDismiss?: (ev?: React.MouseEvent<HTMLButtonElement>) => any;\\n    /**\\n     * A callback function which is called after the Modal is dismissed and the animation is complete.\\n     */\\n    onDismissed?: () => any;\\n    /**\\n     * Defines an optional set of props to be passed through to Layer\\n     */\\n    layerProps?: ILayerProps;\\n    /**\\n     * Defines an optional set of props to be passed through to Overlay\\n     */\\n    overlay?: IOverlayProps;\\n    /**\\n     * Whether the dialog can be light dismissed by clicking outside the dialog (on the overlay).\\n     * @defaultvalue false\\n     */\\n    isBlocking?: boolean;\\n    /**\\n     * Whether the dialog should be modeless (e.g. not dismiss when focusing/clicking outside of the dialog).\\n     * if true: isBlocking is ignored, there will be no overlay (isDarkOverlay is ignored),\\n     * isClickableOutsideFocusTrap is true, and forceFocusInsideTrap is false\\n     */\\n    isModeless?: boolean;\\n    /**\\n     * Optional class name to be added to the root class\\n     */\\n    className?: string;\\n    /**\\n     * Optional override for container class\\n     */\\n    containerClassName?: string;\\n    /**\\n     * Optional override for scrollable content class\\n     */\\n    scrollableContentClassName?: string;\\n    /**\\n     * A callback function for when the Modal content is mounted on the overlay layer\\n     * @deprecated Use layerProps.onLayerDidMount instead\\n     */\\n    onLayerDidMount?: () => void;\\n    /**\\n     * ARIA id for the title of the Modal, if any\\n     */\\n    titleAriaId?: string;\\n    /**\\n     * ARIA id for the subtitle of the Modal, if any\\n     */\\n    subtitleAriaId?: string;\\n    /**\\n     * Whether the modal should have top offset fixed once opened and expand from the bottom only\\n     * when the content changes dynamically.\\n     */\\n    topOffsetFixed?: boolean;\\n    /**\\n     * The options to make the modal draggable\\n     */\\n    dragOptions?: IDragOptions;\\n    /**\\n     * Allow body scroll on content and overlay on touch devices. Changing after mounting has no effect.\\n     * @defaultvalue false\\n     */\\n    allowTouchBodyScroll?: boolean;\\n    /**\\n     * Puts aria-hidden=true on all non-ancestors of the current modal, for screen readers.\\n     * This is an experimental feature that will be graduated to default behavior after testing.\\n     * This flag will be removed with the next major release.\\n     */\\n    enableAriaHiddenSiblings?: boolean;\\n}\\n\\n/**\\n * {@docCategory Modal}\\n */\\nexport declare type IModalStyleProps = Required<Pick<IModalProps, 'theme'>> & Pick<IModalProps, 'className' | 'containerClassName' | 'scrollableContentClassName' | 'topOffsetFixed' | 'isModeless'> & {\\n    /** Modal open state. */\\n    isOpen?: boolean;\\n    /** Modal visible state. */\\n    isVisible?: boolean;\\n    /** Modal has been opened state. */\\n    hasBeenOpened?: boolean;\\n    /** Positioning of modal on first render */\\n    modalRectangleTop?: number;\\n    /** Classname for layer element */\\n    layerClassName?: string;\\n    /** Whether this modal is draggable and using the default handler */\\n    isDefaultDragHandle?: boolean;\\n};\\n\\n/**\\n * {@docCategory Modal}\\n */\\nexport declare interface IModalStyles {\\n    root: IStyle;\\n    main: IStyle;\\n    scrollableContent: IStyle;\\n    layer: IStyle;\\n    keyboardMoveIconContainer: IStyle;\\n    keyboardMoveIcon: IStyle;\\n}\\n\\n/**\\n * {@docCategory Nav}\\n */\\nexport declare interface INav {\\n    /**\\n     * The meta 'key' property of the currently selected NavItem of the Nav. Can return\\n     * undefined if the currently selected nav item has no populated key property. Be aware\\n     * that in order for Nav to properly understand which key is selected all NavItems in\\n     * all groups of the Nav must have populated key properties.\\n     */\\n    selectedKey: string | undefined;\\n    /**\\n     * Sets focus to the first tabbable item in the zone.\\n     * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\\n     * if focus is already in the focus zone.\\n     * @returns True if focus could be set to an active element, false if no operation was taken.\\n     */\\n    focus(forceIntoFirstElement?: boolean): boolean;\\n}\\n\\n/**\\n * {@docCategory Nav}\\n */\\nexport declare interface INavButtonProps extends IButtonProps {\\n    /**\\n     * (Optional) Link to be rendered.\\n     */\\n    link?: INavLink;\\n}\\n\\n/**\\n * {@docCategory Nav}\\n */\\nexport declare interface INavLink {\\n    /**\\n     * Text to render for this link\\n     */\\n    name: string;\\n    /**\\n     * URL to navigate to for this link\\n     */\\n    url: string;\\n    /**\\n     * Unique, stable key for the link, used when rendering the list of links and for tracking\\n     * the currently selected link.\\n     */\\n    key?: string;\\n    /**\\n     * Child links to this link, if any\\n     */\\n    links?: INavLink[];\\n    /**\\n     * Callback invoked when this link is clicked. Providing this callback will cause the link\\n     * to render as a button (rather than an anchor) unless forceAnchor is set to true.\\n     */\\n    onClick?: (ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => void;\\n    /**\\n     * Name of an icon to render next to the link button.\\n     */\\n    icon?: string;\\n    /**\\n     * Deprecated. Use `iconProps.className` instead.\\n     * @deprecated Use `iconProps.className` instead.\\n     */\\n    iconClassName?: string;\\n    /**\\n     * Props for an icon to render next to the link button.\\n     */\\n    iconProps?: IIconProps;\\n    /**\\n     * The name to use for functional automation tests\\n     */\\n    automationId?: string;\\n    /**\\n     * Whether or not the link is in an expanded state\\n     */\\n    isExpanded?: boolean;\\n    /**\\n     * Aria-current token for active nav links. Must be a valid token value, and defaults to 'page'.\\n     */\\n    ariaCurrent?: 'page' | 'step' | 'location' | 'date' | 'time' | 'true';\\n    /**\\n     * Aria label for nav link. Ignored if `collapseAriaLabel` or `expandAriaLabel` is provided.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * Text for title tooltip and ARIA description.\\n     */\\n    title?: string;\\n    /**\\n     * Link <a> target.\\n     */\\n    target?: string;\\n    /**\\n     * Whether or not the link is disabled.\\n     */\\n    disabled?: boolean;\\n    /**\\n     * (Optional) By default, any link with onClick defined will render as a button.\\n     * Set this property to true to override that behavior. (Links without onClick defined\\n     * will render as anchors by default.)\\n     */\\n    forceAnchor?: boolean;\\n    /**\\n     * ARIA label when group is collapsed and can be expanded.\\n     */\\n    expandAriaLabel?: string;\\n    /**\\n     * ARIA label when group is collapsed and can be expanded.\\n     */\\n    collapseAriaLabel?: string;\\n    /**\\n     * (Optional) Any additional properties to apply to the rendered links.\\n     */\\n    [propertyName: string]: any;\\n}\\n\\n/**\\n * {@docCategory Nav}\\n */\\nexport declare interface INavLinkGroup {\\n    /**\\n     * Text to render as the header of a group\\n     */\\n    name?: string;\\n    /**\\n     * Links to render within this group\\n     */\\n    links: INavLink[];\\n    /**\\n     * The name to use for functional automation tests\\n     */\\n    automationId?: string;\\n    /**\\n     * If true, the group should render collapsed by default\\n     */\\n    collapseByDefault?: boolean;\\n    /**\\n     * Callback invoked when a group header is clicked\\n     */\\n    onHeaderClick?: (ev?: React.MouseEvent<HTMLElement>, isCollapsing?: boolean) => void;\\n    /**\\n     * ARIA label when group is collapsed and can be expanded.\\n     */\\n    expandAriaLabel?: string;\\n    /**\\n     * ARIA label when group is collapsed and can be expanded.\\n     */\\n    collapseAriaLabel?: string;\\n    /**\\n     * (Optional) Any additional properties to apply to a group.\\n     */\\n    groupData?: any;\\n}\\n\\n/**\\n * {@docCategory Nav}\\n */\\nexport declare interface INavProps {\\n    /**\\n     * Optional callback to access the INav interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<INav>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<INavStyleProps, INavStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Additional css class to apply to the Nav\\n     * @defaultvalue undefined\\n     */\\n    className?: string;\\n    /**\\n     * A collection of link groups to display in the navigation bar\\n     */\\n    groups: INavLinkGroup[] | null;\\n    /**\\n     * Used to customize how content inside the group header is rendered\\n     * @defaultvalue Default group header rendering\\n     */\\n    onRenderGroupHeader?: IRenderFunction<IRenderGroupHeaderProps>;\\n    /**\\n     * Render a custom link in place of the normal one.\\n     * This replaces the entire button rather than simply button content\\n     */\\n    linkAs?: IComponentAs<INavButtonProps>;\\n    /**\\n     * Used to customize how content inside the link tag is rendered\\n     * @defaultvalue Default link rendering\\n     */\\n    onRenderLink?: IRenderFunction<INavLink>;\\n    /**\\n     * Function callback invoked when a link in the navigation is clicked\\n     */\\n    onLinkClick?: (ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => void;\\n    /**\\n     * Function callback invoked when the chevron on a link is clicked\\n     */\\n    onLinkExpandClick?: (ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => void;\\n    /**\\n     * Indicates whether the navigation component renders on top of other content in the UI\\n     */\\n    isOnTop?: boolean;\\n    /**\\n     * (Optional) The key of the nav item initially selected.\\n     */\\n    initialSelectedKey?: string;\\n    /**\\n     * (Optional) The key of the nav item selected by caller.\\n     */\\n    selectedKey?: string;\\n    /**\\n     * (Optional) The nav container aria label.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * (Optional) The nav container aria label. The link name is prepended to this label.\\n     * If not provided, the aria label will default to the link name.\\n     *\\n     * @deprecated - Use expandAriaLabel and collapseAriaLabel on groups instead\\n     */\\n    expandButtonAriaLabel?: string;\\n    /**\\n     * (Deprecated) Use ariaCurrent on links instead\\n     * @deprecated Use ariaCurrent on links instead\\n     */\\n    selectedAriaLabel?: string;\\n}\\n\\nexport declare interface INavState {\\n    isGroupCollapsed: {\\n        [key: string]: boolean;\\n    };\\n    isLinkExpandStateChanged?: boolean;\\n    selectedKey?: string;\\n}\\n\\n/**\\n * {@docCategory Nav}\\n */\\nexport declare interface INavStyleProps {\\n    /**\\n     * Accept theme prop.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Accept custom classNames\\n     */\\n    className?: string;\\n    /**\\n     * is element on top boolean\\n     */\\n    isOnTop?: boolean;\\n    /**\\n     * is element a link boolean\\n     */\\n    isLink?: boolean;\\n    /**\\n     * is element disabled\\n     */\\n    isDisabled?: boolean;\\n    /**\\n     * is element a group boolean\\n     */\\n    isGroup?: boolean;\\n    /**\\n     * is element expanded boolean\\n     */\\n    isExpanded?: boolean;\\n    /**\\n     * is element selected boolean\\n     */\\n    isSelected?: boolean;\\n    /**\\n     * is button\\n     */\\n    isButtonEntry?: boolean;\\n    /**\\n     * Nav height value\\n     */\\n    navHeight?: number;\\n    /**\\n     * left padding value\\n     */\\n    leftPadding?: number;\\n    /**\\n     * left padding when expanded value\\n     */\\n    leftPaddingExpanded?: number;\\n    /**\\n     * right padding value\\n     */\\n    rightPadding?: number;\\n    /**\\n     * position value\\n     */\\n    position?: number;\\n    /**\\n     * Inherited from INavProps\\n     * A collection of link groups to display in the navigation bar\\n     */\\n    groups: INavLinkGroup[] | null;\\n}\\n\\n/**\\n * {@docCategory Nav}\\n */\\nexport declare interface INavStyles {\\n    /**\\n     * Style set for the root element.\\n     */\\n    root: IStyle;\\n    /**\\n     * Style set for the link text container div element.\\n     */\\n    linkText: IStyle;\\n    /**\\n     * Style set for the link element extending the\\n     * root style set for ActionButton component.\\n     */\\n    link: IStyle;\\n    /**\\n     * Style set for the composite link container div element\\n     */\\n    compositeLink: IStyle;\\n    /**\\n     * Style set for the chevron button inside the composite\\n     * link and group elements.\\n     */\\n    chevronButton: IStyle;\\n    /**\\n     * Style set for the chevron icon inside the composite\\n     * link and group elements.\\n     */\\n    chevronIcon: IStyle;\\n    /**\\n     * Style set for the nav links ul element.\\n     */\\n    navItems: IStyle;\\n    /**\\n     * Style set for the nav links li element.\\n     */\\n    navItem: IStyle;\\n    /**\\n     * Style set for the group root div.\\n     */\\n    group: IStyle;\\n    /**\\n     * Style set for the group content div inside group.\\n     */\\n    groupContent: IStyle;\\n}\\nexport { IObjectWithKey }\\n\\n/**\\n * {@docCategory ComboBox}\\n */\\nexport declare interface IOnRenderComboBoxLabelProps {\\n    /**\\n     * Props to render the combobox.\\n     */\\n    props: IComboBoxProps;\\n    /**\\n     * Accessible text for label when combobox is multiselected.\\n     */\\n    multiselectAccessibleText?: string;\\n}\\n\\n/**\\n * {@docCategory OverflowSet}\\n */\\nexport declare interface IOverflowSet {\\n    /**\\n     * Sets focus to the first tabbable item in the zone.\\n     * @param forceIntoFirstElement - If true, focus will be forced into the first element, even if\\n     * focus is already in the focus zone.\\n     * @returns True if focus could be set to an active element, false if no operation was taken.\\n     */\\n    focus(forceIntoFirstElement?: boolean): boolean;\\n    /**\\n     * Sets focus to a specific child element within the zone. This can be used in conjunction with\\n     * shouldReceiveFocus to created delayed focus scenarios (like animate the scroll position to the correct\\n     * location and then focus.)\\n     * @param childElement - The child element within the zone to focus.\\n     * @returns True if focus could be set to an active element, false if no operation was taken.\\n     */\\n    focusElement(childElement?: HTMLElement): boolean;\\n}\\n\\n/**\\n * {@docCategory OverflowSet}\\n */\\nexport declare interface IOverflowSetItemProps {\\n    /**\\n     * Unique id to identify the item.\\n     */\\n    key: string;\\n    /**\\n     * Optional keytip for the overflowSetItem.\\n     */\\n    keytipProps?: IKeytipProps;\\n    /**\\n     * Any additional properties to use when custom rendering menu items.\\n     */\\n    [propertyName: string]: any;\\n}\\n\\n/**\\n * {@docCategory OverflowSet}\\n */\\nexport declare interface IOverflowSetProps extends React.ClassAttributes<OverflowSetBase> {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<IOverflowSet>;\\n    /**\\n     * Class name\\n     */\\n    className?: string;\\n    /**\\n     * An array of items to be rendered by your onRenderItem function in the primary content area\\n     */\\n    items?: IOverflowSetItemProps[];\\n    /**\\n     * Change item layout direction to vertical/stacked.\\n     * If role is set to `menubar`, `vertical={true}` will also add proper `aria-orientation`.\\n     * @defaultvalue false\\n     */\\n    vertical?: boolean;\\n    /**\\n     * Controls wether or not the overflow button is placed at the start or end of the items.\\n     * This gives a reveresed visual behavior but maintains correct keyboard navigation.\\n     * @defaultValue 'end'\\n     */\\n    overflowSide?: 'start' | 'end';\\n    /**\\n     * An array of items to be passed to overflow contextual menu\\n     */\\n    overflowItems?: IOverflowSetItemProps[];\\n    /**\\n     * Method to call when trying to render an item.\\n     */\\n    onRenderItem: (item: IOverflowSetItemProps) => any;\\n    /**\\n     * Rendering method for overflow button and contextual menu. The argument to the function is\\n     * the overflowItems passed in as props to this function.\\n     */\\n    onRenderOverflowButton: IRenderFunction<any[]>;\\n    /**\\n     * Custom properties for OverflowSet's FocusZone.\\n     * If doNotContainWithinFocusZone is set to true focusZoneProps will be ignored.\\n     * Use one or the other.\\n     * @deprecated In 8.0 the OverflowSet will no longer be wrapped in a FocusZone\\n     */\\n    focusZoneProps?: IFocusZoneProps;\\n    /**\\n     * If true do not contain the OverflowSet inside of a FocusZone,\\n     * otherwise the OverflowSet will contain a FocusZone.\\n     * If this is set to true focusZoneProps will be ignored.\\n     * Use one or the other.\\n     * @deprecated In 8.0 the OverflowSet will no longer be wrapped in a FocusZone\\n     */\\n    doNotContainWithinFocusZone?: boolean;\\n    /**\\n     * The role for the OverflowSet.\\n     * @defaultvalue 'group'\\n     */\\n    role?: string;\\n    /**\\n     * Optional full keytip sequence for the overflow button, if it will have a keytip.\\n     */\\n    keytipSequences?: string[];\\n    /**\\n     * Function that will take in an IOverflowSetItemProps and return the subMenu for that item.\\n     * If not provided, will use 'item.subMenuProps.items' by default.\\n     * Alternatively accepts a boolean, return True if the item has a menu and False if not\\n     * This is only used if your overflow set has keytips.\\n     */\\n    itemSubMenuProvider?: (item: IOverflowSetItemProps) => any[] | boolean | undefined;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IOverflowSetProps, IOverflowSetStyles>;\\n}\\n\\n/**\\n * The props needed to construct styles.\\n * This represents the simplified set of immutable things which control the class names.\\n * {@docCategory OverflowSet}\\n */\\nexport declare type IOverflowSetStyleProps = Pick<IOverflowSetProps, 'vertical' | 'className'>;\\n\\n/**\\n * {@docCategory OverflowSet}\\n */\\nexport declare interface IOverflowSetStyles {\\n    /** The style that is layered onto the root element of OverflowSet. */\\n    root?: IStyle;\\n    /** The style that is layered onto each individual item in the overflow set. */\\n    item?: IStyle;\\n    /** The style that is layered onto the overflow button for the overflow set. */\\n    overflowButton?: IStyle;\\n}\\n\\n/**\\n * {@docCategory Overlay}\\n */\\nexport declare interface IOverlay {\\n}\\n\\n/**\\n * {@docCategory Overlay}\\n */\\nexport declare interface IOverlayProps extends React.HTMLAttributes<HTMLElement> {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<IOverlay>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<IOverlayStyleProps, IOverlayStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Additional css class to apply to the Overlay\\n     * @defaultvalue undefined\\n     */\\n    className?: string;\\n    /**\\n     * Whether to use the dark-themed overlay.\\n     * @defaultvalue false\\n     */\\n    isDarkThemed?: boolean;\\n    onClick?: () => void;\\n    /**\\n     * Allow body scroll on touch devices. Changing after mounting has no effect.\\n     * @defaultvalue false\\n     */\\n    allowTouchBodyScroll?: boolean;\\n}\\n\\n/**\\n * {@docCategory Overlay}\\n */\\nexport declare interface IOverlayStyleProps {\\n    /**\\n     * Accept theme prop.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Accept custom classNames\\n     */\\n    className?: string;\\n    /**\\n     * Is overlay visible\\n     */\\n    isNone?: boolean;\\n    /**\\n     * Is overlay dark themed\\n     */\\n    isDark?: boolean;\\n}\\n\\n/**\\n * {@docCategory Overlay}\\n */\\nexport declare interface IOverlayStyles {\\n    /**\\n     * Style for the root element.\\n     */\\n    root: IStyle;\\n}\\n\\n/**\\n * Extended column render props.\\n *\\n * {@docCategory DetailsList}\\n */\\nexport declare type IOverrideColumnRenderProps = Pick<IDetailsListProps, 'onRenderItemColumn' | 'getCellValueKey'> & Pick<IDetailsRowProps, 'cellsByColumn'>;\\n\\n/**\\n * {@docCategory List}\\n */\\nexport declare interface IPage<T = any> {\\n    key: string;\\n    items: T[] | undefined;\\n    startIndex: number;\\n    itemCount: number;\\n    style: React.CSSProperties;\\n    top: number;\\n    height: number;\\n    data?: any;\\n    isSpacer?: boolean;\\n    isVisible?: boolean;\\n}\\n\\n/**\\n * {@docCategory List}\\n */\\nexport declare interface IPageProps<T = any> extends React.HTMLAttributes<HTMLDivElement>, React.ClassAttributes<HTMLDivElement> {\\n    /**\\n     * The role being assigned to the rendered page element by the list.\\n     */\\n    role?: string;\\n    /**\\n     * The allocation data for the page.\\n     */\\n    page: IPage<T>;\\n}\\n\\n/**\\n * {@docCategory List}\\n */\\nexport declare interface IPageSpecification {\\n    /**\\n     * The number of items to allocate to the page.\\n     */\\n    itemCount?: number;\\n    /**\\n     * The estimated pixel height of the page.\\n     */\\n    height?: number;\\n    /**\\n     * Data to pass through to the page when rendering.\\n     */\\n    data?: any;\\n    /**\\n     * The key to use when creating the page.\\n     */\\n    key?: string;\\n}\\n\\n/**\\n * {@docCategory Panel}\\n */\\nexport declare interface IPanel {\\n    /**\\n     * Forces the panel to open.\\n     */\\n    open: () => void;\\n    /**\\n     * Forces the panel to dismiss.\\n     */\\n    dismiss: (ev?: React.KeyboardEvent<HTMLElement>) => void;\\n}\\n\\n/**\\n * Renderer function which takes an additional parameter, the ID to use for the element containing\\n * the panel's title. This allows the `aria-labelledby` for the panel popup to work correctly.\\n * Note that if `headerTextId` is provided, it **must** be used on an element, or screen readers\\n * will be confused by the reference to a nonexistent ID.\\n * {@docCategory Panel}\\n */\\nexport declare interface IPanelHeaderRenderer extends IRenderFunction<IPanelProps> {\\n    /**\\n     * @param props - Props given to the panel\\n     * @param defaultRender - Default header renderer. If using this renderer in code that does not\\n     * assign `headerTextId` to an element elsewhere, it **must** be passed to this function.\\n     * @param headerTextId - If provided, this **must** be used as the ID of an element containing the\\n     * panel's title, because the panel popup uses this ID as its aria-labelledby.\\n     */\\n    (props?: IPanelProps, defaultRender?: IPanelHeaderRenderer, headerTextId?: string | undefined): JSX.Element | null;\\n}\\n\\n/**\\n * {@docCategory Panel}\\n */\\nexport declare interface IPanelProps extends React.HTMLAttributes<PanelBase> {\\n    /**\\n     * Optional callback to access the IPanel interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IPanel>;\\n    /**\\n     * Whether the panel is displayed.\\n     * If true, will cause panel to stay open even if dismissed.\\n     * If false, will cause panel to stay hidden.\\n     * If undefined, will allow the panel to control its own visility through open/dismiss methods.\\n     * @defaultvalue undefined\\n     */\\n    isOpen?: boolean;\\n    /**\\n     * Has the close button visible.\\n     * @defaultvalue true\\n     */\\n    hasCloseButton?: boolean;\\n    /**\\n     * Whether the panel can be light dismissed.\\n     * @defaultvalue false\\n     */\\n    isLightDismiss?: boolean;\\n    /**\\n     * Whether the panel is hidden on dismiss, instead of destroyed in the DOM.\\n     * Protects the contents from being destroyed when the panel is dismissed.\\n     * @defaultvalue false\\n     */\\n    isHiddenOnDismiss?: boolean;\\n    /**\\n     * Whether the panel uses a modal overlay or not\\n     * @defaultvalue true\\n     */\\n    isBlocking?: boolean;\\n    /**\\n     * Determines if content should stretch to fill available space putting footer at the bottom of the page\\n     * @defaultvalue false\\n     */\\n    isFooterAtBottom?: boolean;\\n    /**\\n     * Header text for the Panel.\\n     * @defaultvalue \\\"\\\"\\n     */\\n    headerText?: string;\\n    /**\\n     * The props for header text container.\\n     */\\n    headerTextProps?: React.HTMLAttributes<HTMLDivElement>;\\n    /**\\n     * A callback function for when the Panel is opened, before the animation completes.\\n     */\\n    onOpen?: () => void;\\n    /**\\n     * A callback function for when the Panel is opened, after the animation completes.\\n     */\\n    onOpened?: () => void;\\n    /**\\n     * A callback function for when the panel is closed, before the animation completes.\\n     * If the panel should NOT be dismissed based on some keyboard event, then simply call ev.preventDefault() on it\\n     */\\n    onDismiss?: (ev?: React.SyntheticEvent<HTMLElement>) => void;\\n    /**\\n     * A callback function which is called **after** the Panel is dismissed and the animation is complete.\\n     * (If you need to update the Panel's `isOpen` prop in response to a dismiss event, use `onDismiss` instead.)\\n     */\\n    onDismissed?: () => void;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IPanelStyleProps, IPanelStyles>;\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Additional css class to apply to the Panel\\n     * @defaultvalue undefined\\n     */\\n    className?: string;\\n    /**\\n     * Type of the panel.\\n     * @defaultvalue PanelType.smallFixedFar\\n     */\\n    type?: PanelType;\\n    /**\\n     * Custom panel width, used only when `type` is set to `PanelType.custom`.\\n     */\\n    customWidth?: string;\\n    /**\\n     * Aria label on close button\\n     */\\n    closeButtonAriaLabel?: string;\\n    /**\\n     * Optional parameter to provider the class name for header text\\n     */\\n    headerClassName?: string;\\n    /**\\n     * Sets the HTMLElement to focus on when exiting the FocusTrapZone.\\n     * @defaultvalue The element.target that triggered the Panel.\\n     */\\n    elementToFocusOnDismiss?: HTMLElement;\\n    /**\\n     * Indicates if this Panel will ignore keeping track of HTMLElement that activated the Zone.\\n     * Deprecated, use `focusTrapZoneProps`.\\n     * @defaultvalue false\\n     * @deprecated Use `focusTrapZoneProps`.\\n     */\\n    ignoreExternalFocusing?: boolean;\\n    /**\\n     * Indicates whether Panel should force focus inside the focus trap zone.\\n     * If not explicitly specified, behavior aligns with FocusTrapZone's default behavior.\\n     * Deprecated, use `focusTrapZoneProps`.\\n     * @deprecated Use `focusTrapZoneProps`.\\n     */\\n    forceFocusInsideTrap?: boolean;\\n    /**\\n     * Indicates the selector for first focusable item.\\n     * Deprecated, use `focusTrapZoneProps`.\\n     * @deprecated Use `focusTrapZoneProps`.\\n     */\\n    firstFocusableSelector?: string;\\n    /**\\n     * Optional props to pass to the FocusTrapZone component to manage focus in the panel.\\n     */\\n    focusTrapZoneProps?: IFocusTrapZoneProps;\\n    /**\\n     * Optional props to pass to the Layer component hosting the panel.\\n     */\\n    layerProps?: ILayerProps;\\n    /**\\n     * Optional props to pass to the Overlay component that the panel uses.\\n     */\\n    overlayProps?: IOverlayProps;\\n    /**\\n     * Optional props to pass the Popup component that the panel uses.\\n     */\\n    popupProps?: IPopupProps;\\n    /**\\n     * Optional custom function to handle clicks outside the panel in lightdismiss mode\\n     */\\n    onLightDismissClick?: () => void;\\n    /**\\n     * Optional custom function to handle clicks outside this component\\n     */\\n    onOuterClick?: (ev?: React.MouseEvent<HTMLDivElement>) => void;\\n    /**\\n     * Optional custom renderer navigation region. Replaces the region that contains the close button.\\n     */\\n    onRenderNavigation?: IRenderFunction<IPanelProps>;\\n    /**\\n     * Optional custom renderer for content in the navigation region. Replaces current close button.\\n     */\\n    onRenderNavigationContent?: IRenderFunction<IPanelProps>;\\n    /**\\n     * Optional custom renderer for header region. Replaces current title\\n     */\\n    onRenderHeader?: IPanelHeaderRenderer;\\n    /**\\n     * Optional custom renderer for body region. Replaces any children passed into the component.\\n     */\\n    onRenderBody?: IRenderFunction<IPanelProps>;\\n    /**\\n     * Optional custom renderer for footer region. Replaces sticky footer.\\n     */\\n    onRenderFooter?: IRenderFunction<IPanelProps>;\\n    /**\\n     * Custom renderer for content in the sticky footer\\n     */\\n    onRenderFooterContent?: IRenderFunction<IPanelProps>;\\n    /**\\n     * Deprecated property. Serves no function.\\n     * @deprecated Serves no function.\\n     */\\n    componentId?: string;\\n    /**\\n     * Allow body scroll on content and overlay on touch devices. Changing after mounting has no effect.\\n     * @defaultvalue false\\n     */\\n    allowTouchBodyScroll?: boolean;\\n}\\n\\ndeclare interface IPanelState {\\n    isFooterSticky?: boolean;\\n    id?: string;\\n    visibility: PanelVisibilityState;\\n}\\n\\n/**\\n * {@docCategory Panel}\\n */\\nexport declare interface IPanelStyleProps {\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Accept custom classNames\\n     */\\n    className?: string;\\n    /**\\n     * Is Panel open\\n     */\\n    isOpen?: boolean;\\n    /**\\n     * Is animation currently running\\n     */\\n    isAnimating?: boolean;\\n    /**\\n     * Is panel on right side\\n     */\\n    isOnRightSide?: boolean;\\n    /**\\n     * Is panel hidden on dismiss\\n     */\\n    isHiddenOnDismiss?: boolean;\\n    /**\\n     * Classname for FocusTrapZone element\\n     */\\n    focusTrapZoneClassName?: string;\\n    /**\\n     * Determines if content should stretch to fill available space putting footer at the bottom of the page\\n     */\\n    isFooterAtBottom?: boolean;\\n    /**\\n     * Based on state value setting footer to sticky or not\\n     */\\n    isFooterSticky?: boolean;\\n    /**\\n     * Panel has close button\\n     */\\n    hasCloseButton?: boolean;\\n    /**\\n     * Type of the panel.\\n     */\\n    type?: PanelType;\\n    /**\\n     * Optional parameter to provider the class name for header text\\n     */\\n    headerClassName?: string;\\n    /**\\n     * Determines where the header is rendered based on whether the user\\n     * has passed in a custom onRenderNavigation or onRenderNavigationContent render callback\\n     */\\n    hasCustomNavigation?: boolean;\\n}\\n\\n/**\\n * {@docCategory Panel}\\n */\\nexport declare interface IPanelStyles {\\n    /**\\n     * Style for the root element.\\n     */\\n    root: IStyle;\\n    /**\\n     * Style for the overlay element.\\n     */\\n    overlay: IStyle;\\n    /**\\n     * Style for the hidden element.\\n     */\\n    hiddenPanel: IStyle;\\n    /**\\n     * Style for the main section element.\\n     */\\n    main: IStyle;\\n    /**\\n     * Style for the navigation container element.\\n     */\\n    commands: IStyle;\\n    /**\\n     * Style for the Body and Footer container element.\\n     */\\n    contentInner: IStyle;\\n    /**\\n     * Style for the scrollable content area container element.\\n     */\\n    scrollableContent: IStyle;\\n    /**\\n     * Style for the close button container element.\\n     */\\n    navigation: IStyle;\\n    /**\\n     * Style for the close button IconButton element.\\n     * @deprecated Use `subComponentStyles.closeButton` instead.\\n     */\\n    closeButton?: IStyle;\\n    /**\\n     * Style for the header container div element.\\n     */\\n    header: IStyle;\\n    /**\\n     * Style for the header text div element.\\n     */\\n    headerText: IStyle;\\n    /**\\n     * Style for the body div element.\\n     */\\n    content: IStyle;\\n    /**\\n     * Style for the footer div element.\\n     */\\n    footer: IStyle;\\n    /**\\n     * Style for the inner footer div element.\\n     */\\n    footerInner: IStyle;\\n    /**\\n     * Styling for subcomponents.\\n     */\\n    subComponentStyles: IPanelSubComponentStyles;\\n}\\n\\nexport declare interface IPanelSubComponentStyles {\\n    /**\\n     * Styling for close button child component.\\n     */\\n    closeButton: Partial<IButtonStyles>;\\n}\\n\\n/**\\n * {@docCategory FloatingPeoplePicker}\\n */\\nexport declare interface IPeopleFloatingPickerProps extends IBaseFloatingPickerProps<IPersonaProps> {\\n}\\n\\n/**\\n * {@docCategory ExtendedPeoplePicker}\\n */\\nexport declare interface IPeoplePickerItemProps extends IPickerItemProps<IExtendedPersonaProps> {\\n}\\n\\n/**\\n * PeoplePickerItemSelected props interface. Refers to the PeoplePicker items that have been picked already.\\n * {@docCategory PeoplePicker}\\n */\\nexport declare interface IPeoplePickerItemSelectedProps extends IPickerItemProps<IPersonaProps & {\\n    ValidationState: ValidationState;\\n}>, IPeoplePickerItemSharedProps {\\n    /** Call to provide customized styling that will layer on top of the variant rules. */\\n    styles?: IStyleFunctionOrObject<IPeoplePickerItemSelectedStyleProps, IPeoplePickerItemSelectedStyles>;\\n}\\n\\n/**\\n * Props needed to construct PeoplePickerItemSelected styles.\\n * {@docCategory PeoplePicker}\\n */\\nexport declare type IPeoplePickerItemSelectedStyleProps = Required<Pick<IPeoplePickerItemSelectedProps, 'theme'>> & Pick<IPeoplePickerItemSelectedProps, 'className' | 'selected' | 'disabled'> & {\\n    /** Whether it's invalid. */\\n    invalid?: boolean;\\n};\\n\\n/**\\n * Represents the stylable areas of the PeoplePickerItemSelected.\\n * {@docCategory PeoplePicker}\\n */\\nexport declare interface IPeoplePickerItemSelectedStyles {\\n    /** Root element of picked PeoplePicker item */\\n    root: IStyle;\\n    /** Refers to the element holding the content (Persona) of the PeoplePicker item already picked. */\\n    itemContent: IStyle;\\n    /** Refers to the remove action button on a picked PeoplePicker item. */\\n    removeButton: IStyle;\\n    /** SubComponent (Persona, PersonaCoin) styles. */\\n    subComponentStyles: IPeoplePickerItemSelectedSubComponentStyles;\\n}\\n\\n/**\\n * Styles interface of the SubComponents rendered within PeoplePickerItemSelected.\\n * {@docCategory PeoplePicker}\\n */\\nexport declare interface IPeoplePickerItemSelectedSubComponentStyles {\\n    /** Refers to the Persona rendered within the PeoplePickerItemSelected */\\n    persona: IStyleFunctionOrObject<IPersonaStyleProps, any>;\\n    /** Refers to the PersonaCoin in the Persona rendered within the PeoplePickerItemSelected */\\n    personaCoin?: IStyleFunctionOrObject<IPersonaCoinStyleProps, any>;\\n}\\n\\n/**\\n * Common props in between IPeoplePickerItemSelectedProps, IPeoplePickerItemWithMenuProps and\\n * IPeoplePickerItemSuggestionProps.\\n * {@docCategory PeoplePicker}\\n */\\nexport declare interface IPeoplePickerItemSharedProps {\\n    /** Additional CSS class(es) to apply to the PeoplePickerItem root element. */\\n    className?: string;\\n    /** Theme provided by High-Order Component. */\\n    theme?: ITheme;\\n}\\n\\nexport declare interface IPeoplePickerItemState {\\n    contextualMenuVisible: boolean;\\n}\\n\\n/**\\n * PeoplePickerItemSuggestion props interface. Refers to the PeoplePicker items that are suggested for picking.\\n * {@docCategory PeoplePicker}\\n */\\nexport declare interface IPeoplePickerItemSuggestionProps extends IPeoplePickerItemSharedProps {\\n    /** Persona props for each suggested for picking PeoplePicker item. */\\n    personaProps?: IPersonaProps;\\n    /** Call to provide customized styling that will layer on top of the variant rules. */\\n    styles?: IStyleFunctionOrObject<IPeoplePickerItemSuggestionStyleProps, IPeoplePickerItemSuggestionStyles>;\\n    /** General common props for all PeoplePicker items suggestions. */\\n    suggestionsProps?: IBasePickerSuggestionsProps;\\n    /**\\n     * Flag that controls whether each suggested PeoplePicker item (Persona) is rendered with or without secondary text\\n     * for compact look.\\n     * @defaultvalue false\\n     */\\n    compact?: boolean;\\n}\\n\\n/**\\n * Props needed to construct PeoplePickerItemSuggestion styles.\\n * {@docCategory PeoplePicker}\\n */\\nexport declare type IPeoplePickerItemSuggestionStyleProps = Required<Pick<IPeoplePickerItemSuggestionProps, 'theme'>> & Pick<IPeoplePickerItemSuggestionProps, 'className'> & {};\\n\\n/**\\n * Represents the stylable areas of the PeoplePickerItemSuggestion.\\n * {@docCategory PeoplePicker}\\n */\\nexport declare interface IPeoplePickerItemSuggestionStyles {\\n    /** Root container element of a suggested PeoplePicker item. */\\n    root: IStyle;\\n    /** Refers to the element wrapping the Persona of the suggested PeoplePicker item. */\\n    personaWrapper: IStyle;\\n    /** SubComponent (Persona, PersonaCoin) styles. */\\n    subComponentStyles: IPeoplePickerItemSelectedSubComponentStyles;\\n}\\n\\n/**\\n * PeoplePickerItemWithMenu props interface.\\n * @deprecated Do not use. Will be removed in Fabric 7.0\\n */\\nexport declare interface IPeoplePickerItemWithMenuProps extends IPickerItemProps<IPersonaWithMenu> {\\n}\\n\\n/**\\n * PeoplePicker props interface which renders Personas as items.\\n * {@docCategory PeoplePicker}\\n * */\\nexport declare interface IPeoplePickerProps extends IBasePickerProps<IPersonaProps> {\\n}\\n\\n/**\\n * {@docCategory Persona}\\n */\\nexport declare interface IPersona {\\n}\\n\\n/**\\n * {@docCategory Persona}\\n */\\nexport declare interface IPersonaCoinProps extends IPersonaSharedProps {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<{}>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<IPersonaCoinStyleProps, IPersonaCoinStyles>;\\n    /**\\n     * Additional css class to apply to the PersonaCoin\\n     * @defaultvalue undefined\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory Persona}\\n */\\nexport declare interface IPersonaCoinStyleProps {\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Custom class name.\\n     */\\n    className?: string;\\n    /**\\n     * Decides the size of the control.\\n     * @defaultvalue PersonaSize.size48\\n     */\\n    size?: PersonaSize;\\n    /**\\n     * Optional custom persona coin size in pixel.\\n     */\\n    coinSize?: number;\\n    /**\\n     * Decides whether to display coin for unknown persona\\n     */\\n    showUnknownPersonaCoin?: boolean;\\n}\\n\\n/**\\n * {@docCategory Persona}\\n */\\nexport declare interface IPersonaCoinStyles {\\n    coin: IStyle;\\n    imageArea: IStyle;\\n    image: IStyle;\\n    initials: IStyle;\\n    size10WithoutPresenceIcon: IStyle;\\n}\\n\\n/**\\n * {@docCategory Persona}\\n */\\nexport declare interface IPersonaPresenceProps extends IPersonaSharedProps {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<{}>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<IPersonaPresenceStyleProps, IPersonaPresenceStyles>;\\n}\\n\\n/**\\n * {@docCategory Persona}\\n */\\nexport declare type IPersonaPresenceStyleProps = Required<Pick<IPersonaSharedProps, 'theme'>> & Pick<IPersonaSharedProps, 'presence' | 'isOutOfOffice' | 'size' | 'presenceColors'> & Pick<IPersonaProps, 'className'>;\\n\\n/**\\n * {@docCategory Persona}\\n */\\nexport declare interface IPersonaPresenceStyles {\\n    presence: IStyle;\\n    presenceIcon: IStyle;\\n}\\n\\n/**\\n * {@docCategory Persona}\\n */\\nexport declare interface IPersonaProps extends IPersonaSharedProps {\\n    /**\\n     * Optional callback to access the IPersona interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IPersona>;\\n    /**\\n     * Additional CSS class(es) to apply to the Persona\\n     */\\n    className?: string;\\n    /**\\n     * Call to provide customized styling that will layer on top of variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<IPersonaStyleProps, IPersonaStyles>;\\n    /**\\n     * Optional custom renderer for the primary text.\\n     */\\n    onRenderPrimaryText?: IRenderFunction<IPersonaProps>;\\n    /**\\n     * Optional custom renderer for the secondary text.\\n     */\\n    onRenderSecondaryText?: IRenderFunction<IPersonaProps>;\\n    /**\\n     * Optional custom renderer for the tertiary text.\\n     */\\n    onRenderTertiaryText?: IRenderFunction<IPersonaProps>;\\n    /**\\n     * Optional custom renderer for the optional text.\\n     */\\n    onRenderOptionalText?: IRenderFunction<IPersonaProps>;\\n}\\n\\n/**\\n * {@docCategory Persona}\\n */\\nexport declare interface IPersonaSharedProps extends React.HTMLAttributes<PersonaBase | PersonaCoinBase | HTMLDivElement> {\\n    /**\\n     * Primary text to display, usually the name of the person.\\n     */\\n    text?: string;\\n    /**\\n     * Decides the size of the control.\\n     * @defaultvalue PersonaSize.size48\\n     */\\n    size?: PersonaSize;\\n    /**\\n     * Optional custom renderer for the coin\\n     * @deprecated Use `onRenderPersonaCoin` for custom rendering instead\\n     */\\n    onRenderCoin?: IRenderFunction<IPersonaSharedProps>;\\n    /**\\n     * Optional custom renderer for the coin\\n     */\\n    onRenderPersonaCoin?: IRenderFunction<IPersonaSharedProps>;\\n    /**\\n     * If true, adds the css class 'is-fadeIn' to the image.\\n     */\\n    imageShouldFadeIn?: boolean;\\n    /**\\n     * If true, the image starts as visible and is hidden on error. Otherwise, the image is hidden until\\n     * it is successfully loaded. This disables imageShouldFadeIn.\\n     * @defaultvalue false\\n     */\\n    imageShouldStartVisible?: boolean;\\n    /**\\n     * Url to the image to use, should be a square aspect ratio and big enough to fit in the image area.\\n     */\\n    imageUrl?: string;\\n    /**\\n     * Alt text for the image to use. Defaults to an empty string.\\n     */\\n    imageAlt?: string;\\n    /**\\n     * The user's initials to display in the image area when there is no image.\\n     * @defaultvalue [Derived from text]\\n     */\\n    imageInitials?: string;\\n    /**\\n     * Whether initials are calculated for phone numbers and number sequences.\\n     * Example: Set property to true to get initials for project names consisting of numbers only.\\n     * @defaultvalue false\\n     */\\n    allowPhoneInitials?: boolean;\\n    /**\\n     * Optional custom renderer for the initials\\n     */\\n    onRenderInitials?: IRenderFunction<IPersonaSharedProps>;\\n    /**\\n     * Optional callback for when loading state of the photo changes\\n     */\\n    onPhotoLoadingStateChange?: (newImageLoadState: ImageLoadState) => void;\\n    /**\\n     * The background color when the user's initials are displayed.\\n     * @defaultvalue [Derived from text]\\n     */\\n    initialsColor?: PersonaInitialsColor | string;\\n    /**\\n     * The text color when the user's initials are displayed\\n     */\\n    initialsTextColor?: string;\\n    /** The colors to be used for the presence-icon and it's background */\\n    presenceColors?: {\\n        available: string;\\n        away: string;\\n        busy: string;\\n        dnd: string;\\n        offline: string;\\n        oof: string;\\n        background: string;\\n    };\\n    /**\\n     * Presence of the person to display - will not display presence if undefined.\\n     * @defaultvalue PersonaPresence.none\\n     */\\n    presence?: PersonaPresence;\\n    /**\\n     * Presence title to be shown as a tooltip on hover over the presence icon.\\n     */\\n    presenceTitle?: string;\\n    /**\\n     * This flag can be used to signal the persona is out of office.\\n     * This will change the way the presence icon looks for statuses that support dual-presence.\\n     */\\n    isOutOfOffice?: boolean;\\n    /**\\n     * Secondary text to display, usually the role of the user.\\n     */\\n    secondaryText?: string;\\n    /**\\n     * Tertiary text to display, usually the status of the user.\\n     * The tertiary text will only be shown when using size72 or size100.\\n     */\\n    tertiaryText?: string;\\n    /**\\n     * Optional text to display, usually a custom message set. The optional text will only be shown when using size100.\\n     */\\n    optionalText?: string;\\n    /**\\n     * Whether to not render persona details, and just render the persona image/initials.\\n     */\\n    hidePersonaDetails?: boolean;\\n    showSecondaryText?: boolean;\\n    /**\\n     * If true, show the special coin for unknown persona.\\n     * It has '?' in place of initials, with static font and background colors\\n     */\\n    showUnknownPersonaCoin?: boolean;\\n    /**\\n     * If true renders the initials while the image is loading.\\n     * This only applies when an imageUrl is provided.\\n     * @defaultvalue false\\n     */\\n    showInitialsUntilImageLoads?: boolean;\\n    /**\\n     * Optional custom persona coin size in pixel.\\n     */\\n    coinSize?: number;\\n    /**\\n     * Optional HTML element props for Persona coin.\\n     */\\n    coinProps?: IPersonaCoinProps;\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Primary text to display, usually the name of the person.\\n     * @deprecated Use `text` instead.\\n     */\\n    primaryText?: string;\\n}\\n\\nexport declare interface IPersonaState {\\n    isImageLoaded?: boolean;\\n    isImageError?: boolean;\\n}\\n\\n/**\\n * {@docCategory Persona}\\n */\\nexport declare interface IPersonaStyleProps {\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Custom class name.\\n     */\\n    className?: string;\\n    /**\\n     * Optional custom persona coin size in pixel.\\n     */\\n    coinSize?: number;\\n    /**\\n     * Decides the size of the control.\\n     * @defaultvalue PersonaSize.size48\\n     */\\n    size?: PersonaSize;\\n    /**\\n     * Presence of the person to display - will not display presence if undefined.\\n     * @defaultvalue PersonaPresence.none\\n     */\\n    presence?: PersonaPresence;\\n    showSecondaryText?: boolean;\\n}\\n\\n/**\\n * {@docCategory Persona}\\n */\\nexport declare interface IPersonaStyles {\\n    root: IStyle;\\n    details: IStyle;\\n    primaryText: IStyle;\\n    secondaryText: IStyle;\\n    tertiaryText: IStyle;\\n    optionalText: IStyle;\\n    textContent: IStyle;\\n}\\n\\n/**\\n * Extended interface from IPersonaProps to add `menuItems` property PeoplePickerItemWithMenu items.\\n * @deprecated Do not use. Will be removed in Fabric 7.0\\n */\\nexport declare interface IPersonaWithMenu extends IPersonaProps {\\n    /** Additional menuItems to be rendered in a contextualMenu for each Persona. */\\n    menuItems?: IContextualMenuItem[];\\n}\\n\\n/**\\n * Aria id's for internal picker components\\n * {@docCategory Pickers}\\n */\\nexport declare type IPickerAriaIds = {\\n    /**\\n     * Aria id for selected suggestion alert component\\n     */\\n    selectedSuggestionAlert: string;\\n    /**\\n     * Aria id for selected items container component\\n     */\\n    selectedItems: string;\\n    /**\\n     * Aria id for suggestions list component\\n     */\\n    suggestionList: string;\\n    /**\\n     * Aria id for the component that has role=combobox\\n     */\\n    combobox: string;\\n};\\n\\n/**\\n * PickerItem component.\\n * {@docCategory Pickers}\\n */\\nexport declare interface IPickerItem {\\n}\\n\\n/**\\n * PickerItem props common for any type of items.\\n * {@docCategory Pickers}\\n */\\nexport declare interface IPickerItemProps<T> extends React.AllHTMLAttributes<HTMLElement> {\\n    /**\\n     * Optional callback to access the IPickerItem interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IPickerItem>;\\n    /** The item of Type T (Persona, Tag, or any other custom item provided). */\\n    item: T;\\n    /** Index number of the item in the array of picked items. */\\n    index: number;\\n    /** Whether the picked item is selected or not. */\\n    selected?: boolean;\\n    /** Callback issued when the item is removed from the array of picked items. */\\n    onRemoveItem?: () => void;\\n    /**\\n     * Internal Use only, gives a callback to the renderer to call when an item has changed.\\n     * This allows the base picker to keep track of changes in the items.\\n     */\\n    onItemChange?: (item: T, index: number) => void;\\n    /** Unique key for each picked item. */\\n    key?: string | number;\\n    /** Aria-label for the picked item remove button. */\\n    removeButtonAriaLabel?: string;\\n}\\n\\n/**\\n * {@docCategory Pivot}\\n */\\nexport declare interface IPivot {\\n    /**\\n     * Sets focus to the first pivot tab.\\n     */\\n    focus(): void;\\n}\\n\\n/**\\n * {@docCategory Pivot}\\n */\\nexport declare interface IPivotItemProps extends React.HTMLAttributes<HTMLDivElement> {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<{}>;\\n    /**\\n     * The text displayed of each pivot link - renaming to `headerText`.\\n     * @deprecated Use `headerText` instead.\\n     */\\n    linkText?: string;\\n    /**\\n     * The text displayed of each pivot link.\\n     */\\n    headerText?: string;\\n    /**\\n     * Props for the header command button. This provides a way to pass in native props, such as data-* and aria-*,\\n     * for each pivot header/link element.\\n     */\\n    headerButtonProps?: IButtonProps | {\\n        [key: string]: string | number | boolean;\\n    };\\n    /**\\n     * An required key to uniquely identify a pivot item.\\n     *\\n     * Note: The 'key' from react props cannot be used inside component.\\n     */\\n    itemKey?: string;\\n    /**\\n     * The aria label of each pivot link which will read by screen reader instead of linkText.\\n     *\\n     * Note that unless you have compelling requirements you should not override aria-label.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * Defines an optional item count displayed in parentheses just after the `linkText`.\\n     *\\n     * Examples: completed (4), Unread (99+)\\n     */\\n    itemCount?: number | string;\\n    /**\\n     * An optional icon to show next to the pivot link.\\n     */\\n    itemIcon?: string;\\n    /**\\n     * Optional custom renderer for the pivot item link.\\n     */\\n    onRenderItemLink?: IRenderFunction<IPivotItemProps>;\\n    /**\\n     * Optional keytip for this PivotItem.\\n     */\\n    keytipProps?: IKeytipProps;\\n    /**\\n     * Defines whether to always render the pivot item (regardless of whether it is selected or not).\\n     * Useful if you're rendering content that is expensive to mount.\\n     *\\n     * @defaultvalue false\\n     */\\n    alwaysRender?: boolean;\\n}\\n\\n/**\\n * {@docCategory Pivot}\\n */\\nexport declare interface IPivotProps extends React.ClassAttributes<PivotBase>, React.HTMLAttributes<HTMLDivElement> {\\n    /**\\n     * Optional callback to access the IPivot interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IPivot>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IPivotStyleProps, IPivotStyles>;\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Additional css class to apply to the Pivot\\n     * @defaultvalue undefined\\n     */\\n    className?: string;\\n    /**\\n     * Default selected key for the pivot. Only provide this if the pivot is an uncontrolled component;\\n     * otherwise, use the `selectedKey` property.\\n     *\\n     * This property is also mutually exclusive with `defaultSelectedIndex`.\\n     */\\n    defaultSelectedKey?: string;\\n    /**\\n     * Default selected index for the pivot. Only provide this if the pivot is an uncontrolled component;\\n     * otherwise, use the `selectedKey` property.\\n     *\\n     * This property is also mutually exclusive with `defaultSelectedKey`.\\n     *\\n     * @deprecated Use `defaultSelectedKey`\\n     */\\n    defaultSelectedIndex?: number;\\n    /**\\n     * Index of the pivot item initially selected. Mutually exclusive with `initialSelectedKey`.\\n     * Only provide this if the pivot is an uncontrolled component; otherwise, use `selectedKey`.\\n     *\\n     * @deprecated Use `defaultSelectedKey`\\n     */\\n    initialSelectedIndex?: number;\\n    /**\\n     * Key of the pivot item initially selected. Mutually exclusive with `initialSelectedIndex`.\\n     * Only provide this if the pivot is an uncontrolled component; otherwise, use `selectedKey`.\\n     *\\n     * @deprecated Use `defaultSelectedKey`\\n     */\\n    initialSelectedKey?: string;\\n    /**\\n     * Key of the selected pivot item. Updating this will override the Pivot's selected item state.\\n     * Only provide this if the pivot is a controlled component where you are maintaining the\\n     * current state; otherwise, use `defaultSelectedKey`.\\n     */\\n    selectedKey?: string | null;\\n    /**\\n     * Callback for when the selected pivot item is changed.\\n     */\\n    onLinkClick?: (item?: PivotItem, ev?: React.MouseEvent<HTMLElement>) => void;\\n    /**\\n     * PivotLinkSize to use (normal, large)\\n     */\\n    linkSize?: PivotLinkSize;\\n    /**\\n     * PivotLinkFormat to use (links, tabs)\\n     */\\n    linkFormat?: PivotLinkFormat;\\n    /**\\n     * Whether to skip rendering the tabpanel with the content of the selected tab.\\n     * Use this prop if you plan to separately render the tab content\\n     * and don't want to leave an empty tabpanel in the page that may confuse Screen Readers.\\n     */\\n    headersOnly?: boolean;\\n    /**\\n     * Callback to customize how IDs are generated for each tab header.\\n     * Useful if you're rendering content outside and need to connect aria-labelledby.\\n     */\\n    getTabId?: (itemKey: string, index: number) => string;\\n}\\n\\nexport declare interface IPivotState {\\n    selectedKey: string | undefined;\\n}\\n\\n/**\\n * {@docCategory Pivot}\\n */\\nexport declare type IPivotStyleProps = Required<Pick<IPivotProps, 'theme'>> & Pick<IPivotProps, 'className'> & {\\n    /** Indicates whether Pivot has large format. */\\n    rootIsLarge?: boolean;\\n    /** Indicates whether Pivot has tabbed format. */\\n    rootIsTabs?: boolean;\\n    /**\\n     * Indicates whether Pivot link is selected.\\n     * @deprecated Is not populated with valid value. Specify `linkIsSelected` styling instead.\\n     */\\n    linkIsSelected?: boolean;\\n};\\n\\n/**\\n * {@docCategory Pivot}\\n */\\nexport declare interface IPivotStyles {\\n    /**\\n     * Style for the root element.\\n     */\\n    root: IStyle;\\n    link: IStyle;\\n    linkContent: IStyle;\\n    linkIsSelected: IStyle;\\n    text: IStyle;\\n    count: IStyle;\\n    icon: IStyle;\\n    itemContainer?: IStyle;\\n}\\n\\n/**\\n * {@docCategory HoverCard}\\n */\\nexport declare interface IPlainCard {\\n}\\n\\n/**\\n * PlainCard component props.\\n * {@docCategory HoverCard}\\n */\\nexport declare interface IPlainCardProps extends IBaseCardProps<IPlainCard, IPlainCardStyles, IPlainCardStyleProps> {\\n    /**\\n     *  Render function to populate compact content area\\n     */\\n    onRenderPlainCard?: IRenderFunction<any>;\\n}\\n\\n/**\\n * {@docCategory HoverCard}\\n */\\nexport declare interface IPlainCardStyleProps extends IBaseCardStyleProps {\\n}\\n\\n/**\\n * {@docCategory HoverCard}\\n */\\nexport declare interface IPlainCardStyles extends IBaseCardStyles {\\n}\\nexport { IPoint }\\n\\n/**\\n * {@docCategory Popup}\\n */\\nexport declare interface IPopupProps extends React.HTMLAttributes<Popup> {\\n    /**\\n     * Aria role for popup\\n     */\\n    role?: string;\\n    /**\\n     * Accessible label text for the popup.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     *  Defines the element id referencing the element containing label text for popup.\\n     */\\n    ariaLabelledBy?: string;\\n    /**\\n     * Defines the element id referencing the element containing the description for the popup.\\n     */\\n    ariaDescribedBy?: string;\\n    /**\\n     * A callback function for when the popup is dismissed from the close button or light dismiss. If provided, will\\n     * handle escape keypresses and call this. The event will be stopped/canceled.\\n     */\\n    onDismiss?: (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => any;\\n    /**\\n     *  Optional class name for the root popup div.\\n     */\\n    className?: string;\\n    /**\\n     * If true, when this component is unmounted, focus will be restored to the element that had focus when the component\\n     * first mounted.\\n     * @defaultvalue true\\n     * @deprecated use restoreFocus callback instead\\n     */\\n    shouldRestoreFocus?: boolean;\\n    /**\\n     * Called when the component is unmounting, and focus needs to be restored.\\n     * Argument passed down contains two variables, the element that the underlying\\n     * popup believes focus should go to * and whether or not the popup currently\\n     * contains focus. If this is provided, focus will not be restored automatically,\\n     * you'll need to call originalElement.focus()\\n     */\\n    onRestoreFocus?: (options: {\\n        originalElement?: HTMLElement | Window;\\n        containsFocus: boolean;\\n        documentContainsFocus: boolean;\\n    }) => void;\\n}\\n\\nexport declare interface IPopupState {\\n    needsVerticalScrollBar?: boolean;\\n}\\n\\n/**\\n * Gives the position of some element on the page. Only a pair of vertical and horizontal edges need to be\\n * given. So top/left or bottom/left is sufficient.\\n * The number given is the distance in pixels from whatever host was given..\\n * So bottom: 100 would be 100px up from the bottom of the host while top: 100px from the top.\\n */\\nexport declare interface IPosition {\\n    top?: number;\\n    left?: number;\\n    bottom?: number;\\n    right?: number;\\n    [key: string]: number | undefined;\\n}\\n\\nexport declare interface IPositionDirectionalHintData {\\n    targetEdge: RectangleEdge;\\n    alignmentEdge?: RectangleEdge;\\n    isAuto?: boolean;\\n    alignTargetEdge?: boolean;\\n}\\n\\nexport declare interface IPositionedData {\\n    /**\\n     * The new position of the element.\\n     */\\n    elementPosition: IPosition;\\n    /**\\n     * The finalized target edge that element is aligning to. For instance RectangleEdge.bottom would mean\\n     * that the bottom edge of the target is being aligned to by the RectangleEdge.top of the element\\n     * that is being positioned.\\n     */\\n    targetEdge: RectangleEdge;\\n    /**\\n     * The finalized alignment edge that the element is aligning too. For instance, RectangleEdge.left means\\n     * that the left edge of the target should be in line with the left edge of the element being positioned.\\n     */\\n    alignmentEdge?: RectangleEdge;\\n}\\n\\n/**\\n * {@docCategory Coachmark}\\n */\\nexport declare interface IPositioningContainer {\\n}\\n\\n/**\\n * {@docCategory Coachmark}\\n */\\nexport declare interface IPositioningContainerProps extends IBaseProps<IPositioningContainer> {\\n    /**\\n     * All props for your component are to be defined here.\\n     */\\n    componentRef?: IRefObject<IPositioningContainer>;\\n    /**\\n     * The target that the positioningContainer should try to position itself based on.\\n     * It can be either an HTMLElement a querySelector string of a valid HTMLElement\\n     * or a MouseEvent. If MouseEvent is given then the origin point of the event will be used.\\n     */\\n    target?: HTMLElement | string | MouseEvent | Point | null;\\n    /**\\n     * How the element should be positioned\\n     * @defaultvalue DirectionalHint.BottomAutoEdge\\n     */\\n    directionalHint?: DirectionalHint;\\n    /**\\n     * How the element should be positioned in RTL layouts.\\n     * If not specified, a mirror of `directionalHint` will be used instead\\n     */\\n    directionalHintForRTL?: DirectionalHint;\\n    /**\\n     * The gap between the positioningContainer and the target\\n     * @defaultvalue 0\\n     */\\n    offsetFromTarget?: number;\\n    /**\\n     * Custom width for positioningContainer including borders. If value is 0, no width is applied.\\n     * @defaultvalue 0\\n     */\\n    positioningContainerWidth?: number;\\n    /**\\n     * The background color of the positioningContainer in hex format ie. #ffffff.\\n     * @defaultvalue $ms-color-white\\n     */\\n    backgroundColor?: string;\\n    /**\\n     * The bounding rectangle for which the contextual menu can appear in.\\n     */\\n    bounds?: IRectangle;\\n    /**\\n     * The minimum distance the positioningContainer will be away from the edge of the screen.\\n     *  @defaultvalue 8\\n     */\\n    minPagePadding?: number;\\n    /**\\n     * If true use a point rather than rectangle to position the positioningContainer.\\n     * For example it can be used to position based on a click.\\n     * @deprecated Do not use.\\n     */\\n    useTargetPoint?: boolean;\\n    /**\\n     * Point used to position the positioningContainer.\\n     * Deprecated, use `target` instead.\\n     * @deprecated Use `target` instead.\\n     */\\n    targetPoint?: Point;\\n    /**\\n     * If true then the onClose will not not dismiss on scroll\\n     * @defaultvalue false\\n     */\\n    preventDismissOnScroll?: boolean;\\n    /**\\n     * If true the position returned will have the menu element cover the target.\\n     * If false then it will position next to the target;\\n     * @defaultvalue false\\n     */\\n    coverTarget?: boolean;\\n    /**\\n     * Aria role assigned to the positioningContainer (Eg. dialog, alertdialog).\\n     */\\n    role?: string;\\n    /**\\n     * Accessible label text for positioningContainer.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     *  Defines the element id referencing the element containing label text for positioningContainer.\\n     */\\n    ariaLabelledBy?: string;\\n    /**\\n     * Defines the element id referencing the element containing the description for the positioningContainer.\\n     */\\n    ariaDescribedBy?: string;\\n    /**\\n     * CSS class to apply to the positioningContainer.\\n     * @defaultvalue null\\n     */\\n    className?: string;\\n    /**\\n     * Optional callback when the layer content has mounted.\\n     */\\n    onLayerMounted?: () => void;\\n    /**\\n     * Optional callback that is called once the positioningContainer has been correctly positioned.\\n     * @param positions - gives the user information about how the container is positioned such\\n     * as the element position, the target edge, and the alignment edge of the container.\\n     */\\n    onPositioned?: (positions?: IPositionedData) => void;\\n    /**\\n     * Callback when the positioningContainer tries to close.\\n     */\\n    onDismiss?: (ev?: any) => void;\\n    /**\\n     * If true do not render on a new layer. If false render on a new layer.\\n     */\\n    doNotLayer?: boolean;\\n    /**\\n     * If true the position will not change sides in an attempt to fit the positioningContainer within bounds.\\n     * It will still attempt to align it to whatever bounds are given.\\n     * @defaultvalue false\\n     */\\n    directionalHintFixed?: boolean;\\n    /**\\n     * Specify the final height of the content.\\n     * To be used when expanding the content dynamically so that positioningContainer can adjust its position.\\n     */\\n    finalHeight?: number;\\n    /**\\n     * If true then the positioningContainer will attempt to focus the first focusable element that it contains.\\n     * If it doesn't find an element, no focus will be set and the method will return false.\\n     * This means that it's the contents responsibility to either set focus or have\\n     * focusable items.\\n     * @returns True if focus was set, false if it was not.\\n     */\\n    setInitialFocus?: boolean;\\n    /**\\n     * Set max height of positioningContainer\\n     * When not set the positioningContainer will expand with contents up to the bottom of the screen\\n     */\\n    positioningContainerMaxHeight?: number;\\n}\\n\\nexport declare interface IPositioningContainerState {\\n    /**\\n     * Current set of calcualted positions for the outermost parent container.\\n     */\\n    positions?: IPositionedData;\\n    /**\\n     * Tracks the current height offset and updates during\\n     * the height animation when props.finalHeight is specified.\\n     */\\n    heightOffset?: number;\\n}\\n\\n/**\\n * @deprecated Use `IPositioningContainerProps`\\n * {@docCategory Coachmark}\\n */\\nexport declare type IPositioningContainerTypes = IPositioningContainerProps;\\n\\nexport declare interface IPositionProps {\\n    target?: Element | MouseEvent | Point;\\n    /** how the element should be positioned */\\n    directionalHint?: DirectionalHint;\\n    /**\\n     * How the element should be positioned in RTL layouts.\\n     * If not specified, a mirror of `directionalHint` will be used instead\\n     */\\n    directionalHintForRTL?: DirectionalHint;\\n    /** The gap between the callout and the target */\\n    gapSpace?: number;\\n    /**\\n     * The bounding rectangle for which  the contextual menu can appear in.\\n     */\\n    bounds?: IRectangle;\\n    /**\\n     * If true the position returned will have the menu element cover the target.\\n     * If false then it will position next to the target;\\n     */\\n    coverTarget?: boolean;\\n    /**\\n     * If true the position will not change edges in an attempt to fit the rectangle within bounds.\\n     * It will still attempt to align it to whatever bounds are given.\\n     * @defaultvalue false\\n     */\\n    directionalHintFixed?: boolean;\\n    /**\\n     * If true the positioning logic will prefer flipping edges over nudging the rectangle to fit within bounds,\\n     * thus making sure the element align perfectly with target.\\n     */\\n    alignTargetEdge?: boolean;\\n}\\n\\n/**\\n * {@docCategory ProgressIndicator}\\n */\\nexport declare interface IProgressIndicatorProps extends React.ClassAttributes<ProgressIndicatorBase> {\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IProgressIndicatorStyleProps, IProgressIndicatorStyles>;\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Additional css class to apply to the ProgressIndicator\\n     * @defaultvalue undefined\\n     */\\n    className?: string;\\n    /**\\n     * Label to display above the control. May be a string or React virtual elements.\\n     */\\n    label?: React.ReactNode;\\n    /**\\n     * Text describing or supplementing the operation. May be a string or React virtual elements.\\n     */\\n    description?: React.ReactNode;\\n    /**\\n     * Percentage of the operation's completeness, numerically between 0 and 1. If this is not set,\\n     * the indeterminate progress animation will be shown instead.\\n     */\\n    percentComplete?: number;\\n    /**\\n     * Whether or not to hide the progress state.\\n     */\\n    progressHidden?: boolean;\\n    /**\\n     * A render override for the progress track.\\n     */\\n    onRenderProgress?: IRenderFunction<IProgressIndicatorProps>;\\n    /**\\n     * Text alternative of the progress status, used by screen readers for reading the value of the progress.\\n     */\\n    ariaValueText?: string;\\n    /**\\n     * Deprecated at v0.43.0, to be removed at \\\\>= v0.53.0. Use `label` instead.\\n     * @deprecated Use `label` instead.\\n     */\\n    title?: string;\\n    /**\\n     * Height of the ProgressIndicator\\n     * @defaultvalue 2\\n     */\\n    barHeight?: number;\\n}\\n\\n/**\\n * {@docCategory ProgressIndicator}\\n */\\nexport declare interface IProgressIndicatorStyleProps {\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Accept custom classNames\\n     */\\n    className?: string;\\n    indeterminate?: boolean;\\n    barHeight?: number;\\n}\\n\\n/**\\n * {@docCategory ProgressIndicator}\\n */\\nexport declare interface IProgressIndicatorStyles {\\n    /**\\n     * Style for the root element.\\n     */\\n    root: IStyle;\\n    itemName: IStyle;\\n    itemDescription: IStyle;\\n    itemProgress: IStyle;\\n    progressTrack: IStyle;\\n    progressBar: IStyle;\\n}\\n\\n/**\\n * {@docCategory Rating}\\n */\\nexport declare interface IRating {\\n}\\n\\n/**\\n * Rating component props.\\n * {@docCategory Rating}\\n */\\nexport declare interface IRatingProps extends React.AllHTMLAttributes<HTMLElement> {\\n    /**\\n     * Optional callback to access the IRating interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IRating>;\\n    /**\\n     * Selected rating, has to be an integer between min and max\\n     */\\n    rating?: number;\\n    /**\\n     * Minimum rating, defaults to 1, has to be \\\\>= 0\\n     * @deprecated No longer used.\\n     */\\n    min?: number;\\n    /**\\n     * Maximum rating, defaults to 5, has to be \\\\>= min\\n     */\\n    max?: number;\\n    /**\\n     * Allow the rating value to be set to 0 instead of a minimum of 1.\\n     */\\n    allowZeroStars?: boolean;\\n    /**\\n     * Custom icon\\n     * @defaultvalue FavoriteStarFill\\n     */\\n    icon?: string;\\n    /**\\n     * Custom icon for unselected rating elements.\\n     * @defaultvalue FavoriteStar\\n     */\\n    unselectedIcon?: string;\\n    /**\\n     * Optional custom renderer for the star component.\\n     */\\n    onRenderStar?: IRenderFunction<IRatingStarProps>;\\n    /**\\n     * Size of rating, defaults to small\\n     */\\n    size?: RatingSize;\\n    /**\\n     * Callback issued when the rating changes.\\n     */\\n    onChange?: (event: React.FocusEvent<HTMLElement>, rating?: number) => void;\\n    /**\\n     * @deprecated Use `onChange` instead.\\n     */\\n    onChanged?: (rating: number) => void;\\n    /**\\n     * Optional label format for a rating star that will be read by screen readers.\\n     * Can be used like \\\"\\\\{0\\\\} of \\\\{1\\\\} stars selected\\\",\\n     * where \\\\{0\\\\} will be substituted by the current rating and \\\\{1\\\\} will be substituted by the max rating.\\n     * @defaultvalue empty string.\\n     */\\n    ariaLabelFormat?: string;\\n    /**\\n     * Deprecated: Optional id of label describing this instance of Rating.\\n     * @deprecated Use `getAriaLabel` instead.\\n     */\\n    ariaLabelId?: string;\\n    /**\\n     * Optional flag to mark rating control as readOnly\\n     */\\n    readOnly?: boolean;\\n    getAriaLabel?: (rating: number, max: number) => string;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IRatingStyleProps, IRatingStyles>;\\n    /**\\n     * Theme (provided through customization.)\\n     */\\n    theme?: ITheme;\\n}\\n\\nexport declare interface IRatingStarProps extends React.AllHTMLAttributes<HTMLElement> {\\n    fillPercentage: number;\\n    disabled?: boolean;\\n    readOnly?: boolean;\\n    classNames: IProcessedStyleSet<IRatingStyles>;\\n    icon?: string;\\n    starNum?: number;\\n}\\n\\nexport declare interface IRatingState {\\n    rating: number | null | undefined;\\n}\\n\\n/**\\n * {@docCategory Rating}\\n */\\nexport declare interface IRatingStyleProps {\\n    disabled?: boolean;\\n    readOnly?: boolean;\\n    theme: ITheme;\\n}\\n\\n/**\\n * {@docCategory Rating}\\n */\\nexport declare interface IRatingStyles {\\n    root: IStyle;\\n    ratingStar: IStyle;\\n    ratingStarBack: IStyle;\\n    ratingStarFront: IStyle;\\n    ratingButton: IStyle;\\n    ratingStarIsSmall: IStyle;\\n    ratingStarIsLarge: IStyle;\\n    rootIsSmall: IStyle;\\n    rootIsLarge: IStyle;\\n    labelText: IStyle;\\n    ratingFocusZone: IStyle;\\n}\\n\\nexport declare interface IRelativePositions {\\n    calloutPosition: IPosition;\\n    beakPosition: {\\n        position: IPosition | undefined;\\n        display: 'block';\\n    };\\n    directionalClassName: string;\\n    submenuDirection: DirectionalHint;\\n}\\n\\n/**\\n * {@doccategory Nav}\\n */\\nexport declare interface IRenderGroupHeaderProps extends INavLinkGroup {\\n    /**\\n     * Whether or not the group is presently expanded.\\n     */\\n    isExpanded?: boolean;\\n}\\n\\n/**\\n * {@docCategory ResizeGroup}\\n */\\nexport declare interface IResizeGroup {\\n    /**\\n     * Remeasures the available space.\\n     */\\n    remeasure(): void;\\n}\\n\\n/**\\n * {@docCategory ResizeGroup}\\n */\\nexport declare interface IResizeGroupProps extends React.HTMLAttributes<ResizeGroupBase | HTMLElement> {\\n    /**\\n     * Optional callback to access the IResizeGroup interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IResizeGroup>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     * @deprecated Removed to reduce bundle size.  Please use `className` and add css rules to `className` instead.\\n     */\\n    styles?: IStyleFunctionOrObject<IResizeGroupStyleProps, IResizeGroupStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Additional css class to apply to the Component\\n     * @defaultvalue undefined\\n     */\\n    className?: string;\\n    /**\\n     * Direction of this resize group, vertical or horizontal\\n     * @defaultvalue ResizeGroupDirection.horizontal\\n     */\\n    direction?: ResizeGroupDirection;\\n    /**\\n     * Initial data to be passed to the `onRenderData` function. When there is no `onGrowData` provided, this data should\\n     * represent what should be passed to the render function when the parent container of the ResizeGroup is at its\\n     * maximum supported width. A `cacheKey` property may optionally be included as part of the data. Two data objects\\n     * with the same `cacheKey` will be assumed to take up the same width and will prevent measurements.\\n     * The type of `cacheKey` is a string.\\n     */\\n    data: any;\\n    /**\\n     * Function to render the data. Called when rendering the contents to the screen and when\\n     * rendering in a hidden div to measure the size of the contents.\\n     */\\n    onRenderData: (data: any) => JSX.Element;\\n    /**\\n     * Function to be performed on the data in order to reduce its width and make it fit into the given space.\\n     * If there are no more scaling steps to apply, it should return undefined to prevent\\n     * an infinite render loop.\\n     */\\n    onReduceData: (prevData: any) => any;\\n    /**\\n     * Function to be performed on the data in order to increase its width. It is called in scenarios where the\\n     * container has more room than the previous render and we may be able to fit more content. If there are no more\\n     * scaling operations to perform on teh data, it should return undefined to prevent an infinite render loop.\\n     */\\n    onGrowData?: (prevData: any) => any;\\n    /**\\n     * Function to be called every time data is rendered. It provides the data that was actually rendered.\\n     * A use case would be adding telemetry when a particular control is shown in an overflow well or\\n     * dropped as a result of onReduceData or to count the number of renders that an implementation of\\n     * onReduceData triggers.\\n     */\\n    dataDidRender?: (renderedData: any) => void;\\n}\\n\\nexport declare interface IResizeGroupState {\\n    /**\\n     * Final data used to render proper sized component\\n     */\\n    renderedData?: any;\\n    /**\\n     * Data to render in a hidden div for measurement\\n     */\\n    dataToMeasure?: any;\\n    /**\\n     * Set to true when the content container might have new dimensions and should\\n     * be remeasured.\\n     */\\n    measureContainer?: boolean;\\n    /**\\n     * Are we resizing to accommodate having more or less available space?\\n     * The 'grow' direction is when the container may have more room than the last render,\\n     * such as when a window resize occurs. This means we will try to fit more content in the window.\\n     * The 'shrink' direction is when the contents don't fit in the container and we need\\n     * to find a transformation of the data that makes everything fit.\\n     */\\n    resizeDirection?: 'grow' | 'shrink';\\n}\\n\\n/**\\n * {@docCategory ResizeGroup}\\n */\\nexport declare interface IResizeGroupStyleProps {\\n    /**\\n     * Accept theme prop.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Accept custom classNames\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory ResizeGroup}\\n */\\nexport declare interface IResizeGroupStyles {\\n    /**\\n     * Style for the root element.\\n     */\\n    root: IStyle;\\n}\\n\\n/** RGB color with optional alpha value. */\\nexport declare interface IRGB {\\n    /** Red, range 0-255. */\\n    r: number;\\n    /** Green, range 0-255. */\\n    g: number;\\n    /** Blue, range 0-255. */\\n    b: number;\\n    /** Alpha, range 0 (transparent)-100. Usually assumed to be 100 if not specified. */\\n    a?: number;\\n}\\n\\n/**\\n * {@docCategory ScrollablePane}\\n */\\nexport declare interface IScrollablePane {\\n    /** Triggers a layout update for the pane. */\\n    forceLayoutUpdate(): void;\\n    /** Gets the current scroll position of the scrollable pane */\\n    getScrollPosition(): number;\\n}\\n\\nexport declare interface IScrollablePaneContext {\\n    scrollablePane?: {\\n        subscribe: (handler: (container: HTMLElement, stickyContainer: HTMLElement) => void) => void;\\n        unsubscribe: (handler: (container: HTMLElement, stickyContainer: HTMLElement) => void) => void;\\n        addSticky: (sticky: Sticky) => void;\\n        removeSticky: (sticky: Sticky) => void;\\n        updateStickyRefHeights: () => void;\\n        sortSticky: (sticky: Sticky, sortAgain?: boolean) => void;\\n        notifySubscribers: (sort?: boolean) => void;\\n        syncScrollSticky: (sticky: Sticky) => void;\\n    };\\n}\\n\\n/**\\n * {@docCategory ScrollablePane}\\n */\\nexport declare interface IScrollablePaneProps extends React.HTMLAttributes<HTMLElement | ScrollablePaneBase> {\\n    /**\\n     * Optional callback to access the IScrollablePane interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IScrollablePane>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules\\n     */\\n    styles?: IStyleFunctionOrObject<IScrollablePaneStyleProps, IScrollablePaneStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Additional css class to apply to the ScrollablePane\\n     * @defaultvalue undefined\\n     */\\n    className?: string;\\n    /**\\n     * Sets the initial scroll position of the ScrollablePane\\n     */\\n    initialScrollPosition?: number;\\n    scrollbarVisibility?: ScrollbarVisibility;\\n}\\n\\nexport declare interface IScrollablePaneState {\\n    stickyTopHeight: number;\\n    stickyBottomHeight: number;\\n    scrollbarWidth: number;\\n    scrollbarHeight: number;\\n}\\n\\n/**\\n * {@docCategory ScrollablePane}\\n */\\nexport declare interface IScrollablePaneStyleProps {\\n    /**\\n     * Accept theme prop.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Accept custom classNames\\n     */\\n    className?: string;\\n    scrollbarVisibility?: IScrollablePaneProps['scrollbarVisibility'];\\n}\\n\\n/**\\n * {@docCategory ScrollablePane}\\n */\\nexport declare interface IScrollablePaneStyles {\\n    /**\\n     * Style set for the root element.\\n     */\\n    root: IStyle;\\n    /**\\n     * Style set for the stickyAbove element.\\n     */\\n    stickyAbove: IStyle;\\n    /**\\n     * Style set for the stickyBelow element.\\n     */\\n    stickyBelow: IStyle;\\n    /**\\n     * Style set for the stickyBelowItems element.\\n     */\\n    stickyBelowItems: IStyle;\\n    /**\\n     * Style set for the contentContainer element.\\n     */\\n    contentContainer: IStyle;\\n}\\n\\nexport declare function isDark(color: IColor): boolean;\\n\\n/**\\n * {@docCategory SearchBox}\\n */\\nexport declare interface ISearchBox {\\n    /**\\n     * Sets focus inside the search input box.\\n     */\\n    focus(): void;\\n    /**\\n     * Returns whether or not the SearchBox has focus\\n     */\\n    hasFocus(): boolean;\\n}\\n\\n/**\\n * {@docCategory SearchBox}\\n */\\nexport declare interface ISearchBoxProps extends React.InputHTMLAttributes<HTMLInputElement> {\\n    /**\\n     * Optional callback to access the ISearchBox interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<ISearchBox>;\\n    /**\\n     * Placeholder for the search box.\\n     */\\n    placeholder?: string;\\n    /**\\n     * Deprecated. Use `placeholder` instead.\\n     * @deprecated Use `placeholder` instead.\\n     */\\n    labelText?: string;\\n    /**\\n     * Callback function for when the typed input for the SearchBox has changed.\\n     */\\n    onChange?: (event?: React.ChangeEvent<HTMLInputElement>, newValue?: string) => void;\\n    /**\\n     * Callback executed when the user presses enter in the search box.\\n     */\\n    onSearch?: (newValue: any) => void;\\n    /**\\n     * Callback executed when the user clears the search box by either clicking 'X' or hitting escape.\\n     */\\n    onClear?: (ev?: any) => void;\\n    /**\\n     * Callback executed when the user presses escape in the search box.\\n     */\\n    onEscape?: (ev?: any) => void;\\n    /**\\n     * Deprecated at v0.52.2, use `onChange` instead.\\n     * @deprecated Use `onChange` instead.\\n     */\\n    onChanged?: (newValue: any) => void;\\n    /**\\n     * The value of the text in the SearchBox.\\n     */\\n    value?: string;\\n    /**\\n     * The default value of the text in the SearchBox, in the case of an uncontrolled component.\\n     * This prop is being deprecated since so far, uncontrolled behavior has not been implemented.\\n     * @deprecated Not implemented.\\n     */\\n    defaultValue?: string;\\n    /**\\n     * CSS class to apply to the SearchBox.\\n     */\\n    className?: string;\\n    /**\\n     * The aria label of the SearchBox for the benefit of screen readers.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * The props for the clear button.\\n     */\\n    clearButtonProps?: IButtonProps;\\n    /**\\n     * The props for the icon.\\n     */\\n    iconProps?: Pick<IIconProps, Exclude<keyof IIconProps, 'className'>>;\\n    /**\\n     * The role assigned to the root DIV element of the SearchBox, useful for defining a landmark role, such as \\\"search\\\".\\n     */\\n    role?: string;\\n    /**\\n     * Whether or not the SearchBox is underlined.\\n     * @defaultvalue false\\n     */\\n    underlined?: boolean;\\n    /**\\n     * Theme (provided through customization).\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<ISearchBoxStyleProps, ISearchBoxStyles>;\\n    /**\\n     * Whether or not to animate the SearchBox icon on focus.\\n     * @defaultvalue false\\n     */\\n    disableAnimation?: boolean;\\n}\\n\\nexport declare interface ISearchBoxState {\\n    value?: string;\\n    hasFocus?: boolean;\\n}\\n\\n/**\\n * {@docCategory SearchBox}\\n */\\nexport declare interface ISearchBoxStyleProps {\\n    theme: ITheme;\\n    className?: string;\\n    disabled?: boolean;\\n    hasFocus?: boolean;\\n    underlined?: boolean;\\n    hasInput?: boolean;\\n    disableAnimation?: boolean;\\n}\\n\\n/**\\n * {@docCategory SearchBox}\\n */\\nexport declare interface ISearchBoxStyles {\\n    root?: IStyle;\\n    iconContainer?: IStyle;\\n    icon?: IStyle;\\n    field?: IStyle;\\n    clearButton?: IStyle;\\n}\\n\\n/**\\n * - `TComponent` - Component used for reference properties, such as `componentRef`.\\n * - `TListenerElement` - Listener element associated with HTML event callbacks. Optional. If not provided,\\n *   `TComponent` is assumed.\\n * {@docCategory ISelectableDroppableTextProps}\\n */\\nexport declare interface ISelectableDroppableTextProps<TComponent, TListenerElement> extends React.HTMLAttributes<TListenerElement> {\\n    /**\\n     * Optional callback to access the ISelectableDroppableText interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<TComponent>;\\n    /**\\n     * Descriptive label for the ISelectableDroppableText\\n     */\\n    label?: string;\\n    /**\\n     * Aria Label for the ISelectableDroppableText for screen reader users.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * Id of the ISelectableDroppableText\\n     */\\n    id?: string;\\n    /**\\n     * If provided, additional class name to provide on the root element.\\n     */\\n    className?: string;\\n    /**\\n     * The key(s) that will be initially used to set a selected item.\\n     *\\n     * Mutually exclusive with `selectedKey`.\\n     * For Dropdown in multi-select mode, use `defaultSelectedKeys` instead.\\n     */\\n    defaultSelectedKey?: string | number | string[] | number[] | null;\\n    /**\\n     * The key(s) of the selected item. If you provide this, you must maintain selection\\n     * state by observing onChange events and passing a new value in when changed.\\n     * Note that passing in `null` will cause selection to be reset.\\n     *\\n     * Mutually exclusive with `defaultSelectedKey`.\\n     * For Dropdown in multi-select mode, use `selectedKeys` instead.\\n     */\\n    selectedKey?: string | number | string[] | number[] | null;\\n    /**\\n     * Optional prop that indicates if multi-choice selections are allowed or not.\\n     * @defaultvalue false\\n     */\\n    multiSelect?: boolean;\\n    /**\\n     * Collection of options for this ISelectableDroppableText\\n     */\\n    options?: any;\\n    /**\\n     * Optional custom renderer for the ISelectableDroppableText container\\n     */\\n    onRenderContainer?: IRenderFunction<ISelectableDroppableTextProps<TComponent, TListenerElement>>;\\n    /**\\n     * Optional custom renderer for the ISelectableDroppableText list\\n     */\\n    onRenderList?: IRenderFunction<ISelectableDroppableTextProps<TComponent, TListenerElement>>;\\n    /**\\n     * Optional custom renderer for the ISelectableDroppableText options\\n     */\\n    onRenderItem?: IRenderFunction<ISelectableOption>;\\n    /**\\n     * Optional custom renderer for the ISelectableDroppableText option content\\n     */\\n    onRenderOption?: IRenderFunction<ISelectableOption>;\\n    /**\\n     * Callback that is issued when the options callout is dismissed\\n     */\\n    onDismiss?: () => void;\\n    /**\\n     * Whether or not the ISelectableDroppableText is disabled.\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Whether or not the ISelectableDroppableText is required.\\n     */\\n    required?: boolean;\\n    /**\\n     * Custom properties for ISelectableDroppableText's Callout used to render options.\\n     */\\n    calloutProps?: ICalloutProps;\\n    /**\\n     * Custom properties for ISelectableDroppableText's Panel used to render options on small devices.\\n     */\\n    panelProps?: IPanelProps;\\n    /**\\n     * Descriptive label for the ISelectableDroppableText Error Message\\n     */\\n    errorMessage?: string;\\n    /**\\n     * Input placeholder text. Displayed until option is selected.\\n     */\\n    placeholder?: string;\\n    /**\\n     * Whether or not the ComboBox/Dropdown should expand on keyboard focus.\\n     * @defaultvalue false\\n     */\\n    openOnKeyboardFocus?: boolean;\\n}\\n\\nexport declare interface ISelectableOption {\\n    /**\\n     * Arbitrary string associated with this option.\\n     */\\n    key: string | number;\\n    /**\\n     * ID attribute associated with this option\\n     */\\n    id?: string;\\n    /**\\n     * Text to render for this option\\n     */\\n    text: string;\\n    /**\\n     * Title attribute (built in tooltip) for a given option.\\n     */\\n    title?: string;\\n    /**\\n     * Text to render for this option\\n     */\\n    itemType?: SelectableOptionMenuItemType;\\n    /**\\n     * Index for this option\\n     */\\n    index?: number;\\n    /**\\n     * The aria label for the dropdown option. If not present, the `text` will be used.\\n     */\\n    ariaLabel?: string;\\n    /** If option is selected. */\\n    selected?: boolean;\\n    /**\\n     * Whether the option is disabled\\n     * @defaultvalue false\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Defines whether the option is hidden or not.\\n     * @defaultvalue false\\n     */\\n    hidden?: boolean;\\n    /**\\n     * Data available to custom onRender functions.\\n     */\\n    data?: any;\\n}\\n\\nexport declare interface ISelectedItemProps<T> extends IPickerItemProps<T> {\\n    onCopyItem: (item: T) => void;\\n}\\n\\n/**\\n * {@docCategory SelectedPeopleList}\\n */\\nexport declare interface ISelectedPeopleItemProps extends ISelectedItemProps<IExtendedPersonaProps> {\\n    onExpandItem?: () => void;\\n    renderPersonaCoin?: IRenderFunction<IPersonaProps>;\\n    renderPrimaryText?: IRenderFunction<IPersonaProps>;\\n}\\n\\n/**\\n * {@docCategory SelectedPeopleList}\\n */\\nexport declare interface ISelectedPeopleProps extends IBaseSelectedItemsListProps<IExtendedPersonaProps> {\\n    onExpandGroup?: (item: IExtendedPersonaProps) => void;\\n    removeMenuItemText?: string;\\n    copyMenuItemText?: string;\\n    editMenuItemText?: string;\\n    getEditingItemText?: (item: IExtendedPersonaProps) => string;\\n    onRenderFloatingPicker?: React.ComponentType<IBaseFloatingPickerProps<IPersonaProps>>;\\n    floatingPickerProps?: IBaseFloatingPickerProps<IPersonaProps>;\\n}\\nexport { ISelection }\\nexport { ISelectionOptions }\\n\\n/**\\n * {@docCategory Selection}\\n */\\nexport declare interface ISelectionZone {\\n    /**\\n     * Method to ignore subsequent focus.\\n     */\\n    ignoreNextFocus: () => void;\\n}\\n\\n/**\\n * {@docCategory Selection}\\n */\\nexport declare interface ISelectionZoneProps extends React.ClassAttributes<SelectionZone> {\\n    /**\\n     * Reference to the component interface.\\n     */\\n    componentRef?: () => void;\\n    /**\\n     * Required {@link ISelection} instance bound to the {@link SelectionZone}.\\n     */\\n    selection: ISelection;\\n    /**\\n     * @deprecated No longer in use, focus is now managed by {@link FocusZone}.\\n     */\\n    layout?: {};\\n    /**\\n     * The mode of Selection, where the value is one of\\n     * 'none', 'single', or 'multiple'.\\n     *\\n     * @defaultvalue {@link SelectionMode.multiple}\\n     */\\n    selectionMode?: SelectionMode;\\n    /**\\n     * If true, selection is preserved on outer click.\\n     */\\n    selectionPreservedOnEmptyClick?: boolean;\\n    /**\\n     * If true, disables automatic selection on input elements.\\n     */\\n    disableAutoSelectOnInputElements?: boolean;\\n    /**\\n     * If true, modal selection is enabled on touch event.\\n     */\\n    enterModalOnTouch?: boolean;\\n    /**\\n     * Determines whether elements with the attribute `data-selection-touch-invoke` should be used as invocation targets\\n     * for an item if the user is using touch.\\n     *\\n     * @defaultvalue false\\n     */\\n    enableTouchInvocationTarget?: boolean;\\n    /**\\n     * Determines if an item is selected on focus.\\n     *\\n     * @defaultvalue true\\n     */\\n    isSelectedOnFocus?: boolean;\\n    /**\\n     * Optional callback for when an item is\\n     * invoked via ENTER or double-click.\\n     */\\n    onItemInvoked?: (item?: IObjectWithKey, index?: number, ev?: Event) => void;\\n    /**\\n     * Optional callback for when an\\n     * item's contextual menu action occurs.\\n     */\\n    onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\\n    /**\\n     * Additional CSS class(es) to apply to the SelectionZone.\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory Selection}\\n */\\nexport declare interface ISelectionZoneState {\\n    isModal: boolean | undefined;\\n}\\n\\n/**\\n * {@docCategory Separator}\\n */\\nexport declare interface ISeparator {\\n}\\n\\n/**\\n * {@docCategory Separator}\\n */\\nexport declare interface ISeparatorProps extends React.HTMLAttributes<HTMLElement> {\\n    /**\\n     * Theme (provided through customization.)\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<ISeparatorStyleProps, ISeparatorStyles>;\\n    /**\\n     * Whether the element is a vertical separator.\\n     */\\n    vertical?: boolean;\\n    /**\\n     * Where the content should be aligned in the separator.\\n     * @defaultValue 'center'\\n     */\\n    alignContent?: 'start' | 'center' | 'end';\\n}\\n\\n/**\\n * {@docCategory Separator}\\n */\\nexport declare type ISeparatorStyleProps = Required<Pick<ISeparatorProps, 'theme'>> & Pick<ISeparatorProps, 'className' | 'alignContent' | 'vertical'>;\\n\\n/**\\n * {@docCategory Separator}\\n */\\nexport declare interface ISeparatorStyles {\\n    /**\\n     * Style for the root element\\n     */\\n    root: IStyle;\\n    /**\\n     * Style for the content\\n     */\\n    content: IStyle;\\n}\\n\\nexport declare interface IShimmer {\\n}\\n\\n/**\\n * {@docCategory Shimmer}\\n */\\nexport declare interface IShimmerCircle {\\n}\\n\\n/**\\n * ShimmerCircle component props.\\n * {@docCategory Shimmer}\\n */\\nexport declare interface IShimmerCircleProps extends React.AllHTMLAttributes<HTMLElement> {\\n    /**\\n     * Optional callback to access the IShimmerCircle interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IShimmerCircle>;\\n    /**\\n     * Sets the height of the circle.\\n     * @defaultvalue 24px\\n     */\\n    height?: number;\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IShimmerCircleStyleProps, IShimmerCircleStyles>;\\n    /**\\n     * Use to set custom styling of the shimmerCircle borders.\\n     * @deprecated Use `styles` prop to leverage mergeStyle API.\\n     */\\n    borderStyle?: IRawStyle;\\n}\\n\\n/**\\n * Props needed to construct styles.\\n * {@docCategory Shimmer}\\n */\\nexport declare type IShimmerCircleStyleProps = {\\n    /**\\n     * Theme values passed to the component.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Needed to provide a height to the root of the control.\\n     */\\n    height?: number;\\n    /**\\n     * Styles to override borderStyles with custom ones.\\n     * @deprecated in favor of mergeStyles API.\\n     */\\n    borderStyle?: IRawStyle;\\n};\\n\\n/**\\n * Represents the stylable areas of the control.\\n * {@docCategory Shimmer}\\n */\\nexport declare interface IShimmerCircleStyles {\\n    /**\\n     * Root of the ShimmerCircle component.\\n     */\\n    root?: IStyle;\\n    /**\\n     * Style for the circle SVG of the ShimmerCircle component.\\n     */\\n    svg?: IStyle;\\n}\\n\\n/**\\n * Interface describing the possible color customizations of Shimmer.\\n * {@docCategory Shimmer}\\n */\\nexport declare interface IShimmerColors {\\n    /**\\n     * Defines the main background color which is the color you see when the wave is not animating.\\n     * @defaultvalue theme.palette.neutralLight\\n     */\\n    shimmer?: string;\\n    /**\\n     * Defines the tip color of the shimmer wave which gradually gets from and to `shimmer` color.\\n     * @defaultvalue theme.palette.neutralLighter\\n     */\\n    shimmerWave?: string;\\n    /**\\n     * Defines the background color of the space in between and around shimmer elements (borders, gaps and\\n     * rounded corners).\\n     * @defaultvalue theme.palette.white\\n     */\\n    background?: string;\\n}\\n\\n/**\\n * ShimmeredDetailsList props interface\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IShimmeredDetailsListProps extends Omit<IDetailsListProps, 'styles'> {\\n    /**\\n     * DetailsList styles to pass through.\\n     */\\n    detailsListStyles?: IDetailsListProps['styles'];\\n    /**\\n     * Boolean flag to control when to render placeholders vs real items.\\n     * It's up to the consumer app to know when fetching of the data is done to toggle this prop.\\n     */\\n    enableShimmer?: boolean;\\n    /**\\n     * Aria label for shimmer. Set on grid while shimmer is enabled.\\n     */\\n    ariaLabelForShimmer?: string;\\n    /**\\n     * Determines whether to remove a fading out to bottom overlay over the shimmering items\\n     * used to further emphasize the unknown number of items that will be fetched.\\n     */\\n    removeFadingOverlay?: boolean;\\n    /**\\n     * Custom placeholder renderer to be used when in need to override the default placeholder of a DetailsRow.\\n     * `rowProps` argument is passed to leverage the calculated column measurements done by DetailsList\\n     * or you can use the optional arguments of item `index` and `defaultRender` to execute additional\\n     * logic before rendering the default placeholder.\\n     */\\n    onRenderCustomPlaceholder?: (rowProps: IDetailsRowProps, index?: number, defaultRender?: (props: IDetailsRowProps) => React.ReactNode) => React.ReactNode;\\n    /**\\n     * Custom styles to override the styles specific to the ShimmeredDetailsList root area.\\n     * @deprecated Use `styles` prop instead. Any value provided will be ignored.\\n     */\\n    shimmerOverlayStyles?: IStyleFunctionOrObject<IShimmeredDetailsListStyleProps, IShimmeredDetailsListStyles>;\\n    /**\\n     * Custom styles to override the styles specific to the ShimmeredDetailsList root area.\\n     */\\n    styles?: IStyleFunctionOrObject<IShimmeredDetailsListStyleProps, IShimmeredDetailsListStyles>;\\n    /**\\n     * Number of shimmer placeholder lines to render.\\n     * @defaultvalue 10\\n     */\\n    shimmerLines?: number;\\n}\\n\\n/**\\n * Defines props needed to construct styles.\\n * This represents the simplified set of immutable things which control the class names.\\n * {@docCategory DetailsList}\\n */\\nexport declare type IShimmeredDetailsListStyleProps = Required<Pick<IShimmeredDetailsListProps, 'theme'>>;\\n\\n/**\\n * Represents the stylable areas of the control.\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IShimmeredDetailsListStyles {\\n    /**\\n     * Represents styles passed to the `List` component for creating a fade-out to the bottom overlay.\\n     */\\n    root: IStyle;\\n}\\n\\n/**\\n * Shimmer Elements Interface representing all common properties between Gap, Circle and Line.\\n * {@docCategory Shimmer}\\n */\\nexport declare interface IShimmerElement {\\n    /**\\n     * Represents the possible type of the shimmer elements: Gap, Circle, Line.\\n     * Required for every element you intend to use.\\n     */\\n    type: ShimmerElementType;\\n    /**\\n     * Sets the height of the element (ICircle, ILine, IGap) in pixels.\\n     * Read more details for each specific element.\\n     */\\n    height?: number;\\n    /**\\n     * Sets the width value of the element (ILine, IGap) in pixels.\\n     * Read more details for each specific element.\\n     */\\n    width?: number | string;\\n    /**\\n     * Sets vertical alignment of the element (ICircle, ILine).\\n     * @defaultvalue center\\n     */\\n    verticalAlign?: 'top' | 'center' | 'bottom';\\n}\\n\\n/**\\n * {@docCategory Shimmer}\\n */\\nexport declare interface IShimmerElementsGroup {\\n}\\n\\n/**\\n * ShimmerElementsGroup component props.\\n * {@docCategory Shimmer}\\n */\\nexport declare interface IShimmerElementsGroupProps extends React.AllHTMLAttributes<HTMLElement> {\\n    /**\\n     * Optional callback to access the IShimmerElementsGroup interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IShimmerElementsGroup>;\\n    /**\\n     * Optional maximum row height of the shimmerElements container.\\n     */\\n    rowHeight?: number;\\n    /**\\n     * Elements to render in one group of the Shimmer.\\n     */\\n    shimmerElements?: IShimmerElement[];\\n    /**\\n     * Optional boolean for enabling flexWrap of the container containing the shimmerElements.\\n     * @defaultvalue false\\n     */\\n    flexWrap?: boolean;\\n    /**\\n     * Optional width for ShimmerElements container.\\n     */\\n    width?: string;\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Defines the background color of the space in between and around shimmer elements.\\n     * @defaultvalue theme.palette.white\\n     */\\n    backgroundColor?: string;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles>;\\n}\\n\\n/**\\n * Props needed to construct styles.\\n * {@docCategory Shimmer}\\n */\\nexport declare interface IShimmerElementsGroupStyleProps {\\n    /**\\n     * Boolean flag to notify whether the root element needs to flex wrap.\\n     */\\n    flexWrap?: boolean;\\n    /** Theme provided by High-Order Component. */\\n    theme: ITheme;\\n}\\n\\n/**\\n * Represents the stylable areas of the control.\\n * {@docCategory Shimmer}\\n */\\nexport declare interface IShimmerElementsGroupStyles {\\n    /**\\n     * Represents the wrapper root element holding all elements inside.\\n     */\\n    root?: IStyle;\\n}\\n\\n/**\\n * {@docCategory Shimmer}\\n */\\nexport declare interface IShimmerGap {\\n}\\n\\n/**\\n * ShimmerGap component props.\\n * {@docCategory Shimmer}\\n */\\nexport declare interface IShimmerGapProps extends React.AllHTMLAttributes<HTMLElement> {\\n    /**\\n     * Optional callback to access the IShimmerGap interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IShimmerGap>;\\n    /**\\n     * Sets the height of the gap.\\n     * @defaultvalue 16px\\n     */\\n    height?: number;\\n    /**\\n     * Sets width value of the gap.\\n     * @defaultvalue 10px\\n     */\\n    width?: number | string;\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IShimmerGapStyleProps, IShimmerGapStyles>;\\n    /**\\n     * Use to set custom styling of the shimmerGap borders.\\n     * @deprecated Use `styles` prop to leverage mergeStyle API.\\n     */\\n    borderStyle?: IRawStyle;\\n}\\n\\n/**\\n * Props needed to construct styles.\\n * {@docCategory Shimmer}\\n */\\nexport declare type IShimmerGapStyleProps = {\\n    /**\\n     * Theme values passed to the component.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Needed to provide a height to the root of the control.\\n     */\\n    height?: number;\\n    /**\\n     * Styles to override borderStyles with custom ones.\\n     * @deprecated in favor of mergeStyles API.\\n     */\\n    borderStyle?: IRawStyle;\\n};\\n\\n/**\\n * Represents the stylable areas of the control.\\n * {@docCategory Shimmer}\\n */\\nexport declare interface IShimmerGapStyles {\\n    /**\\n     * Root of the ShimmerGap component.\\n     */\\n    root?: IStyle;\\n}\\n\\n/**\\n * {@docCategory Shimmer}\\n */\\nexport declare interface IShimmerLine {\\n}\\n\\n/**\\n * ShimmerLine component props.\\n * {@docCategory Shimmer}\\n */\\nexport declare interface IShimmerLineProps extends React.AllHTMLAttributes<HTMLElement> {\\n    /**\\n     * Optional callback to access the IShimmerLine interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IShimmerLine>;\\n    /**\\n     * Sets the height of the rectangle.\\n     * @defaultvalue 16px\\n     */\\n    height?: number;\\n    /**\\n     * Sets width value of the line.\\n     * @defaultvalue 100%\\n     */\\n    width?: number | string;\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IShimmerLineStyleProps, IShimmerLineStyles>;\\n    /**\\n     * Use to set custom styling of the shimmerLine borders.\\n     * @deprecated Use `styles` prop to leverage mergeStyle API.\\n     */\\n    borderStyle?: IRawStyle;\\n}\\n\\n/**\\n * Props needed to construct styles.\\n * {@docCategory Shimmer}\\n */\\nexport declare type IShimmerLineStyleProps = {\\n    /**\\n     * Theme values passed to the component.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Needed to provide a height to the root of the control.\\n     */\\n    height?: number;\\n    /**\\n     * Styles to override borderStyles with custom ones.\\n     * @deprecated in favor of mergeStyles API.\\n     */\\n    borderStyle?: IRawStyle;\\n};\\n\\n/**\\n * Represents the stylable areas of the control.\\n * {@docCategory Shimmer}\\n */\\nexport declare interface IShimmerLineStyles {\\n    /**\\n     * Root of the ShimmerLine component.\\n     */\\n    root?: IStyle;\\n    /**\\n     * Top-left corner SVG of the ShimmerLine component.\\n     */\\n    topLeftCorner?: IStyle;\\n    /**\\n     * Top-right corner SVG of the ShimmerLine component.\\n     */\\n    topRightCorner?: IStyle;\\n    /**\\n     * Bottom-right corner SVG of the ShimmerLine component.\\n     */\\n    bottomRightCorner?: IStyle;\\n    /**\\n     * Bottom-left corner SVG of the ShimmerLine component.\\n     */\\n    bottomLeftCorner?: IStyle;\\n}\\n\\n/**\\n * Shimmer component props.\\n * {@docCategory Shimmer}\\n */\\nexport declare interface IShimmerProps extends React.AllHTMLAttributes<HTMLElement> {\\n    /**\\n     * @deprecated No longer used.\\n     */\\n    componentRef?: IRefObject<IShimmer>;\\n    /**\\n     * Sets the width value of the shimmer wave wrapper.\\n     * @defaultvalue 100%\\n     */\\n    width?: number | string;\\n    /**\\n     * Controls when the shimmer is swapped with actual data through an animated transition.\\n     * @defaultvalue false\\n     */\\n    isDataLoaded?: boolean;\\n    /**\\n     * Elements to render in one line of the Shimmer.\\n     */\\n    shimmerElements?: IShimmerElement[];\\n    /**\\n     * Custom elements when necessary to build complex placeholder skeletons.\\n     */\\n    customElementsGroup?: React.ReactNode;\\n    /**\\n     * Localized string of the status label for screen reader\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<IShimmerStyleProps, IShimmerStyles>;\\n    /**\\n     * Additional CSS class(es) to apply to the Shimmer container.\\n     */\\n    className?: string;\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Defines an object with possible colors to pass for Shimmer customization used on different backgrounds.\\n     */\\n    shimmerColors?: IShimmerColors;\\n}\\n\\nexport declare interface IShimmerState {\\n    /**\\n     * Flag for knowing when to remove the shimmerWrapper from the DOM.\\n     */\\n    contentLoaded?: boolean;\\n}\\n\\n/**\\n * Defines props needed to construct styles.\\n * This represents the simplified set of immutable things which control the class names.\\n * {@docCategory Shimmer}\\n */\\nexport declare interface IShimmerStyleProps {\\n    /** Boolean flag to trigger fadeIn/fadeOut transition animation when content is loaded. */\\n    isDataLoaded?: boolean;\\n    /** Optional CSS class name for the component attached to the root stylable area. */\\n    className?: string;\\n    /** Theme provided by High-Order Component. */\\n    theme: ITheme;\\n    /** Interval in milliseconds for the adeIn/fadeOut transition animation. */\\n    transitionAnimationInterval?: number;\\n    /** Color to be used as the main background color of Shimmer when not animating. */\\n    shimmerColor?: string;\\n    /** Tip color of the shimmer wave which gradually gets from and to `shimmerColor`. */\\n    shimmerWaveColor?: string;\\n}\\n\\n/**\\n * Represents the stylable areas of the control.\\n * {@docCategory Shimmer}\\n */\\nexport declare interface IShimmerStyles {\\n    /** Refers to the root wrapper element. */\\n    root?: IStyle;\\n    /** Refers to wrapper element of the shimmer only. */\\n    shimmerWrapper?: IStyle;\\n    /** Refers to gradient element of the shimmer animation only. */\\n    shimmerGradient?: IStyle;\\n    /** Refers to wrapper element of the children only. */\\n    dataWrapper?: IStyle;\\n    /** Styles for the hidden helper element to aid with screen readers. */\\n    screenReaderText?: IStyle;\\n}\\n\\n/**\\n * {@docCategory Slider}\\n */\\nexport declare interface ISlider {\\n    value: number | undefined;\\n    focus: () => void;\\n    range: [number, number] | undefined;\\n}\\n\\n/**\\n * {@docCategory Slider}\\n */\\nexport declare interface ISliderProps extends React.ClassAttributes<SliderBase> {\\n    /**\\n     * Optional callback to access the ISlider interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<ISlider>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<ISliderStyleProps, ISliderStyles>;\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Description label of the Slider\\n     */\\n    label?: string;\\n    /**\\n     * The initial value of the Slider. Use this if you intend for the Slider to be an uncontrolled component.\\n     * This value is mutually exclusive to value. Use one or the other.\\n     */\\n    defaultValue?: number;\\n    /**\\n     * The initial value of the Slider. Use this if you intend to pass in a new value as a result of onChange events.\\n     * This value is mutually exclusive to defaultValue. Use one or the other.\\n     */\\n    value?: number;\\n    /**\\n     * The initial lower value of the Slider if ranged is true. Use this if you intend for the Slider to be an\\n     * uncontrolled component. This value is mutually exclusive to lowerValue. Use one or the other.\\n     */\\n    defaultLowerValue?: number;\\n    /**\\n     * The initial lower value of the Slider if ranged is true. Use this if you intend to pass in a new value as a\\n     * result of onChange events. This value is mutually exclusive to defaultLowerValue. Use one or the other.\\n     */\\n    lowerValue?: number;\\n    /**\\n     * The min value of the Slider\\n     * @defaultvalue 0\\n     */\\n    min?: number;\\n    /**\\n     * The max value of the Slider\\n     * @defaultvalue 10\\n     */\\n    max?: number;\\n    /**\\n     * The difference between the two adjacent values of the Slider\\n     * @defaultvalue 1\\n     */\\n    step?: number;\\n    /**\\n     * Whether to show the value on the right of the Slider.\\n     * @defaultvalue true\\n     */\\n    showValue?: boolean;\\n    /**\\n     * Callback when the value has been changed.\\n     * If `ranged` is true, `value` is the upper value, and `range` contains the lower and upper bounds of the range.\\n     */\\n    onChange?: (value: number, range?: [number, number]) => void;\\n    /**\\n     * Callback on mouse up or touch end\\n     */\\n    onChanged?: (event: MouseEvent | TouchEvent | KeyboardEvent, value: number) => void;\\n    /**\\n     * A description of the Slider for the benefit of screen readers.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * If `ranged` is true, display two thumbs that allow the lower and upper bounds of a range to be selected.\\n     * The lower bound is defined by `lowerValue`, and the upper bound is defined by `value`.\\n     */\\n    ranged?: boolean;\\n    /**\\n     * A text description of the Slider number value for the benefit of screen readers.\\n     * This should be used when the Slider number value is not accurately represented by a number.\\n     */\\n    ariaValueText?: (value: number) => string;\\n    /**\\n     * Optional flag to render the slider vertically. Defaults to rendering horizontal.\\n     */\\n    vertical?: boolean;\\n    /**\\n     * Optional flag to render the Slider as disabled.\\n     * @defaultvalue false\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Optional flag to decide that thumb will snap to closest value while moving the slider\\n     * @defaultvalue false\\n     */\\n    snapToStep?: boolean;\\n    /**\\n     * Optional className to attach to the slider root element.\\n     */\\n    className?: string;\\n    /**\\n     * Optional mixin for additional props on the thumb button within the slider.\\n     */\\n    buttonProps?: React.HTMLAttributes<HTMLButtonElement>;\\n    /**\\n     * Optional function to format the slider value.\\n     */\\n    valueFormat?: (value: number) => string;\\n    /**\\n     * Optional flag to attach the origin of slider to zero. Helpful when the range include negatives.\\n     * @defaultvalue false\\n     */\\n    originFromZero?: boolean;\\n}\\n\\nexport declare interface ISliderState {\\n    value?: number;\\n    lowerValue?: number;\\n    renderedValue?: number;\\n    renderedLowerValue?: number;\\n}\\n\\n/**\\n * {@docCategory Slider}\\n */\\nexport declare type ISliderStyleProps = Required<Pick<ISliderProps, 'theme'>> & Pick<ISliderProps, 'className' | 'disabled' | 'vertical' | 'ranged'> & {\\n    showTransitions?: boolean;\\n    showValue?: boolean;\\n    titleLabelClassName?: string;\\n};\\n\\n/**\\n * {@docCategory Slider}\\n */\\nexport declare interface ISliderStyles {\\n    /**\\n     * Style set for the root element.\\n     */\\n    root: IStyle;\\n    /**\\n     * Style set for the title label above the slider.\\n     */\\n    titleLabel: IStyle;\\n    /**\\n     * Style set for the container of the slider.\\n     */\\n    container: IStyle;\\n    /**\\n     * Style set for the actual box containting interactive elements of the slider.\\n     */\\n    slideBox: IStyle;\\n    /**\\n     * Style set for element that contains all the lines.\\n     */\\n    line: IStyle;\\n    /**\\n     * Style set for thumb of the slider.\\n     */\\n    thumb: IStyle;\\n    /**\\n     * Style set for both active and inactive sections of the line.\\n     */\\n    lineContainer: IStyle;\\n    /**\\n     * Style set for active portion of the line.\\n     */\\n    activeSection: IStyle;\\n    /**\\n     * Style set for inactive portion of the line.\\n     */\\n    inactiveSection: IStyle;\\n    /**\\n     * Style set for value label on right/below of the slider.\\n     */\\n    valueLabel: IStyle;\\n    /**\\n     * Style set for tick on 0 on number line. This element only shows up when originFromZero prop is true.\\n     */\\n    zeroTick: IStyle;\\n}\\n\\n/**\\n * {@docCategory SpinButton}\\n */\\nexport declare interface ISpinButton {\\n    /**\\n     * Current value of the control.\\n     */\\n    value?: string;\\n    /**\\n     * Sets focus to the control.\\n     */\\n    focus: () => void;\\n}\\n\\n/**\\n * {@docCategory SpinButton}\\n */\\nexport declare interface ISpinButtonClassNames {\\n    root: string;\\n    labelWrapper: string;\\n    icon: string;\\n    label: string;\\n    spinButtonWrapper: string;\\n    input: string;\\n    arrowBox: string;\\n}\\n\\n/**\\n * {@docCategory SpinButton}\\n */\\nexport declare interface ISpinButtonProps extends React.HTMLAttributes<HTMLDivElement> {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<ISpinButton>;\\n    /**\\n     * Initial value of the control. Updates to this prop will not be respected.\\n     *\\n     * Use this if you intend for the SpinButton to be an uncontrolled component which maintains its own value.\\n     * Mutually exclusive with `value`.\\n     * @defaultvalue 0\\n     */\\n    defaultValue?: string;\\n    /**\\n     * Current value of the control.\\n     *\\n     * Use this if you intend to pass in a new value as a result of change events.\\n     * Mutually exclusive with `defaultValue`.\\n     */\\n    value?: string;\\n    /**\\n     * Min value of the control.\\n     * @defaultvalue 0\\n     */\\n    min?: number;\\n    /**\\n     * Max value of the control.\\n     * @defaultvalue 100\\n     */\\n    max?: number;\\n    /**\\n     * Difference between two adjacent values of the control.\\n     * This value is used to calculate the precision of the input if no `precision` is given.\\n     * The precision calculated this way will always be \\\\>= 0.\\n     * @defaultvalue 1\\n     */\\n    step?: number;\\n    /**\\n     * A description of the control for the benefit of screen reader users.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * ID of a label which describes the control, if not using the default label.\\n     */\\n    ariaDescribedBy?: string;\\n    /**\\n     * A more descriptive title for the control, visible on its tooltip.\\n     */\\n    title?: string;\\n    /**\\n     * Whether or not the control is disabled.\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Custom className for the control.\\n     */\\n    className?: string;\\n    /**\\n     * Descriptive label for the control.\\n     */\\n    label?: string;\\n    /**\\n     * Where to position the control's label.\\n     * @defaultvalue Left\\n     */\\n    labelPosition?: Position;\\n    /**\\n     * Props for an icon to display alongside the control's label.\\n     */\\n    iconProps?: IIconProps;\\n    /**\\n     * Callback for when the entered value should be validated.\\n     * @param value - The entered value to validate\\n     * @param event - The event that triggered this validate, if any (for accessibility)\\n     * @returns If a string is returned, it will be used as the new value\\n     */\\n    onValidate?: (value: string, event?: React.SyntheticEvent<HTMLElement>) => string | void;\\n    /**\\n     * Callback for when the increment button or up arrow key is pressed.\\n     * @param value - The current value to be incremented\\n     * @param event - The event that triggered this increment\\n     * @returns If a string is returned, it will be used as the new value\\n     */\\n    onIncrement?: (value: string, event?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => string | void;\\n    /**\\n     * Callback for when the decrement button or down arrow key is pressed.\\n     * @param value - The current value to be decremented\\n     * @param event - The event that triggered this decrement\\n     * @returns If a string is returned, it will be used as the new value\\n     */\\n    onDecrement?: (value: string, event?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => string | void;\\n    /**\\n     * Callback for when the user focuses the control.\\n     */\\n    onFocus?: React.FocusEventHandler<HTMLInputElement>;\\n    /**\\n     * Callback for when the control loses focus.\\n     */\\n    onBlur?: React.FocusEventHandler<HTMLInputElement>;\\n    /**\\n     * Custom props for the increment button.\\n     */\\n    incrementButtonIcon?: IIconProps;\\n    /**\\n     * Custom props for the decrement button.\\n     */\\n    decrementButtonIcon?: IIconProps;\\n    /**\\n     * Custom styling for individual elements within the control.\\n     */\\n    styles?: Partial<ISpinButtonStyles>;\\n    /**\\n     * Custom function for providing the classNames for the control. Can be used to provide\\n     * all styles for the component instead of applying them on top of the default styles.\\n     */\\n    getClassNames?: (theme: ITheme, disabled: boolean, isFocused: boolean, keyboardSpinDirection: KeyboardSpinDirection, labelPosition?: Position, className?: string) => ISpinButtonClassNames;\\n    /**\\n     * Custom styles for the up arrow button.\\n     *\\n     * Note: The buttons are in a checked state when arrow keys are used to incremenent/decrement\\n     * the SpinButton. Use `rootChecked` instead of `rootPressed` for styling when that is the case.\\n     */\\n    upArrowButtonStyles?: Partial<IButtonStyles>;\\n    /**\\n     * Custom styles for the down arrow button.\\n     *\\n     * Note: The buttons are in a checked state when arrow keys are used to incremenent/decrement\\n     * the SpinButton. Use `rootChecked` instead of `rootPressed` for styling when that is the case.\\n     */\\n    downArrowButtonStyles?: Partial<IButtonStyles>;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Accessible label text for the increment button (for screen reader users).\\n     */\\n    incrementButtonAriaLabel?: string;\\n    /**\\n     * Accessible label text for the decrement button (for screen reader users).\\n     */\\n    decrementButtonAriaLabel?: string;\\n    /**\\n     * How many decimal places the value should be rounded to.\\n     *\\n     * The default is calculated based on the precision of `step`: i.e. if step = 1, precision = 0.\\n     * step = 0.0089, precision = 4. step = 300, precision = 2. step = 23.00, precision = 2.\\n     */\\n    precision?: number;\\n    /**\\n     * The position in the parent set (if in a set).\\n     */\\n    ariaPositionInSet?: number;\\n    /**\\n     * The total size of the parent set (if in a set).\\n     */\\n    ariaSetSize?: number;\\n    /**\\n     * Sets the control's aria-valuenow. This is the numeric form of `value`.\\n     * Providing this only makes sense when using as a controlled component.\\n     */\\n    ariaValueNow?: number;\\n    ariaValueText?: string;\\n    /**\\n     * Keytip for the control.\\n     */\\n    keytipProps?: IKeytipProps;\\n    /**\\n     * Additional props for the input field.\\n     */\\n    inputProps?: React.InputHTMLAttributes<HTMLElement | HTMLInputElement>;\\n    /**\\n     * Additional props for the up and down arrow buttons.\\n     */\\n    iconButtonProps?: IButtonProps;\\n}\\n\\nexport declare interface ISpinButtonState {\\n    /**\\n     * Is true when the control has focus.\\n     */\\n    isFocused: boolean;\\n    /**\\n     * the value of the spin button\\n     */\\n    value: string;\\n    /**\\n     * keyboard spin direction, used to style the up or down button\\n     * as active when up/down arrow is pressed\\n     */\\n    keyboardSpinDirection: KeyboardSpinDirection;\\n}\\n\\n/**\\n * {@docCategory SpinButton}\\n */\\nexport declare interface ISpinButtonStyles {\\n    /**\\n     * Styles for the root of the component.\\n     */\\n    root: IStyle;\\n    /**\\n     * Style for the label wrapper element, which contains the icon and label.\\n     */\\n    labelWrapper: IStyle;\\n    /**\\n     * Style override when the label is positioned at the start.\\n     */\\n    labelWrapperStart: IStyle;\\n    /**\\n     * Style override when the label is positioned at the end.\\n     */\\n    labelWrapperEnd: IStyle;\\n    /**\\n     * Style override when the label is positioned at the top.\\n     */\\n    labelWrapperTop: IStyle;\\n    /**\\n     * Style override when the label is positioned at the bottom.\\n     */\\n    labelWrapperBottom: IStyle;\\n    /**\\n     * Style for the icon.\\n     */\\n    icon: IStyle;\\n    /**\\n     * Style for the icon when the control is disabled.\\n     */\\n    iconDisabled: IStyle;\\n    /**\\n     * Style for the label text.\\n     */\\n    label: IStyle;\\n    /**\\n     * Style for the label text when the control is disabled.\\n     * @deprecated Disabled styles taken care by `Label` component.\\n     */\\n    labelDisabled: IStyle;\\n    /**\\n     * Style for the wrapper element of the input field and arrow buttons.\\n     */\\n    spinButtonWrapper: IStyle;\\n    /**\\n     * Style override when label is positioned at the top/bottom.\\n     */\\n    spinButtonWrapperTopBottom: IStyle;\\n    /**\\n     * Style override when control is enabled/hovered.\\n     */\\n    spinButtonWrapperHovered: IStyle;\\n    /**\\n     * Style override when SpinButton is enabled/focused.\\n     */\\n    spinButtonWrapperFocused: IStyle;\\n    /**\\n     * Style override when control is disabled.\\n     */\\n    spinButtonWrapperDisabled: IStyle;\\n    /**\\n     * Styles for the input.\\n     */\\n    input: IStyle;\\n    /**\\n     * Style override for ::selection\\n     */\\n    inputTextSelected: IStyle;\\n    /**\\n     * Style override when control is disabled.\\n     */\\n    inputDisabled: IStyle;\\n    /**\\n     * Styles for the arrowButtonsContainer\\n     */\\n    arrowButtonsContainer: IStyle;\\n    /**\\n     * Style override for the arrowButtonsContainer when control is disabled.\\n     */\\n    arrowButtonsContainerDisabled: IStyle;\\n}\\n\\n/**\\n * {@docCategory Spinner}\\n */\\nexport declare interface ISpinner {\\n}\\n\\n/**\\n * Spinner component props.\\n * {@docCategory Spinner}\\n */\\nexport declare interface ISpinnerProps extends React.HTMLAttributes<HTMLElement> {\\n    /**\\n     * Optional callback to access the ISpinner interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<ISpinner>;\\n    /**\\n     * Deprecated and will be removed at \\\\>= 2.0.0. Use `SpinnerSize` instead.\\n     * @deprecated Use `SpinnerSize` instead.\\n     */\\n    type?: SpinnerType;\\n    /**\\n     * The size of Spinner to render. \\\\{ extraSmall, small, medium, large \\\\}\\n     * @defaultvalue SpinnerType.medium\\n     */\\n    size?: SpinnerSize;\\n    /**\\n     * The label to show next to the Spinner. Label updates will be announced to the screen readers.\\n     * Use ariaLive to control politeness level.\\n     */\\n    label?: string;\\n    /**\\n     * Additional CSS class(es) to apply to the Spinner.\\n     */\\n    className?: string;\\n    /**\\n     * Politeness setting for label update announcement.\\n     * @defaultvalue polite\\n     */\\n    ariaLive?: 'assertive' | 'polite' | 'off';\\n    /**\\n     * Alternative status label for screen reader\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * Theme (provided through customization.)\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<ISpinnerStyleProps, ISpinnerStyles>;\\n    /**\\n     * The position of the label in regards of the spinner animation.\\n     * @defaultvalue SpinnerLabelPosition.bottom\\n     */\\n    labelPosition?: SpinnerLabelPosition;\\n}\\n\\n/**\\n * The props needed to construct styles.\\n * This represents the simplified set of immutable things which control the class names.\\n * {@docCategory Spinner}\\n */\\nexport declare interface ISpinnerStyleProps {\\n    /** Theme provided by High-Order Component. */\\n    theme: ITheme;\\n    /** Size of the spinner animation. */\\n    size?: SpinnerSize;\\n    /** CSS class name for the component attached to the root stylable area. */\\n    className?: string;\\n    /** Position of the label in regards to the spinner animation. */\\n    labelPosition?: SpinnerLabelPosition;\\n}\\n\\n/**\\n * Represents the stylable areas of the control.\\n * {@docCategory Spinner}\\n */\\nexport declare interface ISpinnerStyles {\\n    /** Styles for the root element. Refers to the wrapper containing both the circle and the label. */\\n    root?: IStyle;\\n    /** Styles for the spinner circle animation. */\\n    circle?: IStyle;\\n    /** Styles for the label accompanying the circle. */\\n    label?: IStyle;\\n    /** Styles for the hidden helper element to aid with screen readers. */\\n    screenReaderText?: IStyle;\\n}\\n\\nexport declare interface ISplitButtonClassNames {\\n    root?: string;\\n    icon?: string;\\n    splitButtonContainer?: string;\\n    flexContainer?: string;\\n    divider?: string;\\n}\\n\\nexport declare function isRelativeUrl(url: string): boolean;\\n\\n/**\\n * {@docCategory Stack}\\n */\\nexport declare type IStackComponent = IComponent<IStackProps, IStackTokens, IStackStyles>;\\n\\n/**\\n * {@docCategory Stack}\\n */\\nexport declare type IStackItemComponent = IComponent<IStackItemProps, IStackItemTokens, IStackItemStyles>;\\n\\n/**\\n * {@docCategory Stack}\\n */\\nexport declare interface IStackItemProps extends IStackItemSlots, IStyleableComponentProps<IStackItemProps, IStackItemTokens, IStackItemStyles>, React.HTMLAttributes<HTMLElement> {\\n    /**\\n     * Defines a CSS class name used to style the StackItem.\\n     */\\n    className?: string;\\n    /**\\n     * Defines how much to grow the StackItem in proportion to its siblings.\\n     */\\n    grow?: boolean | number | 'inherit' | 'initial' | 'unset';\\n    /**\\n     * Defines at what ratio should the StackItem shrink to fit the available space.\\n     */\\n    shrink?: boolean | number | 'inherit' | 'initial' | 'unset';\\n    /**\\n     * Defines whether the StackItem should be prevented from shrinking.\\n     * This can be used to prevent a StackItem from shrinking when it is inside of a Stack that has shrinking items.\\n     * @defaultvalue false\\n     */\\n    disableShrink?: boolean;\\n    /**\\n     * Defines how to align the StackItem along the x-axis (for vertical Stacks) or the y-axis (for horizontal Stacks).\\n     */\\n    align?: 'auto' | 'stretch' | 'baseline' | 'start' | 'center' | 'end';\\n    /**\\n     * Defines whether the StackItem should take up 100% of the height of its parent.\\n     * @defaultvalue true\\n     */\\n    verticalFill?: boolean;\\n    /**\\n     * Defines order of the StackItem.\\n     * @defaultvalue 0\\n     */\\n    order?: number | string;\\n}\\n\\n/**\\n * {@docCategory Stack}\\n */\\nexport declare type IStackItemSlot = ISlotProp<IStackItemProps>;\\n\\n/**\\n * {@docCategory Stack}\\n */\\nexport declare interface IStackItemSlots {\\n    root?: IHTMLSlot;\\n}\\n\\n/**\\n * {@docCategory Stack}\\n */\\nexport declare type IStackItemStyles = IComponentStyles<IStackItemSlots>;\\n\\n/**\\n * {@docCategory Stack}\\n */\\nexport declare type IStackItemStylesReturnType = ReturnType<Extract<IStackItemComponent['styles'], Function>>;\\n\\n/**\\n * {@docCategory Stack}\\n */\\nexport declare type IStackItemTokenReturnType = ReturnType<Extract<IStackItemComponent['tokens'], Function>>;\\n\\n/**\\n * {@docCategory Stack}\\n */\\nexport declare interface IStackItemTokens {\\n    /**\\n     * Defines the margin to be applied to the StackItem relative to its container.\\n     */\\n    margin?: number | string;\\n    /**\\n     * Defines the padding to be applied to the StackItem contents relative to its border.\\n     */\\n    padding?: number | string;\\n}\\n\\n/**\\n * {@docCategory Stack}\\n */\\nexport declare interface IStackProps extends ISlottableProps<IStackSlots>, IStyleableComponentProps<IStackProps, IStackTokens, IStackStyles>, React.HTMLAttributes<HTMLElement> {\\n    /**\\n     * Defines how to render the Stack.\\n     */\\n    as?: React.ElementType<React.HTMLAttributes<HTMLElement>>;\\n    /**\\n     * Defines whether to render Stack children horizontally.\\n     * @defaultvalue false\\n     */\\n    horizontal?: boolean;\\n    /**\\n     * Defines whether to render Stack children in the opposite direction (bottom-to-top if it's a vertical Stack and\\n     * right-to-left if it's a horizontal Stack).\\n     * @defaultvalue false\\n     */\\n    reversed?: boolean;\\n    /**\\n     * Defines how to align Stack children horizontally (along the x-axis).\\n     */\\n    horizontalAlign?: Alignment;\\n    /**\\n     * Defines how to align Stack children vertically (along the y-axis).\\n     */\\n    verticalAlign?: Alignment;\\n    /**\\n     * Defines whether the Stack should take up 100% of the height of its parent.\\n     * This property is required to be set to true when using the `grow` flag on children in vertical oriented Stacks.\\n     * Stacks are rendered as block elements and grow horizontally to the container already.\\n     * @defaultvalue false\\n     */\\n    verticalFill?: boolean;\\n    /**\\n     * Defines whether Stack children should not shrink to fit the available space.\\n     * @defaultvalue false\\n     */\\n    disableShrink?: boolean;\\n    /**\\n     * Defines how much to grow the Stack in proportion to its siblings.\\n     */\\n    grow?: boolean | number | 'inherit' | 'initial' | 'unset';\\n    /**\\n     * Defines the spacing between Stack children.\\n     * The property is specified as a value for 'row gap', followed optionally by a value for 'column gap'.\\n     * If 'column gap' is omitted, it's set to the same value as 'row gap'.\\n     * @deprecated Use `childrenGap` token in `IStackTokens` instead.\\n     */\\n    gap?: number | string;\\n    /**\\n     * Defines the maximum width that the Stack can take.\\n     * @deprecated Use `maxWidth` token in `IStackTokens` instead.\\n     */\\n    maxWidth?: number | string;\\n    /**\\n     * Defines the maximum height that the Stack can take.\\n     * @deprecated Use `maxHeight` token in `IStackTokens` instead.\\n     */\\n    maxHeight?: number | string;\\n    /**\\n     * Defines the inner padding of the Stack.\\n     * @deprecated Use `padding` token in `IStackTokens` instead.\\n     */\\n    padding?: number | string;\\n    /**\\n     * Defines whether Stack children should wrap onto multiple rows or columns when they are about to overflow\\n     * the size of the Stack.\\n     * @defaultvalue false\\n     */\\n    wrap?: boolean;\\n}\\n\\n/**\\n * {@docCategory Stack}\\n */\\nexport declare type IStackSlot = ISlotProp<IStackProps>;\\n\\n/**\\n * {@docCategory Stack}\\n */\\nexport declare interface IStackSlots {\\n    /**\\n     * Defines root slot of the component.\\n     */\\n    root?: IHTMLSlot;\\n    /**\\n     * Defines a slot that is placed inside the root slot in order to achieve wrapping. Only used when the wrap\\n     * property is set to true.\\n     */\\n    inner?: IHTMLSlot;\\n}\\n\\n/**\\n * {@docCategory Stack}\\n */\\nexport declare type IStackStyles = IComponentStyles<IStackSlots>;\\n\\n/**\\n * {@docCategory Stack}\\n */\\nexport declare type IStackStylesReturnType = ReturnType<Extract<IStackComponent['styles'], Function>>;\\n\\n/**\\n * {@docCategory Stack}\\n */\\nexport declare type IStackTokenReturnType = ReturnType<Extract<IStackComponent['tokens'], Function>>;\\n\\n/**\\n * {@docCategory Stack}\\n */\\nexport declare interface IStackTokens {\\n    /**\\n     * Defines the spacing between Stack children.\\n     * The property is specified as a value for 'row gap', followed optionally by a value for 'column gap'.\\n     * If 'column gap' is omitted, it's set to the same value as 'row gap'.\\n     */\\n    childrenGap?: number | string;\\n    /**\\n     * Defines a maximum height for the Stack.\\n     */\\n    maxHeight?: number | string;\\n    /**\\n     * Defines a maximum width for the Stack.\\n     */\\n    maxWidth?: number | string;\\n    /**\\n     * Defines the padding to be applied to the Stack contents relative to its border.\\n     */\\n    padding?: number | string;\\n}\\n\\nexport declare interface IStickyContext {\\n    scrollablePane: PropTypes.Requireable<object>;\\n}\\n\\nexport declare interface IStickyProps extends React.Props<Sticky> {\\n    /**\\n     * Gets ref to component interface.\\n     */\\n    componentRef?: IRefObject<IStickyProps>;\\n    /**\\n     * Class name to apply to the sticky element if component is sticky.\\n     */\\n    stickyClassName?: string;\\n    /**\\n     * color to apply as 'background-color' style for sticky element.\\n     */\\n    stickyBackgroundColor?: string;\\n    /**\\n     * Region to render sticky component in.\\n     * @defaultvalue Both\\n     */\\n    stickyPosition?: StickyPositionType;\\n    /**\\n     * If true, then match scrolling position of placeholder element in Sticky.\\n     * @defaultvalue true\\n     */\\n    isScrollSynced?: boolean;\\n}\\n\\nexport declare interface IStickyState {\\n    isStickyTop: boolean;\\n    isStickyBottom: boolean;\\n    distanceFromTop?: number;\\n}\\n\\n/**\\n * Suggestion item props. Refers to the each individual suggested items rendered within Suggestions callout.\\n * Type T is the type of the item that is displayed.\\n * {@docCategory Pickers}\\n */\\nexport declare interface ISuggestionItemProps<T> {\\n    /**\\n     * Optional callback to access the ISuggestionItem interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<ISuggestionsItem>;\\n    /** Individual suggestion object containing its properties. */\\n    suggestionModel: ISuggestionModel<T>;\\n    /** Optional renderer to override the default one for each type of picker. */\\n    RenderSuggestion: (item: T, suggestionItemProps: ISuggestionItemProps<T>) => JSX.Element;\\n    /** Callback for when the user clicks on the suggestion. */\\n    onClick: (ev: React.MouseEvent<HTMLButtonElement>) => void;\\n    /** Callback for when the item is removed from the array of suggested items. */\\n    onRemoveItem: (ev: React.MouseEvent<HTMLButtonElement>) => void;\\n    /** Optional className for the root element of the suggestion item. */\\n    className?: string;\\n    /** Unique id of the suggested item. */\\n    id?: string;\\n    /** Whether the remove button should be rendered or not. */\\n    showRemoveButton?: boolean;\\n    /** An override for the 'selected' property of the SuggestionModel. */\\n    isSelectedOverride?: boolean;\\n    /**\\n     * The ARIA label for the button to remove the suggestion from the list.\\n     */\\n    removeButtonAriaLabel?: string;\\n    /** Call to provide customized styling that will layer on top of the variant rules. */\\n    styles?: IStyleFunctionOrObject<ISuggestionsItemStyleProps, ISuggestionsItemStyles>;\\n    /** Theme provided by High-Order Component. */\\n    theme?: ITheme;\\n}\\n\\n/**\\n * SuggestionModel interface.\\n * Type T is the type of the item that is suggested (Persona, Tag or any other custom picker).\\n * {@docCategory Pickers}\\n */\\nexport declare interface ISuggestionModel<T> {\\n    /** The suggested item of the type T */\\n    item: T;\\n    /** Whether the suggested item is selected or not. */\\n    selected: boolean;\\n    /** Aria-label string for each suggested item. */\\n    ariaLabel?: string;\\n}\\n\\n/**\\n * Suggestions component.\\n * {@docCategory Pickers}\\n */\\nexport declare interface ISuggestions<T> {\\n    /** Execute the action selected. Can be SearchMore or ForceResolve actions. */\\n    executeSelectedAction: () => void;\\n    /** Focus on the ForceResolve action above the suggestions. If not available then focus on SearchMore action. */\\n    focusAboveSuggestions: () => void;\\n    /** Focus on the SearchMore action below the suggestions. If not available then focus on ForceResolve action. */\\n    focusBelowSuggestions: () => void;\\n    /** Focus the SearchMore action button. */\\n    focusSearchForMoreButton: () => void;\\n    /** Whether it has any suggested actions like ForceResolve or SearchMore. */\\n    hasSuggestedAction: () => boolean;\\n    /** Whether any of the suggested actions (ForceResolve or SearchMore) is selected. */\\n    hasSuggestedActionSelected: () => boolean;\\n    /** Returns true if the event was handled, false otherwise. */\\n    tryHandleKeyDown: (keyCode: number, currentSuggestionIndex: number) => boolean;\\n}\\n\\nexport declare interface ISuggestionsControlProps<T> extends React.ClassAttributes<any>, ISuggestionsCoreProps<T> {\\n    /**\\n     * An ARIA label for the container that is the parent of the suggestions header items.\\n     */\\n    suggestionsHeaderContainerAriaLabel?: string;\\n    /**\\n     * An ARIA label for the container that is the parent of the suggestions footer items.\\n     */\\n    suggestionsFooterContainerAriaLabel?: string;\\n    /**\\n     * The header items props\\n     */\\n    headerItemsProps?: ISuggestionsHeaderFooterProps[];\\n    /**\\n     * The footer items props\\n     */\\n    footerItemsProps?: ISuggestionsHeaderFooterProps[];\\n    /**\\n     * Whether or not the first selectable item in the suggestions list should be selected\\n     */\\n    shouldSelectFirstItem?: () => boolean;\\n    /**\\n     * The CSS classname of the suggestions list.\\n     */\\n    className?: string;\\n    /**\\n     * Completes the suggestion\\n     */\\n    completeSuggestion: () => void;\\n}\\n\\nexport declare interface ISuggestionsControlState<T> {\\n    selectedHeaderIndex: number;\\n    selectedFooterIndex: number;\\n    suggestions: ISuggestionModel<T>[];\\n}\\n\\nexport declare interface ISuggestionsCoreProps<T> extends React.ClassAttributes<any> {\\n    /**\\n     * Gets the component ref.\\n     */\\n    componentRef?: IRefObject<{}>;\\n    /**\\n     * How the suggestion should look in the suggestion list.\\n     */\\n    onRenderSuggestion?: (props: T, suggestionItemProps: ISuggestionItemProps<T>) => JSX.Element;\\n    /**\\n     * What should occur when a suggestion is clicked\\n     */\\n    onSuggestionClick: (ev?: React.MouseEvent<HTMLElement>, item?: any, index?: number) => void;\\n    /**\\n     * The list of Suggestions that will be displayed\\n     */\\n    suggestions: ISuggestionModel<T>[];\\n    /**\\n     * Function to fire when one of the optional remove buttons on a suggestion is clicked.\\n     */\\n    onSuggestionRemove?: (ev?: React.MouseEvent<HTMLElement>, item?: IPersonaProps, index?: number) => void;\\n    /**\\n     * Screen reader message to read when there are suggestions available.\\n     */\\n    suggestionsAvailableAlertText?: string;\\n    /**\\n     * An ARIA label for the container that is the parent of the suggestions.\\n     */\\n    suggestionsContainerAriaLabel?: string;\\n    /**\\n     * the classname of the suggestionitem.\\n     */\\n    suggestionsItemClassName?: string;\\n    /**\\n     * Maximum number of suggestions to show in the full suggestion list.\\n     */\\n    resultsMaximumNumber?: number;\\n    /**\\n     * Indicates whether to show a button with each suggestion to remove that suggestion.\\n     */\\n    showRemoveButtons?: boolean;\\n    /**\\n     * Indicates whether to loop around to the top or bottom of the suggestions\\n     * on calling nextSuggestion and previousSuggestion, respectively\\n     */\\n    shouldLoopSelection: boolean;\\n}\\n\\nexport declare interface ISuggestionsHeaderFooterItemProps {\\n    componentRef?: IRefObject<{}>;\\n    renderItem: () => JSX.Element;\\n    onExecute?: () => void;\\n    isSelected: boolean;\\n    id: string;\\n    className: string | undefined;\\n}\\n\\nexport declare interface ISuggestionsHeaderFooterProps {\\n    renderItem: () => JSX.Element;\\n    onExecute?: () => void;\\n    className?: string;\\n    ariaLabel?: string;\\n    shouldShow: () => boolean;\\n}\\n\\n/**\\n * SuggestionItem component.\\n * {@docCategory Pickers}\\n */\\nexport declare interface ISuggestionsItem {\\n}\\n\\n/**\\n * The props needed to construct SuggestionItem styles.\\n * {@docCategory Pickers}\\n */\\nexport declare type ISuggestionsItemStyleProps = Required<Pick<ISuggestionItemProps<any>, 'theme'>> & Pick<ISuggestionItemProps<any>, 'className'> & {\\n    /** Whether the suggestion item is selected or not. */\\n    suggested?: boolean;\\n};\\n\\n/**\\n * Represents the stylable areas of the SuggestionItem.\\n * {@docCategory Pickers}\\n */\\nexport declare interface ISuggestionsItemStyles {\\n    /** Root element of the suggested item. */\\n    root: IStyle;\\n    /** Refers to the CommandButton holding the content of the suggested item. */\\n    itemButton: IStyle;\\n    /** Refers to the remove button in case it's rendered. */\\n    closeButton: IStyle;\\n}\\n\\n/**\\n * Suggestions props interface. Refers to the entire container holding all the suggestions.\\n * Type T is the type of the items that are displayed.\\n * {@docCategory Pickers}\\n */\\nexport declare interface ISuggestionsProps<T> extends React.Props<any> {\\n    /**\\n     * Optional callback to access the ISuggestions interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<ISuggestions<T>>;\\n    /**\\n     * How the suggestion should look in the suggestion list.\\n     */\\n    onRenderSuggestion: (props: T, suggestionItemProps: ISuggestionItemProps<T>) => JSX.Element;\\n    /**\\n     * What should occur when a suggestion is clicked\\n     */\\n    onSuggestionClick: (ev?: React.MouseEvent<HTMLElement>, item?: any, index?: number) => void;\\n    /**\\n     * The list of Suggestions that will be displayed\\n     */\\n    suggestions: ISuggestionModel<T>[];\\n    /**\\n     * How the \\\"no result found\\\" should look in the suggestion list.\\n     */\\n    onRenderNoResultFound?: IRenderFunction<void>;\\n    /**\\n     * The text that appears at the top of the suggestions list.\\n     */\\n    suggestionsHeaderText?: string;\\n    /**\\n     * The text that should appear at the top of the most recently used box.\\n     */\\n    mostRecentlyUsedHeaderText?: string;\\n    /**\\n     * The text that appears indicating to the user that they can search for more results.\\n     */\\n    searchForMoreText?: string;\\n    /**\\n     * The callback that should be called when the user attempts to get more results\\n     */\\n    onGetMoreResults?: () => void;\\n    /**\\n     * The text that appears indicating to the use to force resolve the input\\n     */\\n    forceResolveText?: string;\\n    /**\\n     * The callback that should be called to see if the force resolve command should be shown\\n     */\\n    showForceResolve?: () => boolean;\\n    /**\\n     * The callback that should be called when the user attempts to use the input text as as item\\n     */\\n    createGenericItem?: () => void;\\n    /**\\n     * The CSS className of the suggestions root.\\n     */\\n    className?: string;\\n    /**\\n     * The CSS className of the suggestions list\\n     */\\n    suggestionsClassName?: string;\\n    /**\\n     * The text that should appear if there is a search error.\\n     *\\n     * @deprecated Use noResultsFoundText instead.\\n     */\\n    searchErrorText?: string;\\n    /**\\n     * The text that should appear if no results are found when searching.\\n     */\\n    noResultsFoundText?: string;\\n    /**\\n     * The className of the suggestion item.\\n     */\\n    suggestionsItemClassName?: string;\\n    /**\\n     * Used to indicate whether or not the user can request more suggestions.\\n     * Dictates whether or not the searchForMore button is displayed.\\n     */\\n    moreSuggestionsAvailable?: boolean;\\n    /**\\n     * Used to indicate whether or not the suggestions are loading.\\n     */\\n    isLoading?: boolean;\\n    /**\\n     * Used to indicate whether or not the component is searching for more results.\\n     */\\n    isSearching?: boolean;\\n    /**\\n     * The text to display while the results are loading.\\n     */\\n    loadingText?: string;\\n    /**\\n     * The text to display while searching for more results in a limited suggestions list.\\n     */\\n    searchingText?: string;\\n    /**\\n     * Indicates if a short list of recent suggestions should be shown.\\n     */\\n    isMostRecentlyUsedVisible?: boolean;\\n    /**\\n     * Function to fire when one of the optional remove buttons on a suggestion is clicked.\\n     *\\n     * TODO (adjective-object) remove IPersonaprops before the next major version bump\\n     */\\n    onSuggestionRemove?: (ev?: React.MouseEvent<HTMLElement>, item?: T | IPersonaProps, index?: number) => void;\\n    /**\\n     * Indicates if the text in resultsFooter or resultsFooterFull should be shown at the end of the suggestion list.\\n     * @defaultvalue true\\n     */\\n    isResultsFooterVisible?: boolean;\\n    /**\\n     * Maximum number of suggestions to show in the full suggestion list.\\n     */\\n    resultsMaximumNumber?: number;\\n    /**\\n     * A renderer that adds an element at the end of the suggestions list it has more items than resultsMaximumNumber.\\n     */\\n    resultsFooterFull?: (props: ISuggestionsProps<T>) => JSX.Element;\\n    /**\\n     * A renderer that adds an element at the end of the suggestions list it has fewer items than resultsMaximumNumber.\\n     */\\n    resultsFooter?: (props: ISuggestionsProps<T>) => JSX.Element;\\n    /**\\n     * Indicates whether to show a button with each suggestion to remove that suggestion.\\n     */\\n    showRemoveButtons?: boolean;\\n    /**\\n     * Screen reader message to read when there are suggestions available.\\n     */\\n    suggestionsAvailableAlertText?: string;\\n    /**\\n     * A function that resets focus to the expected item in the suggestion list\\n     */\\n    refocusSuggestions?: (keyCode: KeyCodes) => void;\\n    /**\\n     * An ARIA label for the container that is the parent of the suggestions.\\n     */\\n    suggestionsContainerAriaLabel?: string;\\n    /**\\n     * An ARIA label to use for the buttons to remove individual suggestions.\\n     */\\n    removeSuggestionAriaLabel?: string;\\n    /**\\n     * The string that will be used as the suggestionsListId.\\n     * Will be used by the BasePicker to keep track of the list for aria.\\n     */\\n    suggestionsListId?: string;\\n    /** Call to provide customized styling that will layer on top of the variant rules. */\\n    styles?: IStyleFunctionOrObject<any, any>;\\n    /** Theme provided by High-Order Component. */\\n    theme?: ITheme;\\n}\\n\\nexport declare interface ISuggestionsState {\\n    selectedActionType: SuggestionActionType;\\n}\\n\\n/**\\n * The props needed to construct Suggestions styles.\\n * {@docCategory Pickers}\\n */\\nexport declare type ISuggestionsStyleProps = Required<Pick<ISuggestionsProps<any>, 'theme'>> & Pick<ISuggestionsProps<any>, 'className' | 'suggestionsClassName'> & {\\n    /** Whether the forceResolve actionButton is selected. */\\n    forceResolveButtonSelected?: boolean;\\n    /** Whether the searchForMore actionButton is selected. */\\n    searchForMoreButtonSelected?: boolean;\\n};\\n\\n/**\\n * Represents the stylable areas of the Suggestions.\\n * {@docCategory Pickers}\\n */\\nexport declare interface ISuggestionsStyles {\\n    /** Root element of the suggestions outer wrapper. */\\n    root: IStyle;\\n    /** Refers to the suggestions container. */\\n    suggestionsContainer: IStyle;\\n    /** Refers to the title rendered for suggestions container header and/or footer (if provided). */\\n    title: IStyle;\\n    /** Refers to the 'Force resolve' actionButton. */\\n    forceResolveButton: IStyle;\\n    /** Refers to the 'Search for more' actionButton. */\\n    searchForMoreButton: IStyle;\\n    /** Refers to the text rendered when no suggestions are found. */\\n    noSuggestions: IStyle;\\n    /** Refers to the text displaying if more suggestions available. */\\n    suggestionsAvailable: IStyle;\\n    /** SubComponents (Spinner) styles. */\\n    subComponentStyles: ISuggestionsSubComponentStyles;\\n}\\n\\n/**\\n * Styles interface of the SubComponents rendered within PeoplePickerItemSelected.\\n * {@docCategory Pickers}\\n */\\nexport declare interface ISuggestionsSubComponentStyles {\\n    /** Refers to the Spinner rendered within the Suggestions when searching or loading suggestions. */\\n    spinner: IStyleFunctionOrObject<ISpinnerStyleProps, any>;\\n}\\n\\n/**\\n * Returns true if the argument is a valid Shade value\\n * @param shade - The Shade value to validate.\\n */\\nexport declare function isValidShade(shade?: Shade): boolean;\\n\\n/**\\n * {@docCategory SwatchColorPicker}\\n */\\nexport declare interface ISwatchColorPickerProps {\\n    /**\\n     * Number of columns for the swatch color picker\\n     */\\n    columnCount: number;\\n    /**\\n     * ID for the swatch color picker's root element. Also used as a prefix for the IDs of color cells.\\n     */\\n    id?: string;\\n    /**\\n     * Additional class name to provide on the root element\\n     */\\n    className?: string;\\n    /**\\n     * The shape of the color cells.\\n     * @default 'circle'\\n     */\\n    cellShape?: 'circle' | 'square';\\n    /**\\n     * The ID of color cell that is currently selected\\n     */\\n    selectedId?: string;\\n    /**\\n     * The color cells that will be made available to the user.\\n     *\\n     * Note: When the reference to this prop changes, regardless of how many color cells change,\\n     * all of the color cells will be re-rendered (potentially bad perf) because we memoize\\n     * based on this prop's reference.\\n     */\\n    colorCells: IColorCellProps[];\\n    /**\\n     * Indicates whether the SwatchColorPicker is fully controlled.\\n     * When true, the component will not set its internal state to track the selected color.\\n     * Instead, the parent component will be responsible for handling state in the callbacks like\\n     * `onColorChanged`.\\n     *\\n     * NOTE: This property is a temporary workaround to force the component to be fully controllable\\n     * without breaking existing behavior\\n     */\\n    isControlled?: boolean;\\n    /**\\n     * Callback for when the user changes the color.\\n     * If `id` and `color` are unspecified, there is no selected cell.\\n     * (e.g. the user executed the currently selected cell to unselect it)\\n     */\\n    onColorChanged?: (id?: string, color?: string) => void;\\n    /**\\n     * Callback for when the user hovers over a color cell.\\n     * If `id` and `color` are unspecified, cells are no longer being hovered.\\n     */\\n    onCellHovered?: (id?: string, color?: string) => void;\\n    /**\\n     * Callback for when the user focuses a color cell.\\n     * If `id` and `color` are unspecified, cells are no longer being focused.\\n     */\\n    onCellFocused?: (id?: string, color?: string) => void;\\n    /**\\n     * Custom render function for the color cell\\n     */\\n    onRenderColorCell?: IRenderFunction<IColorCellProps>;\\n    /**\\n     * Whether the control is disabled.\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Position this grid is in the parent set (index in a parent menu, for example)\\n     */\\n    ariaPosInSet?: number;\\n    /**\\n     * @deprecated Use `ariaPosInSet`\\n     */\\n    positionInSet?: number;\\n    /**\\n     * Size of the parent set (size of parent menu, for example)\\n     */\\n    ariaSetSize?: number;\\n    /**\\n     * @deprecated Use `ariaSetSize`\\n     */\\n    setSize?: number;\\n    /**\\n     * Whether focus should cycle back to the beginning once the user navigates past the end (and vice versa).\\n     * Only relevant if `doNotContainWithinFocusZone` is not true.\\n     * @defaultvalue true\\n     */\\n    shouldFocusCircularNavigate?: boolean;\\n    /**\\n     * If false (the default), the grid is contained inside a FocusZone.\\n     * If true, a FocusZone is not used.\\n     * @default false\\n     */\\n    doNotContainWithinFocusZone?: boolean;\\n    /**\\n     * The distance between cells, in pixels\\n     * @defaultvalue 10\\n     */\\n    cellMargin?: number;\\n    /**\\n     * Height of an individual cell, in pixels\\n     * @defaultvalue 20\\n     */\\n    cellHeight?: number;\\n    /**\\n     * Width of an individual cell, in pixels\\n     * @defaultvalue 20\\n     */\\n    cellWidth?: number;\\n    /**\\n     * Width of the border indicating a hovered/selected cell, in pixels\\n     * @defaultvalue If `cellWidth` is less than 24px, then default value is 2px. Otherwise it defaults to 4px.\\n     */\\n    cellBorderWidth?: number;\\n    /**\\n     * Theme to apply to the component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Styles for the component.\\n     */\\n    styles?: IStyleFunctionOrObject<ISwatchColorPickerStyleProps, ISwatchColorPickerStyles>;\\n    /**\\n     * Styles for the grid cells.\\n     */\\n    getColorGridCellStyles?: IStyleFunctionOrObject<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>;\\n    /**\\n     * Whether to update focus when a cell is hovered.\\n     * @defaultvalue false\\n     */\\n    focusOnHover?: boolean;\\n    /**\\n     * Selector to focus on mouse leave. Should only be used in conjunction with `focusOnHover`.\\n     */\\n    mouseLeaveParentSelector?: string | undefined;\\n}\\n\\nexport declare interface ISwatchColorPickerState {\\n    selectedIndex?: number;\\n}\\n\\n/**\\n * Properties required to build the styles for the color picker component.\\n * {@docCategory SwatchColorPicker}\\n */\\nexport declare interface ISwatchColorPickerStyleProps {\\n    /**\\n     * Theme to apply to the container\\n     */\\n    theme: ITheme;\\n    /**\\n     * Custom className to apply to the container.\\n     */\\n    className?: string;\\n    /**\\n     * The distance between cells\\n     */\\n    cellMargin?: number;\\n}\\n\\n/**\\n * Styles for the Color Picker Component.\\n * {@docCategory SwatchColorPicker}\\n */\\nexport declare interface ISwatchColorPickerStyles {\\n    /**\\n     * Style applied to the container grid.\\n     */\\n    root: IStyle;\\n    /**\\n     * Style for the table cells of the grid.\\n     */\\n    tableCell: IStyle;\\n    /**\\n     * Style for the FocusZone container for the grid.\\n     */\\n    focusedContainer?: IStyle;\\n}\\n\\n/**\\n * TagPickerItem item interface.\\n * {@docCategory TagPicker}\\n */\\nexport declare interface ITag {\\n    /** Name of the item. */\\n    name: string;\\n    /** Unique key for the item. */\\n    key: string | number;\\n}\\n\\n/**\\n * TagItem component props\\n * {@docCategory TagPicker}\\n */\\nexport declare interface ITagItemProps extends IPickerItemProps<ITag> {\\n    /** Additional CSS class(es) to apply to the TagItem root element. */\\n    className?: string;\\n    /**\\n     * Enable or not focus on TagItem when TagPicker is disabled.\\n     * @defaultvalue false\\n     */\\n    enableTagFocusInDisabledPicker?: boolean;\\n    /**\\n     * The title (and aria-label) attribute used by the TagItem text element.\\n     * @defaultvalue children if of type string or item.name\\n     */\\n    title?: string;\\n    /** Call to provide customized styling that will layer on top of the variant rules. */\\n    styles?: IStyleFunctionOrObject<ITagItemStyleProps, ITagItemStyles>;\\n    /** Theme provided by High-Order Component. */\\n    theme?: ITheme;\\n}\\n\\n/**\\n * The props needed to construct TagItem styles.\\n * {@docCategory TagPicker}\\n */\\nexport declare type ITagItemStyleProps = Required<Pick<ITagItemProps, 'theme'>> & Pick<ITagItemProps, 'className' | 'selected' | 'disabled'> & {};\\n\\n/**\\n * Represents the stylable areas of the TagItem.\\n * {@docCategory TagPicker}\\n */\\nexport declare interface ITagItemStyles {\\n    /** Root element of picked TagItem */\\n    root: IStyle;\\n    /** Refers to the text element of the TagItem already picked. */\\n    text: IStyle;\\n    /** Refers to the cancel action button on a picked TagItem. */\\n    close: IStyle;\\n}\\n\\n/**\\n * TagItemSuggestion component props\\n * {@docCategory TagPicker}\\n */\\nexport declare interface ITagItemSuggestionProps extends React.AllHTMLAttributes<HTMLElement> {\\n    /** Additional CSS class(es) to apply to the TagItemSuggestion div element */\\n    className?: string;\\n    /** Call to provide customized styling that will layer on top of the variant rules. */\\n    styles?: IStyleFunctionOrObject<ITagItemSuggestionStyleProps, ITagItemSuggestionStyles>;\\n    /** Theme provided by High-Order Component. */\\n    theme?: ITheme;\\n}\\n\\n/**\\n * The props needed to construct TagItemSuggestion styles.\\n * {@docCategory TagPicker}\\n */\\nexport declare type ITagItemSuggestionStyleProps = Required<Pick<ITagItemSuggestionProps, 'theme'>> & Pick<ITagItemSuggestionProps, 'className'> & {};\\n\\n/**\\n * Represents the stylable areas of the TagItemSuggestion\\n * {@docCategory TagPicker}\\n */\\nexport declare interface ITagItemSuggestionStyles {\\n    /** Refers to the text element of the TagItemSuggestion */\\n    suggestionTextOverflow?: IStyle;\\n}\\n\\n/**\\n * TagPicker component props\\n * {@docCategory TagPicker}\\n */\\nexport declare interface ITagPickerProps extends IBasePickerProps<ITag> {\\n}\\n\\n/**\\n * {@docCategory TeachingBubble}\\n */\\nexport declare interface ITeachingBubble {\\n    /** Sets focus to the TeachingBubble root element */\\n    focus(): void;\\n}\\n\\n/**\\n * TeachingBubble component props.\\n * {@docCategory TeachingBubble}\\n */\\nexport declare interface ITeachingBubbleProps extends React.ClassAttributes<TeachingBubbleBase | TeachingBubbleContentBase>, IAccessiblePopupProps {\\n    /**\\n     * Optional callback to access the ITeachingBubble interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<ITeachingBubble>;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<ITeachingBubbleStyleProps, ITeachingBubbleStyles>;\\n    /**\\n     * Theme provided by High-Order Component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Properties to pass through for Callout, reference detail properties in ICalloutProps\\n     */\\n    calloutProps?: ICalloutProps;\\n    /**\\n     * Properties to pass through for FocusTrapZone, reference detail properties in IFocusTrapZoneProps\\n     */\\n    focusTrapZoneProps?: IFocusTrapZoneProps;\\n    /**\\n     * A headline for the Teaching Bubble.\\n     */\\n    headline?: string;\\n    /**\\n     * A variation with smaller bold headline and no margins.\\n     */\\n    hasCondensedHeadline?: boolean;\\n    /**\\n     * @deprecated Use `hasCloseButton`.\\n     */\\n    hasCloseIcon?: boolean;\\n    /**\\n     * Whether the TeachingBubble renders close button in the top right corner.\\n     */\\n    hasCloseButton?: boolean;\\n    /**\\n     * An Image for the TeachingBubble.\\n     */\\n    illustrationImage?: IImageProps;\\n    /**\\n     * The Primary interaction button\\n     */\\n    primaryButtonProps?: IButtonProps;\\n    /**\\n     * The Secondary interaction button\\n     */\\n    secondaryButtonProps?: IButtonProps;\\n    /**\\n     * Text that will be rendered in the footer of the TeachingBubble.\\n     * May be rendered alongside primary and secondary buttons.\\n     */\\n    footerContent?: string | JSX.Element;\\n    /**\\n     * @deprecated use target instead\\n     * Element to anchor the TeachingBubble to.\\n     */\\n    targetElement?: HTMLElement;\\n    /**\\n     * Element, MouseEvent, Point, or querySelector string that the TeachingBubble\\n     * should anchor to.\\n     */\\n    target?: Target;\\n    /**\\n     * Callback when the TeachingBubble tries to close.\\n     */\\n    onDismiss?: (ev?: any) => void;\\n    /**\\n     * Whether or not the TeachingBubble is wide, with image on the left side.\\n     */\\n    isWide?: boolean;\\n    /**\\n     * A variation with smaller bold headline and margins to the body.\\n     * (`hasCondensedHeadline` takes precedence if it is also set to true.)\\n     */\\n    hasSmallHeadline?: boolean;\\n    /**\\n     *  Defines the element id referencing the element containing label text for TeachingBubble.\\n     */\\n    ariaLabelledBy?: string;\\n    /**\\n     * Defines the element id referencing the element containing the description for the TeachingBubble.\\n     */\\n    ariaDescribedBy?: string;\\n}\\n\\nexport declare interface ITeachingBubbleState {\\n    isTeachingBubbleVisible?: boolean;\\n}\\n\\n/**\\n * {@docCategory TeachingBubble}\\n */\\nexport declare type ITeachingBubbleStyleProps = Required<Pick<ITeachingBubbleProps, 'theme'>> & Pick<ITeachingBubbleProps, 'hasCondensedHeadline' | 'hasSmallHeadline' | 'isWide'> & {\\n    /** Style props for callout. */\\n    calloutProps?: ICalloutContentStyleProps;\\n    /** Class name for primary button. */\\n    primaryButtonClassName?: string;\\n    /** Class name for secondary button. */\\n    secondaryButtonClassName?: string;\\n    /** If the close button is visible. */\\n    hasCloseButton?: boolean;\\n    /** If a headline has been specified. */\\n    hasHeadline?: boolean;\\n};\\n\\n/**\\n * {@docCategory TeachingBubble}\\n */\\nexport declare interface ITeachingBubbleStyles {\\n    root: IStyle;\\n    body: IStyle;\\n    bodyContent: IStyle;\\n    closeButton: IStyle;\\n    content: IStyle;\\n    footer: IStyle;\\n    header: IStyle;\\n    headline: IStyle;\\n    imageContent: IStyle;\\n    primaryButton: IStyle;\\n    secondaryButton: IStyle;\\n    subText: IStyle;\\n    subComponentStyles?: ITeachingBubbleSubComponentStyles;\\n}\\n\\n/**\\n * {@docCategory TeachingBubble}\\n */\\nexport declare interface ITeachingBubbleSubComponentStyles {\\n    /** Refers to the callout that hosts the TeachingBubble. */\\n    callout: IStyleFunctionOrObject<any, any>;\\n}\\n\\n/**\\n * {@docCategory Text}\\n */\\nexport declare type ITextComponent = IComponent<ITextProps, ITextTokens, ITextStyles>;\\n\\n/**\\n * {@docCategory TextField}\\n */\\nexport declare interface ITextField {\\n    /** Gets the current value of the input. */\\n    value: string | undefined;\\n    /** Sets focus to the input. */\\n    focus: () => void;\\n    /** Blurs the input */\\n    blur: () => void;\\n    /** Select the value of the text field. */\\n    select: () => void;\\n    /** Sets the selection start of the text field to a specified value. */\\n    setSelectionStart: (value: number) => void;\\n    /** Sets the selection end of the text field to a specified value. */\\n    setSelectionEnd: (value: number) => void;\\n    /**\\n     * Sets the start and end positions of a selection in a text field.\\n     * Call with start and end set to the same value to set the cursor position.\\n     * @param start - Index of the start of the selection.\\n     * @param end - Index of the end of the selection.\\n     */\\n    setSelectionRange: (start: number, end: number) => void;\\n    /** Gets the selection start of the text field. Returns -1 if there is no selection. */\\n    selectionStart: number | null;\\n    /** Gets the selection end of the text field. Returns -1 if there is no selection. */\\n    selectionEnd: number | null;\\n}\\n\\n/**\\n * TextField component props.\\n * {@docCategory TextField}\\n */\\nexport declare interface ITextFieldProps extends React.AllHTMLAttributes<HTMLInputElement | HTMLTextAreaElement> {\\n    /**\\n     * Optional callback to access the ITextField component. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<ITextField>;\\n    /**\\n     * Whether or not the text field is a multiline text field.\\n     * @defaultvalue false\\n     */\\n    multiline?: boolean;\\n    /**\\n     * For multiline text fields, whether or not the field is resizable.\\n     * @defaultvalue true\\n     */\\n    resizable?: boolean;\\n    /**\\n     * For multiline text fields, whether or not to auto adjust text field height.\\n     * @defaultvalue false\\n     */\\n    autoAdjustHeight?: boolean;\\n    /**\\n     * Whether or not the text field is underlined.\\n     * @defaultvalue false\\n     */\\n    underlined?: boolean;\\n    /**\\n     * Whether or not the text field is borderless.\\n     * @defaultvalue false\\n     */\\n    borderless?: boolean;\\n    /**\\n     * Label displayed above the text field (and read by screen readers).\\n     */\\n    label?: string;\\n    /**\\n     * Custom renderer for the label.\\n     * If you don't call defaultRender, ensure that you give your custom-rendered label an id and that\\n     * you set the textfield's aria-labelledby prop to that id.\\n     */\\n    onRenderLabel?: IRenderFunction<ITextFieldProps>;\\n    /**\\n     * Description displayed below the text field to provide additional details about what text to enter.\\n     */\\n    description?: string;\\n    /**\\n     * Custom renderer for the description.\\n     */\\n    onRenderDescription?: IRenderFunction<ITextFieldProps>;\\n    /**\\n     * Prefix displayed before the text field contents. This is not included in the value.\\n     * Ensure a descriptive label is present to assist screen readers, as the value does not include the prefix.\\n     */\\n    prefix?: string;\\n    /**\\n     * Suffix displayed after the text field contents. This is not included in the value.\\n     * Ensure a descriptive label is present to assist screen readers, as the value does not include the suffix.\\n     */\\n    suffix?: string;\\n    /**\\n     * Custom render function for prefix.\\n     */\\n    onRenderPrefix?: IRenderFunction<ITextFieldProps>;\\n    /**\\n     * Custom render function for suffix.\\n     */\\n    onRenderSuffix?: IRenderFunction<ITextFieldProps>;\\n    /**\\n     * Props for an optional icon, displayed in the far right end of the text field.\\n     */\\n    iconProps?: IIconProps;\\n    /**\\n     * Default value of the text field. Only provide this if the text field is an uncontrolled component;\\n     * otherwise, use the `value` property.\\n     */\\n    defaultValue?: string;\\n    /**\\n     * Current value of the text field. Only provide this if the text field is a controlled component where you\\n     * are maintaining its current state; otherwise, use the `defaultValue` property.\\n     */\\n    value?: string;\\n    /**\\n     * Disabled state of the text field.\\n     * @defaultvalue false\\n     */\\n    disabled?: boolean;\\n    /**\\n     * If true, the text field is readonly.\\n     * @defaultvalue false\\n     */\\n    readOnly?: boolean;\\n    /**\\n     * Static error message displayed below the text field. Use `onGetErrorMessage` to dynamically\\n     * change the error message displayed (if any) based on the current value. `errorMessage` and\\n     * `onGetErrorMessage` are mutually exclusive (`errorMessage` takes precedence).\\n     */\\n    errorMessage?: string | JSX.Element;\\n    /**\\n     * Callback for when the input value changes.\\n     * This is called on both `input` and `change` events.\\n     * (In a later version, this will probably only be called for the `change` event.)\\n     */\\n    onChange?: (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void;\\n    /**\\n     * Function called after validation completes.\\n     */\\n    onNotifyValidationResult?: (errorMessage: string | JSX.Element, value: string | undefined) => void;\\n    /**\\n     * Function used to determine whether the input value is valid and get an error message if not.\\n     * Mutually exclusive with the static string `errorMessage` (it will take precedence over this).\\n     *\\n     * When it returns `string | JSX.Element`:\\n     * - If valid, it returns empty string.\\n     * - If invalid, it returns the error message and the text field will\\n     *   show a red border and show an error message below the text field.\\n     *\\n     * When it returns `Promise<string | JSX.Element>`:\\n     * - The resolved value is displayed as the error message.\\n     * - If rejected, the value is thrown away.\\n     */\\n    onGetErrorMessage?: (value: string) => string | JSX.Element | PromiseLike<string | JSX.Element> | undefined;\\n    /**\\n     * Text field will start to validate after users stop typing for `deferredValidationTime` milliseconds.\\n     * Updates to this prop will not be respected.\\n     * @defaultvalue 200\\n     */\\n    deferredValidationTime?: number;\\n    /**\\n     * Optional class name that is added to the container of the component.\\n     */\\n    className?: string;\\n    /**\\n     * Optional class name that is added specifically to the input/textarea element.\\n     */\\n    inputClassName?: string;\\n    /**\\n     * Aria label for the text field.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * Run validation when focus moves into the input, and **do not** validate on change.\\n     *\\n     * (Unless this prop and/or `validateOnFocusOut` is set to true, validation will run on every change.)\\n     * @defaultvalue false\\n     */\\n    validateOnFocusIn?: boolean;\\n    /**\\n     * Run validation when focus moves out of the input, and **do not** validate on change.\\n     *\\n     * (Unless this prop and/or `validateOnFocusIn` is set to true, validation will run on every change.)\\n     * @defaultvalue false\\n     */\\n    validateOnFocusOut?: boolean;\\n    /**\\n     * Whether validation should run when the input is initially rendered.\\n     * @defaultvalue true\\n     */\\n    validateOnLoad?: boolean;\\n    /**\\n     * Theme (provided through customization).\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<ITextFieldStyleProps, ITextFieldStyles>;\\n    /**\\n     * Whether the input field should have autocomplete enabled.\\n     * This tells the browser to display options based on earlier typed values.\\n     * Common values are 'on' and 'off' but for all possible values see the following links:\\n     * https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#Values\\n     * https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\\n     */\\n    autoComplete?: string;\\n    /**\\n     * Whether to show the reveal password button for input type `'password'` (will be ignored unless\\n     * the `type` prop is set to `'password'`).\\n     */\\n    canRevealPassword?: boolean;\\n    /**\\n     * @deprecated Only used by `MaskedTextField`, which now has a separate `IMaskedTextFieldProps` interface.\\n     */\\n    mask?: string;\\n    /**\\n     * @deprecated Only used by `MaskedTextField`, which now has a separate `IMaskedTextFieldProps` interface.\\n     */\\n    maskChar?: string;\\n    /**\\n     * @deprecated Only used by `MaskedTextField`, which now has a separate `IMaskedTextFieldProps` interface.\\n     */\\n    maskFormat?: {\\n        [key: string]: RegExp;\\n    };\\n}\\n\\n/** @internal */\\nexport declare interface ITextFieldSnapshot {\\n    /**\\n     * If set, the text field is changing between single- and multi-line, so we'll need to reset\\n     * selection/cursor after the change completes.\\n     */\\n    selection?: [number | null, number | null];\\n}\\n\\n/** @internal */\\nexport declare interface ITextFieldState {\\n    /** The currently displayed value if uncontrolled. */\\n    uncontrolledValue: string | undefined;\\n    /** Is true when the control has focus. */\\n    isFocused?: boolean;\\n    /**\\n     * Dynamic error message returned by `onGetErrorMessage`.\\n     * Use `this._errorMessage` to get the actual current error message.\\n     */\\n    errorMessage: string | JSX.Element;\\n    /**\\n     * Whether this field has `type='password'` and `canRevealPassword=true`, and the password is\\n     * currently being revealed.\\n     */\\n    isRevealingPassword?: boolean;\\n}\\n\\n/**\\n * {@docCategory TextField}\\n */\\nexport declare type ITextFieldStyleProps = Required<Pick<ITextFieldProps, 'theme'>> & Pick<ITextFieldProps, 'className' | 'disabled' | 'inputClassName' | 'required' | 'multiline' | 'borderless' | 'resizable' | 'underlined' | 'autoAdjustHeight'> & {\\n    /** Element has an error message. */\\n    hasErrorMessage?: boolean;\\n    /** Element has an icon. */\\n    hasIcon?: boolean;\\n    /** Element has a label. */\\n    hasLabel?: boolean;\\n    /** Element has focus. */\\n    focused?: boolean;\\n    /** Element has a peek button for passwords */\\n    hasRevealButton?: boolean;\\n};\\n\\n/**\\n * {@docCategory TextField}\\n */\\nexport declare interface ITextFieldStyles {\\n    /**\\n     * Style for root element.\\n     */\\n    root: IStyle;\\n    /**\\n     * Style for field group encompassing entry area (prefix, field, icon and suffix).\\n     */\\n    fieldGroup: IStyle;\\n    /**\\n     * Style for prefix element.\\n     */\\n    prefix: IStyle;\\n    /**\\n     * Style for suffix element.\\n     */\\n    suffix: IStyle;\\n    /**\\n     * Style for main field entry element.\\n     */\\n    field: IStyle;\\n    /**\\n     * Style for icon prop element.\\n     */\\n    icon: IStyle;\\n    /**\\n     * Style for description element.\\n     */\\n    description: IStyle;\\n    /**\\n     * Style for TextField wrapper element.\\n     */\\n    wrapper: IStyle;\\n    /**\\n     * Style for error message element.\\n     */\\n    errorMessage: IStyle;\\n    /**\\n     * Styling for subcomponents.\\n     */\\n    subComponentStyles: ITextFieldSubComponentStyles;\\n    /**\\n     * Styling for reveal password button\\n     */\\n    revealButton: IStyle;\\n    /**\\n     * Styling for reveal password span\\n     */\\n    revealSpan: IStyle;\\n    /**\\n     * Styling for reveal password icon\\n     */\\n    revealIcon: IStyle;\\n}\\n\\n/**\\n * {@docCategory TextField}\\n */\\nexport declare interface ITextFieldSubComponentStyles {\\n    /**\\n     * Styling for Label child component.\\n     */\\n    label: IStyleFunctionOrObject<any, any>;\\n}\\n\\n/**\\n * Inputs to the component\\n * {@docCategory Text}\\n */\\nexport declare interface ITextProps extends ISlottableProps<ITextSlots>, IStyleableComponentProps<ITextProps, ITextTokens, ITextStyles>, React.HTMLAttributes<HTMLElement> {\\n    /**\\n     * Optionally render the component as another component type or primitive.\\n     */\\n    as?: React.ElementType<React.HTMLAttributes<HTMLElement>>;\\n    /**\\n     * Optional font type for Text.\\n     */\\n    variant?: keyof IFontStyles;\\n    /**\\n     * Whether the text is displayed as a block element.\\n     *\\n     * Note that in order for ellipsis on overflow to work properly,\\n     * `block` and `nowrap` should be set to true.\\n     */\\n    block?: boolean;\\n    /**\\n     * Whether the text is not wrapped.\\n     *\\n     * Note that in order for ellipsis on overflow to work properly,\\n     * `block` and `nowrap` should be set to true.\\n     */\\n    nowrap?: boolean;\\n}\\n\\n/**\\n * {@docCategory Text}\\n */\\nexport declare type ITextSlot = ISlotProp<ITextProps, string>;\\n\\n/**\\n * {@docCategory Text}\\n */\\nexport declare interface ITextSlots {\\n    root?: IHTMLSlot;\\n}\\n\\n/**\\n * {@docCategory Text}\\n */\\nexport declare type ITextStyles = IComponentStyles<ITextSlots>;\\n\\n/**\\n * {@docCategory Text}\\n */\\nexport declare type ITextStylesReturnType = ReturnType<Extract<ITextComponent['styles'], Function>>;\\n\\n/**\\n * {@docCategory Text}\\n */\\nexport declare type ITextTokenReturnType = ReturnType<Extract<ITextComponent['tokens'], Function>>;\\n\\n/**\\n * {@docCategory Text}\\n */\\nexport declare interface ITextTokens {\\n}\\n\\nexport declare interface IThemeRules {\\n    [key: string]: IThemeSlotRule;\\n}\\n\\nexport declare interface IThemeSlotRule {\\n    /** The name of this theme slot. */\\n    name: string;\\n    /** The actual color this theme slot is if it is a color. */\\n    color?: IColor;\\n    /** The value of this slot if it is NOT a color. Must be falsey if not a color. */\\n    value?: string;\\n    /** The theme slot this slot is based on. */\\n    inherits?: IThemeSlotRule;\\n    /** If set, this slot is the specified shade of the slot it inherits from. */\\n    asShade?: Shade;\\n    /**\\n     * Whether this slot is a background shade, which uses different logic for generating its inheriting-as-shade value.\\n     */\\n    isBackgroundShade?: boolean;\\n    /** Whether this slot has been manually overridden (else, it was automatically generated based on inheritance). */\\n    isCustomized?: boolean;\\n    /**\\n     * A collection of rules that inherit from this one. It is the responsibility of the inheriting rule to add\\n     * itself to its parent's dependentRules collection.\\n     */\\n    dependentRules: IThemeSlotRule[];\\n}\\n\\n/**\\n * {@docCategory Toggle}\\n */\\nexport declare interface IToggle {\\n    focus: () => void;\\n}\\n\\n/**\\n * Toggle component props.\\n * {@docCategory Toggle}\\n */\\nexport declare interface IToggleProps extends React.HTMLAttributes<HTMLElement> {\\n    /**\\n     * Render the root element as another type.\\n     */\\n    as?: IComponentAs<React.HTMLAttributes<HTMLElement>>;\\n    /**\\n     * Optional callback to access the IToggle interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IToggle>;\\n    /**\\n     * A label for the toggle.\\n     */\\n    label?: string | JSX.Element;\\n    /**\\n     * Text to display when toggle is ON.\\n     * Caution: when not providing on/off text user may get confused in differentiating the on/off states of the toggle.\\n     */\\n    onText?: string;\\n    /**\\n     * Text to display when toggle is OFF.\\n     * Caution: when not providing on/off text user may get confused in differentiating the on/off states of the toggle.\\n     */\\n    offText?: string;\\n    /**\\n     * Text for screen-reader to announce as the name of the toggle.\\n     */\\n    ariaLabel?: string;\\n    /**\\n     * @deprecated Use `ariaLabel` for name, and let the metadata convey state\\n     */\\n    onAriaLabel?: string;\\n    /**\\n     * @deprecated Use `ariaLabel` for name, and let the metadata convey state\\n     */\\n    offAriaLabel?: string;\\n    /**\\n     * Checked state of the toggle. If you are maintaining state yourself, use this property.\\n     * Otherwise use `defaultChecked`.\\n     */\\n    checked?: boolean;\\n    /**\\n     * Initial state of the toggle. If you want the toggle to maintain its own state, use this.\\n     * Otherwise use `checked`.\\n     */\\n    defaultChecked?: boolean;\\n    /**\\n     * Optional disabled flag.\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Whether the label (not the onText/offText) should be positioned inline with the toggle control.\\n     * Left (right in RTL) side when on/off text provided VS right (left in RTL) side when no on/off text.\\n     * Caution: when not providing on/off text user may get confused in differentiating the on/off states of the toggle.\\n     */\\n    inlineLabel?: boolean;\\n    /**\\n     * Callback issued when the value changes.\\n     */\\n    onChange?: (event: React.MouseEvent<HTMLElement>, checked?: boolean) => void;\\n    /**\\n     * @deprecated Use `onChange` instead.\\n     */\\n    onChanged?: (checked: boolean) => void;\\n    /**\\n     * Theme provided by HOC.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Optional styles for the component.\\n     */\\n    styles?: IStyleFunctionOrObject<IToggleStyleProps, IToggleStyles>;\\n    /**\\n     * Optional keytip for this toggle\\n     */\\n    keytipProps?: IKeytipProps;\\n    /**\\n     * (Optional) Specify whether to use the \\\"switch\\\" role (ARIA 1.1) or the checkbox role (ARIA 1.0).\\n     * If unspecified, defaults to \\\"switch\\\".\\n     */\\n    role?: 'checkbox' | 'switch' | 'menuitemcheckbox';\\n}\\n\\nexport declare interface IToggleState {\\n    checked: boolean;\\n}\\n\\n/**\\n * Properties required to build the styles for the Toggle component.\\n * {@docCategory Toggle}\\n */\\nexport declare interface IToggleStyleProps {\\n    /**\\n     * Theme values.\\n     */\\n    theme: ITheme;\\n    /**\\n     * Root element class name.\\n     */\\n    className?: string;\\n    /**\\n     * Component is disabled.\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Component is checked.\\n     */\\n    checked?: boolean;\\n    /**\\n     * Whether label should be positioned inline with the toggle.\\n     */\\n    inlineLabel?: boolean;\\n    /**\\n     * Whether the user did not specify a on/off text. Influencing only when inlineLabel is used.\\n     */\\n    onOffMissing?: boolean;\\n}\\n\\n/**\\n * Styles for the Toggle component.\\n * {@docCategory Toggle}\\n */\\nexport declare interface IToggleStyles {\\n    /** Root element. */\\n    root: IStyle;\\n    /**\\n     * Label element above the toggle.\\n     */\\n    label: IStyle;\\n    /**\\n     * Container for the toggle pill and the text next to it.\\n     */\\n    container: IStyle;\\n    /**\\n     * Pill, rendered as a button.\\n     */\\n    pill: IStyle;\\n    /**\\n     * Thumb inside of the pill.\\n     */\\n    thumb: IStyle;\\n    /**\\n     * Text next to the pill.\\n     */\\n    text: IStyle;\\n}\\n\\n/**\\n * {@docCategory Tooltip}\\n */\\nexport declare interface ITooltip {\\n}\\n\\n/**\\n * {@docCategory Tooltip}\\n */\\nexport declare interface ITooltipHost {\\n    /**\\n     * Shows the tooltip.\\n     */\\n    show: () => void;\\n    /**\\n     * Dismisses the tooltip.\\n     */\\n    dismiss: () => void;\\n}\\n\\n/**\\n * TooltipHost props. Note that native props (such as `id`, `className`, and `aria-` props) are\\n * passed through to the Tooltip itself, rather than being used on the host element.\\n * {@docCategory Tooltip}\\n */\\nexport declare interface ITooltipHostProps extends React.HTMLAttributes<HTMLDivElement | TooltipHostBase> {\\n    /**\\n     * Optional callback to access the ITooltipHost interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<ITooltipHost>;\\n    /**\\n     * Additional properties to pass through for Callout.\\n     */\\n    calloutProps?: ICalloutProps;\\n    /**\\n     * Number of milliseconds to delay closing the tooltip, so that the user has time to hover over\\n     * the tooltip and interact with it. Hovering over the tooltip will count as hovering over the\\n     * host, so that the tooltip will stay open if the user is actively interacting with it.\\n     */\\n    closeDelay?: number;\\n    /**\\n     * Content to display in the Tooltip.\\n     */\\n    content?: string | JSX.Element | JSX.Element[];\\n    /**\\n     * Length of delay before showing the tooltip on hover.\\n     * @defaultvalue TooltipDelay.medium\\n     */\\n    delay?: TooltipDelay;\\n    /**\\n     * How the tooltip should be anchored to its `targetElement`.\\n     * @defaultvalue DirectionalHint.topCenter\\n     */\\n    directionalHint?: DirectionalHint;\\n    /**\\n     * How the element should be positioned in RTL layouts.\\n     * If not specified, a mirror of `directionalHint` will be used.\\n     */\\n    directionalHintForRTL?: DirectionalHint;\\n    /**\\n     * Class name to apply to tooltip host.\\n     */\\n    hostClassName?: string;\\n    /**\\n     * Class name to apply to the *tooltip itself*, not the host.\\n     * To apply a class to the host, use `hostClassName` or `styles.root`.\\n     */\\n    className?: string;\\n    /**\\n     * If this is unset (the default), the tooltip is always shown even if there's no overflow.\\n     *\\n     * If set, only show the tooltip if the specified element (`Self` or `Parent`) has overflow.\\n     * When set to `Parent`, the parent element is also used as the tooltip's target element.\\n     *\\n     * Note that even with `Self` mode, the TooltipHost *does not* check whether any children have overflow.\\n     */\\n    overflowMode?: TooltipOverflowMode;\\n    /**\\n     * Whether or not to mark the TooltipHost root element as described by the tooltip.\\n     * If not specified, the caller should pass an `id` to the TooltipHost (to be passed through to\\n     * the Tooltip) and mark the appropriate element as `aria-describedby` the `id`.\\n     * @defaultvalue true\\n     */\\n    setAriaDescribedBy?: boolean;\\n    /**\\n     * Additional properties to pass through for Tooltip.\\n     */\\n    tooltipProps?: ITooltipProps;\\n    /**\\n     * Optional ID to pass through to the tooltip (not used on the host itself).\\n     * Auto-generated if not provided.\\n     */\\n    id?: string;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<ITooltipHostStyleProps, ITooltipHostStyles>;\\n    /**\\n     * Theme provided by higher-order component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Notifies when tooltip becomes visible or hidden, whatever the trigger was.\\n     */\\n    onTooltipToggle?(isTooltipVisible: boolean): void;\\n}\\n\\nexport declare interface ITooltipHostState {\\n    isAriaPlaceholderRendered: boolean;\\n    isTooltipVisible: boolean;\\n}\\n\\n/**\\n * {@docCategory Tooltip}\\n */\\nexport declare interface ITooltipHostStyleProps {\\n    theme: ITheme;\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory Tooltip}\\n */\\nexport declare interface ITooltipHostStyles {\\n    /**\\n     * Style for the host wrapper element.\\n     */\\n    root: IStyle;\\n}\\n\\n/**\\n * {@docCategory Tooltip}\\n */\\nexport declare interface ITooltipProps extends React.HTMLAttributes<HTMLDivElement | TooltipBase> {\\n    /**\\n     * Optional callback to access the ITooltip interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<ITooltip>;\\n    /**\\n     * Properties to pass through for Callout.\\n     * @defaultvalue `{ isBeakVisible: true, beakWidth: 16, gapSpace: 0, setInitialFocus: true, doNotLayer: false }`\\n     */\\n    calloutProps?: ICalloutProps;\\n    /**\\n     * Content to be passed to the tooltip\\n     */\\n    content?: string | JSX.Element | JSX.Element[];\\n    /**\\n     * Render function to populate tooltip content.\\n     */\\n    onRenderContent?: IRenderFunction<ITooltipProps>;\\n    /**\\n     * Length of delay. Set to `TooltipDelay.zero` if you do not want a delay.\\n     * @defaultvalue TooltipDelay.medium\\n     */\\n    delay?: TooltipDelay;\\n    /**\\n     * Max width of tooltip\\n     * @defaultvalue 364px\\n     */\\n    maxWidth?: string | null;\\n    /**\\n     * Element to anchor the Tooltip to.\\n     */\\n    targetElement?: HTMLElement;\\n    /**\\n     * How the tooltip should be anchored to its `targetElement`.\\n     * @defaultvalue DirectionalHint.topCenter\\n     */\\n    directionalHint?: DirectionalHint;\\n    /**\\n     * How the element should be positioned in RTL layouts.\\n     * If not specified, a mirror of `directionalHint` will be used instead\\n     */\\n    directionalHintForRTL?: DirectionalHint;\\n    /**\\n     * Theme provided by higher-order component.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Call to provide customized styling that will layer on top of the variant rules.\\n     */\\n    styles?: IStyleFunctionOrObject<ITooltipStyleProps, ITooltipStyles>;\\n}\\n\\n/**\\n * {@docCategory Tooltip}\\n */\\nexport declare interface ITooltipStyleProps {\\n    theme: ITheme;\\n    className?: string;\\n    /**\\n     * Delay before tooltip appears.\\n     * @deprecated Delay logic moved to TooltipHost vs relying on animation delay.\\n     */\\n    delay?: TooltipDelay;\\n    /**\\n     * Maximum width of tooltip.\\n     */\\n    maxWidth?: string;\\n    /**\\n     * The gap between the Callout and the target\\n     * @defaultvalue 0\\n     */\\n    gapSpace?: number;\\n    /**\\n     * The width of the Callout's beak\\n     * @defaultvalue 16\\n     */\\n    beakWidth?: number;\\n}\\n\\n/**\\n * {@docCategory Tooltip}\\n */\\nexport declare interface ITooltipStyles {\\n    /**\\n     * Style for the root element.\\n     */\\n    root: IStyle;\\n    /**\\n     * Style for the content element.\\n     */\\n    content: IStyle;\\n    /**\\n     * Style for the subtext element.\\n     */\\n    subText: IStyle;\\n}\\n\\nexport declare interface IUniqueKeytip {\\n    uniqueID: string;\\n    keytip: IKeytipProps;\\n}\\n\\n/**\\n * {@docCategory VerticalDivider}\\n * @deprecated\\n * Deprecated class names, used to be used to provider customizations, use IVerticalDividerStyles instead\\n */\\nexport declare interface IVerticalDividerClassNames {\\n    /**\\n     * Styling for the div that wraps the actual divider\\n     */\\n    wrapper: string;\\n    /**\\n     * Styling for the divider.\\n     */\\n    divider: string;\\n}\\n\\n/**\\n * {@docCategory VerticalDivider}\\n * Props for the Vertical Divider\\n */\\nexport declare interface IVerticalDividerProps {\\n    /**\\n     * @deprecated Use styles instead.\\n     * Optional function to generate the class names for the divider for custom styling\\n     */\\n    getClassNames?: (theme: ITheme) => IVerticalDividerClassNames;\\n    /**\\n     * The theme that should be used to render the vertical divider.\\n     */\\n    theme?: ITheme;\\n    /**\\n     * Optional override stylings that will get merged with the dividers styles.\\n     */\\n    styles?: IStyleFunctionOrObject<IVerticalDividerPropsStyles, IVerticalDividerStyles>;\\n    /**\\n     * className that will be placed on the divider wrapper div\\n     */\\n    className?: string;\\n}\\n\\n/**\\n * {@docCategory VerticalDivider}\\n * Props that will get passed to the styling function to style the Vertical Divider\\n */\\nexport declare type IVerticalDividerPropsStyles = Pick<IVerticalDividerProps, 'theme' | 'getClassNames' | 'className'>;\\n\\n/**\\n * {@docCategory VerticalDivider}\\n * Style interface that defines the different areas that styles can be customized on the Vertical Divider\\n */\\nexport declare interface IVerticalDividerStyles {\\n    /**\\n     * Styling for the div that wraps the actual divider\\n     */\\n    wrapper: IStyle;\\n    /**\\n     * Styling for the divider.\\n     */\\n    divider: IStyle;\\n}\\n\\n/**\\n * Viewport rectangle dimensions.\\n *\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IViewport {\\n    /**\\n     * Width in pixels.\\n     */\\n    width: number;\\n    /**\\n     * Height in pixels.\\n     */\\n    height: number;\\n}\\n\\n/**\\n * Window with typings for experimental features regarding Dual Screen devices.\\n */\\nexport declare interface IWindowWithSegments extends Window {\\n    getWindowSegments?: () => DOMRect[];\\n}\\n\\ndeclare interface IWithResponsiveModeState {\\n    responsiveMode?: ResponsiveMode;\\n}\\n\\n/**\\n * Props interface for the withViewport component.\\n *\\n * {@docCategory DetailsList}\\n */\\nexport declare interface IWithViewportProps {\\n    /**\\n     * Whether or not `withViewport` should disable its viewport measurements, effectively making this decorator\\n     * pass-through with no impact on the rendered component.\\n     *\\n     * Since `withViewport` measures the `viewport` on mount, after each React update, and in response to events,\\n     * it may cause a component which does not currently need this information due to its configuration to re-render\\n     * too often. `skipViewportMeasures` may be toggled on and off based on current state, and will suspend and resume\\n     * measurement as-needed.\\n     *\\n     * For example, when this wraps `DetailsList`, set `skipViewportMeasures` to `true` when the `layoutMode` is\\n     * `fixedColumns`, since the `DetailsList` does not use the viewport size in any calculations.\\n     *\\n     * In addition, consider setting `skipViewportMeasures` to `true` when running within a React test renderer, to avoid\\n     * direct DOM dependencies.\\n     */\\n    skipViewportMeasures?: boolean;\\n    /**\\n     * Whether or not to explicitly disable usage of the `ResizeObserver` in favor of a `'resize'` event on `window`,\\n     * even if the browser supports `ResizeObserver`. This may be necessary if use of `ResizeObserver` results in too\\n     * many re-renders of the wrapped component due to the frequency at which events are fired.\\n     *\\n     * This has no impact if `skipViewportMeasures` is `true`, as no viewport measurement strategy is used.\\n     */\\n    disableResizeObserver?: boolean;\\n}\\n\\nexport declare enum KeyboardSpinDirection {\\n    down = -1,\\n    notSpinning = 0,\\n    up = 1\\n}\\n\\n/**\\n * A callout corresponding to another Fabric component to describe a key sequence that will activate that component\\n */\\nexport declare class Keytip extends React.Component<IKeytipProps, {}> {\\n    render(): JSX.Element;\\n}\\n\\n/**\\n * A small element to help the target component correctly read out its aria-describedby for its Keytip\\n * {@docCategory Keytips}\\n */\\nexport declare const KeytipData: React.FunctionComponent<IKeytipDataProps & IRenderComponent<{}>>;\\n\\nexport declare type KeytipDataOptions = IKeytipDataProps;\\n\\nexport declare namespace KeytipEvents {\\n    const KEYTIP_ADDED = \\\"keytipAdded\\\";\\n    const KEYTIP_REMOVED = \\\"keytipRemoved\\\";\\n    const KEYTIP_UPDATED = \\\"keytipUpdated\\\";\\n    const PERSISTED_KEYTIP_ADDED = \\\"persistedKeytipAdded\\\";\\n    const PERSISTED_KEYTIP_REMOVED = \\\"persistedKeytipRemoved\\\";\\n    const PERSISTED_KEYTIP_EXECUTE = \\\"persistedKeytipExecute\\\";\\n    const ENTER_KEYTIP_MODE = \\\"enterKeytipMode\\\";\\n    const EXIT_KEYTIP_MODE = \\\"exitKeytipMode\\\";\\n}\\n\\nexport declare const KeytipLayer: React.FunctionComponent<IKeytipLayerProps>;\\n\\n/**\\n * A layer that holds all keytip items\\n * {@docCategory Keytips}\\n */\\nexport declare class KeytipLayerBase extends React.Component<IKeytipLayerProps, IKeytipLayerState> {\\n    static defaultProps: IKeytipLayerProps;\\n    private _events;\\n    private _async;\\n    private _keytipTree;\\n    private _keytipManager;\\n    private _classNames;\\n    private _currentSequence;\\n    private _newCurrentKeytipSequences?;\\n    private _delayedKeytipQueue;\\n    private _delayedQueueTimeout;\\n    private _keyHandled;\\n    constructor(props: IKeytipLayerProps, context: any);\\n    render(): JSX.Element;\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    getCurrentSequence(): string;\\n    getKeytipTree(): KeytipTree;\\n    /**\\n     * Processes an IKeytipTransitionKey entered by the user\\n     *\\n     * @param transitionKey - IKeytipTransitionKey received by the layer to process\\n     */\\n    processTransitionInput(transitionKey: IKeytipTransitionKey, ev?: React.KeyboardEvent<HTMLElement>): void;\\n    /**\\n     * Processes inputs from the document listener and traverse the keytip tree\\n     *\\n     * @param key - Key pressed by the user\\n     */\\n    processInput(key: string, ev?: React.KeyboardEvent<HTMLElement>): void;\\n    /**\\n     * Show the given keytips and hide all others\\n     *\\n     * @param ids - Keytip IDs to show\\n     */\\n    showKeytips(ids: string[]): void;\\n    /**\\n     * Enters keytip mode for this layer\\n     */\\n    private _enterKeytipMode;\\n    private _buildTree;\\n    /**\\n     * Exits keytip mode for this layer\\n     */\\n    private _exitKeytipMode;\\n    /**\\n     * Sets the keytips state property\\n     *\\n     * @param keytipProps - Keytips to set in this layer\\n     */\\n    private _setKeytips;\\n    /**\\n     * Callback function to use for persisted keytips\\n     *\\n     * @param overflowButtonSequences - The overflow button sequence to execute\\n     * @param keytipSequences - The keytip that should become the 'currentKeytip' when it is registered\\n     */\\n    private _persistedKeytipExecute;\\n    private _getVisibleKeytips;\\n    private _onDismiss;\\n    private _onKeyDown;\\n    /**\\n     * Gets the ModifierKeyCodes based on the keyboard event\\n     *\\n     * @param ev - React.KeyboardEvent\\n     * @returns List of ModifierKeyCodes that were pressed\\n     */\\n    private _getModifierKey;\\n    private _onKeyPress;\\n    private _onKeytipAdded;\\n    private _onKeytipUpdated;\\n    /**\\n     * Helper function to do checks related to persisted/overflow keytips\\n     * Done on keytip added and keytip updated\\n     *\\n     * @param keytipProps - Keytip props\\n     */\\n    private _persistedKeytipChecks;\\n    private _onKeytipRemoved;\\n    private _onPersistedKeytipAdded;\\n    private _onPersistedKeytipRemoved;\\n    private _onPersistedKeytipExecute;\\n    /**\\n     * Trigger a keytip immediately and set it as the current keytip\\n     *\\n     * @param keytipProps - Keytip to trigger immediately\\n     */\\n    private _triggerKeytipImmediately;\\n    private _addKeytipToQueue;\\n    private _removeKeytipFromQueue;\\n    private _getKtpExecuteTarget;\\n    private _getKtpTarget;\\n    /**\\n     * Returns T/F if the keytipProps keySequences match the currentKeytip, and the currentKeytip is in an overflow well\\n     * This will make 'keytipProps' the new currentKeytip\\n     *\\n     * @param keytipProps - Keytip props to check\\n     * @returns - T/F if this keytip should become the currentKeytip\\n     */\\n    private _isCurrentKeytipAnAlias;\\n    /**\\n     * Sets if we are in keytip mode.\\n     * Note, this sets both the state for the layer as well as\\n     * the value that the manager will expose externally.\\n     * @param inKeytipMode - Boolean so set whether we are in keytip mode or not\\n     */\\n    private _setInKeytipMode;\\n    /**\\n     * Emits a warning if duplicate keytips are found for the children of the current keytip\\n     */\\n    private _warnIfDuplicateKeytips;\\n    /**\\n     * Returns duplicates among keytip IDs.\\n     * If the returned array is empty, no duplicates were found.\\n     *\\n     * @param keytipIds - Array of keytip IDs to find duplicates for\\n     * @returns - Array of duplicates that were found. Each duplicate will only be added once to this array.\\n     */\\n    private _getDuplicateIds;\\n}\\n\\n/**\\n * This class is responsible for handling registering, updating, and unregistering of keytips\\n */\\nexport declare class KeytipManager {\\n    private static _instance;\\n    keytips: {\\n        [key: string]: IUniqueKeytip;\\n    };\\n    persistedKeytips: {\\n        [key: string]: IUniqueKeytip;\\n    };\\n    sequenceMapping: {\\n        [key: string]: IKeytipProps;\\n    };\\n    inKeytipMode: boolean;\\n    shouldEnterKeytipMode: boolean;\\n    delayUpdatingKeytipChange: boolean;\\n    /**\\n     * Static function to get singleton KeytipManager instance\\n     *\\n     * @returns Singleton KeytipManager instance\\n     */\\n    static getInstance(): KeytipManager;\\n    /**\\n     * Initialization code to set set parameters to define\\n     * how the KeytipManager handles keytip data.\\n     *\\n     * @param delayUpdatingKeytipChange - T/F if we should delay notifiying keytip subscribers\\n     * of keytip changes\\n     */\\n    init(delayUpdatingKeytipChange: boolean): void;\\n    /**\\n     * Registers a keytip\\n     *\\n     * @param keytipProps - Keytip to register\\n     * @param persisted - T/F if this keytip should be persisted, default is false\\n     * @returns Unique ID for this keytip\\n     */\\n    register(keytipProps: IKeytipProps, persisted?: boolean): string;\\n    /**\\n     * Update a keytip\\n     *\\n     * @param keytipProps - Keytip to update\\n     * @param uniqueID - Unique ID of this keytip\\n     */\\n    update(keytipProps: IKeytipProps, uniqueID: string): void;\\n    /**\\n     * Unregisters a keytip\\n     *\\n     * @param keytipToRemove - IKeytipProps of the keytip to remove\\n     * @param uniqueID - Unique ID of this keytip\\n     * @param persisted - T/F if this keytip should be persisted, default is false\\n     */\\n    unregister(keytipToRemove: IKeytipProps, uniqueID: string, persisted?: boolean): void;\\n    /**\\n     * Manual call to enter keytip mode\\n     */\\n    enterKeytipMode(): void;\\n    /**\\n     * Manual call to exit keytip mode\\n     */\\n    exitKeytipMode(): void;\\n    /**\\n     * Gets all IKeytipProps from this.keytips\\n     *\\n     * @returns All keytips stored in the manager\\n     */\\n    getKeytips(): IKeytipProps[];\\n    /**\\n     * Adds the overflowSetSequence to the keytipProps if its parent keytip also has it\\n     *\\n     * @param keytipProps - Keytip props to add overflowSetSequence to if necessary\\n     * @returns - Modified keytip props, if needed to be modified\\n     */\\n    addParentOverflow(keytipProps: IKeytipProps): IKeytipProps;\\n    /**\\n     * Public function to bind for overflow items that have a submenu\\n     */\\n    menuExecute(overflowButtonSequences: string[], keytipSequences: string[]): void;\\n    /**\\n     * Creates an IUniqueKeytip object\\n     *\\n     * @param keytipProps - IKeytipProps\\n     * @param uniqueID - Unique ID, will default to the next unique ID if not passed\\n     * @returns IUniqueKeytip object\\n     */\\n    private _getUniqueKtp;\\n}\\n\\nexport declare type KeytipTransitionModifier = typeof KeyCodes.shift | typeof KeyCodes.ctrl | typeof KeyCodes.alt | typeof KeyCodes.leftWindow;\\n\\n/**\\n * This class is responsible for handling the parent/child relationships between keytips\\n */\\ndeclare class KeytipTree {\\n    currentKeytip?: IKeytipTreeNode;\\n    root: IKeytipTreeNode;\\n    nodeMap: {\\n        [nodeId: string]: IKeytipTreeNode;\\n    };\\n    /**\\n     * KeytipTree constructor\\n     */\\n    constructor();\\n    /**\\n     * Add a keytip node to this KeytipTree\\n     *\\n     * @param keytipProps - Keytip to add to the Tree\\n     * @param uniqueID - Unique ID for this keytip\\n     * @param persisted - T/F if this keytip should be marked as persisted\\n     */\\n    addNode(keytipProps: IKeytipProps, uniqueID: string, persisted?: boolean): void;\\n    /**\\n     * Updates a node in the tree\\n     *\\n     * @param keytipProps - Keytip props to update\\n     * @param uniqueID - Unique ID for this keytip\\n     */\\n    updateNode(keytipProps: IKeytipProps, uniqueID: string): void;\\n    /**\\n     * Removes a node from the KeytipTree\\n     *\\n     * @param sequence - full string of the node to remove\\n     */\\n    removeNode(keytipProps: IKeytipProps, uniqueID: string): void;\\n    /**\\n     * Searches the currentKeytip's children to exactly match a sequence. Will not match disabled nodes but\\n     * will match persisted nodes\\n     *\\n     * @param keySequence - string to match\\n     * @param currentKeytip - The keytip whose children will try to match\\n     * @returns The node that exactly matched the keySequence, or undefined if none matched\\n     */\\n    getExactMatchedNode(keySequence: string, currentKeytip: IKeytipTreeNode): IKeytipTreeNode | undefined;\\n    /**\\n     * Searches the currentKeytip's children to find nodes that start with the given sequence. Will not match\\n     * disabled nodes but will match persisted nodes\\n     *\\n     * @param keySequence - string to partially match\\n     * @param currentKeytip - The keytip whose children will try to partially match\\n     * @returns List of tree nodes that partially match the given sequence\\n     */\\n    getPartiallyMatchedNodes(keySequence: string, currentKeytip: IKeytipTreeNode): IKeytipTreeNode[];\\n    /**\\n     * Get the non-persisted children of the give node\\n     * If no node is given, will use the 'currentKeytip'\\n     *\\n     * @param node - Node to get the children for\\n     * @returns List of node IDs that are the children of the node\\n     */\\n    getChildren(node?: IKeytipTreeNode): string[];\\n    /**\\n     * Gets all nodes from their IDs\\n     *\\n     * @param ids - List of keytip IDs\\n     * @returns Array of nodes that match the given IDs, can be empty\\n     */\\n    getNodes(ids: string[]): IKeytipTreeNode[];\\n    /**\\n     * Gets a single node from its ID\\n     *\\n     * @param id - ID of the node to get\\n     * @returns Node with the given ID, if found\\n     */\\n    getNode(id: string): IKeytipTreeNode | undefined;\\n    /**\\n     * Tests if the currentKeytip in this.keytipTree is the parent of 'keytipProps'\\n     *\\n     * @param keytipProps - Keytip to test the parent for\\n     * @returns T/F if the currentKeytip is this keytipProps' parent\\n     */\\n    isCurrentKeytipParent(keytipProps: IKeytipProps): boolean;\\n    private _getParentID;\\n    private _getFullSequence;\\n    private _getNodeSequence;\\n    private _createNode;\\n}\\n\\nexport declare const KTP_ARIA_SEPARATOR = \\\", \\\";\\n\\nexport declare const KTP_FULL_PREFIX: string;\\n\\nexport declare const KTP_LAYER_ID = \\\"ktp-layer-id\\\";\\n\\nexport declare const KTP_PREFIX = \\\"ktp\\\";\\n\\nexport declare const KTP_SEPARATOR = \\\"-\\\";\\n\\n/**\\n * Constructs the data-ktp-execute-target attribute selector from a keytip ID.\\n *\\n * @param keytipId - ID of the Keytip.\\n * @returns String selector to use to query for the keytip execute target.\\n */\\nexport declare function ktpTargetFromId(keytipId: string): string;\\n\\n/**\\n * Constructs the data-ktp-target attribute selector from a full key sequence.\\n *\\n * @param keySequences - Full string[] for a Keytip.\\n * @returns String selector to use to query for the keytip target.\\n */\\nexport declare function ktpTargetFromSequences(keySequences: string[]): string;\\n\\nexport declare const Label: React.FunctionComponent<ILabelProps>;\\n\\nexport declare class LabelBase extends React.Component<ILabelProps, {}> {\\n    render(): JSX.Element;\\n}\\n\\nexport declare const Layer: React.FunctionComponent<ILayerProps>;\\n\\nexport declare class LayerBase extends React.Component<ILayerProps, ILayerBaseState> {\\n    static defaultProps: ILayerProps;\\n    private _rootRef;\\n    constructor(props: ILayerProps);\\n    componentDidMount(): void;\\n    render(): React.ReactNode;\\n    componentDidUpdate(): void;\\n    componentWillUnmount(): void;\\n    private _createLayerElement;\\n    private _removeLayerElement;\\n    private _getClassNames;\\n    private _getHost;\\n}\\n\\nexport declare class LayerHost extends React.Component<ILayerHostProps> {\\n    shouldComponentUpdate(): boolean;\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    render(): JSX.Element;\\n}\\n\\nexport declare const Link: React.FunctionComponent<ILinkProps>;\\n\\nexport declare class LinkBase extends React.Component<ILinkProps, {}> implements ILink {\\n    private _link;\\n    constructor(props: ILinkProps);\\n    render(): JSX.Element;\\n    focus(): void;\\n    private _renderContent;\\n    private _onClick;\\n    private _adjustPropsForRootType;\\n    private _getRootType;\\n}\\n\\n/**\\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback\\n * if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if\\n * provided by the caller, or by cached measurements if available, or by a running average, or a default fallback.\\n *\\n * The algorithm for rendering pages works like this:\\n *\\n * 1. Predict visible pages based on \\\"current measure data\\\" (page heights, surface position, visible window)\\n * 2. If changes are necessary, apply changes (add/remove pages)\\n * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect\\n * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\\n *\\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that\\n * we can avoid re-measuring during operations that should not alter heights, like scrolling.\\n *\\n * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,\\n * List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time.\\n * And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold.\\n *\\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,\\n * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion\\n * number, which we associate with cached measurements and use to determine if a remeasure should occur.\\n */\\nexport declare class List<T = any> extends React.Component<IListProps<T>, IListState<T>> implements IList {\\n    static defaultProps: {\\n        startIndex: number;\\n        onRenderCell: (item: any, index: number, containsFocus: boolean) => JSX.Element;\\n        renderedWindowsAhead: number;\\n        renderedWindowsBehind: number;\\n    };\\n    private _root;\\n    private _surface;\\n    private _pageRefs;\\n    private _async;\\n    private _events;\\n    private _estimatedPageHeight;\\n    private _totalEstimates;\\n    private _cachedPageHeights;\\n    private _focusedIndex;\\n    private _scrollElement;\\n    private _hasCompletedFirstRender;\\n    private _surfaceRect;\\n    private _requiredRect;\\n    private _allowedRect;\\n    private _visibleRect;\\n    private _materializedRect;\\n    private _requiredWindowsAhead;\\n    private _requiredWindowsBehind;\\n    private _measureVersion;\\n    private _scrollHeight;\\n    private _scrollTop;\\n    private _pageCache;\\n    static getDerivedStateFromProps<T = any>(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T>;\\n    constructor(props: IListProps<T>);\\n    readonly pageRefs: Readonly<Record<string, unknown>>;\\n    /**\\n     * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\\n     * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\\n     *\\n     * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\\n     * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\\n     *\\n     * @param index - Index of item to scroll to\\n     * @param measureItem - Optional callback to measure the height of an individual item\\n     * @param scrollToMode - Optional defines where in the window the item should be positioned to when scrolling\\n     */\\n    scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void;\\n    getStartItemIndexInView(measureItem?: (itemIndex: number) => number): number;\\n    componentDidMount(): void;\\n    componentDidUpdate(previousProps: IListProps, previousState: IListState<T>): void;\\n    componentWillUnmount(): void;\\n    shouldComponentUpdate(newProps: IListProps<T>, newState: IListState<T>): boolean;\\n    forceUpdate(): void;\\n    /**\\n     * Get the current height the list and it's pages.\\n     */\\n    getTotalListHeight(): number;\\n    render(): JSX.Element | null;\\n    private _getDerivedStateFromProps;\\n    private _shouldVirtualize;\\n    /**\\n     * when props.items change or forceUpdate called, throw away cached pages\\n     */\\n    private _invalidatePageCache;\\n    private _renderPage;\\n    private _onRenderRoot;\\n    private _onRenderSurface;\\n    /** Generate the style object for the page. */\\n    private _getPageStyle;\\n    private _onRenderPage;\\n    /** Track the last item index focused so that we ensure we keep it rendered. */\\n    private _onFocus;\\n    /**\\n     * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,\\n     * we will call onAsyncIdle which will reset it back to it's correct value.\\n     */\\n    private _onScroll;\\n    private _resetRequiredWindows;\\n    /**\\n     * Debounced method to asynchronously update the visible region on a scroll event.\\n     */\\n    private _onAsyncScroll;\\n    /**\\n     * This is an async debounced method that will try and increment the windows we render. If we can increment\\n     * either, we increase the amount we render and re-evaluate.\\n     */\\n    private _onAsyncIdle;\\n    /**\\n     * Function to call when the list is done scrolling.\\n     * This function is debounced.\\n     */\\n    private _onScrollingDone;\\n    private _onAsyncResize;\\n    private _updatePages;\\n    /**\\n     * Notify consumers that the rendered pages have changed\\n     * @param oldPages - The old pages\\n     * @param newPages - The new pages\\n     * @param props - The props to use\\n     */\\n    private _notifyPageChanges;\\n    private _updatePageMeasurements;\\n    /**\\n     * Given a page, measure its dimensions, update cache.\\n     * @returns True if the height has changed.\\n     */\\n    private _measurePage;\\n    /** Called when a page has been added to the DOM. */\\n    private _onPageAdded;\\n    /** Called when a page has been removed from the DOM. */\\n    private _onPageRemoved;\\n    /** Build up the pages that should be rendered. */\\n    private _buildPages;\\n    private _getPageSpecification;\\n    /**\\n     * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to\\n     * cached height, or estimated page height, or default page height.\\n     */\\n    private _getPageHeight;\\n    private _getItemCountForPage;\\n    private _createPage;\\n    private _getRenderCount;\\n    /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */\\n    private _updateRenderRects;\\n}\\n\\nexport declare const ListPeoplePicker: React.FunctionComponent<IPeoplePickerProps>;\\n\\n/**\\n * MemberList layout. The selected people show up below the search box.\\n * {@docCategory PeoplePicker}\\n */\\nexport declare class ListPeoplePickerBase extends MemberListPeoplePicker {\\n    /** Default props for ListPeoplePicker. */\\n    static defaultProps: {\\n        onRenderItem: (props: IPeoplePickerItemSelectedProps) => JSX.Element;\\n        onRenderSuggestionsItem: (personaProps: IPersonaProps, suggestionsProps?: IBasePickerSuggestionsProps<any> | undefined) => JSX.Element;\\n        createGenericItem: typeof createGenericItem;\\n    };\\n}\\n\\nexport declare const MarqueeSelection: React.FunctionComponent<IMarqueeSelectionProps>;\\n\\nexport declare class MaskedTextField extends React.Component<IMaskedTextFieldProps, IMaskedTextFieldState> implements ITextField {\\n    static defaultProps: IMaskedTextFieldProps;\\n    private _textField;\\n    /**\\n     *  An array of data containing information regarding the format characters,\\n     *  their indices inside the display text, and their corresponding values.\\n     * @example\\n     * ```\\n     *  [\\n     *    { value: '1', displayIndex: 16, format: /[0-9]/ },\\n     *    { value: '2', displayIndex: 17, format: /[0-9]/ },\\n     *    { displayIndex: 18, format: /[0-9]/ },\\n     *    { value: '4', displayIndex: 22, format: /[0-9]/ },\\n     *    ...\\n     *  ]\\n     * ```\\n     */\\n    private _maskCharData;\\n    /** True if the TextField is focused */\\n    private _isFocused;\\n    /** True if the TextField was not focused and it was clicked into */\\n    private _moveCursorOnMouseUp;\\n    /** The stored selection data prior to input change events. */\\n    private _changeSelectionData;\\n    constructor(props: IMaskedTextFieldProps);\\n    UNSAFE_componentWillReceiveProps(newProps: IMaskedTextFieldProps): void;\\n    componentDidUpdate(): void;\\n    render(): JSX.Element;\\n    /**\\n     * @returns The value of all filled format characters or undefined if not all format characters are filled\\n     */\\n    readonly value: string | undefined;\\n    setValue(newValue: string): void;\\n    focus(): void;\\n    blur(): void;\\n    select(): void;\\n    setSelectionStart(value: number): void;\\n    setSelectionEnd(value: number): void;\\n    setSelectionRange(start: number, end: number): void;\\n    readonly selectionStart: number | null;\\n    readonly selectionEnd: number | null;\\n    private _onFocus;\\n    private _onBlur;\\n    private _onMouseDown;\\n    private _onMouseUp;\\n    private _onInputChange;\\n    private _onKeyDown;\\n    private _onPaste;\\n}\\n\\nexport declare const MAX_COLOR_ALPHA = 100;\\n\\nexport declare const MAX_COLOR_HUE = 359;\\n\\nexport declare const MAX_COLOR_RGB = 255;\\n\\n/** @deprecated Use MAX_COLOR_RGB (255) or MAX_COLOR_ALPHA (100) */\\nexport declare const MAX_COLOR_RGBA = 255;\\n\\nexport declare const MAX_COLOR_SATURATION = 100;\\n\\nexport declare const MAX_COLOR_VALUE = 100;\\n\\n/** Maximum length for a hexadecimal color string (not including the #) */\\nexport declare const MAX_HEX_LENGTH = 6;\\n\\n/** Maximum length for a string of an RGBA color component */\\nexport declare const MAX_RGBA_LENGTH = 3;\\n\\nexport declare const MeasuredContext: React.Context<{\\n    isMeasured: boolean;\\n}>;\\n\\n/**\\n * {@docCategory PeoplePicker}\\n */\\nexport declare class MemberListPeoplePicker extends BasePickerListBelow<IPersonaProps, IPeoplePickerProps> {\\n}\\n\\n/**\\n * Merges an overflow sequence with a key sequence.\\n *\\n * @param keySequences - Full sequence for one keytip.\\n * @param overflowKeySequences - Full overflow keytip sequence.\\n * @returns Sequence that will be used by the keytip when in the overflow.\\n */\\nexport declare function mergeOverflows(keySequences: string[], overflowKeySequences: string[]): string[];\\n\\nexport declare const MessageBar: React.FunctionComponent<IMessageBarProps>;\\n\\nexport declare class MessageBarBase extends React.Component<IMessageBarProps, IMessageBarState> {\\n    static defaultProps: IMessageBarProps;\\n    private ICON_MAP;\\n    private _classNames;\\n    constructor(props: IMessageBarProps);\\n    render(): JSX.Element;\\n    private _getActionsDiv;\\n    private _getDismissDiv;\\n    private _getDismissSingleLine;\\n    private _getExpandSingleLine;\\n    private _getIconSpan;\\n    private _renderMultiLine;\\n    private _renderSingleLine;\\n    private _renderInnerText;\\n    private _getRegionProps;\\n    private _getClassNames;\\n    private _getAnnouncementPriority;\\n    private _onClick;\\n}\\n\\n/**\\n * {@docCategory MessageBar}\\n */\\nexport declare class MessageBarButton extends React.Component<IButtonProps, {}> {\\n    render(): JSX.Element;\\n}\\n\\n/**\\n * {@docCategory MessageBar}\\n */\\nexport declare enum MessageBarType {\\n    /** Info styled MessageBar */\\n    info = 0,\\n    /** Error styled MessageBar */\\n    error = 1,\\n    /** Blocked styled MessageBar */\\n    blocked = 2,\\n    /** SevereWarning styled MessageBar */\\n    severeWarning = 3,\\n    /** Success styled MessageBar */\\n    success = 4,\\n    /** Warning styled MessageBar */\\n    warning = 5\\n}\\n\\n/** Minimum length for a hexadecimal color string (not including the #) */\\nexport declare const MIN_HEX_LENGTH = 3;\\n\\n/** Minimum length for a string of an RGBA color component */\\nexport declare const MIN_RGBA_LENGTH = 1;\\n\\nexport declare const Modal: React.FunctionComponent<IModalProps>;\\n\\nexport declare class ModalBase extends React.Component<IModalProps, IDialogState> implements IModal {\\n    static defaultProps: IModalProps;\\n    private _onModalCloseTimer;\\n    private _focusTrapZone;\\n    private _scrollableContent;\\n    private _lastSetX;\\n    private _lastSetY;\\n    private _allowTouchBodyScroll;\\n    private _hasRegisteredKeyUp;\\n    private _async;\\n    private _events;\\n    private _minClampedPosition;\\n    private _maxClampedPosition;\\n    constructor(props: IModalProps);\\n    UNSAFE_componentWillReceiveProps(newProps: IModalProps): void;\\n    componentDidMount(): void;\\n    componentDidUpdate(prevProps: IModalProps, prevState: IDialogState): void;\\n    componentWillUnmount(): void;\\n    render(): JSX.Element | null;\\n    focus(): void;\\n    private _registerInitialModalPosition;\\n    /**\\n     * Clamps the position coordinates to the maximum/minimum value specified in props\\n     */\\n    private _getClampedPosition;\\n    private _getClampedPositionY;\\n    private _getClampedPositionX;\\n    private _allowScrollOnModal;\\n    private _onModalContextMenuClose;\\n    private _onModalClose;\\n    private _onDragStart;\\n    private _onDrag;\\n    private _onDragStop;\\n    private _onKeyUp;\\n    private _onKeyDown;\\n    private _getMoveDelta;\\n    private _onEnterKeyboardMoveMode;\\n    private _onExitKeyboardMoveMode;\\n    private _registerForKeyUp;\\n}\\n\\nexport declare const Nav: React.FunctionComponent<INavProps>;\\n\\nexport declare class NavBase extends React.Component<INavProps, INavState> implements INav {\\n    static defaultProps: INavProps;\\n    private _focusZone;\\n    constructor(props: INavProps);\\n    render(): JSX.Element | null;\\n    readonly selectedKey: string | undefined;\\n    /**\\n     * Sets focus to the first tabbable item in the zone.\\n     * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\\n     * if focus is already in the focus zone.\\n     * @returns True if focus could be set to an active element, false if no operation was taken.\\n     */\\n    focus(forceIntoFirstElement?: boolean): boolean;\\n    private _onRenderLink;\\n    private _renderNavLink;\\n    private _renderCompositeLink;\\n    private _renderLink;\\n    private _renderLinks;\\n    private _renderGroup;\\n    private _renderGroupHeader;\\n    private _onGroupHeaderClicked;\\n    private _onLinkExpandClicked;\\n    private _preventBounce;\\n    private _onNavAnchorLinkClicked;\\n    private _onNavButtonLinkClicked;\\n    private _isLinkSelected;\\n    private _isGroupExpanded;\\n    private _toggleCollapsed;\\n}\\n\\nexport declare const NormalPeoplePicker: React.FunctionComponent<IPeoplePickerProps>;\\n\\n/**\\n * Standard People Picker.\\n * {@docCategory PeoplePicker}\\n */\\nexport declare class NormalPeoplePickerBase extends BasePeoplePicker {\\n    /** Default props for NormalPeoplePicker. */\\n    static defaultProps: {\\n        onRenderItem: (props: IPeoplePickerItemSelectedProps) => JSX.Element;\\n        onRenderSuggestionsItem: (personaProps: IPersonaProps, suggestionsProps?: IBasePickerSuggestionsProps<any> | undefined) => JSX.Element;\\n        createGenericItem: typeof createGenericItem;\\n    };\\n}\\n\\n/**\\n * @deprecated Use `IChoiceGroupOptionProps['onChange']` directly\\n * {@docCategory ChoiceGroup}\\n */\\nexport declare type OnChangeCallback = IChoiceGroupOptionProps['onChange'];\\n\\n/**\\n * @deprecated Use `IChoiceGroupOptionProps['onFocus']` directly\\n * {@docCategory ChoiceGroup}\\n */\\nexport declare type OnFocusCallback = IChoiceGroupOptionProps['onFocus'];\\n\\nexport declare const ONKEYDOWN_TIMEOUT_DURATION = 1000;\\n\\n/**\\n * {@docCategory HoverCard}\\n */\\nexport declare enum OpenCardMode {\\n    /**\\n     * Open card by hover\\n     */\\n    hover = 0,\\n    /**\\n     * Open card by hot key\\n     */\\n    hotKey = 1\\n}\\n\\n/**\\n * {@docCategory Facepile}\\n */\\nexport declare enum OverflowButtonType {\\n    /** No overflow */\\n    none = 0,\\n    /** +1 overflow icon */\\n    descriptive = 1,\\n    /** More overflow icon */\\n    more = 2,\\n    /** Chevron overflow icon */\\n    downArrow = 3\\n}\\n\\nexport declare const OverflowSet: React.FunctionComponent<IOverflowSetProps>;\\n\\nexport declare class OverflowSetBase extends React.Component<IOverflowSetProps, {}> implements IOverflowSet {\\n    private _focusZone;\\n    private _persistedKeytips;\\n    private _keytipManager;\\n    private _divContainer;\\n    private _classNames;\\n    constructor(props: IOverflowSetProps);\\n    render(): JSX.Element;\\n    /**\\n     * Sets focus to the first tabbable item in the OverflowSet.\\n     * @param forceIntoFirstElement - If true, focus will be forced into the first element,\\n     * even if focus is already in theOverflowSet\\n     * @returns True if focus could be set to an active element, false if no operation was taken.\\n     */\\n    focus(forceIntoFirstElement?: boolean): boolean;\\n    /**\\n     * Sets focus to a specific child element within the OverflowSet.\\n     * @param childElement - The child element within the zone to focus.\\n     * @returns True if focus could be set to an active element, false if no operation was taken.\\n     */\\n    focusElement(childElement?: HTMLElement): boolean;\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    UNSAFE_componentWillUpdate(): void;\\n    componentDidUpdate(): void;\\n    private _registerPersistedKeytips;\\n    private _unregisterPersistedKeytips;\\n    private _onRenderItems;\\n    private _onRenderOverflowButtonWrapper;\\n    /**\\n     * Gets the subMenu for an overflow item\\n     * Checks if itemSubMenuProvider has been defined, if not defaults to subMenuProps\\n     */\\n    private _getSubMenuForItem;\\n}\\n\\nexport declare const Overlay: React.FunctionComponent<IOverlayProps>;\\n\\nexport declare class OverlayBase extends React.Component<IOverlayProps, {}> {\\n    private _allowTouchBodyScroll;\\n    constructor(props: IOverlayProps);\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    render(): JSX.Element;\\n}\\n\\n/**\\n * Panel description\\n */\\nexport declare const Panel: React.FunctionComponent<IPanelProps>;\\n\\nexport declare class PanelBase extends React.Component<IPanelProps, IPanelState> implements IPanel {\\n    static defaultProps: IPanelProps;\\n    private _async;\\n    private _events;\\n    private _panel;\\n    private _classNames;\\n    private _scrollableContent;\\n    private _animationCallback;\\n    private _hasCustomNavigation;\\n    private _headerTextId;\\n    private _allowTouchBodyScroll;\\n    static getDerivedStateFromProps(nextProps: Readonly<IPanelProps>, prevState: Readonly<IPanelState>): Partial<IPanelState> | null;\\n    constructor(props: IPanelProps);\\n    componentDidMount(): void;\\n    componentDidUpdate(previousProps: IPanelProps, previousState: IPanelState): void;\\n    componentWillUnmount(): void;\\n    render(): JSX.Element | null;\\n    open(): void;\\n    close(): void;\\n    dismiss: (ev?: React.SyntheticEvent<HTMLElement, Event> | undefined) => void;\\n    /** isActive is true when panel is open or opening. */\\n    readonly isActive: boolean;\\n    private _allowScrollOnPanel;\\n    private _shouldListenForOuterClick;\\n    private _onRenderNavigation;\\n    private _onRenderNavigationContent;\\n    private _onRenderHeader;\\n    private _onRenderBody;\\n    private _onRenderFooter;\\n    private _updateFooterPosition;\\n    private _dismissOnOuterClick;\\n    private _animateTo;\\n    private _clearExistingAnimationTimer;\\n    private _onPanelClick;\\n    private _onTransitionComplete;\\n}\\n\\n/**\\n * {@docCategory Panel}\\n */\\nexport declare enum PanelType {\\n    /**\\n     * Renders the Panel with a `fluid` (full screen) width.\\n     * Recommended for use on small screen breakpoints.\\n     * - Small (320-479): full screen width, 16px left/right padding\\n     * - Medium (480-639): full screen width, 16px left/right padding\\n     * - Large (640-1023): full screen width, 32px left/right padding\\n     * - XLarge (1024-1365): full screen width, 32px left/right padding\\n     * - XXLarge (1366-up): full screen width, 40px left/right padding\\n     */\\n    smallFluid = 0,\\n    /**\\n     * Renders the Panel in fixed-width `small` size, anchored to the far side (right in LTR mode).\\n     * - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint\\n     * - Medium (480-639): 340px width, 16px left/right padding\\n     * - Large (640-1023): 340px width, 32px left/right padding\\n     * - XLarge (1024-1365): 340px width, 32px left/right padding\\n     * - XXLarge (1366-up): 340px width, 40px left/right padding\\n     */\\n    smallFixedFar = 1,\\n    /**\\n     * Renders the Panel in fixed-width `small` size, anchored to the near side (left in LTR mode).\\n     * - Small (320-479): 272px width, 16px left/right padding\\n     * - Medium (480-639): 272px width, 16px left/right padding\\n     * - Large (640-1023): 272px width, 32px left/right padding\\n     * - XLarge (1024-1365): 272px width, 32px left/right padding\\n     * - XXLarge (1366-up): 272px width, 40px left/right padding\\n     */\\n    smallFixedNear = 2,\\n    /**\\n     * Renders the Panel in `medium` size, anchored to the far side (right in LTR mode).\\n     * - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint\\n     * - Medium (480-639): adapts to `PanelType.smallFixedFar` at this breakpoint\\n     * - Large (640-1023): 592px width, 32px left/right padding\\n     * - XLarge (1024-1365): 644px width, 32px left/right padding\\n     * - XXLarge (1366-up): 644px width, 40px left/right padding\\n     */\\n    medium = 3,\\n    /**\\n     * Renders the Panel in `large` size, anchored to the far side (right in LTR mode).\\n     * - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint\\n     * - Medium (480-639):  adapts to `PanelType.smallFixedFar` at this breakpoint\\n     * - Large (640-1023): adapts to `PanelType.medium` at this breakpoint\\n     * - XLarge (1024-1365): 48px fixed left margin, fluid width, 32px left/right padding\\n     * - XXLarge (1366-up): 428px fixed left margin, fluid width, 40px left/right padding\\n     */\\n    large = 4,\\n    /**\\n     * Renders the Panel in `large` size, anchored to the far side (right in LTR mode), with a fixed width at\\n     * XX-Large breakpoint.\\n     * - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint\\n     * - Medium (480-639): adapts to `PanelType.smallFixedFar` at this breakpoint\\n     * - Large (640-1023): adapts to `PanelType.medium` at this breakpoint\\n     * - XLarge (1024-1365): 48px fixed left margin, fluid width, 32px left/right padding\\n     * - XXLarge (1366-up): 940px width, 40px left/right padding\\n     */\\n    largeFixed = 5,\\n    /**\\n     * Renders the Panel in `extra large` size, anchored to the far side (right in LTR mode).\\n     * - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint\\n     * - Medium (480-639): adapts to `PanelType.smallFixedFar` at this breakpoint\\n     * - Large (640-1023): adapts to `PanelType.medium` at this breakpoint\\n     * - XLarge (1024-1365): adapts to `PanelType.large` at this breakpoint\\n     * - XXLarge (1366-1919): 176px fixed left margin, fluid width, 40px left/right padding\\n     * - XXXLarge (1920-up): 176px fixed left margin, fluid width, 40px left/right padding\\n     */\\n    extraLarge = 6,\\n    /**\\n     * Renders the Panel in `custom` size using `customWidth`, anchored to the far side (right in LTR mode).\\n     * - Has a fixed width provided by the `customWidth` prop\\n     * - When screen width reaches the `customWidth` value it will behave like a fluid width Panel\\n     * taking up 100% of the viewport width\\n     */\\n    custom = 7,\\n    /**\\n     * Renders the Panel in `custom` size using `customWidth`, anchored to the near side (left in LTR mode).\\n     * - Has a fixed width provided by the `customWidth` prop\\n     * - When screen width reaches the `customWidth` value it will behave like a fluid width Panel\\n     * taking up 100% of the viewport width\\n     */\\n    customNear = 8\\n}\\n\\ndeclare enum PanelVisibilityState {\\n    closed = 0,\\n    animatingOpen = 1,\\n    open = 2,\\n    animatingClosed = 3\\n}\\n\\nexport declare const PeoplePickerItem: React.FunctionComponent<IPeoplePickerItemSelectedProps>;\\n\\nexport declare const PeoplePickerItemBase: (props: IPeoplePickerItemSelectedProps) => JSX.Element;\\n\\nexport declare const PeoplePickerItemSuggestion: React.FunctionComponent<IPeoplePickerItemSuggestionProps>;\\n\\nexport declare const PeoplePickerItemSuggestionBase: (props: IPeoplePickerItemSuggestionProps) => JSX.Element;\\n\\n/**\\n * Personas are used for rendering an individual's avatar, presence and details.\\n * They are used within the PeoplePicker components.\\n */\\nexport declare const Persona: React.FunctionComponent<IPersonaProps>;\\n\\n/**\\n * Persona with no default styles.\\n * [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\\n */\\nexport declare class PersonaBase extends React.Component<IPersonaProps, {}> {\\n    static defaultProps: IPersonaProps;\\n    constructor(props: IPersonaProps);\\n    render(): JSX.Element;\\n    /**\\n     * Renders various types of Text (primaryText, secondaryText, etc)\\n     * based on the classNames passed\\n     * @param classNames - element className\\n     * @param renderFunction - render function\\n     * @param defaultRenderFunction - default render function\\n     */\\n    private _renderElement;\\n    /**\\n     * Deprecation helper for getting text.\\n     */\\n    private _getText;\\n    /**\\n     * using closure to wrap the default render behavior\\n     * to make it independent of the type of text passed\\n     * @param text - text to render\\n     */\\n    private _onRenderText;\\n    private _onRenderPersonaCoin;\\n}\\n\\n/**\\n * PersonaCoin is used to render an individual's avatar and presence.\\n */\\nexport declare const PersonaCoin: React.FunctionComponent<IPersonaCoinProps>;\\n\\n/**\\n * PersonaCoin with no default styles.\\n * [Use the `getStyles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\\n */\\nexport declare class PersonaCoinBase extends React.Component<IPersonaCoinProps, IPersonaState> {\\n    static defaultProps: IPersonaCoinProps;\\n    constructor(props: IPersonaCoinProps);\\n    UNSAFE_componentWillReceiveProps(nextProps: IPersonaCoinProps): void;\\n    render(): JSX.Element | null;\\n    private _onRenderCoin;\\n    /**\\n     * Deprecation helper for getting text.\\n     */\\n    private _getText;\\n    private _onRenderInitials;\\n    private _onPhotoLoadingStateChange;\\n}\\n\\n/**\\n * {@docCategory Persona}\\n */\\nexport declare enum PersonaInitialsColor {\\n    lightBlue = 0,\\n    blue = 1,\\n    darkBlue = 2,\\n    teal = 3,\\n    lightGreen = 4,\\n    green = 5,\\n    darkGreen = 6,\\n    lightPink = 7,\\n    pink = 8,\\n    magenta = 9,\\n    purple = 10,\\n    /**\\n     * Black can result in offensive persona coins with some initials combinations, so it can only be set with overrides.\\n     * @deprecated will be removed in a future major release.\\n     */\\n    black = 11,\\n    orange = 12,\\n    /**\\n     * Red often has a special meaning, so it is considered a reserved color and can only be set with overrides.\\n     * @deprecated will be removed in a future major release.\\n     */\\n    red = 13,\\n    darkRed = 14,\\n    /**\\n     * Transparent is not intended to be used with typical initials due to accessibility issues.\\n     * Its primary use is for overflow buttons, so it is considered a reserved color and can only be set with overrides.\\n     */\\n    transparent = 15,\\n    violet = 16,\\n    lightRed = 17,\\n    gold = 18,\\n    burgundy = 19,\\n    warmGray = 20,\\n    coolGray = 21,\\n    /**\\n     * Gray can result in offensive persona coins with some initials combinations, so it can only be set with overrides.\\n     */\\n    gray = 22,\\n    cyan = 23,\\n    rust = 24\\n}\\n\\n/**\\n * {@docCategory Persona}\\n */\\nexport declare enum PersonaPresence {\\n    none = 0,\\n    offline = 1,\\n    online = 2,\\n    away = 3,\\n    dnd = 4,\\n    blocked = 5,\\n    busy = 6\\n}\\n\\nexport declare namespace personaPresenceSize {\\n    const size6 = \\\"6px\\\";\\n    const size8 = \\\"8px\\\";\\n    const size12 = \\\"12px\\\";\\n    const size16 = \\\"16px\\\";\\n    const size20 = \\\"20px\\\";\\n    const size28 = \\\"28px\\\";\\n    const size32 = \\\"32px\\\";\\n    /**\\n     * @deprecated This is now unused\\n     */\\n    const border = \\\"2px\\\";\\n}\\n\\n/**\\n * {@docCategory Persona}\\n */\\nexport declare enum PersonaSize {\\n    /**\\n     * `tiny` size has been deprecated in favor of standardized numeric sizing. Use `size8` instead.\\n     * @deprecated Use `size8` instead.\\n     */\\n    tiny = 0,\\n    /**\\n     *\\n     * `extraExtraSmall` size has been deprecated in favor of standardized numeric sizing. Use `size24` instead.\\n     * @deprecated Use `size24` instead.\\n     */\\n    extraExtraSmall = 1,\\n    /**\\n     * `extraSmall` size has been deprecated in favor of standardized numeric sizing. Use `size32` instead.\\n     * @deprecated Use `size32` instead.\\n     */\\n    extraSmall = 2,\\n    /**\\n     * `small` size has been deprecated in favor of standardized numeric sizing. Use `size40` instead.\\n     * @deprecated Use `size40` instead.\\n     */\\n    small = 3,\\n    /**\\n     * `regular` size has been deprecated in favor of standardized numeric sizing. Use `size48` instead.\\n     * @deprecated Use `size48` instead.\\n     */\\n    regular = 4,\\n    /**\\n     * `large` size has been deprecated in favor of standardized numeric sizing. Use `size72` instead.\\n     * @deprecated Use `size72` instead.\\n     */\\n    large = 5,\\n    /**\\n     * `extraLarge` size has been deprecated in favor of standardized numeric sizing. Use `size100` instead.\\n     * @deprecated Use `size100` instead.\\n     */\\n    extraLarge = 6,\\n    /**\\n     * No `PersonaCoin` is rendered.\\n     */\\n    size8 = 17,\\n    /**\\n     * No `PersonaCoin` is rendered. Deprecated in favor of `size8` to align with design specifications.\\n     * @deprecated Use `size8` instead. Will be removed in a future major release.\\n     */\\n    size10 = 9,\\n    /**\\n     * Renders a 16px `PersonaCoin`. Deprecated due to not being in the design specification.\\n     * @deprecated Will be removed in a future major release.\\n     */\\n    size16 = 8,\\n    /**\\n     * Renders a 24px `PersonaCoin`.\\n     */\\n    size24 = 10,\\n    /**\\n     * Renders a 28px `PersonaCoin`. Deprecated due to not being in the design specification.\\n     * @deprecated Will be removed in a future major release.\\n     */\\n    size28 = 7,\\n    /**\\n     * Renders a 32px `PersonaCoin`.\\n     */\\n    size32 = 11,\\n    /**\\n     * Renders a 40px `PersonaCoin`.\\n     */\\n    size40 = 12,\\n    /**\\n     * Renders a 48px `PersonaCoin`.\\n     */\\n    size48 = 13,\\n    /**\\n     * Renders a 56px `PersonaCoin`.\\n     */\\n    size56 = 16,\\n    /**\\n     * Renders a 72px `PersonaCoin`.\\n     */\\n    size72 = 14,\\n    /**\\n     * Renders a 100px `PersonaCoin`.\\n     */\\n    size100 = 15,\\n    /**\\n     * Renders a 120px `PersonaCoin`.\\n     */\\n    size120 = 18\\n}\\n\\nexport declare namespace personaSize {\\n    const size8 = \\\"20px\\\";\\n    const size10 = \\\"20px\\\";\\n    const size16 = \\\"16px\\\";\\n    const size24 = \\\"24px\\\";\\n    const size28 = \\\"28px\\\";\\n    const size32 = \\\"32px\\\";\\n    const size40 = \\\"40px\\\";\\n    const size48 = \\\"48px\\\";\\n    const size56 = \\\"56px\\\";\\n    const size72 = \\\"72px\\\";\\n    const size100 = \\\"100px\\\";\\n    const size120 = \\\"120px\\\";\\n}\\n\\n/**\\n * The Pivot control and related tabs pattern are used for navigating frequently accessed,\\n * distinct content categories. Pivots allow for navigation between two or more content\\n * views and relies on text headers to articulate the different sections of content.\\n */\\nexport declare const Pivot: React.FunctionComponent<IPivotProps>;\\n\\n/**\\n *  Usage:\\n *\\n *     <Pivot>\\n *       <PivotItem headerText=\\\"Foo\\\">\\n *         <Label>Pivot #1</Label>\\n *       </PivotItem>\\n *       <PivotItem headerText=\\\"Bar\\\">\\n *         <Label>Pivot #2</Label>\\n *       </PivotItem>\\n *       <PivotItem headerText=\\\"Bas\\\">\\n *         <Label>Pivot #3</Label>\\n *       </PivotItem>\\n *     </Pivot>\\n */\\nexport declare class PivotBase extends React.Component<IPivotProps, IPivotState> {\\n    private _pivotId;\\n    private _focusZone;\\n    private _classNames;\\n    constructor(props: IPivotProps);\\n    /**\\n     * Sets focus to the first pivot tab.\\n     */\\n    focus(): void;\\n    render(): JSX.Element;\\n    private _getSelectedKey;\\n    /**\\n     * Renders the set of links to route between pivots\\n     */\\n    private _renderPivotLinks;\\n    private _renderPivotLink;\\n    private _renderLinkContent;\\n    /**\\n     * Renders a Pivot Item\\n     */\\n    private _renderPivotItem;\\n    /**\\n     * Gets the set of PivotLinks as array of IPivotItemProps\\n     * The set of Links is determined by child components of type PivotItem\\n     */\\n    private _getPivotLinks;\\n    /**\\n     * Generates the Id for the tab button.\\n     */\\n    private _getTabId;\\n    /**\\n     * whether the key exists in the pivot items.\\n     */\\n    private _isKeyValid;\\n    /**\\n     * Handles the onClick event on PivotLinks\\n     */\\n    private _onLinkClick;\\n    /**\\n     * Handle the onKeyDown event on the PivotLinks\\n     */\\n    private _onKeyDown;\\n    /**\\n     * Updates the state with the new selected index\\n     */\\n    private _updateSelectedItem;\\n    private _getClassNames;\\n}\\n\\nexport declare class PivotItem extends React.Component<IPivotItemProps, {}> {\\n    constructor(props: IPivotItemProps);\\n    render(): JSX.Element;\\n}\\n\\n/**\\n * {@docCategory Pivot}\\n */\\nexport declare enum PivotLinkFormat {\\n    /**\\n     * Display Pivot Links as links\\n     */\\n    links = 0,\\n    /**\\n     * Display Pivot Links as Tabs\\n     */\\n    tabs = 1\\n}\\n\\n/**\\n * {@docCategory Pivot}\\n */\\nexport declare enum PivotLinkSize {\\n    /**\\n     * Display Link using normal font size\\n     */\\n    normal = 0,\\n    /**\\n     * Display links using large font size\\n     */\\n    large = 1\\n}\\n\\nexport declare const PlainCard: React.FunctionComponent<IPlainCardProps>;\\n\\nexport declare class PlainCardBase extends React.Component<IPlainCardProps, {}> {\\n    private _classNames;\\n    constructor(props: IPlainCardProps);\\n    render(): JSX.Element;\\n    private _onKeyDown;\\n}\\nexport { Point }\\n\\n/**\\n * This adds accessibility to Dialog and Panel controls\\n */\\nexport declare class Popup extends React.Component<IPopupProps, IPopupState> {\\n    static defaultProps: IPopupProps;\\n    _root: React.RefObject<HTMLDivElement>;\\n    private _disposables;\\n    private _originalFocusedElement;\\n    private _containsFocus;\\n    private _async;\\n    constructor(props: IPopupProps);\\n    UNSAFE_componentWillMount(): void;\\n    componentDidMount(): void;\\n    componentDidUpdate(): void;\\n    componentWillUnmount(): void;\\n    render(): JSX.Element;\\n    private _onKeyDown;\\n    private _updateScrollBarAsync;\\n    private _getScrollBar;\\n    private _onFocus;\\n    private _onBlur;\\n}\\n\\nexport declare enum Position {\\n    top = 0,\\n    bottom = 1,\\n    start = 2,\\n    end = 3\\n}\\n\\nexport declare function positionCallout(props: IPositionProps, hostElement: HTMLElement, elementToPosition: HTMLElement, previousPositions?: ICalloutPositionedInfo): ICalloutPositionedInfo;\\n\\nexport declare function positionCard(props: IPositionProps, hostElement: HTMLElement, elementToPosition: HTMLElement, previousPositions?: ICalloutPositionedInfo): ICalloutPositionedInfo;\\n\\n/**\\n * Used to position an element relative to the given positioning props.\\n * If positioning has been completed before, previousPositions can be passed to ensure that the positioning element\\n * repositions based on its previous targets rather than starting with directionalhint.\\n */\\nexport declare function positionElement(props: IPositionProps, hostElement: HTMLElement, elementToPosition: HTMLElement, previousPositions?: IPositionedData): IPositionedData;\\n\\nexport declare class PositioningContainer extends React.Component<IPositioningContainerProps, IPositioningContainerState> implements PositioningContainer {\\n    static defaultProps: IPositioningContainerProps;\\n    private _didSetInitialFocus;\\n    /**\\n     * The primary positioned div.\\n     */\\n    private _positionedHost;\\n    private _contentHost;\\n    /**\\n     * Stores an instance of Window, used to check\\n     * for server side rendering and if focus was lost.\\n     */\\n    private _targetWindow;\\n    /**\\n     * The bounds used when determing if and where the\\n     * PositioningContainer should be placed.\\n     */\\n    private _positioningBounds;\\n    /**\\n     * The maximum height the PositioningContainer can grow to\\n     * without going being the window or target bounds\\n     */\\n    private _maxHeight;\\n    private _positionAttempts;\\n    private _target;\\n    private _setHeightOffsetTimer;\\n    private _async;\\n    private _events;\\n    constructor(props: IPositioningContainerProps);\\n    UNSAFE_componentWillMount(): void;\\n    componentDidMount(): void;\\n    componentDidUpdate(): void;\\n    UNSAFE_componentWillUpdate(newProps: IPositioningContainerProps): void;\\n    componentWillUnmount(): void;\\n    render(): JSX.Element | null;\\n    /**\\n     * Deprecated, use `onResize` instead.\\n     * @deprecated Use `onResize` instead.\\n     */\\n    dismiss: (ev?: Event | React.MouseEvent<HTMLElement, MouseEvent> | React.KeyboardEvent<HTMLElement> | undefined) => void;\\n    onResize: (ev?: Event | React.MouseEvent<HTMLElement, MouseEvent> | React.KeyboardEvent<HTMLElement> | undefined) => void;\\n    protected _dismissOnScroll(ev: Event): void;\\n    protected _dismissOnLostFocus(ev: Event): void;\\n    protected _setInitialFocus: () => void;\\n    protected _onComponentDidMount: () => void;\\n    private _updateAsyncPosition;\\n    private _updatePosition;\\n    private _getBounds;\\n    /**\\n     * Return the maximum height the container can grow to\\n     * without going out of the specified bounds\\n     */\\n    private _getMaxHeight;\\n    private _arePositionsEqual;\\n    private _comparePositions;\\n    private _setTargetWindowAndElement;\\n    /**\\n     * Animates the height if finalHeight was given.\\n     */\\n    private _setHeightOffsetEveryFrame;\\n    private _getTarget;\\n}\\n\\nexport declare const presenceBoolean: (presence: PersonaPresence) => {\\n    isAvailable: boolean;\\n    isAway: boolean;\\n    isBlocked: boolean;\\n    isBusy: boolean;\\n    isDoNotDisturb: boolean;\\n    isOffline: boolean;\\n};\\n\\n/**\\n * {@docCategory Button}\\n */\\nexport declare class PrimaryButton extends React.Component<IButtonProps, {}> {\\n    render(): JSX.Element;\\n}\\n\\n/**\\n * ProgressIndicator description\\n */\\nexport declare const ProgressIndicator: React.FunctionComponent<IProgressIndicatorProps>;\\n\\n/**\\n * ProgressIndicator with no default styles.\\n * [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\\n */\\nexport declare class ProgressIndicatorBase extends React.Component<IProgressIndicatorProps, {}> {\\n    static defaultProps: {\\n        label: string;\\n        description: string;\\n        width: number;\\n    };\\n    render(): JSX.Element;\\n    private _onRenderProgress;\\n}\\n\\nexport declare const Rating: React.FunctionComponent<IRatingProps>;\\n\\nexport declare class RatingBase extends React.Component<IRatingProps, IRatingState> {\\n    static defaultProps: IRatingProps;\\n    private _id;\\n    private _min;\\n    private _labelId;\\n    private _classNames;\\n    constructor(props: IRatingProps);\\n    render(): JSX.Element;\\n    private _getStarId;\\n    private _onFocus;\\n    private _getLabel;\\n    private _getInitialValue;\\n    private _getClampedRating;\\n    private _getRating;\\n    private _getFillingPercentage;\\n}\\n\\n/**\\n * {@docCategory Rating}\\n */\\nexport declare enum RatingSize {\\n    Small = 0,\\n    Large = 1\\n}\\n\\nexport declare enum RectangleEdge {\\n    top = 1,\\n    bottom = -1,\\n    left = 2,\\n    right = -2\\n}\\n\\nexport declare const ResizeGroup: typeof ResizeGroupBase;\\n\\nexport declare class ResizeGroupBase extends React.Component<IResizeGroupProps, IResizeGroupState> {\\n    private _nextResizeGroupStateProvider;\\n    private _root;\\n    private _initialHiddenDiv;\\n    private _updateHiddenDiv;\\n    private _hasRenderedContent;\\n    private _async;\\n    private _events;\\n    constructor(props: IResizeGroupProps);\\n    render(): JSX.Element;\\n    componentDidMount(): void;\\n    UNSAFE_componentWillReceiveProps(nextProps: IResizeGroupProps): void;\\n    componentDidUpdate(prevProps: IResizeGroupProps): void;\\n    componentWillUnmount(): void;\\n    remeasure(): void;\\n    private _afterComponentRendered;\\n    private _onResize;\\n}\\n\\n/**\\n * {@docCategory ResizeGroup}\\n */\\nexport declare enum ResizeGroupDirection {\\n    horizontal = 0,\\n    vertical = 1\\n}\\n\\nexport declare enum ResponsiveMode {\\n    small = 0,\\n    medium = 1,\\n    large = 2,\\n    xLarge = 3,\\n    xxLarge = 4,\\n    xxxLarge = 5,\\n    unknown = 999\\n}\\n\\n/** Converts RGB components to a hex color string (without # prefix). */\\nexport declare function rgb2hex(r: number, g: number, b: number): string;\\n\\n/** Converts RGB components to an HSV color. */\\nexport declare function rgb2hsv(r: number, g: number, b: number): IHSV;\\n\\n/** Regular expression matching only numbers */\\nexport declare const RGBA_REGEX: RegExp;\\n\\nexport declare const ScrollablePane: React.FunctionComponent<IScrollablePaneProps>;\\n\\nexport declare class ScrollablePaneBase extends React.Component<IScrollablePaneProps, IScrollablePaneState> implements IScrollablePane {\\n    private _root;\\n    private _stickyAboveRef;\\n    private _stickyBelowRef;\\n    private _contentContainer;\\n    private _subscribers;\\n    private _stickies;\\n    private _mutationObserver;\\n    private _notifyThrottled;\\n    private _async;\\n    private _events;\\n    constructor(props: IScrollablePaneProps);\\n    readonly root: HTMLDivElement | null;\\n    readonly stickyAbove: HTMLDivElement | null;\\n    readonly stickyBelow: HTMLDivElement | null;\\n    readonly contentContainer: HTMLDivElement | null;\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    shouldComponentUpdate(nextProps: IScrollablePaneProps, nextState: IScrollablePaneState): boolean;\\n    componentDidUpdate(prevProps: IScrollablePaneProps, prevState: IScrollablePaneState): void;\\n    render(): JSX.Element;\\n    setStickiesDistanceFromTop(): void;\\n    forceLayoutUpdate(): void;\\n    subscribe: (handler: Function) => void;\\n    unsubscribe: (handler: Function) => void;\\n    addSticky: (sticky: Sticky) => void;\\n    removeSticky: (sticky: Sticky) => void;\\n    sortSticky: (sticky: Sticky, sortAgain?: boolean | undefined) => void;\\n    updateStickyRefHeights: () => void;\\n    notifySubscribers: () => void;\\n    getScrollPosition: () => number;\\n    syncScrollSticky: (sticky: Sticky) => void;\\n    private _getScrollablePaneContext;\\n    private _checkStickyStatus;\\n    private _addToStickyContainer;\\n    private _removeStickyFromContainers;\\n    private _onWindowResize;\\n    private _getStickyContainerStyle;\\n    private _getScrollbarWidth;\\n    private _getScrollbarHeight;\\n    private _onScroll;\\n}\\n\\nexport declare const ScrollablePaneContext: React.Context<IScrollablePaneContext>;\\n\\n/**\\n * {@docCategory ScrollablePane}\\n */\\nexport declare const ScrollbarVisibility: {\\n    auto: \\\"auto\\\";\\n    always: \\\"always\\\";\\n};\\n\\n/**\\n * {@docCategory ScrollablePane}\\n */\\nexport declare type ScrollbarVisibility = typeof ScrollbarVisibility[keyof typeof ScrollbarVisibility];\\n\\n/**\\n * {@docCategory List}\\n */\\nexport declare const ScrollToMode: {\\n    /**\\n     * Does not make any consideration to where in the viewport the item should align to.\\n     */\\n    auto: 0;\\n    /**\\n     * Attempts to scroll the list so the top of the desired item is aligned with the top of the viewport.\\n     */\\n    top: 1;\\n    /**\\n     * Attempts to scroll the list so the bottom of the desired item is aligned with the bottom of the viewport.\\n     */\\n    bottom: 2;\\n    /**\\n     * Attempts to scroll the list so the desired item is in the exact center of the viewport.\\n     */\\n    center: 3;\\n};\\n\\n/**\\n * {@docCategory List}\\n */\\nexport declare type ScrollToMode = typeof ScrollToMode[keyof typeof ScrollToMode];\\n\\nexport declare const SearchBox: React.FunctionComponent<ISearchBoxProps>;\\n\\nexport declare class SearchBoxBase extends React.Component<ISearchBoxProps, ISearchBoxState> {\\n    static defaultProps: Pick<ISearchBoxProps, 'disableAnimation' | 'clearButtonProps'>;\\n    private _rootElement;\\n    private _inputElement;\\n    private _latestValue;\\n    private _fallbackId;\\n    constructor(props: ISearchBoxProps);\\n    UNSAFE_componentWillReceiveProps(newProps: ISearchBoxProps): void;\\n    render(): JSX.Element;\\n    /**\\n     * Sets focus to the search box input field\\n     */\\n    focus(): void;\\n    /**\\n     * Returns whether or not the SearchBox has focus\\n     */\\n    hasFocus(): boolean;\\n    private _onClear;\\n    private _onClickFocus;\\n    private _onFocusCapture;\\n    private _onClearClick;\\n    private _onKeyDown;\\n    private _onBlur;\\n    private _onInputChange;\\n    private _callOnChange;\\n}\\n\\ndeclare enum SelectableOptionMenuItemType {\\n    Normal = 0,\\n    Divider = 1,\\n    Header = 2\\n}\\nexport { SelectableOptionMenuItemType as DropdownMenuItemType }\\nexport { SelectableOptionMenuItemType }\\n\\n/**\\n * {@docCategory DetailsList}\\n */\\nexport declare enum SelectAllVisibility {\\n    none = 0,\\n    hidden = 1,\\n    visible = 2\\n}\\n\\n/**\\n * Standard People Picker.\\n */\\nexport declare class SelectedPeopleList extends BasePeopleSelectedItemsList {\\n    static defaultProps: any;\\n    protected renderItems: () => JSX.Element[];\\n    private _renderItem;\\n    private _beginEditing;\\n    private _completeEditing;\\n    private _createMenuItems;\\n}\\nexport { Selection }\\nexport { SELECTION_CHANGE }\\nexport { SelectionDirection }\\nexport { SelectionMode }\\n\\n/**\\n * {@docCategory Selection}\\n */\\nexport declare class SelectionZone extends React.Component<ISelectionZoneProps, ISelectionZoneState> {\\n    static defaultProps: {\\n        isSelectedOnFocus: boolean;\\n        selectionMode: SelectionMode;\\n    };\\n    private _async;\\n    private _events;\\n    private _root;\\n    private _isCtrlPressed;\\n    private _isShiftPressed;\\n    private _isMetaPressed;\\n    private _isTabPressed;\\n    private _shouldHandleFocus;\\n    private _shouldHandleFocusTimeoutId;\\n    private _isTouch;\\n    private _isTouchTimeoutId;\\n    static getDerivedStateFromProps(nextProps: ISelectionZoneProps, prevState: ISelectionZoneState): ISelectionZoneState;\\n    constructor(props: ISelectionZoneProps);\\n    componentDidMount(): void;\\n    render(): JSX.Element;\\n    componentDidUpdate(previousProps: ISelectionZoneProps): void;\\n    componentWillUnmount(): void;\\n    /**\\n     * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone\\n     * react to the event. Note that focus events in IE \\\\<= 11 will occur asynchronously after .focus() has\\n     * been called on an element, so we need a flag to store the idea that we will bypass the \\\"next\\\"\\n     * focus event that occurs. This method does that.\\n     */\\n    ignoreNextFocus: () => void;\\n    private _onSelectionChange;\\n    private _onMouseDownCapture;\\n    /**\\n     * When we focus an item, for single/multi select scenarios, we should try to select it immediately\\n     * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them\\n     * specially.\\n     */\\n    private _onFocus;\\n    private _onMouseDown;\\n    private _onTouchStartCapture;\\n    private _onClick;\\n    private _onContextMenu;\\n    private _isSelectionDisabled;\\n    /**\\n     * In multi selection, if you double click within an item's root (but not within the invoke element or\\n     * input elements), we should execute the invoke handler.\\n     */\\n    private _onDoubleClick;\\n    private _onKeyDownCapture;\\n    private _onKeyDown;\\n    private _onToggleAllClick;\\n    private _onToggleClick;\\n    private _onInvokeClick;\\n    private _onItemSurfaceClick;\\n    private _onInvokeMouseDown;\\n    /**\\n     * To avoid high startup cost of traversing the DOM on component mount,\\n     * defer finding the scrollable parent until a click interaction.\\n     *\\n     * The styles will probably already calculated since we're running in a click handler,\\n     * so this is less likely to cause layout thrashing then doing it in mount.\\n     */\\n    private _findScrollParentAndTryClearOnEmptyClick;\\n    private _tryClearOnEmptyClick;\\n    private _clearAndSelectIndex;\\n    /**\\n     * We need to track the modifier key states so that when focus events occur, which do not contain\\n     * modifier states in the Event object, we know how to behave.\\n     */\\n    private _updateModifiers;\\n    private _findItemRoot;\\n    private _getItemIndex;\\n    private _shouldAutoSelect;\\n    private _hasAttribute;\\n    private _isInputElement;\\n    private _isNonHandledClick;\\n    private _handleNextFocus;\\n    private _setIsTouch;\\n    private _getSelectionMode;\\n}\\n\\nexport declare enum SemanticColorSlots {\\n    bodyBackground = 0,\\n    bodyText = 1,\\n    disabledBackground = 2,\\n    disabledText = 3\\n}\\n\\nexport declare const Separator: React.FunctionComponent<ISeparatorProps>;\\n\\nexport declare const SeparatorBase: React.FunctionComponent<ISeparatorProps>;\\n\\n/**\\n * Converts a whole set of KeySequences into one keytip ID, which will be the ID for the last keytip sequence specified\\n * keySequences should not include the initial keytip 'start' sequence.\\n *\\n * @param keySequences - Full path of IKeySequences for one keytip.\\n * @returns String to use for the keytip ID.\\n */\\nexport declare function sequencesToID(keySequences: string[]): string;\\n\\n/** Shades of a given color, from softest to strongest. */\\nexport declare enum Shade {\\n    Unshaded = 0,\\n    Shade1 = 1,\\n    Shade2 = 2,\\n    Shade3 = 3,\\n    Shade4 = 4,\\n    Shade5 = 5,\\n    Shade6 = 6,\\n    Shade7 = 7,\\n    Shade8 = 8\\n}\\n\\nexport declare const Shimmer: React.FunctionComponent<IShimmerProps>;\\n\\n/**\\n * {@docCategory Shimmer}\\n */\\nexport declare class ShimmerBase extends React.Component<IShimmerProps, IShimmerState> {\\n    static defaultProps: IShimmerProps;\\n    private _classNames;\\n    private _lastTimeoutId;\\n    private _async;\\n    constructor(props: IShimmerProps);\\n    componentDidUpdate(prevProps: IShimmerProps): void;\\n    componentWillUnmount(): void;\\n    render(): JSX.Element;\\n}\\n\\nexport declare const ShimmerCircle: React.FunctionComponent<IShimmerCircleProps>;\\n\\nexport declare const ShimmerCircleBase: React.FunctionComponent<IShimmerCircleProps>;\\n\\nexport declare const ShimmeredDetailsList: React.FunctionComponent<IShimmeredDetailsListProps>;\\n\\nexport declare class ShimmeredDetailsListBase extends React.Component<IShimmeredDetailsListProps, {}> {\\n    private _shimmerItems;\\n    private _classNames;\\n    constructor(props: IShimmeredDetailsListProps);\\n    render(): JSX.Element;\\n    private _onRenderShimmerPlaceholder;\\n    private _renderDefaultShimmerPlaceholder;\\n}\\n\\n/**\\n * Describes the default heights for shimmer elements when omitted in implementation.\\n * {@docCategory Shimmer}\\n */\\nexport declare enum ShimmerElementsDefaultHeights {\\n    /**\\n     * Default height of the line element when not provided by user: 16px\\n     */\\n    line = 16,\\n    /**\\n     * Default height of the gap element when not provided by user: 16px\\n     */\\n    gap = 16,\\n    /**\\n     * Default height of the circle element when not provided by user: 24px\\n     */\\n    circle = 24\\n}\\n\\nexport declare const ShimmerElementsGroup: React.FunctionComponent<IShimmerElementsGroupProps>;\\n\\n/**\\n * {@docCategory Shimmer}\\n */\\nexport declare const ShimmerElementsGroupBase: React.FunctionComponent<IShimmerElementsGroupProps>;\\n\\n/**\\n * Describes the possible types for shimmer elements used.\\n * {@docCategory Shimmer}\\n */\\nexport declare enum ShimmerElementType {\\n    /**\\n     * Line element type\\n     */\\n    line = 1,\\n    /**\\n     * Circle element type\\n     */\\n    circle = 2,\\n    /**\\n     * Gap element type\\n     */\\n    gap = 3\\n}\\n\\nexport declare const ShimmerGap: React.FunctionComponent<IShimmerGapProps>;\\n\\n/**\\n * {@docCategory Shimmer}\\n */\\nexport declare const ShimmerGapBase: React.FunctionComponent<IShimmerGapProps>;\\n\\nexport declare const ShimmerLine: React.FunctionComponent<IShimmerLineProps>;\\n\\n/**\\n * {@docCategory Shimmer}\\n */\\nexport declare const ShimmerLineBase: React.FunctionComponent<IShimmerLineProps>;\\n\\nexport declare const sizeBoolean: (size: PersonaSize) => {\\n    isSize8: boolean;\\n    isSize10: boolean;\\n    isSize16: boolean;\\n    isSize24: boolean;\\n    isSize28: boolean;\\n    isSize32: boolean;\\n    isSize40: boolean;\\n    isSize48: boolean;\\n    isSize56: boolean;\\n    isSize72: boolean;\\n    isSize100: boolean;\\n    isSize120: boolean;\\n};\\n\\nexport declare const sizeToPixels: {\\n    [key: number]: number;\\n};\\n\\nexport declare const Slider: React.FunctionComponent<ISliderProps>;\\n\\nexport declare class SliderBase extends React.Component<ISliderProps, ISliderState> implements ISlider {\\n    static defaultProps: ISliderProps;\\n    private _async;\\n    private _disposables;\\n    private _sliderLine;\\n    private _thumb;\\n    private _lowerValueThumb;\\n    private _id;\\n    private _onKeyDownTimer;\\n    private _isAdjustingLowerValue;\\n    constructor(props: ISliderProps);\\n    componentWillUnmount(): void;\\n    render(): React.ReactElement<{}>;\\n    focus(): void;\\n    readonly range: [number, number] | undefined;\\n    readonly value: number | undefined;\\n    private readonly renderedValue;\\n    readonly lowerValue: number | undefined;\\n    private readonly renderedLowerValue;\\n    private _getPercent;\\n    private _getValueLabel;\\n    private _getAriaValueText;\\n    private _getStyleUsingOffsetPercent;\\n    private _calculateCurrentSteps;\\n    private _onMouseDownOrTouchStart;\\n    private _onMouseMoveOrTouchMove;\\n    private _getPosition;\\n    private _setValueState;\\n    private _updateValue;\\n    private _onMouseUpOrTouchEnd;\\n    private _disposeListeners;\\n    private _onKeyDown;\\n    private _onThumbFocus;\\n    private _clearOnKeyDownTimer;\\n    private _setOnKeyDownTimer;\\n}\\n\\nexport declare class SpinButton extends React.Component<ISpinButtonProps, ISpinButtonState> implements ISpinButton {\\n    static defaultProps: DefaultProps;\\n    private _async;\\n    private _input;\\n    private _inputId;\\n    private _labelId;\\n    private _lastValidValue;\\n    private _spinningByMouse;\\n    private _valueToValidate;\\n    private _precision;\\n    private _currentStepFunctionHandle;\\n    private _initialStepDelay;\\n    private _stepDelay;\\n    constructor(props: ISpinButtonProps);\\n    componentWillUnmount(): void;\\n    /**\\n     * Invoked when a component is receiving new props. This method is not called for the initial render.\\n     */\\n    UNSAFE_componentWillReceiveProps(newProps: ISpinButtonProps): void;\\n    render(): JSX.Element;\\n    focus(): void;\\n    /**\\n     * Gets the value of the spin button.\\n     */\\n    readonly value: string | undefined;\\n    private _onFocus;\\n    private _onBlur;\\n    private _onValidate;\\n    private _calculatePrecision;\\n    /**\\n     * Validate function to use if one is not passed in\\n     */\\n    private _defaultOnValidate;\\n    private _onIncrement;\\n    /**\\n     * Increment function to use if one is not passed in\\n     */\\n    private _defaultOnIncrement;\\n    private _onDecrement;\\n    /**\\n     * Increment function to use if one is not passed in\\n     */\\n    private _defaultOnDecrement;\\n    private _onChange;\\n    /**\\n     * This is used when validating text entry in the input on blur or when enter key is pressed\\n     * (not when changed via the buttons).\\n     * @param event - the event that fired\\n     */\\n    private _validate;\\n    /**\\n     * The method is needed to ensure we are updating the actual input value.\\n     * without this our value will never change (and validation will not have the correct number)\\n     * @param event - the event that was fired\\n     */\\n    private _onInputChange;\\n    /**\\n     * Update the value with the given stepFunction\\n     * @param shouldSpin - should we fire off another updateValue when we are done here? This should be true\\n     * when spinning in response to a mouseDown\\n     * @param stepFunction - function to use to step by\\n     * @param event - The event that triggered the updateValue\\n     */\\n    private _updateValue;\\n    /**\\n     * Stop spinning (clear any currently pending update and set spinning to false)\\n     */\\n    private _stop;\\n    /**\\n     * Handle keydown on the text field. We need to update\\n     * the value when up or down arrow are depressed\\n     * @param event - the keyboardEvent that was fired\\n     */\\n    private _handleKeyDown;\\n    /**\\n     * Make sure that we have stopped spinning on keyUp\\n     * if the up or down arrow fired this event\\n     * @param event - keyboard event\\n     */\\n    private _handleKeyUp;\\n    private _onIncrementMouseDown;\\n    private _onDecrementMouseDown;\\n}\\n\\nexport declare const Spinner: React.FunctionComponent<ISpinnerProps>;\\n\\nexport declare class SpinnerBase extends React.Component<ISpinnerProps, any> {\\n    static defaultProps: ISpinnerProps;\\n    render(): JSX.Element;\\n}\\n\\n/**\\n * Possible locations of the label in regards to the spinner\\n * @defaultvalue bottom\\n * {@docCategory Spinner}\\n */\\nexport declare type SpinnerLabelPosition = 'top' | 'right' | 'bottom' | 'left';\\n\\n/**\\n * Possible variations of the spinner circle size.\\n * {@docCategory Spinner}\\n */\\nexport declare enum SpinnerSize {\\n    /**\\n     * 12px Spinner diameter\\n     */\\n    xSmall = 0,\\n    /**\\n     * 16px Spinner diameter\\n     */\\n    small = 1,\\n    /**\\n     * 20px Spinner diameter\\n     */\\n    medium = 2,\\n    /**\\n     * 28px Spinner diameter\\n     */\\n    large = 3\\n}\\n\\n/**\\n * Deprecated at v2.0.0, use `SpinnerSize` instead.\\n * @deprecated Use `SpinnerSize` instead.\\n * {@docCategory Spinner}\\n */\\nexport declare enum SpinnerType {\\n    /**\\n     * Deprecated and will be removed at \\\\>= 2.0.0. Use `SpinnerSize.medium` instead.\\n     * @deprecated Use `SpinnerSize.medium` instead.\\n     */\\n    normal = 0,\\n    /**\\n     * Deprecated and will be removed at \\\\>= 2.0.0. Use `SpinnerSize.large` instead.\\n     * @deprecated Use `SpinnerSize.large` instead.\\n     */\\n    large = 1\\n}\\n\\nexport declare const Stack: React.FunctionComponent<IStackProps> & {\\n    Item: React.FunctionComponent<IStackItemProps>;\\n};\\n\\nexport declare const StackItem: React.FunctionComponent<IStackItemProps>;\\n\\nexport declare class Sticky extends React.Component<IStickyProps, IStickyState> {\\n    static defaultProps: IStickyProps;\\n    static contextType: React.Context<IScrollablePaneContext>;\\n    private _root;\\n    private _stickyContentTop;\\n    private _stickyContentBottom;\\n    private _nonStickyContent;\\n    private _placeHolder;\\n    private _activeElement;\\n    constructor(props: IStickyProps);\\n    readonly root: HTMLDivElement | null;\\n    readonly placeholder: HTMLDivElement | null;\\n    readonly stickyContentTop: HTMLDivElement | null;\\n    readonly stickyContentBottom: HTMLDivElement | null;\\n    readonly nonStickyContent: HTMLDivElement | null;\\n    readonly canStickyTop: boolean;\\n    readonly canStickyBottom: boolean;\\n    syncScroll: (container: HTMLElement) => void;\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    componentDidUpdate(prevProps: IStickyProps, prevState: IStickyState): void;\\n    shouldComponentUpdate(nextProps: IStickyProps, nextState: IStickyState): boolean;\\n    render(): JSX.Element;\\n    addSticky(stickyContent: HTMLDivElement): void;\\n    resetSticky(): void;\\n    setDistanceFromTop(container: HTMLDivElement): void;\\n    private _getContext;\\n    private _getContentStyles;\\n    private _getStickyPlaceholderHeight;\\n    private _getNonStickyPlaceholderHeightAndWidth;\\n    private _onScrollEvent;\\n    private _getStickyDistanceFromTop;\\n    private _getStickyDistanceFromTopForFooter;\\n    private _getNonStickyDistanceFromTop;\\n    private _getBackground;\\n}\\n\\nexport declare enum StickyPositionType {\\n    Both = 0,\\n    Header = 1,\\n    Footer = 2\\n}\\n\\n/**\\n * Enum to help identify which suggestions action button is selected.\\n * {@docCategory Pickers}\\n */\\nexport declare enum SuggestionActionType {\\n    /** None of the actions is selected. */\\n    none = 0,\\n    /** ForceResolve action is selected. */\\n    forceResolve = 1,\\n    /** SearchMore action is selected. */\\n    searchMore = 2\\n}\\n\\nexport declare enum SuggestionItemType {\\n    header = 0,\\n    suggestion = 1,\\n    footer = 2\\n}\\n\\n/**\\n * {@docCategory Pickers}\\n */\\nexport declare class Suggestions<T> extends React.Component<ISuggestionsProps<T>, ISuggestionsState> {\\n    protected _forceResolveButton: React.RefObject<IButton>;\\n    protected _searchForMoreButton: React.RefObject<IButton>;\\n    protected _selectedElement: React.RefObject<HTMLDivElement>;\\n    private activeSelectedElement;\\n    private _classNames;\\n    constructor(suggestionsProps: ISuggestionsProps<T>);\\n    componentDidMount(): void;\\n    componentDidUpdate(): void;\\n    render(): JSX.Element;\\n    /**\\n     * Returns true if the event was handled, false otherwise\\n     */\\n    tryHandleKeyDown: (keyCode: number, currentSuggestionIndex: number) => boolean;\\n    hasSuggestedAction(): boolean;\\n    hasSuggestedActionSelected(): boolean;\\n    executeSelectedAction(): void;\\n    focusAboveSuggestions(): void;\\n    focusBelowSuggestions(): void;\\n    focusSearchForMoreButton(): void;\\n    scrollSelected(): void;\\n    private _getAlertText;\\n    private _renderSuggestions;\\n    private _getMoreResults;\\n    private _forceResolve;\\n    private _shouldShowForceResolve;\\n    private _onClickTypedSuggestionsItem;\\n    private _refocusOnSuggestions;\\n    private _onRemoveTypedSuggestionsItem;\\n}\\n\\n/**\\n * Class when used with SuggestionsStore, renders a suggestions control with customizable headers and footers\\n */\\nexport declare class SuggestionsControl<T> extends React.Component<ISuggestionsControlProps<T>, ISuggestionsControlState<T>> {\\n    protected _forceResolveButton: IButton;\\n    protected _searchForMoreButton: IButton;\\n    protected _selectedElement: React.RefObject<HTMLDivElement>;\\n    protected _suggestions: React.RefObject<SuggestionsCore<T>>;\\n    private SuggestionsOfProperType;\\n    constructor(suggestionsProps: ISuggestionsControlProps<T>);\\n    componentDidMount(): void;\\n    componentDidUpdate(): void;\\n    UNSAFE_componentWillReceiveProps(newProps: ISuggestionsControlProps<T>): void;\\n    componentWillUnmount(): void;\\n    render(): JSX.Element;\\n    readonly currentSuggestion: ISuggestionModel<T> | undefined;\\n    readonly currentSuggestionIndex: number;\\n    readonly selectedElement: HTMLDivElement | undefined;\\n    hasSuggestionSelected(): boolean;\\n    hasSelection(): boolean;\\n    executeSelectedAction(): void;\\n    removeSuggestion(index?: number): void;\\n    /**\\n     * Handles the key down, returns true, if the event was handled, false otherwise\\n     * @param keyCode - The keyCode to handle\\n     */\\n    handleKeyDown(keyCode: number): boolean;\\n    scrollSelected(): void;\\n    protected renderHeaderItems(): JSX.Element | null;\\n    protected renderFooterItems(): JSX.Element | null;\\n    protected _renderSuggestions(): JSX.Element;\\n    /**\\n     * Selects the next selectable item\\n     */\\n    protected selectNextItem(itemType: SuggestionItemType, originalItemType?: SuggestionItemType): void;\\n    /**\\n     * Selects the previous selectable item\\n     */\\n    protected selectPreviousItem(itemType: SuggestionItemType, originalItemType?: SuggestionItemType): void;\\n    /**\\n     * Resets the selected state and selects the first selectable item\\n     */\\n    protected resetSelectedItem(): void;\\n    /**\\n     * Selects the first item\\n     */\\n    protected selectFirstItem(): void;\\n    /**\\n     * Selects the last item\\n     */\\n    protected selectLastItem(): void;\\n    /**\\n     * Selects the next item in the suggestion item type group, given the current index\\n     * If none is able to be selected, returns false, otherwise returns true\\n     * @param itemType - The suggestion item type\\n     * @param currentIndex - The current index, default is -1\\n     */\\n    private _selectNextItemOfItemType;\\n    /**\\n     * Selects the previous item in the suggestion item type group, given the current index\\n     * If none is able to be selected, returns false, otherwise returns true\\n     * @param itemType - The suggestion item type\\n     * @param currentIndex - The current index. If none is provided, the default is the items length of specified type\\n     */\\n    private _selectPreviousItemOfItemType;\\n    private _getCurrentIndexForType;\\n    private _getNextItemSectionType;\\n    private _getPreviousItemSectionType;\\n}\\n\\n/**\\n * {@docCategory Pickers}\\n */\\nexport declare class SuggestionsController<T> {\\n    currentIndex: number;\\n    currentSuggestion: ISuggestionModel<T> | undefined;\\n    suggestions: ISuggestionModel<T>[];\\n    constructor();\\n    updateSuggestions(newSuggestions: T[], selectedIndex?: number): void;\\n    /**\\n     * Increments the suggestion index and gets the next suggestion in the list.\\n     */\\n    nextSuggestion(): boolean;\\n    /**\\n     * Decrements the suggestion index and gets the previous suggestion in the list.\\n     */\\n    previousSuggestion(): boolean;\\n    getSuggestions(): ISuggestionModel<T>[];\\n    getCurrentItem(): ISuggestionModel<T>;\\n    getSuggestionAtIndex(index: number): ISuggestionModel<T>;\\n    hasSelectedSuggestion(): boolean;\\n    removeSuggestion(index: number): void;\\n    createGenericSuggestion(itemToConvert: ISuggestionModel<T> | T): void;\\n    convertSuggestionsToSuggestionItems(suggestions: Array<ISuggestionModel<T> | T>): ISuggestionModel<T>[];\\n    deselectAllSuggestions(): void;\\n    setSelectedSuggestion(index: number): void;\\n    private _isSuggestionModel;\\n    private _ensureSuggestionModel;\\n}\\n\\n/**\\n * Class when used with SuggestionsStore, renders a basic suggestions control\\n */\\nexport declare class SuggestionsCore<T> extends React.Component<ISuggestionsCoreProps<T>, {}> {\\n    currentIndex: number;\\n    currentSuggestion: ISuggestionModel<T> | undefined;\\n    protected _selectedElement: React.RefObject<HTMLDivElement>;\\n    private SuggestionsItemOfProperType;\\n    constructor(suggestionsProps: ISuggestionsCoreProps<T>);\\n    /**\\n     * Increments the selected suggestion index\\n     */\\n    nextSuggestion(): boolean;\\n    /**\\n     * Decrements the selected suggestion index\\n     */\\n    previousSuggestion(): boolean;\\n    readonly selectedElement: HTMLDivElement | undefined;\\n    getCurrentItem(): ISuggestionModel<T>;\\n    getSuggestionAtIndex(index: number): ISuggestionModel<T>;\\n    hasSuggestionSelected(): boolean;\\n    removeSuggestion(index: number): void;\\n    deselectAllSuggestions(): void;\\n    setSelectedSuggestion(index: number): void;\\n    componentDidUpdate(): void;\\n    render(): JSX.Element;\\n    scrollSelected(): void;\\n    private _onClickTypedSuggestionsItem;\\n    private _onRemoveTypedSuggestionsItem;\\n}\\n\\nexport declare class SuggestionsHeaderFooterItem extends React.Component<ISuggestionsHeaderFooterItemProps, {}> {\\n    constructor(props: ISuggestionsHeaderFooterItemProps);\\n    render(): JSX.Element;\\n}\\n\\n/**\\n * {@docCategory Pickers}\\n */\\nexport declare class SuggestionsItem<T> extends React.Component<ISuggestionItemProps<T>, {}> {\\n    constructor(props: ISuggestionItemProps<T>);\\n    render(): JSX.Element;\\n}\\n\\nexport declare class SuggestionsStore<T> {\\n    suggestions: ISuggestionModel<T>[];\\n    private getAriaLabel?;\\n    constructor(options?: SuggestionsStoreOptions<T>);\\n    updateSuggestions(newSuggestions: T[]): void;\\n    getSuggestions(): ISuggestionModel<T>[];\\n    getSuggestionAtIndex(index: number): ISuggestionModel<T>;\\n    removeSuggestion(index: number): void;\\n    convertSuggestionsToSuggestionItems(suggestions: Array<ISuggestionModel<T> | T>): ISuggestionModel<T>[];\\n    private _isSuggestionModel;\\n    private _ensureSuggestionModel;\\n}\\n\\nexport declare type SuggestionsStoreOptions<T> = {\\n    getAriaLabel?: (item: T) => string;\\n};\\n\\nexport declare const SwatchColorPicker: React.FunctionComponent<ISwatchColorPickerProps>;\\n\\nexport declare class SwatchColorPickerBase extends React.Component<ISwatchColorPickerProps, ISwatchColorPickerState> {\\n    static defaultProps: ISwatchColorPickerProps;\\n    private _id;\\n    private _cellFocused;\\n    private navigationIdleTimeoutId;\\n    private isNavigationIdle;\\n    private readonly navigationIdleDelay;\\n    private async;\\n    private _getItemsWithIndex;\\n    static getDerivedStateFromProps(newProps: ISwatchColorPickerProps, state: ISwatchColorPickerState): {\\n        selectedIndex: number | undefined;\\n    } | null;\\n    constructor(props: ISwatchColorPickerProps);\\n    componentWillUnmount(): void;\\n    render(): JSX.Element | null;\\n    private _onRenderItem;\\n    /**\\n     * When the whole swatchColorPicker is blurred,\\n     * make sure to clear the pending focused stated\\n     */\\n    private _onSwatchColorPickerBlur;\\n    /**\\n     * Render a color cell\\n     * @param item - The item to render\\n     * @returns - Element representing the item\\n     */\\n    private _renderOption;\\n    /**\\n     * Callback passed to the GridCell that will manage triggering the onCellHovered callback for mouseEnter\\n     */\\n    private _onMouseEnter;\\n    /**\\n     * Callback passed to the GridCell that will manage Hover/Focus updates\\n     */\\n    private _onMouseMove;\\n    /**\\n     * Callback passed to the GridCell that will manage Hover/Focus updates\\n     */\\n    private _onMouseLeave;\\n    /**\\n     * Callback to make sure we don't update the hovered element during mouse wheel\\n     */\\n    private _onWheel;\\n    /**\\n     * Callback that\\n     */\\n    private _onKeyDown;\\n    /**\\n     * Sets a timeout so we won't process any mouse \\\"hover\\\" events\\n     * while navigating (via mouseWheel or arrowKeys)\\n     */\\n    private _setNavigationTimeout;\\n    /**\\n     * Callback passed to the GridCell class that will trigger the onCellHovered callback of the SwatchColorPicker\\n     * NOTE: This will not be triggered if shouldFocusOnHover === true\\n     */\\n    private _onGridCellHovered;\\n    /**\\n     * Callback passed to the GridCell class that will trigger the onCellFocus callback of the SwatchColorPicker\\n     */\\n    private _onGridCellFocused;\\n    /**\\n     * Handle the click on a cell\\n     * @param item - The cell that the click was fired against\\n     */\\n    private _onCellClick;\\n}\\n\\nexport declare const TagItem: React.FunctionComponent<ITagItemProps>;\\n\\n/**\\n * {@docCategory TagPicker}\\n */\\nexport declare const TagItemBase: (props: ITagItemProps) => JSX.Element;\\n\\nexport declare const TagItemSuggestion: React.FunctionComponent<ITagItemSuggestionProps>;\\n\\n/**\\n * {@docCategory TagPicker}\\n */\\nexport declare const TagItemSuggestionBase: (props: ITagItemSuggestionProps) => JSX.Element;\\n\\nexport declare const TagPicker: React.FunctionComponent<ITagPickerProps>;\\n\\n/**\\n * {@docCategory TagPicker}\\n */\\nexport declare class TagPickerBase extends BasePicker<ITag, ITagPickerProps> {\\n    static defaultProps: {\\n        onRenderItem: (props: ITagItemProps) => JSX.Element;\\n        onRenderSuggestionsItem: (props: ITag) => JSX.Element;\\n    };\\n    constructor(props: ITagPickerProps);\\n}\\nexport { Target }\\n\\nexport declare const TeachingBubble: React.FunctionComponent<ITeachingBubbleProps>;\\n\\nexport declare class TeachingBubbleBase extends React.Component<ITeachingBubbleProps, ITeachingBubbleState> {\\n    static defaultProps: {\\n        /**\\n         * Default calloutProps is deprecated in favor of private `_defaultCalloutProps`.\\n         * Remove in next release.\\n         * @deprecated In favor of private `_defaultCalloutProps`.\\n         */\\n        calloutProps: {\\n            beakWidth: number;\\n            gapSpace: number;\\n            setInitialFocus: boolean;\\n            doNotLayer: boolean;\\n            directionalHint: 12;\\n        };\\n    };\\n    rootElement: React.RefObject<HTMLDivElement>;\\n    private _defaultCalloutProps;\\n    constructor(props: ITeachingBubbleProps);\\n    focus(): void;\\n    render(): JSX.Element;\\n}\\n\\nexport declare const TeachingBubbleContent: React.FunctionComponent<ITeachingBubbleProps>;\\n\\nexport declare class TeachingBubbleContentBase extends React.Component<ITeachingBubbleProps, ITeachingBubbleState> {\\n    rootElement: React.RefObject<HTMLDivElement>;\\n    constructor(props: ITeachingBubbleProps);\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    focus(): void;\\n    render(): JSX.Element;\\n    private _onKeyDown;\\n}\\n\\nexport declare const Text: React.FunctionComponent<ITextProps>;\\n\\nexport declare const TextField: React.FunctionComponent<ITextFieldProps>;\\n\\nexport declare class TextFieldBase extends React.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot> implements ITextField {\\n    static defaultProps: ITextFieldProps;\\n    /** Fallback ID if none is provided in props. Access proper value via `this._id`. */\\n    private _fallbackId;\\n    private _descriptionId;\\n    private _labelId;\\n    private _delayedValidate;\\n    private _lastValidation;\\n    private _latestValidateValue;\\n    private _hasWarnedNullValue;\\n    private _textElement;\\n    private _classNames;\\n    private _async;\\n    /** Most recent value from a change or input event, to help avoid processing events twice */\\n    private _lastChangeValue;\\n    constructor(props: ITextFieldProps);\\n    /**\\n     * Gets the current value of the text field.\\n     */\\n    readonly value: string | undefined;\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null;\\n    componentDidUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState, snapshot: ITextFieldSnapshot): void;\\n    render(): JSX.Element;\\n    /**\\n     * Sets focus on the text field\\n     */\\n    focus(): void;\\n    /**\\n     * Blurs the text field.\\n     */\\n    blur(): void;\\n    /**\\n     * Selects the text field\\n     */\\n    select(): void;\\n    /**\\n     * Sets the selection start of the text field to a specified value\\n     */\\n    setSelectionStart(value: number): void;\\n    /**\\n     * Sets the selection end of the text field to a specified value\\n     */\\n    setSelectionEnd(value: number): void;\\n    /**\\n     * Gets the selection start of the text field\\n     */\\n    readonly selectionStart: number | null;\\n    /**\\n     * Gets the selection end of the text field\\n     */\\n    readonly selectionEnd: number | null;\\n    /**\\n     * Sets the start and end positions of a selection in a text field.\\n     * @param start - Index of the start of the selection.\\n     * @param end - Index of the end of the selection.\\n     */\\n    setSelectionRange(start: number, end: number): void;\\n    private _warnControlledUsage;\\n    /** Returns `props.id` if available, or a fallback if not. */\\n    private readonly _id;\\n    private readonly _isControlled;\\n    private _onFocus;\\n    private _onBlur;\\n    private _onRenderLabel;\\n    private _onRenderDescription;\\n    private _onRenderPrefix;\\n    private _onRenderSuffix;\\n    /**\\n     * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\\n     *\\n     * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\\n     * - If we have done the validation and there is validation error, errorMessage is the validation error message.\\n     */\\n    private readonly _errorMessage;\\n    /**\\n     * If a custom description render function is supplied then treat description as always available.\\n     * Otherwise defer to the presence of description or error message text.\\n     */\\n    private readonly _isDescriptionAvailable;\\n    private _renderTextArea;\\n    private _renderInput;\\n    private _onRevealButtonClick;\\n    private _onInputChange;\\n    private _validate;\\n    private _notifyAfterValidate;\\n    private _adjustInputHeight;\\n}\\n\\nexport declare const TextStyles: ITextComponent['styles'];\\n\\nexport declare const TextView: ITextComponent['view'];\\n\\nexport declare class ThemeGenerator {\\n    /**\\n     * Sets an IThemeSlotRule to the given color and cascades it to the rest of the theme, updating other IThemeSlotRules\\n     * in the theme that inherit from that color.\\n     * @param isInverted - whether it's a dark theme or not, which affects the algorithm used to generate shades\\n     * @param isCustomization - should be true only if it's a user action, and indicates overwriting the slot's\\n     * inheritance (if any)\\n     * @param overwriteCustomColor - A slot could have a generated color based on its inheritance rules (isCustomized\\n     * is false), or a custom color based on user input (isCustomized is true). This bool tells us whether to override\\n     * existing customized colors.\\n     */\\n    static setSlot(rule: IThemeSlotRule, color: string | IColor, isInverted?: boolean, isCustomization?: boolean, overwriteCustomColor?: boolean): void;\\n    /**\\n     * Sets the color of each slot based on its rule. Slots that don't inherit must have a color already.\\n     * If this completes without error, then the theme is ready to use. (All slots will have a color.)\\n     * setSlot() can be called before this, but this must be called before getThemeAs*().\\n     * Does not override colors of rules where isCustomized is true (i.e. doesn't override existing customizations).\\n     */\\n    static insureSlots(slotRules: IThemeRules, isInverted: boolean): void;\\n    /**\\n     * Gets the JSON-formatted blob that describes the theme, usable with the REST request endpoints:\\n     * ```\\n     * { [theme slot name as string] : [color as string],\\n     *  \\\"tokenName\\\": \\\"#f00f00\\\",\\n     *  \\\"tokenName2\\\": \\\"#ba2ba2\\\",\\n     *   ... }\\n     * ```\\n     */\\n    static getThemeAsJson(slotRules: IThemeRules): any;\\n    /**\\n     * Gets code-formatted load theme blob that can be copy and pasted.\\n     * Only used for the old theme designer, where loadTheme usage is acceptable,\\n     * unlike in the new theme designer.\\n     */\\n    static getThemeAsCode(slotRules: IThemeRules): any;\\n    /**\\n     * Gets code-formatted load theme blob, specifically for the new theme designer,\\n     * aka.ms/themedesigner. Shouldn't use loadTheme like the old theme designer since it's deprecated.\\n     * We want to use the theme object from createTheme and use the Customizations.applySettings API instead.\\n     */\\n    static getThemeAsCodeWithCreateTheme(slotRules: IThemeRules): any;\\n    /**\\n     * Gets the theme as a list of SASS variables that can be used in code\\n     * ```\\n     * $tokenName: \\\"[theme:tokenName, default:#f00f00]\\\";\\n     * $tokenName2: \\\"[theme:tokenName2, default:#ba2ba2]\\\";\\n     * ...\\n     * ```\\n     */\\n    static getThemeAsSass(slotRules: IThemeRules): any;\\n    /**\\n     * Gets the theme formatted for PowerShell scripts\\n     * ```\\n     * @{\\n     * \\\"tokenName\\\" = \\\"#f00f00\\\";\\n     * \\\"tokenName2\\\" = \\\"#ba2ba2\\\";\\n     * ...\\n     * }\\n     * ```\\n     */\\n    static getThemeForPowerShell(slotRules: IThemeRules): any;\\n    /**\\n     * Sets the given slot's color to the appropriate color, shading it if necessary.\\n     * Then, iterates through all other rules (that are this rule's dependents) to update them accordingly.\\n     * @param isCustomization - If true, it's a user-provided color, which should be to that raw color.\\n     * If false, the rule it's inheriting from changed, so updated using asShade.\\n     */\\n    private static _setSlot;\\n    /**\\n     * Makes the rest of the code that's used for the load theme blob in the exported codepens of\\n     * both the older sharepoint-specific theme designer and the new theme designer. Takes in\\n     * theme rules and converts them to format fitting a list of palette colors and their values.\\n     * Resulting output looks like:\\n     * ```\\n     * const _theme = createTheme({\\n     *  palette: {\\n     *    themePrimary: '#0078d4',\\n     *    themeLighterAlt: '#f3f9fd',\\n     *    ...\\n     *  }});\\n     * ```\\n     * The first line is loadTheme instead of createTheme for the old sharepoint theme designer.\\n     */\\n    private static _makeRemainingCode;\\n}\\n\\nexport declare function themeRulesStandardCreator(): IThemeRules;\\n\\nexport declare const Toggle: React.FunctionComponent<IToggleProps>;\\n\\nexport declare class ToggleBase extends React.Component<IToggleProps, IToggleState> implements IToggle {\\n    private _id;\\n    private _toggleButton;\\n    static getDerivedStateFromProps(nextProps: Readonly<IToggleProps>, prevState: Readonly<IToggleState>): Partial<IToggleState> | null;\\n    constructor(props: IToggleProps);\\n    /**\\n     * Gets the current checked state of the toggle.\\n     */\\n    readonly checked: boolean;\\n    render(): JSX.Element;\\n    focus(): void;\\n    private _onClick;\\n    private _noop;\\n}\\n\\nexport declare const Tooltip: React.FunctionComponent<ITooltipProps>;\\n\\nexport declare class TooltipBase extends React.Component<ITooltipProps, any> {\\n    static defaultProps: Partial<ITooltipProps>;\\n    private _classNames;\\n    render(): JSX.Element;\\n    private _onRenderContent;\\n}\\n\\n/**\\n * {@docCategory Tooltip}\\n */\\nexport declare enum TooltipDelay {\\n    zero = 0,\\n    /** 300 ms delay before showng the tooltip */\\n    medium = 1,\\n    /** 500 ms delay before showing the tooltip */\\n    long = 2\\n}\\n\\nexport declare const TooltipHost: React.FunctionComponent<ITooltipHostProps>;\\n\\nexport declare class TooltipHostBase extends React.Component<ITooltipHostProps, ITooltipHostState> implements ITooltipHost {\\n    static defaultProps: {\\n        delay: TooltipDelay;\\n    };\\n    private static _currentVisibleTooltip;\\n    private _tooltipHost;\\n    private _classNames;\\n    private _async;\\n    private _dismissTimerId;\\n    private _openTimerId;\\n    private _defaultTooltipId;\\n    constructor(props: ITooltipHostProps);\\n    render(): JSX.Element;\\n    componentWillUnmount(): void;\\n    show: () => void;\\n    dismiss: () => void;\\n    private _getTargetElement;\\n    private _onTooltipMouseEnter;\\n    private _onTooltipMouseLeave;\\n    private _onTooltipKeyDown;\\n    private _clearDismissTimer;\\n    private _clearOpenTimer;\\n    private _hideTooltip;\\n    private _toggleTooltip;\\n    private _getDelayTime;\\n}\\n\\n/**\\n * {@docCategory Tooltip}\\n */\\nexport declare enum TooltipOverflowMode {\\n    /** Only show tooltip if parent DOM element is overflowing */\\n    Parent = 0,\\n    /**\\n     * Only show tooltip if tooltip host's content is overflowing.\\n     * Note that this does not check the children for overflow, only the TooltipHost root.\\n     */\\n    Self = 1\\n}\\n\\n/**\\n * Tests for equality between two IKeytipTransitionKeys.\\n *\\n * @param key1 - First IKeytipTransitionKey.\\n * @param key2 - Second IKeytipTransitionKey.\\n * @returns T/F if the transition keys are equal.\\n */\\nexport declare function transitionKeysAreEqual(key1: IKeytipTransitionKey, key2: IKeytipTransitionKey): boolean;\\n\\n/**\\n * Tests if 'key' is present in 'keys'.\\n *\\n * @param keys - Array of IKeytipTransitionKey.\\n * @param key - IKeytipTransitionKey to find in 'keys'.\\n * @returns T/F if 'keys' contains 'key'.\\n */\\nexport declare function transitionKeysContain(keys: IKeytipTransitionKey[], key: IKeytipTransitionKey): boolean;\\n\\n/**\\n * Gets a color with the given alpha value and the same other components as `color`.\\n * Does not modify the original color.\\n */\\nexport declare function updateA(color: IColor, a: number): IColor;\\n\\n/**\\n * Gets a color with the same saturation and value as `color` and the other components updated\\n * to match the given hue.\\n *\\n * Does not modify the original `color` and does not supply a default alpha value.\\n */\\nexport declare function updateH(color: IColor, h: number): IColor;\\n\\n/**\\n * Gets a color with a single RGBA component updated to a new value.\\n * Does not modify the original `color`. Alpha defaults to 100 if not set.\\n */\\nexport declare function updateRGB(color: IColor, component: keyof IRGB, value: number): IColor;\\n\\n/**\\n * Gets a color with the same hue as `color` and other components updated to match the given\\n * saturation and value.\\n *\\n * Does not modify the original `color` and does not supply a default alpha value.\\n */\\nexport declare function updateSV(color: IColor, s: number, v: number): IColor;\\n\\n/**\\n * Gets a color with the given transparency value and the same other components as `color`.\\n * Does not modify the original color.\\n */\\nexport declare function updateT(color: IColor, t: number): IColor;\\n\\n/**\\n * Hook that creates a ref which is used for passing to Keytip target element.\\n * The ref will handle setting the attributes needed for Keytip to work.\\n */\\nexport declare function useKeytipRef<TElement extends HTMLElement = HTMLElement>(options: KeytipDataOptions): React.Ref<TElement>;\\n\\n/**\\n * Validation state of the user's input.\\n * {@docCategory Pickers}\\n */\\nexport declare enum ValidationState {\\n    /** User input is valid. */\\n    valid = 0,\\n    /** User input could be valid or invalid, its state is not known yet. */\\n    warning = 1,\\n    /** User input is invalid. */\\n    invalid = 2\\n}\\n\\nexport declare const VerticalDivider: React.FunctionComponent<IVerticalDividerProps>;\\n\\nexport declare class VirtualizedComboBox extends React.Component<IComboBoxProps, {}> implements IComboBox {\\n    /** The combo box element */\\n    private _comboBox;\\n    /** The virtualized list element */\\n    private _list;\\n    constructor(props: IComboBoxProps);\\n    /**\\n     * All selected options\\n     */\\n    readonly selectedOptions: IComboBoxOption[];\\n    dismissMenu(): void;\\n    focus(shouldOpenOnFocus?: boolean, useFocusAsync?: boolean): boolean;\\n    render(): JSX.Element;\\n    protected _onRenderList: (props: IComboBoxProps) => JSX.Element;\\n    protected _onScrollToItem: (itemIndex: number) => void;\\n}\\n\\nexport * from \\\"@fluentui/date-time-utilities/lib/dateMath/dateMath\\\";\\nexport * from \\\"@fluentui/date-time-utilities/lib/dateValues/dateValues\\\";\\nexport * from \\\"@fluentui/date-time-utilities/lib/dateValues/timeConstants\\\";\\nexport * from \\\"@fluentui/react-focus\\\";\\nexport * from \\\"@fluentui/react-window-provider\\\";\\nexport * from \\\"@uifabric/icons\\\";\\nexport * from \\\"@uifabric/styling\\\";\\nexport * from \\\"@uifabric/utilities\\\";\\n\\nexport { }\\n\"\n\n//# sourceURL=webpack:///../tsx-editor/dist/types/office-ui-fabric-react.d.ts?/mnt/work/5/s/node_modules/raw-loader");

/***/ }),

/***/ "../../node_modules/raw-loader/index.js!../tsx-editor/dist/types/react-focus.d.ts":
/*!***************************************************************************************!*\
  !*** /mnt/work/5/s/node_modules/raw-loader!../tsx-editor/dist/types/react-focus.d.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"import { IRefObject } from '@uifabric/utilities';\\nimport { Point } from '@uifabric/utilities';\\nimport * as React from 'react';\\n\\nexport declare class FocusZone extends React.Component<IFocusZoneProps> implements IFocusZone {\\n    static defaultProps: IFocusZoneProps;\\n    private _root;\\n    private _mergedRef;\\n    private _id;\\n    /** The most recently focused child element. */\\n    private _activeElement;\\n    /**\\n     * The index path to the last focused child element.\\n     */\\n    private _lastIndexPath;\\n    /**\\n     * Flag to define when we've intentionally parked focus on the root element to temporarily\\n     * hold focus until items appear within the zone.\\n     */\\n    private _isParked;\\n    /** The child element with tabindex=0. */\\n    private _defaultFocusElement;\\n    private _focusAlignment;\\n    private _isInnerZone;\\n    private _parkedTabIndex;\\n    /** Used to allow moving to next focusable element even when we're focusing on a input element when pressing tab */\\n    private _processingTabKey;\\n    private _windowElement;\\n    /** Used for testing purposes only. */\\n    static getOuterZones(): number;\\n    /**\\n     * Handle global tab presses so that we can patch tabindexes on the fly.\\n     * HEADS UP: This must not be an arrow function in order to be referentially equal among instances\\n     * for ref counting to work correctly!\\n     */\\n    private static _onKeyDownCapture;\\n    constructor(props: IFocusZoneProps);\\n    componentDidMount(): void;\\n    componentDidUpdate(): void;\\n    componentWillUnmount(): void;\\n    render(): React.ReactNode;\\n    /**\\n     * Sets focus to the first tabbable item in the zone.\\n     * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\\n     * if focus is already in the focus zone.\\n     * @returns True if focus could be set to an active element, false if no operation was taken.\\n     */\\n    focus(forceIntoFirstElement?: boolean): boolean;\\n    /**\\n     * Sets focus to the last tabbable item in the zone.\\n     * @returns True if focus could be set to an active element, false if no operation was taken.\\n     */\\n    focusLast(): boolean;\\n    /**\\n     * Sets focus to a specific child element within the zone. This can be used in conjunction with\\n     * shouldReceiveFocus to create delayed focus scenarios (like animate the scroll position to the correct\\n     * location and then focus.)\\n     * @param element - The child element within the zone to focus.\\n     * @param forceAlignment - If true, focus alignment will be set according to the element provided.\\n     * @returns True if focus could be set to an active element, false if no operation was taken.\\n     */\\n    focusElement(element: HTMLElement, forceAlignment?: boolean): boolean;\\n    /**\\n     * Forces horizontal alignment in the context of vertical arrowing to use specific point as the reference,\\n     * rather than a center based on the last horizontal motion.\\n     * @param point - the new reference point.\\n     */\\n    setFocusAlignment(point: Point): void;\\n    private _evaluateFocusBeforeRender;\\n    private _onFocus;\\n    /**\\n     * When focus is in the zone at render time but then all focusable elements are removed,\\n     * we \\\"park\\\" focus temporarily on the root. Once we update with focusable children, we restore\\n     * focus to the closest path from previous. If the user tabs away from the parked container,\\n     * we restore focusability to the pre-parked state.\\n     */\\n    private _setParkedFocus;\\n    private _onBlur;\\n    private _onMouseDown;\\n    private _setActiveElement;\\n    private _preventDefaultWhenHandled;\\n    /**\\n     * Handle the keystrokes.\\n     */\\n    private _onKeyDown;\\n    /**\\n     * Walk up the dom try to find a focusable element.\\n     */\\n    private _tryInvokeClickForFocusable;\\n    /**\\n     * Traverse to find first child zone.\\n     */\\n    private _getFirstInnerZone;\\n    private _moveFocus;\\n    private _moveFocusDown;\\n    private _moveFocusUp;\\n    private _moveFocusLeft;\\n    private _moveFocusRight;\\n    private _getHorizontalDistanceFromCenter;\\n    private _moveFocusPaging;\\n    private _setFocusAlignment;\\n    private _isImmediateDescendantOfZone;\\n    private _getOwnerZone;\\n    private _updateTabIndexes;\\n    private _isContentEditableElement;\\n    private _isElementInput;\\n    private _shouldInputLoseFocus;\\n    private _shouldWrapFocus;\\n    /**\\n     * Returns true if the element is a descendant of the FocusZone through a React portal.\\n     */\\n    private _portalContainsElement;\\n    private _getDocument;\\n}\\n\\n/**\\n * {@docCategory FocusZone}\\n */\\nexport declare enum FocusZoneDirection {\\n    /** Only react to up/down arrows. */\\n    vertical = 0,\\n    /** Only react to left/right arrows. */\\n    horizontal = 1,\\n    /** React to all arrows. */\\n    bidirectional = 2,\\n    /**\\n     * React to all arrows. Navigate next item in DOM on right/down arrow keys and previous - left/up arrow keys.\\n     * Right and Left arrow keys are swapped in RTL mode.\\n     */\\n    domOrder = 3\\n}\\n\\n/**\\n * {@docCategory FocusZone}\\n */\\nexport declare const FocusZoneTabbableElements: {\\n    /** Tabbing is not allowed */\\n    none: 0;\\n    /** All tabbing action is allowed */\\n    all: 1;\\n    /** Tabbing is allowed only on input elements */\\n    inputOnly: 2;\\n};\\n\\n/**\\n * {@docCategory FocusZone}\\n */\\nexport declare type FocusZoneTabbableElements = typeof FocusZoneTabbableElements[keyof typeof FocusZoneTabbableElements];\\n\\n/**\\n * FocusZone component class interface.\\n * {@docCategory FocusZone}\\n */\\nexport declare interface IFocusZone {\\n    /**\\n     * Sets focus to the first tabbable item in the zone.\\n     * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\\n     * if focus is already in the focus zone.\\n     * @returns True if focus could be set to an active element, false if no operation was taken.\\n     */\\n    focus(forceIntoFirstElement?: boolean): boolean;\\n    /**\\n     * Sets focus to the last tabbable item in the zone.\\n     * @returns True if focus could be set to an active element, false if no operation was taken.\\n     */\\n    focusLast(): boolean;\\n    /**\\n     * Sets focus to a specific child element within the zone. This can be used in conjunction with\\n     * shouldReceiveFocus to create delayed focus scenarios (like animate the scroll position to the correct\\n     * location and then focus.)\\n     * @param childElement - The child element within the zone to focus.\\n     * @param forceAlignment - If true, focus alignment will be set according to the element provided.\\n     * @returns True if focus could be set to an active element, false if no operation was taken.\\n     */\\n    focusElement(childElement?: HTMLElement, forceAlignment?: boolean): boolean;\\n    /**\\n     * Forces horizontal alignment in the context of vertical arrowing to use specific point as the reference, rather\\n     * than a center based on the last horizontal motion.\\n     * @param point - the new reference point.\\n     */\\n    setFocusAlignment(point: Point): void;\\n}\\n\\n/**\\n * FocusZone component props.\\n * {@docCategory FocusZone}\\n */\\nexport declare interface IFocusZoneProps extends React.HTMLAttributes<HTMLElement | FocusZone> {\\n    /**\\n     * Optional callback to access the IFocusZone interface. Use this instead of ref for accessing\\n     * the public methods and properties of the component.\\n     */\\n    componentRef?: IRefObject<IFocusZone>;\\n    /**\\n     * Optional callback to access the root DOM element.\\n     * @deprecated Temporary solution which will be replaced with ref in the V8 release.\\n     */\\n    elementRef?: React.Ref<HTMLElement>;\\n    /**\\n     * Additional class name to provide on the root element, in addition to the ms-FocusZone class.\\n     */\\n    className?: string;\\n    /**\\n     * Defines which arrows to react to.\\n     * @defaultvalue FocusZoneDirection.bidirectional\\n     */\\n    direction?: FocusZoneDirection;\\n    /**\\n     * Optionally defines the initial tabbable element inside the FocusZone.\\n     * If a string is passed then it is treated as a selector for identifying the initial tabbable element.\\n     * If a function is passed then it uses the root element as a parameter to return the initial tabbable element.\\n     */\\n    defaultTabbableElement?: string | ((root: HTMLElement) => HTMLElement);\\n    /**\\n     * Optionally provide a selector for identifying the initial active element.\\n     * @deprecated Use `defaultTabbableElement` instead.\\n     */\\n    defaultActiveElement?: string;\\n    /**\\n     * Determines if a default tabbable element should be force focused on FocusZone mount.\\n     * @default false\\n     */\\n    shouldFocusOnMount?: boolean;\\n    /**\\n     * If set, the FocusZone will not be tabbable and keyboard navigation will be disabled.\\n     * This does not affect disabled attribute of any child.\\n     */\\n    disabled?: boolean;\\n    /**\\n     * Element type the root element will use. Default is \\\"div\\\".\\n     * @deprecated Use 'as' instead.\\n     */\\n    elementType?: any;\\n    /**\\n     * A component that should be used as the root element of the FocusZone component.\\n     */\\n    as?: React.ElementType;\\n    /**\\n     * If set, will cycle to the beginning of the targets once the user navigates to the\\n     * next target while at the end, and to the end when navigate to the previous at the beginning.\\n     */\\n    isCircularNavigation?: boolean;\\n    /**\\n     * If provided, this callback will be executed on keypresses to determine if the user\\n     * intends to navigate into the inner zone. Returning true will ask the first inner zone to\\n     * set focus.\\n     * @deprecated Use `shouldEnterInnerZone` instead.\\n     */\\n    isInnerZoneKeystroke?: (ev: React.KeyboardEvent<HTMLElement>) => boolean;\\n    /**\\n     * Callback function that will be executed on keypresses to determine if the user intends to navigate into\\n     * the inner (nested) zone. Returning true will ask the first inner zone to set focus.\\n     */\\n    shouldEnterInnerZone?: (ev: React.KeyboardEvent<HTMLElement>) => boolean;\\n    /**\\n     * Sets the aria-labelledby attribute.\\n     * @deprecated Directly use the `aria-labelledby` attribute instead\\n     */\\n    ariaLabelledBy?: string;\\n    /**\\n     * Sets the aria-describedby attribute.\\n     * @deprecated Directly use the `aria-describedby` attribute instead\\n     */\\n    ariaDescribedBy?: string;\\n    /**\\n     * Callback for when one of immediate children elements gets active by getting focused\\n     * or by having one of its respective children elements focused.\\n     */\\n    onActiveElementChanged?: (element?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void;\\n    /**\\n     * Deprecated at v1.12.1. DIV props provided to the FocusZone will be mixed into the root element.\\n     * @deprecated DIV props provided to the FocusZone will be mixed into the root element.\\n     */\\n    rootProps?: React.HTMLAttributes<HTMLDivElement>;\\n    /**\\n     * Callback method for determining if focus should indeed be set on the given element.\\n     * @param element - The child element within the zone to focus.\\n     * @returns True if focus should be set to the given element, false to avoid setting focus.\\n     * @deprecated Use `shouldReceiveFocus` instead.\\n     */\\n    onBeforeFocus?: (childElement?: HTMLElement) => boolean;\\n    /**\\n     * Callback method for determining if focus should indeed be set on the given element.\\n     * @param element - The child element within the zone to focus.\\n     * @returns True if focus should be set to the given element, false to avoid setting focus.\\n     */\\n    shouldReceiveFocus?: (childElement?: HTMLElement) => boolean;\\n    /** Allows focus to park on root when focus is in the `FocusZone` at render time. */\\n    allowFocusRoot?: boolean;\\n    /**\\n     * Allows tab key to be handled to tab through a list of items in the focus zone,\\n     * an unfortunate side effect is that users will not be able to tab out of the focus zone\\n     * and have to hit escape or some other key.\\n     * @deprecated Use `handleTabKey` instead.\\n     *\\n     */\\n    allowTabKey?: boolean;\\n    /**\\n     * Allows tab key to be handled to tab through a list of items in the focus zone,\\n     * an unfortunate side effect is that users will not be able to tab out of the focus zone\\n     * and have to hit escape or some other key.\\n     */\\n    handleTabKey?: FocusZoneTabbableElements;\\n    /**\\n     * If true and FocusZone's root element (container) receives focus, the focus will land either on the\\n     * defaultTabbableElement (if set) or on the first tabbable element of this FocusZone.\\n     * Usually a case for nested focus zones, when the nested focus zone's container is a focusable element.\\n     */\\n    shouldFocusInnerElementWhenReceivedFocus?: boolean;\\n    /**\\n     * If true and TAB key is not handled by FocusZone, resets current active element to null value.\\n     * For example, when roving index is not desirable and focus should always reset to the default tabbable element.\\n     */\\n    shouldResetActiveElementWhenTabFromZone?: boolean;\\n    /**\\n     * Determines whether the FocusZone will walk up the DOM trying to invoke click callbacks on focusable elements on\\n     * Enter and Space keydowns to ensure accessibility for tags that don't guarantee this behavior.\\n     * @defaultvalue true\\n     */\\n    shouldRaiseClicks?: boolean;\\n    /**\\n     * A callback method to determine if the input element should lose focus on arrow keys\\n     *  @param inputElement - The input element which is to loose focus.\\n     *  @returns True if input element should loose focus or false otherwise.\\n     */\\n    shouldInputLoseFocusOnArrowKey?: (inputElement: HTMLInputElement) => boolean;\\n    /**\\n     * Determines whether to disable the paging support for Page Up and Page Down keyboard scenarios.\\n     * @defaultvalue false\\n     */\\n    pagingSupportDisabled?: boolean;\\n    /**\\n     * Determines whether to check for data-no-horizontal-wrap or data-no-vertical-wrap attributes\\n     * when determining how to move focus\\n     * @defaultvalue false\\n     */\\n    checkForNoWrap?: boolean;\\n    /**\\n     * Whether the FocusZone should allow focus events to propagate past the FocusZone.\\n     * @deprecated Use `stopFocusPropagation` instead.\\n     */\\n    doNotAllowFocusEventToPropagate?: boolean;\\n    /**\\n     * Whether the FocusZone should allow focus events to propagate past the FocusZone.\\n     */\\n    stopFocusPropagation?: boolean;\\n    /**\\n     * Callback to notify creators that focus has been set on the FocusZone\\n     * @deprecated Use `onFocus` instead.\\n     */\\n    onFocusNotification?: () => void;\\n    /**\\n     * Callback called when \\\"focus\\\" event triggered in FocusZone.\\n     * @param event - React's original FocusEvent.\\n     */\\n    onFocus?: (event: React.FocusEvent<HTMLElement | FocusZone>) => void;\\n    /**\\n     * If true, FocusZone prevents the default behavior of Keyboard events when changing focus between elements.\\n     * @defaultvalue false\\n     */\\n    preventDefaultWhenHandled?: boolean;\\n    /**\\n     * If true, prevents the FocusZone from attempting to restore the focus to the inner element when the focus is on the\\n     * root element after componentDidUpdate.\\n     * @defaultvalue false\\n     */\\n    preventFocusRestoration?: boolean;\\n}\\n\\nexport { }\\n\"\n\n//# sourceURL=webpack:///../tsx-editor/dist/types/react-focus.d.ts?/mnt/work/5/s/node_modules/raw-loader");

/***/ }),

/***/ "../../node_modules/raw-loader/index.js!../tsx-editor/dist/types/react-hooks.d.ts":
/*!***************************************************************************************!*\
  !*** /mnt/work/5/s/node_modules/raw-loader!../tsx-editor/dist/types/react-hooks.d.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"import { Async } from '@uifabric/utilities';\\nimport { ISettingsMap } from '@uifabric/utilities/lib/warn';\\nimport { IWarnControlledUsageParams } from '@uifabric/utilities/lib/warn';\\nimport { Point } from '@uifabric/utilities';\\nimport * as React from 'react';\\nimport { Rectangle } from '@uifabric/utilities';\\n\\nexport declare type ChangeCallback<TElement extends HTMLElement, TValue, TEvent extends React.SyntheticEvent<TElement> | undefined> = (ev: TEvent, newValue: TValue | undefined) => void;\\n\\n/** Updater callbacks returned by `useBoolean`. */\\nexport declare interface IUseBooleanCallbacks {\\n    /** Set the value to true. Always has the same identity. */\\n    setTrue: () => void;\\n    /** Set the value to false. Always has the same identity. */\\n    setFalse: () => void;\\n    /** Toggle the value. Always has the same identity. */\\n    toggle: () => void;\\n}\\n\\nexport declare interface IWarningOptions<P> {\\n    /** Name of the component */\\n    name: string;\\n    /** Current component props */\\n    props: P;\\n    /** Generic messages */\\n    other?: string[];\\n    /** Warns when props are required if a condition is met */\\n    conditionallyRequired?: {\\n        /** Props required when the condition is met */\\n        requiredProps: string[];\\n        /** Name of the prop that the condition is based on */\\n        conditionalPropName: string;\\n        /** Whether the condition is met */\\n        condition: boolean;\\n    }[];\\n    /**\\n     * Warns when deprecated props are being used. Each key is a prop name and each value is\\n     * either undefined or a replacement prop name.\\n     */\\n    deprecations?: ISettingsMap<P>;\\n    /**\\n     * Warns when two props which are mutually exclusive are both being used.\\n     * The key is one prop name and the value is the other.\\n     */\\n    mutuallyExclusive?: ISettingsMap<P>;\\n    /**\\n     * Check for and warn on the following error conditions with a form component:\\n     * - A value prop is provided (indicated it's being used as controlled) without a change handler,\\n     *    and the component is not read-only\\n     * - Both the value and defaultValue props are provided\\n     * - The component is attempting to switch between controlled and uncontrolled\\n     *\\n     * The messages mimic the warnings React gives for these error conditions on input elements.\\n     * The warning will only be displayed once per component instance.\\n     */\\n    controlledUsage?: Pick<IWarnControlledUsageParams<P>, 'valueProp' | 'defaultValueProp' | 'onChangeProp' | 'readOnlyProp'>;\\n}\\n\\n/**\\n * A callback ref function that also has a .current member for the ref's current value.\\n */\\nexport declare type RefCallback<T> = ((value: T | null) => void) & React.RefObject<T>;\\n\\n/**\\n * A Ref function which can be treated like a ref object in that it has an attached\\n * current property, which will be updated as the ref is evaluated.\\n */\\nexport declare type RefObjectFunction<T> = React.RefObject<T> & ((value: T) => void);\\n\\nexport declare type Target = Element | string | MouseEvent | Point | Rectangle | null | React.RefObject<Element>;\\n\\n/**\\n * Hook to provide an Async instance that is automatically cleaned up on dismount.\\n */\\nexport declare function useAsync(): Async;\\n\\n/**\\n * Hook to store a value and generate callbacks for setting the value to true or false.\\n * The identity of the callbacks will always stay the same.\\n *\\n * @param initialState - Initial value\\n * @returns Array with the current value and an object containing the updater callbacks.\\n */\\nexport declare function useBoolean(initialState: boolean): [boolean, IUseBooleanCallbacks];\\n\\n/**\\n * Hook to initialize and return a constant value. Unlike `React.useMemo`, this is guaranteed to\\n * always return the same value (and if the initializer is a function, only call it once).\\n * This is similar to setting a private member in a class constructor.\\n *\\n * If the value should ever change based on dependencies, use `React.useMemo` instead.\\n *\\n * @param initialValue - Initial value, or function to get the initial value. Similar to `useState`,\\n * only the value/function passed in the first time this is called is respected.\\n * @returns The value. The identity of this value will always be the same.\\n */\\nexport declare function useConst<T>(initialValue: T | (() => T)): T;\\n\\n/**\\n * @deprecated Deprecated due to potential for misuse (see package readme).\\n * Use `React.useCallback` instead.\\n */\\nexport declare function useConstCallback<T extends (...args: any[]) => any>(callback: T): T;\\n\\n/**\\n * Hook to manage a value that could be either controlled or uncontrolled, such as a checked state or\\n * text box string.\\n * @param controlledValue - The controlled value passed in the props. This value will always be used if provided,\\n * and the internal state will be updated to reflect it.\\n * @param defaultUncontrolledValue - Initial value for the internal state in the uncontrolled case.\\n * @returns An array of the current value and an updater callback. Like `React.useState`, the updater\\n * callback always has the same identity, and it can take either a new value, or a function which\\n * is passed the previous value and returns the new value.\\n * @see https://reactjs.org/docs/uncontrolled-components.html\\n */\\nexport declare function useControllableValue<TValue, TElement extends HTMLElement>(controlledValue: TValue | undefined, defaultUncontrolledValue: TValue | undefined): Readonly<[TValue | undefined, (update: React.SetStateAction<TValue | undefined>) => void]>;\\n\\nexport declare function useControllableValue<TValue, TElement extends HTMLElement, TEvent extends React.SyntheticEvent<TElement> | undefined>(controlledValue: TValue | undefined, defaultUncontrolledValue: TValue | undefined, onChange: ChangeCallback<TElement, TValue, TEvent> | undefined): Readonly<[TValue | undefined, (update: React.SetStateAction<TValue | undefined>, ev?: React.FormEvent<TElement>) => void]>;\\n\\n/**\\n * Hook to force update a function component by updating a dummy state.\\n */\\nexport declare function useForceUpdate(): () => void;\\n\\n/**\\n * Hook to generate a unique ID in the global scope (spanning across duplicate copies of the same library).\\n *\\n * @param prefix - Optional prefix for the ID\\n * @param providedId - Optional id provided by a parent component. Defaults to the provided value if present,\\n *  without conditioning the hook call\\n * @returns The ID\\n */\\nexport declare function useId(prefix?: string, providedId?: string): string;\\n\\n/**\\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\\n * updates all provided refs\\n * @param refs - Refs to collectively update with one ref value.\\n * @returns A function with an attached \\\"current\\\" prop, so that it can be treated like a RefObject.\\n */\\nexport declare function useMergedRefs<T>(...refs: (React.Ref<T> | undefined)[]): RefObjectFunction<T>;\\n\\n/**\\n * Hook to attach an event handler on mount and handle cleanup.\\n * @param element - Element (or ref to an element) to attach the event handler to\\n * @param eventName - The event to attach a handler for\\n * @param callback - The handler for the event\\n * @param useCapture - Whether or not to attach the handler for the capture phase\\n */\\nexport declare function useOnEvent<TElement extends Element, TEvent extends Event>(element: React.RefObject<TElement | undefined | null> | TElement | Window | Document | undefined | null, eventName: string, callback: (ev: TEvent) => void, useCapture?: boolean): void;\\n\\n/**\\n * Hook keeping track of a given value from a previous execution of the component the Hook is used in.\\n *\\n * See [React Hooks FAQ](https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state)\\n */\\nexport declare function usePrevious<T>(value: T): T | undefined;\\n\\n/**\\n * Creates a ref, and calls a callback whenever the ref changes to a non-null value. The callback can optionally return\\n * a cleanup function that'll be called before the value changes, and when the ref is unmounted.\\n *\\n * This can be used to work around a limitation that useEffect cannot depend on `ref.current` (see\\n * https://github.com/facebook/react/issues/14387#issuecomment-503616820).\\n *\\n * Usage example:\\n * ```ts\\n * const myRef = useRefEffect<HTMLElement>(element => {\\n *  ...\\n *  return () => { ... cleanup ... };\\n * });\\n * ```\\n * ```jsx\\n * <div ref={myRef} />\\n * ```\\n *\\n * @param callback - Called whenever the ref's value changes to non-null. Can optionally return a cleanup function.\\n * @param initial - (Optional) The initial value for the ref.\\n *\\n * @returns A function that should be called to set the ref's value. The object also has a `.current` member that can be\\n * used to access the ref's value (like a normal RefObject). It can be hooked up to an element's `ref` property.\\n */\\nexport declare function useRefEffect<T>(callback: (value: T) => (() => void) | void, initial?: T | null): RefCallback<T>;\\n\\n/**\\n *  Returns a wrapper function for `setInterval` which automatically handles disposal.\\n */\\nexport declare const useSetInterval: () => UseSetIntervalReturnType;\\n\\nexport declare type UseSetIntervalReturnType = {\\n    setInterval: (callback: () => void, duration: number) => number;\\n    clearInterval: (id: number) => void;\\n};\\n\\n/**\\n *  Returns a wrapper function for `setTimeout` which automatically handles disposal.\\n */\\nexport declare const useSetTimeout: () => UseSetTimeoutReturnType;\\n\\nexport declare type UseSetTimeoutReturnType = {\\n    setTimeout: (callback: () => void, duration: number) => number;\\n    clearTimeout: (id: number) => void;\\n};\\n\\n/**\\n * Hook to calculate and cache the target element specified by the given target attribute,\\n * as well as the target element's (or host element's) parent window\\n * @param target- Target selector passed to the component as a property, describing the element that\\n * the callout should target\\n * @param hostElement- The callout's host element, used for determining the parent window.\\n */\\nexport declare function useTarget<TElement extends HTMLElement = HTMLElement>(target: Target | undefined, hostElement?: React.RefObject<TElement | null>): Readonly<[React.RefObject<Element | MouseEvent | Point | Rectangle | null>, Window | undefined]>;\\n\\n/**\\n * Only in development mode, display console warnings when certain conditions are met.\\n * Note that all warnings except `controlledUsage` will only be shown on first render\\n * (new `controlledUsage` warnings may be shown later due to prop changes).\\n */\\nexport declare function useWarnings<P>(options: IWarningOptions<P>): void;\\n\\nexport { }\\n\"\n\n//# sourceURL=webpack:///../tsx-editor/dist/types/react-hooks.d.ts?/mnt/work/5/s/node_modules/raw-loader");

/***/ }),

/***/ "../../node_modules/raw-loader/index.js!../tsx-editor/dist/types/react-window-provider.d.ts":
/*!*************************************************************************************************!*\
  !*** /mnt/work/5/s/node_modules/raw-loader!../tsx-editor/dist/types/react-window-provider.d.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"import * as React from 'react';\\n\\n/**\\n * Hook to access the document object. This can be overridden contextually using the `WindowProvider`.\\n */\\nexport declare const useDocument: () => Document | undefined;\\n\\n/**\\n * Hook to access the window object. This can be overridden contextually using the `WindowProvider`.\\n */\\nexport declare const useWindow: () => Window | undefined;\\n\\n/**\\n * Context for providing the window.\\n */\\nexport declare const WindowContext: React.Context<WindowProviderProps>;\\n\\n/**\\n * Component to provide the window object contextually. This is useful when rendering content to an element\\n * contained within a child window or iframe element, where event handlers and styling must be projected\\n * to an alternative window or document.\\n */\\nexport declare const WindowProvider: React.FunctionComponent<WindowProviderProps>;\\n\\n/**\\n * Props for the WindowProvider component.\\n */\\nexport declare type WindowProviderProps = {\\n    /**\\n     * Provide the active window.\\n     */\\n    window: Window | undefined;\\n};\\n\\nexport { }\\n\"\n\n//# sourceURL=webpack:///../tsx-editor/dist/types/react-window-provider.d.ts?/mnt/work/5/s/node_modules/raw-loader");

/***/ }),

/***/ "../../node_modules/raw-loader/index.js!../tsx-editor/dist/types/styling.d.ts":
/*!***********************************************************************************!*\
  !*** /mnt/work/5/s/node_modules/raw-loader!../tsx-editor/dist/types/styling.d.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"import { AnimationStyles } from '@fluentui/theme/lib/motion/AnimationStyles';\\nimport { AnimationVariables } from '@fluentui/theme/lib/motion/AnimationStyles';\\nimport { concatStyleSets } from '@uifabric/merge-styles';\\nimport { concatStyleSetsWithProps } from '@uifabric/merge-styles';\\nimport { createFontStyles } from '@fluentui/theme/lib/fonts/index';\\nimport { createTheme } from '@fluentui/theme/lib/createTheme';\\nimport { DefaultEffects } from '@fluentui/theme/lib/effects/DefaultEffects';\\nimport { DefaultFontStyles } from '@fluentui/theme/lib/fonts/DefaultFontStyles';\\nimport { DefaultPalette } from '@fluentui/theme/lib/colors/DefaultPalette';\\nimport { fontFace } from '@uifabric/merge-styles';\\nimport { FontSizes } from '@fluentui/theme/lib/fonts/index';\\nimport { FontWeights } from '@fluentui/theme/lib/fonts/index';\\nimport { IAnimationStyles } from '@fluentui/theme/lib/types/IAnimationStyles';\\nimport { IAnimationVariables } from '@fluentui/theme/lib/types/IAnimationStyles';\\nimport { IconFontSizes } from '@fluentui/theme/lib/fonts/index';\\nimport { ICSPSettings } from '@uifabric/merge-styles';\\nimport { ICustomizerContext } from '@uifabric/utilities';\\nimport { IEffects } from '@fluentui/theme/lib/types/IEffects';\\nimport { IFontFace } from '@uifabric/merge-styles';\\nimport { IFontStyles } from '@fluentui/theme/lib/types/IFontStyles';\\nimport { IFontWeight } from '@uifabric/merge-styles';\\nimport { InjectionMode } from '@uifabric/merge-styles';\\nimport { IPalette } from '@fluentui/theme/lib/types/IPalette';\\nimport { IPartialTheme } from '@fluentui/theme/lib/types/ITheme';\\nimport { IProcessedStyleSet } from '@uifabric/merge-styles';\\nimport { IRawStyle } from '@uifabric/merge-styles';\\nimport { IScheme } from '@fluentui/theme/lib/types/ITheme';\\nimport { ISchemeNames } from '@fluentui/theme/lib/types/ITheme';\\nimport { ISemanticColors } from '@fluentui/theme/lib/types/ISemanticColors';\\nimport { ISemanticTextColors } from '@fluentui/theme/lib/types/ISemanticTextColors';\\nimport { ISpacing } from '@fluentui/theme/lib/types/ISpacing';\\nimport { IStyle } from '@uifabric/merge-styles';\\nimport { IStyleSet } from '@uifabric/merge-styles';\\nimport { IStyleSheetConfig } from '@uifabric/merge-styles';\\nimport { ITheme } from '@fluentui/theme/lib/types/ITheme';\\nimport { keyframes } from '@uifabric/merge-styles';\\nimport { mergeStyles } from '@uifabric/merge-styles';\\nimport { mergeStyleSets } from '@uifabric/merge-styles';\\nimport { registerDefaultFontFaces } from '@fluentui/theme/lib/fonts/DefaultFontStyles';\\nimport { Stylesheet } from '@uifabric/merge-styles';\\n\\n/**\\n * {@docCategory AnimationClassNames}\\n */\\nexport declare const AnimationClassNames: {\\n    [key in keyof IAnimationStyles]?: string;\\n};\\nexport { AnimationStyles }\\nexport { AnimationVariables }\\n\\n/**\\n * Builds a class names object from a given map.\\n *\\n * @param styles - Map of unprocessed styles.\\n * @returns Map of property name to class name.\\n */\\nexport declare function buildClassMap<T extends Object>(styles: T): {\\n    [key in keyof T]?: string;\\n};\\n\\nexport declare const ColorClassNames: IColorClassNames;\\nexport { concatStyleSets }\\nexport { concatStyleSetsWithProps }\\n\\ndeclare function _continuousPulseAnimationDouble(beaconColorOne: string, beaconColorTwo: string, innerDimension: string, outerDimension: string, borderWidth: string): string;\\n\\ndeclare function _continuousPulseAnimationSingle(beaconColorOne: string, beaconColorTwo: string, innerDimension: string, outerDimension: string, borderWidth: string): string;\\n\\ndeclare function _createDefaultAnimation(animationName: string, delayLength?: string): IRawStyle;\\nexport { createFontStyles }\\nexport { createTheme }\\nexport { DefaultEffects }\\nexport { DefaultFontStyles }\\nexport { DefaultPalette }\\n\\nexport declare const EdgeChromiumHighContrastSelector = \\\"@media screen and (forced-colors: active)\\\";\\n\\n/**\\n * Generates style to clear browser specific focus styles.\\n */\\nexport declare function focusClear(): IRawStyle;\\n\\n/**\\n * {@docCategory FontClassNames}\\n */\\nexport declare const FontClassNames: {\\n    [key in keyof IFontStyles]?: string;\\n};\\nexport { fontFace }\\nexport { FontSizes }\\nexport { FontWeights }\\n\\n/**\\n * The style which turns off high contrast adjustment in (only) Edge Chromium browser.\\n * @deprecated Use `getHighContrastNoAdjustStyle`\\n */\\nexport declare function getEdgeChromiumNoHighContrastAdjustSelector(): {\\n    [EdgeChromiumHighContrastSelector]: IRawStyle;\\n};\\n\\n/**\\n * - Generates a style used to fade out an overflowing content by defining a style for an :after pseudo element.\\n * - Apply it to the :after selector for all combination of states the parent of content might have (normal, hover,\\n * selected, focus).\\n * - Requires the target to have position set to relative and overflow set to hidden.\\n *\\n * @example\\n * ```tsx\\n * // Assuming the following DOM structure and the different background colors coming from\\n * // the parent holding the content.\\n * <div className={classNames.parent}>\\n *   <span className={classNames.content}>Overflown Content</span>\\n * </div>\\n * ```\\n * ```ts\\n * // This is how the style set would look in Component.styles.ts\\n * const { bodyBackground } = theme.semanticColors;\\n * const { neutralLighter } = theme.palette;\\n *\\n * // The second argument of getFadedOverflowStyle function is a string representing a key of\\n * // ISemanticColors or IPalette.\\n *\\n * const styles = {\\n *   parent: [\\n *     backgroundColor: bodyBackground,\\n *     selectors: {\\n *       '&:hover: {\\n *         backgroundColor: neutralLighter\\n *       },\\n *       '$content:after': {\\n *         ...getFadedOverflowStyle(theme, 'bodyBackground')\\n *       },\\n *       '&:hover $content:after': {\\n *         ...getFadedOverflowStyle(theme, 'neutralLighter')\\n *       }\\n *     }\\n *   ],\\n *   content: [\\n *     width: '100%',\\n *     display: 'inline-block',\\n *     position: 'relative',\\n *     overflow: 'hidden'\\n *   ]\\n * }\\n * ```\\n * @param theme - The theme object to use.\\n * @param color - The background color to fade out to. Accepts only keys of ISemanticColors or IPalette.\\n * Defaults to 'bodyBackground'.\\n * @param direction - The direction of the overflow. Defaults to horizontal.\\n * @param width - The width of the fading overflow. Vertical direction defaults it to 100% vs 20px when horizontal.\\n * @param height - The Height of the fading overflow. Vertical direction defaults it to 50% vs 100% when horizontal.\\n * @returns The style object.\\n */\\nexport declare function getFadedOverflowStyle(theme: ITheme, color?: keyof ISemanticColors | keyof IPalette, direction?: 'horizontal' | 'vertical', width?: string | number, height?: string | number): IRawStyle;\\n\\n/**\\n * Generates a style which can be used to set a border on focus.\\n *\\n * @param theme - The theme object to use.\\n * @param inset - The number of pixels to inset the border (default 0)\\n * @param width - The border width in pixels (default 1)\\n * @param color - Color of the outline (default `theme.palette.neutralSecondary`)\\n * @returns The style object.\\n */\\nexport declare function getFocusOutlineStyle(theme: ITheme, inset?: number, width?: number, color?: string): IRawStyle;\\n\\n/**\\n * Generates a focus style which can be used to define an :after focus border.\\n *\\n * @param theme - The theme object to use.\\n * @param options - Options to customize the focus border.\\n * @returns The style object.\\n */\\nexport declare function getFocusStyle(theme: ITheme, options?: IGetFocusStylesOptions): IRawStyle;\\n\\n/**\\n * Generates a focus style which can be used to define an :after focus border.\\n *\\n * @param theme - The theme object to use.\\n * @param inset - The number of pixels to inset the border.\\n * @param position - The positioning applied to the container. Must\\n * be 'relative' or 'absolute' so that the focus border can live around it.\\n * @param highContrastStyle - Style for high contrast mode.\\n * @param borderColor - Color of the border.\\n * @param outlineColor - Color of the outline.\\n * @param isFocusedOnly - If the styles should apply on focus or not.\\n * @returns The style object.\\n * @deprecated Use the object parameter version instead.\\n */\\nexport declare function getFocusStyle(theme: ITheme, inset?: number, position?: 'relative' | 'absolute', highContrastStyle?: IRawStyle | undefined, borderColor?: string, outlineColor?: string, isFocusedOnly?: boolean): IRawStyle;\\n\\n/**\\n * Checks for the `disableGlobalClassNames` property on the `theme` to determine if it should return `classNames`\\n * Note that calls to this function are memoized.\\n *\\n * @param classNames - The collection of global class names that apply when the flag is false. Make sure to pass in\\n * the same instance on each call to benefit from memoization.\\n * @param theme - The theme to check the flag on\\n * @param disableGlobalClassNames - Optional. Explicitly opt in/out of disabling global classnames. Defaults to false.\\n */\\nexport declare function getGlobalClassNames<T>(classNames: GlobalClassNames<T>, theme: ITheme, disableGlobalClassNames?: boolean): GlobalClassNames<T>;\\n\\n/**\\n * The style which turns off high contrast adjustment in browsers.\\n */\\nexport declare function getHighContrastNoAdjustStyle(): IRawStyle;\\n\\n/**\\n * Gets an icon definition. If an icon is requested but the subset has yet to be registered,\\n * it will get registered immediately.\\n *\\n * @public\\n * @param name - Name of icon.\\n */\\nexport declare function getIcon(name?: string): IIconRecord | undefined;\\n\\n/**\\n * Gets an icon classname. You should be able to add this classname to an I tag with no\\n * additional classnames, and render the icon.\\n *\\n * @public\\n */\\nexport declare function getIconClassName(name: string): string;\\n\\n/**\\n * Generates text input border styles on focus.\\n *\\n * @param borderColor - Color of the border.\\n * @param borderRadius - Radius of the border.\\n * @param borderType - Type of the border.\\n * @param borderPosition - Position of the border relative to the input element (default to -1\\n * as it's the most common border width of the input element)\\n * @returns The style object.\\n */\\nexport declare const getInputFocusStyle: (borderColor: string, borderRadius: string | number, borderType?: \\\"border\\\" | \\\"borderBottom\\\", borderPosition?: number) => IRawStyle;\\n\\n/**\\n * Generates placeholder style for each of the browsers supported by office-ui-fabric-react.\\n * @param styles - The style to use.\\n * @returns The placeholder style object for each browser depending on the placeholder directive it uses.\\n */\\nexport declare function getPlaceholderStyles(styles: IStyle): IStyle;\\n\\nexport declare function getScreenSelector(min: number | undefined, max: number | undefined): string;\\n\\n/**\\n * Gets the theme object\\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\\n */\\nexport declare function getTheme(depComments?: boolean): ITheme;\\n\\n/**\\n * @internal\\n * This function is still in experimental phase in support of Foundation experimental development.\\n * Its API signature and existence are subject to change.\\n *\\n * Modify context to activate the specified scheme or theme. For schemes, look in context (if available) and fall back\\n * to global Customizations. If both scheme and theme are specified, scheme will be looked up in theme. In this case,\\n * scheme must be present in theme arg, otherwise new context will default to theme arg (there is no fallback to\\n * settings to look up scheme.)\\n *\\n * @param context - Context in which to get schemed customizations.\\n * @param scheme - Scheme to get customizations for from theme arg (if supplied) OR from context and global settings.\\n * @param theme - Theme to merge into context.\\n * @returns modified schemed context if scheme is valid and not already applied, unmodified context otherwise.\\n */\\nexport declare function getThemedContext(context: ICustomizerContext, scheme?: ISchemeNames, theme?: ITheme): ICustomizerContext;\\n\\nexport declare type GlobalClassNames<IStyles> = Record<keyof IStyles, string>;\\n\\nexport declare const hiddenContentStyle: IRawStyle;\\n\\nexport declare const HighContrastSelector = \\\"@media screen and (-ms-high-contrast: active), (forced-colors: active)\\\";\\n\\nexport declare const HighContrastSelectorBlack = \\\"@media screen and (-ms-high-contrast: white-on-black), (forced-colors: white-on-black)\\\";\\n\\nexport declare const HighContrastSelectorWhite = \\\"@media screen and (-ms-high-contrast: black-on-white), (forced-colors: black-on-white)\\\";\\nexport { IAnimationStyles }\\nexport { IAnimationVariables }\\n\\n/**\\n * {@docCategory IColorClassNames}\\n */\\ndeclare interface IColorClassNames {\\n    themeDarker: string;\\n    themeDarkerHover: string;\\n    themeDarkerBackground: string;\\n    themeDarkerBackgroundHover: string;\\n    themeDarkerBorder: string;\\n    themeDarkerBorderHover: string;\\n    themeDark: string;\\n    themeDarkHover: string;\\n    themeDarkBackground: string;\\n    themeDarkBackgroundHover: string;\\n    themeDarkBorder: string;\\n    themeDarkBorderHover: string;\\n    themeDarkAlt: string;\\n    themeDarkAltHover: string;\\n    themeDarkAltBackground: string;\\n    themeDarkAltBackgroundHover: string;\\n    themeDarkAltBorder: string;\\n    themeDarkAltBorderHover: string;\\n    themePrimary: string;\\n    themePrimaryHover: string;\\n    themePrimaryBackground: string;\\n    themePrimaryBackgroundHover: string;\\n    themePrimaryBorder: string;\\n    themePrimaryBorderHover: string;\\n    themeSecondary: string;\\n    themeSecondaryHover: string;\\n    themeSecondaryBackground: string;\\n    themeSecondaryBackgroundHover: string;\\n    themeSecondaryBorder: string;\\n    themeSecondaryBorderHover: string;\\n    themeTertiary: string;\\n    themeTertiaryHover: string;\\n    themeTertiaryBackground: string;\\n    themeTertiaryBackgroundHover: string;\\n    themeTertiaryBorder: string;\\n    themeTertiaryBorderHover: string;\\n    themeLight: string;\\n    themeLightHover: string;\\n    themeLightBackground: string;\\n    themeLightBackgroundHover: string;\\n    themeLightBorder: string;\\n    themeLightBorderHover: string;\\n    themeLighter: string;\\n    themeLighterHover: string;\\n    themeLighterBackground: string;\\n    themeLighterBackgroundHover: string;\\n    themeLighterBorder: string;\\n    themeLighterBorderHover: string;\\n    themeLighterAlt: string;\\n    themeLighterAltHover: string;\\n    themeLighterAltBackground: string;\\n    themeLighterAltBackgroundHover: string;\\n    themeLighterAltBorder: string;\\n    themeLighterAltBorderHover: string;\\n    black: string;\\n    blackHover: string;\\n    blackBackground: string;\\n    blackBackgroundHover: string;\\n    blackBorder: string;\\n    blackBorderHover: string;\\n    blackTranslucent40: string;\\n    blackTranslucent40Hover: string;\\n    blackTranslucent40Background: string;\\n    blackTranslucent40BackgroundHover: string;\\n    blackTranslucent40Border: string;\\n    blackTranslucent40BorderHover: string;\\n    neutralDark: string;\\n    neutralDarkHover: string;\\n    neutralDarkBackground: string;\\n    neutralDarkBackgroundHover: string;\\n    neutralDarkBorder: string;\\n    neutralDarkBorderHover: string;\\n    neutralPrimary: string;\\n    neutralPrimaryHover: string;\\n    neutralPrimaryBackground: string;\\n    neutralPrimaryBackgroundHover: string;\\n    neutralPrimaryBorder: string;\\n    neutralPrimaryBorderHover: string;\\n    neutralPrimaryAlt: string;\\n    neutralPrimaryAltHover: string;\\n    neutralPrimaryAltBackground: string;\\n    neutralPrimaryAltBackgroundHover: string;\\n    neutralPrimaryAltBorder: string;\\n    neutralPrimaryAltBorderHover: string;\\n    neutralSecondary: string;\\n    neutralSecondaryHover: string;\\n    neutralSecondaryBackground: string;\\n    neutralSecondaryBackgroundHover: string;\\n    neutralSecondaryBorder: string;\\n    neutralSecondaryBorderHover: string;\\n    neutralSecondaryAlt: string;\\n    neutralSecondaryAltHover: string;\\n    neutralSecondaryAltBackground: string;\\n    neutralSecondaryAltBackgroundHover: string;\\n    neutralSecondaryAltBorder: string;\\n    neutralSecondaryAltBorderHover: string;\\n    neutralTertiary: string;\\n    neutralTertiaryHover: string;\\n    neutralTertiaryBackground: string;\\n    neutralTertiaryBackgroundHover: string;\\n    neutralTertiaryBorder: string;\\n    neutralTertiaryBorderHover: string;\\n    neutralTertiaryAlt: string;\\n    neutralTertiaryAltHover: string;\\n    neutralTertiaryAltBackground: string;\\n    neutralTertiaryAltBackgroundHover: string;\\n    neutralTertiaryAltBorder: string;\\n    neutralTertiaryAltBorderHover: string;\\n    neutralQuaternary: string;\\n    neutralQuaternaryHover: string;\\n    neutralQuaternaryBackground: string;\\n    neutralQuaternaryBackgroundHover: string;\\n    neutralQuaternaryBorder: string;\\n    neutralQuaternaryBorderHover: string;\\n    neutralQuaternaryAlt: string;\\n    neutralQuaternaryAltHover: string;\\n    neutralQuaternaryAltBackground: string;\\n    neutralQuaternaryAltBackgroundHover: string;\\n    neutralQuaternaryAltBorder: string;\\n    neutralQuaternaryAltBorderHover: string;\\n    neutralLight: string;\\n    neutralLightHover: string;\\n    neutralLightBackground: string;\\n    neutralLightBackgroundHover: string;\\n    neutralLightBorder: string;\\n    neutralLightBorderHover: string;\\n    neutralLighter: string;\\n    neutralLighterHover: string;\\n    neutralLighterBackground: string;\\n    neutralLighterBackgroundHover: string;\\n    neutralLighterBorder: string;\\n    neutralLighterBorderHover: string;\\n    neutralLighterAlt: string;\\n    neutralLighterAltHover: string;\\n    neutralLighterAltBackground: string;\\n    neutralLighterAltBackgroundHover: string;\\n    neutralLighterAltBorder: string;\\n    neutralLighterAltBorderHover: string;\\n    white: string;\\n    whiteHover: string;\\n    whiteBackground: string;\\n    whiteBackgroundHover: string;\\n    whiteBorder: string;\\n    whiteBorderHover: string;\\n    whiteTranslucent40: string;\\n    whiteTranslucent40Hover: string;\\n    whiteTranslucent40Background: string;\\n    whiteTranslucent40BackgroundHover: string;\\n    whiteTranslucent40Border: string;\\n    whiteTranslucent40BorderHover: string;\\n    yellow: string;\\n    yellowHover: string;\\n    yellowBackground: string;\\n    yellowBackgroundHover: string;\\n    yellowBorder: string;\\n    yellowBorderHover: string;\\n    yellowLight: string;\\n    yellowLightHover: string;\\n    yellowLightBackground: string;\\n    yellowLightBackgroundHover: string;\\n    yellowLightBorder: string;\\n    yellowLightBorderHover: string;\\n    orange: string;\\n    orangeHover: string;\\n    orangeBackground: string;\\n    orangeBackgroundHover: string;\\n    orangeBorder: string;\\n    orangeBorderHover: string;\\n    orangeLight: string;\\n    orangeLightHover: string;\\n    orangeLightBackground: string;\\n    orangeLightBackgroundHover: string;\\n    orangeLightBorder: string;\\n    orangeLightBorderHover: string;\\n    orangeLighter: string;\\n    orangeLighterHover: string;\\n    orangeLighterBackground: string;\\n    orangeLighterBackgroundHover: string;\\n    orangeLighterBorder: string;\\n    orangeLighterBorderHover: string;\\n    redDark: string;\\n    redDarkHover: string;\\n    redDarkBackground: string;\\n    redDarkBackgroundHover: string;\\n    redDarkBorder: string;\\n    redDarkBorderHover: string;\\n    red: string;\\n    redHover: string;\\n    redBackground: string;\\n    redBackgroundHover: string;\\n    redBorder: string;\\n    redBorderHover: string;\\n    magentaDark: string;\\n    magentaDarkHover: string;\\n    magentaDarkBackground: string;\\n    magentaDarkBackgroundHover: string;\\n    magentaDarkBorder: string;\\n    magentaDarkBorderHover: string;\\n    magenta: string;\\n    magentaHover: string;\\n    magentaBackground: string;\\n    magentaBackgroundHover: string;\\n    magentaBorder: string;\\n    magentaBorderHover: string;\\n    magentaLight: string;\\n    magentaLightHover: string;\\n    magentaLightBackground: string;\\n    magentaLightBackgroundHover: string;\\n    magentaLightBorder: string;\\n    magentaLightBorderHover: string;\\n    purpleDark: string;\\n    purpleDarkHover: string;\\n    purpleDarkBackground: string;\\n    purpleDarkBackgroundHover: string;\\n    purpleDarkBorder: string;\\n    purpleDarkBorderHover: string;\\n    purple: string;\\n    purpleHover: string;\\n    purpleBackground: string;\\n    purpleBackgroundHover: string;\\n    purpleBorder: string;\\n    purpleBorderHover: string;\\n    purpleLight: string;\\n    purpleLightHover: string;\\n    purpleLightBackground: string;\\n    purpleLightBackgroundHover: string;\\n    purpleLightBorder: string;\\n    purpleLightBorderHover: string;\\n    blueDark: string;\\n    blueDarkHover: string;\\n    blueDarkBackground: string;\\n    blueDarkBackgroundHover: string;\\n    blueDarkBorder: string;\\n    blueDarkBorderHover: string;\\n    blueMid: string;\\n    blueMidHover: string;\\n    blueMidBackground: string;\\n    blueMidBackgroundHover: string;\\n    blueMidBorder: string;\\n    blueMidBorderHover: string;\\n    blue: string;\\n    blueHover: string;\\n    blueBackground: string;\\n    blueBackgroundHover: string;\\n    blueBorder: string;\\n    blueBorderHover: string;\\n    blueLight: string;\\n    blueLightHover: string;\\n    blueLightBackground: string;\\n    blueLightBackgroundHover: string;\\n    blueLightBorder: string;\\n    blueLightBorderHover: string;\\n    tealDark: string;\\n    tealDarkHover: string;\\n    tealDarkBackground: string;\\n    tealDarkBackgroundHover: string;\\n    tealDarkBorder: string;\\n    tealDarkBorderHover: string;\\n    teal: string;\\n    tealHover: string;\\n    tealBackground: string;\\n    tealBackgroundHover: string;\\n    tealBorder: string;\\n    tealBorderHover: string;\\n    tealLight: string;\\n    tealLightHover: string;\\n    tealLightBackground: string;\\n    tealLightBackgroundHover: string;\\n    tealLightBorder: string;\\n    tealLightBorderHover: string;\\n    greenDark: string;\\n    greenDarkHover: string;\\n    greenDarkBackground: string;\\n    greenDarkBackgroundHover: string;\\n    greenDarkBorder: string;\\n    greenDarkBorderHover: string;\\n    green: string;\\n    greenHover: string;\\n    greenBackground: string;\\n    greenBackgroundHover: string;\\n    greenBorder: string;\\n    greenBorderHover: string;\\n    greenLight: string;\\n    greenLightHover: string;\\n    greenLightBackground: string;\\n    greenLightBackgroundHover: string;\\n    greenLightBorder: string;\\n    greenLightBorderHover: string;\\n}\\nexport { IconFontSizes }\\nexport { ICSPSettings }\\nexport { IEffects }\\nexport { IFontFace }\\nexport { IFontStyles }\\nexport { IFontWeight }\\n\\nexport declare interface IGetFocusStylesOptions {\\n    /**\\n     * The number of pixels to inset the border.\\n     * @defaultvalue 0\\n     */\\n    inset?: number;\\n    /**\\n     * The width of the border in pixels.\\n     * @defaultvalue 1\\n     */\\n    width?: number;\\n    /**\\n     * The positioning applied to the container.\\n     * Must be 'relative' or 'absolute' so that the focus border can live around it.\\n     * @defaultvalue 'relative'\\n     */\\n    position?: 'relative' | 'absolute';\\n    /**\\n     * Style for high contrast mode.\\n     */\\n    highContrastStyle?: IRawStyle;\\n    /**\\n     * Color of the border.\\n     * @defaultvalue theme.palette.white\\n     */\\n    borderColor?: string;\\n    /**\\n     * Color of the outline.\\n     * @defaultvalue theme.palette.neutralSecondary\\n     */\\n    outlineColor?: string;\\n    /**\\n     * If the styles should apply on `:focus` pseudo element.\\n     * @defaultvalue true\\n     */\\n    isFocusedOnly?: boolean;\\n}\\n\\nexport declare interface IIconOptions {\\n    /**\\n     * By default, registering the same set of icons will generate a console warning per duplicate icon\\n     * registered, because this scenario can create unexpected consequences.\\n     *\\n     * Some scenarios include:\\n     *\\n     * Icon set was previously registered using a different base url.\\n     * Icon set was previously registered but a different version was provided.\\n     * Icons in a previous registered set overlap with a new set.\\n     *\\n     * To simply ignore previously registered icons, you can specify to disable warnings. This means\\n     * that if an icon which was previous registered is registered again, it will be silently ignored.\\n     * However, consider whether the problems listed above will cause issues.\\n     **/\\n    disableWarnings: boolean;\\n    /**\\n     * @deprecated\\n     * Use 'disableWarnings' instead.\\n     */\\n    warnOnMissingIcons?: boolean;\\n}\\n\\nexport declare interface IIconRecord {\\n    code: string | undefined;\\n    subset: IIconSubsetRecord;\\n}\\n\\nexport declare interface IIconSubset {\\n    fontFace?: IFontFace;\\n    icons: {\\n        [key: string]: string | JSX.Element;\\n    };\\n    style?: IRawStyle;\\n}\\n\\nexport declare interface IIconSubsetRecord extends IIconSubset {\\n    isRegistered?: boolean;\\n    className?: string;\\n}\\nexport { InjectionMode }\\nexport { IPalette }\\nexport { IPartialTheme }\\nexport { IProcessedStyleSet }\\nexport { IRawStyle }\\nexport { IScheme }\\nexport { ISchemeNames }\\nexport { ISemanticColors }\\nexport { ISemanticTextColors }\\nexport { ISpacing }\\nexport { IStyle }\\nexport { IStyleSet }\\nexport { IStyleSheetConfig }\\nexport { ITheme }\\nexport { keyframes }\\n\\n/**\\n * Applies the theme, while filling in missing slots.\\n * @param theme - Partial theme object.\\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\\n */\\nexport declare function loadTheme(theme: IPartialTheme, depComments?: boolean): ITheme;\\nexport { mergeStyles }\\nexport { mergeStyleSets }\\n\\nexport declare const normalize: IRawStyle;\\n\\nexport declare const noWrap: IRawStyle;\\n\\nexport declare const PulsingBeaconAnimationStyles: {\\n    continuousPulseAnimationDouble: typeof _continuousPulseAnimationDouble;\\n    continuousPulseAnimationSingle: typeof _continuousPulseAnimationSingle;\\n    createDefaultAnimation: typeof _createDefaultAnimation;\\n};\\nexport { registerDefaultFontFaces }\\n\\n/**\\n * Remaps one icon name to another.\\n */\\nexport declare function registerIconAlias(iconName: string, mappedToName: string): void;\\n\\n/**\\n * Registers a given subset of icons.\\n *\\n * @param iconSubset - the icon subset definition.\\n */\\nexport declare function registerIcons(iconSubset: IIconSubset, options?: Partial<IIconOptions>): void;\\n\\n/**\\n * Registers a callback that gets called whenever the theme changes.\\n * This should only be used when the component cannot automatically get theme changes through its state.\\n * This will not register duplicate callbacks.\\n */\\nexport declare function registerOnThemeChangeCallback(callback: (theme: ITheme) => void): void;\\n\\n/**\\n * See registerOnThemeChangeCallback().\\n * Removes previously registered callbacks.\\n */\\nexport declare function removeOnThemeChangeCallback(callback: (theme: ITheme) => void): void;\\n\\nexport declare const ScreenWidthMaxLarge: number;\\n\\nexport declare const ScreenWidthMaxMedium: number;\\n\\nexport declare const ScreenWidthMaxSmall: number;\\n\\nexport declare const ScreenWidthMaxXLarge: number;\\n\\nexport declare const ScreenWidthMaxXXLarge: number;\\n\\nexport declare const ScreenWidthMinLarge = 640;\\n\\nexport declare const ScreenWidthMinMedium = 480;\\n\\nexport declare const ScreenWidthMinSmall = 320;\\n\\nexport declare const ScreenWidthMinUhfMobile = 768;\\n\\nexport declare const ScreenWidthMinXLarge = 1024;\\n\\nexport declare const ScreenWidthMinXXLarge = 1366;\\n\\nexport declare const ScreenWidthMinXXXLarge = 1920;\\n\\n/**\\n * Sets the icon options.\\n *\\n * @public\\n */\\nexport declare function setIconOptions(options: Partial<IIconOptions>): void;\\nexport { Stylesheet }\\n\\nexport declare const ThemeSettingName = \\\"theme\\\";\\n\\n/**\\n * Unregisters icons by name.\\n *\\n * @param iconNames - List of icons to unregister.\\n */\\nexport declare function unregisterIcons(iconNames: string[]): void;\\n\\nexport declare namespace ZIndexes {\\n    const Nav: number;\\n    /**\\n     * @deprecated ScrollablePane\\n     */\\n    const ScrollablePane: number;\\n    const FocusStyle: number;\\n    const Coachmark: number;\\n    const Layer: number;\\n    const KeytipLayer: number;\\n}\\n\\nexport { }\\n\"\n\n//# sourceURL=webpack:///../tsx-editor/dist/types/styling.d.ts?/mnt/work/5/s/node_modules/raw-loader");

/***/ }),

/***/ "../../node_modules/raw-loader/index.js!../tsx-editor/dist/types/theme.d.ts":
/*!*********************************************************************************!*\
  !*** /mnt/work/5/s/node_modules/raw-loader!../tsx-editor/dist/types/theme.d.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"import { IFontWeight } from '@uifabric/merge-styles';\\nimport { IRawStyle } from '@uifabric/merge-styles';\\nimport { IStyleFunctionOrObject } from '@uifabric/utilities';\\n\\n/**\\n * All Fabric standard animations, exposed as json objects referencing predefined\\n * keyframes. These objects can be mixed in with other class definitions.\\n */\\nexport declare const AnimationStyles: IAnimationStyles;\\n\\n/**\\n * Exporting raw duraction values and easing functions to be used in custom animations\\n */\\nexport declare const AnimationVariables: IAnimationVariables;\\n\\n/**\\n * A set of states for each color plate to use.\\n *\\n * Note:\\n *\\n * State names here align to a consistent naming convention:\\n *\\n * The component is _____\\n *\\n * Bad: \\\"hover\\\", Good: \\\"hovered\\\"\\n *\\n * Additional considerations:\\n *\\n * The term \\\"active\\\" in css means that the keyboard or mouse button\\n * which activates the component is pressed down. It is however ambiguous\\n * with a focused state, as the HTML object model refers to the focused\\n * element as the \\\"activeElement\\\". To resolve ambiguity and to be more\\n * compatible with other platforms reusing token names, we have decided to snap\\n * to \\\"pressed\\\".\\n */\\nexport declare type ColorTokens = ColorTokenSet & {\\n    checked?: ColorTokens;\\n    checkedHovered?: ColorTokens;\\n    checkedPressed?: ColorTokens;\\n    disabled?: ColorTokenSet;\\n    expanded?: ColorTokenSet;\\n    focused?: ColorTokenSet;\\n    hovered?: ColorTokenSet;\\n    pressed?: ColorTokenSet;\\n};\\n\\n/**\\n * A baseline set of color plates.\\n */\\nexport declare type ColorTokenSet = {\\n    background?: string;\\n    contentColor?: string;\\n    secondaryContentColor?: string;\\n    linkColor?: string;\\n    iconColor?: string;\\n    menuIconColor?: string;\\n    borderColor?: string;\\n    dividerColor?: string;\\n    focusColor?: string;\\n    focusInnerColor?: string;\\n    opacity?: string;\\n    highContrast?: ColorTokens;\\n};\\n\\nexport declare namespace CommunicationColors {\\n    const shade30 = \\\"#004578\\\";\\n    const shade20 = \\\"#005a9e\\\";\\n    const shade10 = \\\"#106ebe\\\";\\n    const primary = \\\"#0078d4\\\";\\n    const tint10 = \\\"#2b88d8\\\";\\n    const tint20 = \\\"#c7e0f4\\\";\\n    const tint30 = \\\"#deecf9\\\";\\n    const tint40 = \\\"#eff6fc\\\";\\n}\\n\\n/**\\n * {@docCategory Theme}\\n * Component-level styles and token set.\\n */\\nexport declare type ComponentsStyles = {\\n    [componentName: string]: ComponentStyles;\\n};\\n\\n/**\\n * {@docCategory Theme}\\n * Component-level styles and variants.\\n */\\nexport declare interface ComponentStyles {\\n    /**\\n     * styles prop for a component.\\n     */\\n    styles?: IStyleFunctionOrObject<any, any>;\\n    /**\\n     * The variants property is still in an experimental phase. This is only applied by `ThemeProvider`.\\n     */\\n    variants?: Variants;\\n}\\n\\nexport declare function createFontStyles(localeCode: string | null): IFontStyles;\\n\\n/**\\n * Creates a custom theme definition.\\n * @param theme - Partial theme object.\\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\\n */\\nexport declare function createTheme(theme?: PartialTheme, depComments?: boolean): Theme;\\n\\nexport declare const DefaultEffects: IEffects;\\n\\nexport declare const DefaultFontStyles: IFontStyles;\\n\\nexport declare const DefaultPalette: IPalette;\\n\\nexport declare const DefaultSpacing: ISpacing;\\n\\nexport declare namespace Depths {\\n    const depth0 = \\\"0 0 0 0 transparent\\\";\\n    const depth4 = \\\"0 1.6px 3.6px 0 rgba(0, 0, 0, 0.132), 0 0.3px 0.9px 0 rgba(0, 0, 0, 0.108)\\\";\\n    const depth8 = \\\"0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132), 0 0.6px 1.8px 0 rgba(0, 0, 0, 0.108)\\\";\\n    const depth16 = \\\"0 6.4px 14.4px 0 rgba(0, 0, 0, 0.132), 0 1.2px 3.6px 0 rgba(0, 0, 0, 0.108)\\\";\\n    const depth64 = \\\"0 25.6px 57.6px 0 rgba(0, 0, 0, 0.22), 0 4.8px 14.4px 0 rgba(0, 0, 0, 0.18)\\\";\\n}\\n\\nexport declare const FluentTheme: ITheme;\\n\\nexport declare namespace FontSizes {\\n    const size10 = \\\"10px\\\";\\n    const size12 = \\\"12px\\\";\\n    const size14 = \\\"14px\\\";\\n    const size16 = \\\"16px\\\";\\n    const size18 = \\\"18px\\\";\\n    const size20 = \\\"20px\\\";\\n    const size24 = \\\"24px\\\";\\n    const size28 = \\\"28px\\\";\\n    const size32 = \\\"32px\\\";\\n    const size42 = \\\"42px\\\";\\n    const size68 = \\\"68px\\\";\\n    const mini: string;\\n    const xSmall: string;\\n    const small: string;\\n    const smallPlus: string;\\n    const medium: string;\\n    const mediumPlus: string;\\n    const icon: string;\\n    const large: string;\\n    const xLarge: string;\\n    const xLargePlus: string;\\n    const xxLarge: string;\\n    const xxLargePlus: string;\\n    const superLarge: string;\\n    const mega: string;\\n}\\n\\nexport declare type FontTokens = Partial<{\\n    fontFamily: string;\\n    fontSize: string;\\n    fontWeight: string;\\n}>;\\n\\nexport declare namespace FontWeights {\\n    const light: IFontWeight;\\n    const semilight: IFontWeight;\\n    const regular: IFontWeight;\\n    const semibold: IFontWeight;\\n    const bold: IFontWeight;\\n}\\n\\n/**\\n * All Fabric standard animations, exposed as json objects referencing predefined\\n * keyframes. These objects can be mixed in with other class definitions.\\n * {@docCategory IAnimationStyles}\\n */\\nexport declare interface IAnimationStyles {\\n    slideRightIn10: IRawStyle;\\n    slideRightIn20: IRawStyle;\\n    slideRightIn40: IRawStyle;\\n    slideRightIn400: IRawStyle;\\n    slideLeftIn10: IRawStyle;\\n    slideLeftIn20: IRawStyle;\\n    slideLeftIn40: IRawStyle;\\n    slideLeftIn400: IRawStyle;\\n    slideUpIn10: IRawStyle;\\n    slideUpIn20: IRawStyle;\\n    slideDownIn10: IRawStyle;\\n    slideDownIn20: IRawStyle;\\n    slideRightOut10: IRawStyle;\\n    slideRightOut20: IRawStyle;\\n    slideRightOut40: IRawStyle;\\n    slideRightOut400: IRawStyle;\\n    slideLeftOut10: IRawStyle;\\n    slideLeftOut20: IRawStyle;\\n    slideLeftOut40: IRawStyle;\\n    slideLeftOut400: IRawStyle;\\n    slideUpOut10: IRawStyle;\\n    slideUpOut20: IRawStyle;\\n    slideDownOut10: IRawStyle;\\n    slideDownOut20: IRawStyle;\\n    scaleUpIn100: IRawStyle;\\n    scaleDownIn100: IRawStyle;\\n    scaleUpOut103: IRawStyle;\\n    scaleDownOut98: IRawStyle;\\n    fadeIn100: IRawStyle;\\n    fadeIn200: IRawStyle;\\n    fadeIn400: IRawStyle;\\n    fadeIn500: IRawStyle;\\n    fadeOut100: IRawStyle;\\n    fadeOut200: IRawStyle;\\n    fadeOut400: IRawStyle;\\n    fadeOut500: IRawStyle;\\n    rotate90deg: IRawStyle;\\n    rotateN90deg: IRawStyle;\\n}\\n\\nexport declare interface IAnimationVariables {\\n    easeFunction1: string;\\n    easeFunction2: string;\\n    durationValue1: string;\\n    durationValue2: string;\\n    durationValue3: string;\\n    durationValue4: string;\\n}\\n\\nexport declare namespace IconFontSizes {\\n    const xSmall: string;\\n    const small: string;\\n    const medium: string;\\n    const large: string;\\n}\\n\\n/**\\n * Decorative styles in a theme\\n * {@docCategory IEffects}\\n */\\nexport declare interface IEffects {\\n    /**\\n     * Used to provide a visual affordance that this element is elevated above the surface it rests on.\\n     * This is lower than elevations with a higher value, and higher than elevations with a lower value.\\n     * The shadow's color should not change with the theme, because colored shadows look unnatural.\\n     * Used for: cards, grid items\\n     */\\n    elevation4: string;\\n    /**\\n     * Used to provide a visual affordance that this element is elevated above the surface it rests on.\\n     * This is lower than elevations with a higher value, and higher than elevations with a lower value.\\n     * The shadow's color should not change with the theme, because colored shadows look unnatural.\\n     * Used for: menus, command surfaces\\n     */\\n    elevation8: string;\\n    /**\\n     * Used to provide a visual affordance that this element is elevated above the surface it rests on.\\n     * This is lower than elevations with a higher value, and higher than elevations with a lower value.\\n     * The shadow's color should not change with the theme, because colored shadows look unnatural.\\n     * Used for: search result dropdowns, hover cards, tooltips, help bubbles\\n     */\\n    elevation16: string;\\n    /**\\n     * Used to provide a visual affordance that this element is elevated above the surface it rests on.\\n     * This is lower than elevations with a higher value, and higher than elevations with a lower value.\\n     * The shadow's color should not change with the theme, because colored shadows look unnatural.\\n     * Used for: Panels, Dialogs\\n     */\\n    elevation64: string;\\n    /**\\n     * Rounded corner value, for use with border-radius. Smaller values indicate less rounding.\\n     * Smaller elements should get less rounding than larger elements.\\n     * Used for: buttons\\n     */\\n    roundedCorner2: string;\\n    /**\\n     * Rounded corner value, for use with border-radius. Smaller values indicate less rounding.\\n     * Smaller elements should get less rounding than larger elements.\\n     * Used for: cards\\n     */\\n    roundedCorner4: string;\\n    /**\\n     * Rounded corner value, for use with border-radius. Smaller values indicate less rounding.\\n     * Smaller elements should get less rounding than larger elements.\\n     * Used for: surfaces\\n     */\\n    roundedCorner6: string;\\n}\\n\\n/**\\n * Fluent UI font set.\\n * {@docCategory IFontStyles}\\n */\\nexport declare interface IFontStyles {\\n    tiny: IRawStyle;\\n    xSmall: IRawStyle;\\n    small: IRawStyle;\\n    smallPlus: IRawStyle;\\n    medium: IRawStyle;\\n    mediumPlus: IRawStyle;\\n    large: IRawStyle;\\n    xLarge: IRawStyle;\\n    /**\\n     * @deprecated Exists for forward compatibility with Fabric 7's Fluent theme.\\n     * Not recommended for use with Fabric 6.\\n     */\\n    xLargePlus: IRawStyle;\\n    xxLarge: IRawStyle;\\n    /**\\n     * @deprecated Exists for forward compatibility with Fabric 7's Fluent theme\\n     * Not recommended for use with Fabric 6.\\n     */\\n    xxLargePlus: IRawStyle;\\n    superLarge: IRawStyle;\\n    mega: IRawStyle;\\n}\\n\\n/**\\n * Fluent UI color palette.\\n * {@docCategory IPalette}\\n */\\nexport declare interface IPalette {\\n    /**\\n     * Color code for themeDarker.\\n     */\\n    themeDarker: string;\\n    /**\\n     * Color code for themeDark.\\n     */\\n    themeDark: string;\\n    /**\\n     * Color code for themeDarkAlt.\\n     */\\n    themeDarkAlt: string;\\n    /**\\n     * Color code for themePrimary.\\n     */\\n    themePrimary: string;\\n    /**\\n     * Color code for themeSecondary.\\n     */\\n    themeSecondary: string;\\n    /**\\n     * Color code for themeTertiary.\\n     */\\n    themeTertiary: string;\\n    /**\\n     * Color code for themeLight.\\n     */\\n    themeLight: string;\\n    /**\\n     * Color code for themeLighter.\\n     */\\n    themeLighter: string;\\n    /**\\n     * Color code for themeLighterAlt.\\n     */\\n    themeLighterAlt: string;\\n    /**\\n     * Color code for the strongest color, which is black in the default theme.\\n     * This is a very light color in inverted themes.\\n     */\\n    black: string;\\n    /**\\n     * Color code for blackTranslucent40.\\n     */\\n    blackTranslucent40: string;\\n    /**\\n     * Color code for neutralDark.\\n     */\\n    neutralDark: string;\\n    /**\\n     * Color code for neutralPrimary.\\n     */\\n    neutralPrimary: string;\\n    /**\\n     * Color code for neutralPrimaryAlt.\\n     */\\n    neutralPrimaryAlt: string;\\n    /**\\n     * Color code for neutralSecondary.\\n     */\\n    neutralSecondary: string;\\n    /**\\n     * Color code for neutralSecondaryAlt.\\n     */\\n    neutralSecondaryAlt: string;\\n    /**\\n     * Color code for neutralTertiary.\\n     */\\n    neutralTertiary: string;\\n    /**\\n     * Color code for neutralTertiaryAlt.\\n     */\\n    neutralTertiaryAlt: string;\\n    /**\\n     * Color code for neutralQuaternary.\\n     */\\n    neutralQuaternary: string;\\n    /**\\n     * Color code for neutralQuaternaryAlt.\\n     */\\n    neutralQuaternaryAlt: string;\\n    /**\\n     * Color code for neutralLight.\\n     */\\n    neutralLight: string;\\n    /**\\n     * Color code for neutralLighter.\\n     */\\n    neutralLighter: string;\\n    /**\\n     * Color code for neutralLighterAlt.\\n     */\\n    neutralLighterAlt: string;\\n    /**\\n     * Color code for the accent.\\n     */\\n    accent: string;\\n    /**\\n     * Color code for the softest color, which is white in the default theme. This is a very dark color in dark themes.\\n     * This is the page background.\\n     */\\n    white: string;\\n    /**\\n     * Color code for whiteTranslucent40\\n     */\\n    whiteTranslucent40: string;\\n    /**\\n     * Color code for yellowDark.\\n     */\\n    yellowDark: string;\\n    /**\\n     * Color code for yellow.\\n     */\\n    yellow: string;\\n    /**\\n     * Color code for yellowLight.\\n     */\\n    yellowLight: string;\\n    /**\\n     * Color code for orange.\\n     */\\n    orange: string;\\n    /**\\n     * Color code for orangeLight.\\n     */\\n    orangeLight: string;\\n    /**\\n     * Color code for orangeLighter.\\n     */\\n    orangeLighter: string;\\n    /**\\n     * Color code for redDark.\\n     */\\n    redDark: string;\\n    /**\\n     * Color code for red.\\n     */\\n    red: string;\\n    /**\\n     * Color code for magentaDark.\\n     */\\n    magentaDark: string;\\n    /**\\n     * Color code for magenta.\\n     */\\n    magenta: string;\\n    /**\\n     * Color code for magentaLight.\\n     */\\n    magentaLight: string;\\n    /**\\n     * Color code for purpleDark.\\n     */\\n    purpleDark: string;\\n    /**\\n     * Color code for purple.\\n     */\\n    purple: string;\\n    /**\\n     * Color code for purpleLight.\\n     */\\n    purpleLight: string;\\n    /**\\n     * Color code for blueDark.\\n     */\\n    blueDark: string;\\n    /**\\n     * Color code for blueMid.\\n     */\\n    blueMid: string;\\n    /**\\n     * Color code for blue.\\n     */\\n    blue: string;\\n    /**\\n     * Color code for blueLight.\\n     */\\n    blueLight: string;\\n    /**\\n     * Color code for tealDark.\\n     */\\n    tealDark: string;\\n    /**\\n     * Color code for teal.\\n     */\\n    teal: string;\\n    /**\\n     * Color code for tealLight.\\n     */\\n    tealLight: string;\\n    /**\\n     * Color code for greenDark.\\n     */\\n    greenDark: string;\\n    /**\\n     * Color code for green.\\n     */\\n    green: string;\\n    /**\\n     * Color code for greenLight.\\n     */\\n    greenLight: string;\\n}\\n\\n/**\\n * {@docCategory ITheme}\\n */\\nexport declare interface IPartialTheme extends PartialTheme {\\n}\\n\\n/**\\n * {@docCategory IScheme}\\n */\\nexport declare interface IScheme {\\n    rtl?: boolean;\\n    palette: IPalette;\\n    fonts: IFontStyles;\\n    semanticColors: ISemanticColors;\\n    isInverted: boolean;\\n    /**\\n     * This setting is for a very narrow use case and you probably don't need to worry about,\\n     * unless you share a environment with others that also use fabric.\\n     * It is used for disabling global styles on fabric components. This will prevent global\\n     * overrides that might have been set by other fabric users from applying to your components.\\n     * When you set this setting to `true` on your theme the components in the subtree of your\\n     * Customizer will not get the global styles applied to them.\\n     */\\n    disableGlobalClassNames: boolean;\\n    /**\\n     * @internal\\n     * The spacing property is still in an experimental phase. The intent is to have it\\n     * be used for padding and margin sizes in a future release, but it is still undergoing review.\\n     * Avoid using it until it is finalized.\\n     */\\n    spacing: ISpacing;\\n    effects: IEffects;\\n}\\n\\n/**\\n * @internal\\n * Predefined scheme identifiers.\\n * Schemes are is still in an experimental phase.\\n * This interface's naming and values are not finalized and are subject to change.\\n * {@docCategory IScheme}\\n */\\nexport declare type ISchemeNames = 'default' | 'neutral' | 'soft' | 'strong';\\n\\n/**\\n * The collection of all semantic slots for colors used in themes.\\n *\\n * Note: text colors are defined in ISemanticTextColors.ts.\\n * We plan to move completely to semantic slots and replace all usage of Fabric palette slots.\\n * We've been actively making some of these changes but still have a ways to go. At present,\\n * we're only adding slots if absolutely necessary because we are trying to avoid bloating\\n * the already sizeable offering. We're also working on a better solution for design tokens\\n * overall in our next iteration. We'll provide an update on this site when that's ready.\\n * Thank you for your patience.\\n *\\n * #### Naming Convention\\n *\\n * The name of a semantic slot can quickly tell you how it’s meant to be used. It generally follows this format:\\n *\\n * `[category name][element name][Checked][Hovered/Pressed/Disabled state]`\\n *\\n * * `[category name]` – The “family” that this slot belongs to.\\n * * `[element name]` – The name of the thing being targeted, such as the background or border.\\n * * `[Checked]` – Whether the thing is checked. We assume things are unchecked by default, so no need to specify the\\n * unchecked state. (“Checked” refers to anything that is on, selected, toggled, highlighted, emphasized, etc.)\\n * * `[Hovered/Pressed/Disabled state]` – One of these states, if applicable. Each of these states are mutually\\n * exclusive. Pressed styles overwrite hovered styles, and disabled elements cannot be hovered or pressed.\\n *\\n * #### Base Slots\\n *\\n * A basic set of slots that provide many default body styles, such as text, subtext, disabled colors, and so on.\\n * If a category doesn't provide the slot you're looking for, use one from this category.\\n * For example, the placeholder text on a text input field has no corresponding slot in its category,\\n * so you'd use the bodySubtextColor from this category.\\n *\\n * #### Invariants\\n *\\n * When color has meaning, we do not want to change the color much theme to theme. For example, we\\n * will always want errors to be some shade of red, but we will need to tweak the exact shade so it's\\n * legible depending on whether it's an inverted theme or not.\\n * Invariant colors should almost never be changed by the theme, the defaults should suffice.\\n *\\n * #### Input Controls\\n *\\n * This category contains input components commonly used to denote state, including radio buttons,\\n * check boxes, toggle switches, sliders, progress bars, and more.\\n *\\n * #### Buttons\\n *\\n * Buttons! And all the flavors thereof.\\n *\\n * #### Menus\\n *\\n * Any kind of popup menus uses this category.\\n *\\n * #### Lists\\n *\\n * Lists differ from menus in that they are designed to show infinite amounts of items, often scroll,\\n * and have a large and complex interaction surface.\\n * This category covers all kinds of lists, whether they're typical one-item-per-row lists (like DetailsList)\\n * or ones with a tiled layout.\\n *\\n * {@docCategory ISemanticColors}\\n */\\nexport declare interface ISemanticColors extends ISemanticTextColors {\\n    /**\\n     * The default color for backgrounds.\\n     */\\n    bodyBackground: string;\\n    /**\\n     * The default hover color for the backgrounds of interactable elements that don't have their own backgrounds.\\n     * e.g. if links had hover backgrounds, they'd use this\\n     */\\n    bodyBackgroundHovered: string;\\n    /**\\n     * The default background color of selected interactable elements that don't have their own backgrounds.\\n     * e.g. indicates in the nav which page you're currently on\\n     */\\n    bodyBackgroundChecked: string;\\n    /**\\n     * The standout color for highlighted content backgrounds.\\n     * For highlighted content when there is no emphasis, use the neutral variant instead.\\n     * This should be a shade darker than bodyBackground in light themes, and a shade lighter in inverted themes.\\n     */\\n    bodyStandoutBackground: string;\\n    /**\\n     * The color for chrome adjacent to an area with bodyBackground.\\n     * This can be used to provide visual separation of zones when using stronger colors, when using a divider line\\n     * is not desired.\\n     * In most themes, this should match the color of bodyBackground.\\n     * See also: bodyFrameDivider\\n     */\\n    bodyFrameBackground: string;\\n    /**\\n     * Used as the border between a zone with bodyFrameBackground and a zone with bodyBackground.\\n     * If bodyBackground and bodyFrameBackground are different, this should be the same color as bodyFrameBackground\\n     * in order to visually disappear.\\n     * See also: bodyFrameBackground\\n     */\\n    bodyFrameDivider: string;\\n    /**\\n     * Divider lines; e.g. lines that separate sections in a menu, an <HR> element.\\n     */\\n    bodyDivider: string;\\n    /**\\n     * The default color for backgrounds of disabled controls; e.g. disabled text field.\\n     */\\n    disabledBackground: string;\\n    /**\\n     * The default color for border of disabled controls; e.g. disabled slider, disabled toggle border.\\n     */\\n    disabledBorder: string;\\n    /**\\n     * The color of the outline around focused controls that don't already have a border; e.g. menu items\\n     */\\n    focusBorder: string;\\n    /**\\n     * The background color of a card (or other surface) on a standout background.\\n     * Cards usually have shadows, but the variantBorder slots can be used for a solid border.\\n     * e.g. cards on a carousel of highlighted articles\\n     */\\n    cardStandoutBackground: string;\\n    /**\\n     * The default box-shadow for a card. In inverted themes, by default, this is set to `none` since shadows do not work\\n     * well on dark backgrounds. If the card could be the same color as the background, it is recommended that\\n     * `variantBorder` is used instead, so the card doesn't disappear in inverted themes.\\n     * For use with `box-shadow`.\\n     */\\n    cardShadow: string;\\n    /**\\n     * The default box-shadow when hovering on a card. Generally, this is a deeper shadow than `cardShadow`, to give\\n     * the effect that the card is lifting off the page.\\n     * In inverted themes, this should be set to a box-shadow that looks like a solid border, because shadows are not\\n     * visible on dark themes.\\n     * For use with `box-shadow`.\\n     */\\n    cardShadowHovered: string;\\n    /**\\n     * The color of the border that provides contrast between an element, such as a card, and a standout background.\\n     */\\n    variantBorder: string;\\n    /**\\n     * Hover color of border that provides contrast between an element, such as a card, and a standout background.\\n     */\\n    variantBorderHovered: string;\\n    /**\\n     * Background color for default/empty state graphical elements; eg default icons, empty section that\\n     * needs user to fill in content, placeholder graphics, empty seats, etc.\\n     */\\n    defaultStateBackground: string;\\n    /**\\n     * Background for informational messages.\\n     */\\n    infoBackground: string;\\n    /**\\n     * The background for errors, if necessary, or highlighting the section of the page where the error is present.\\n     */\\n    errorBackground: string;\\n    /**\\n     * Background for blocking issues, which is more severe than a warning, but not as bad as an error.\\n     */\\n    blockingBackground: string;\\n    /**\\n     * Background for warning messages.\\n     */\\n    warningBackground: string;\\n    /**\\n     * Background for severe warning messages.\\n     */\\n    severeWarningBackground: string;\\n    /**\\n     * Background for success\\n     */\\n    successBackground: string;\\n    /**\\n     * Color for icons on infoBackground.\\n     */\\n    infoIcon: string;\\n    /**\\n     * Color for icons on errorBackground.\\n     */\\n    errorIcon: string;\\n    /**\\n     * Color for icons on blockingBackground.\\n     */\\n    blockingIcon: string;\\n    /**\\n     * Color for icons on warningBackground.\\n     */\\n    warningIcon: string;\\n    /**\\n     * Color for icons on severeWarningBackground.\\n     */\\n    severeWarningIcon: string;\\n    /**\\n     * Color for icons on successBackground.\\n     */\\n    successIcon: string;\\n    /**\\n     * Color of links within a message.\\n     */\\n    messageLink: string;\\n    /**\\n     * Color of links within a message when hovered.\\n     */\\n    messageLinkHovered: string;\\n    /**\\n     * The border of a large input control in its resting, state; e.g. the box of dropdown.\\n     */\\n    inputBorder: string;\\n    /**\\n     * The border of a small input control in its resting unchecked state; e.g. the box of an unchecked checkbox.\\n     */\\n    smallInputBorder: string;\\n    /**\\n     * The border color of a large hovered input control, such as textbox.\\n     */\\n    inputBorderHovered: string;\\n    /**\\n     * The background color of an input, e.g. textbox background.\\n     */\\n    inputBackground: string;\\n    /**\\n     * The background of a checked control; e.g. checked radio button's dot, checked toggle's background.\\n     */\\n    inputBackgroundChecked: string;\\n    /**\\n     * The background of a checked and hovered control; e.g. checked checkbox's background color on hover.\\n     */\\n    inputBackgroundCheckedHovered: string;\\n    /**\\n     * The placeholder background color of a checked control, e.g. slider background, spinner background.\\n     */\\n    inputPlaceholderBackgroundChecked: string;\\n    /**\\n     * The foreground of a checked control; e.g. checked checkbox's checkmark color, checked toggle's thumb color,\\n     * radio button's background color around the dot.\\n     */\\n    inputForegroundChecked: string;\\n    /**\\n     * The alternate focus border color for elements that already have a border; e.g. text field borders on focus.\\n     */\\n    inputFocusBorderAlt: string;\\n    /**\\n     * The color for disabled icon ; e.g. SearchBox magnifying glass in disabled state.\\n     */\\n    inputIconDisabled: string;\\n    /**\\n     * The color for icon ; e.g. SearchBox magnifying glass in rest state.\\n     */\\n    inputIcon: string;\\n    /**\\n     * The color for hovered icon ; e.g. SearchBox magnifying glass in hovered state.\\n     */\\n    inputIconHovered: string;\\n    /**\\n     * Background of a standard button\\n     */\\n    buttonBackground: string;\\n    /**\\n     * Background of a checked standard button; e.g. bold/italicize/underline text button in toolbar\\n     */\\n    buttonBackgroundChecked: string;\\n    /**\\n     * Background of a hovered standard button\\n     */\\n    buttonBackgroundHovered: string;\\n    /**\\n     * Background of a checked and hovered standard button; e.g. bold/italicize/underline text button in toolbar\\n     */\\n    buttonBackgroundCheckedHovered: string;\\n    /**\\n     * Background of a disabled standard button\\n     */\\n    buttonBackgroundDisabled: string;\\n    /**\\n     * Background of a pressed standard button; i.e. currently being clicked by mouse\\n     */\\n    buttonBackgroundPressed: string;\\n    /**\\n     * Border of a standard button\\n     */\\n    buttonBorder: string;\\n    /**\\n     * Border of a disabled standard button\\n     */\\n    buttonBorderDisabled: string;\\n    /**\\n     * Background of a primary button\\n     */\\n    primaryButtonBackground: string;\\n    /**\\n     * Background of a hovered primary button\\n     */\\n    primaryButtonBackgroundHovered: string;\\n    /**\\n     * Background of a pressed primary button; i.e. currently being clicked by mouse\\n     */\\n    primaryButtonBackgroundPressed: string;\\n    /**\\n     * Background of a disabled primary button\\n     */\\n    primaryButtonBackgroundDisabled: string;\\n    /**\\n     * Border of a primary button\\n     */\\n    primaryButtonBorder: string;\\n    /**\\n     * Background of an accent button (kicker)\\n     */\\n    accentButtonBackground: string;\\n    /**\\n     * The background of a menu.\\n     */\\n    menuBackground: string;\\n    /**\\n     * The divider between menu items.\\n     */\\n    menuDivider: string;\\n    /**\\n     * The default colors of icons in menus.\\n     */\\n    menuIcon: string;\\n    /**\\n     * The headers in menus that denote title of a section.\\n     */\\n    menuHeader: string;\\n    /**\\n     * The background of a hovered menu item.\\n     */\\n    menuItemBackgroundHovered: string;\\n    /**\\n     * The background of a pressed menu item.\\n     */\\n    menuItemBackgroundPressed: string;\\n    /**\\n     * The text color of a menu item.\\n     */\\n    menuItemText: string;\\n    /**\\n     * The text color of a hovered menu item.\\n     */\\n    menuItemTextHovered: string;\\n    /**\\n     * The background color for the entire list.\\n     */\\n    listBackground: string;\\n    /**\\n     * The default text color for list item titles and text in column fields.\\n     */\\n    listText: string;\\n    /**\\n     * The background color of a hovered list item.\\n     */\\n    listItemBackgroundHovered: string;\\n    /**\\n     * The background color of a checked list item.\\n     */\\n    listItemBackgroundChecked: string;\\n    /**\\n     * The background color of a checked and hovered list item.\\n     */\\n    listItemBackgroundCheckedHovered: string;\\n    /**\\n     * The background color for a hovered list header.\\n     */\\n    listHeaderBackgroundHovered: string;\\n    /**\\n     * The background color for a pressed list header.\\n     */\\n    listHeaderBackgroundPressed: string;\\n    /**\\n     * @deprecated\\n     * (Checked menu items no longer get a background color.)\\n     * The background of checked menu item; e.g. a menu item whose submenu is open, a selected dropdown item.\\n     */\\n    menuItemBackgroundChecked: string;\\n    /**\\n     * @deprecated\\n     * (no longer used)\\n     * Foreground color for warning highlights\\n     */\\n    warningHighlight: string;\\n}\\n\\n/**\\n * {@docCategory ISemanticTextColors}\\n */\\nexport declare interface ISemanticTextColors {\\n    /**\\n     * The default color for text.\\n     */\\n    bodyText: string;\\n    /**\\n     * Checked text color, e.g. selected menu item text.\\n     */\\n    bodyTextChecked: string;\\n    /**\\n     * De-emphasized text; e.g. metadata, captions, placeholder text.\\n     */\\n    bodySubtext: string;\\n    /**\\n     * Neutral colored links and links for action buttons.\\n     */\\n    actionLink: string;\\n    /**\\n     * Hover state for neutral colored links and links for action buttons.\\n     */\\n    actionLinkHovered: string;\\n    /**\\n     * The color of a link.\\n     */\\n    link: string;\\n    /**\\n     * The color of a hovered link. Also used when the link is active.\\n     */\\n    linkHovered: string;\\n    /**\\n     * The default color for disabled text on top of disabledBackground; e.g. text in a disabled text field or\\n     * disabled button text.\\n     */\\n    disabledText: string;\\n    /**\\n     * The default color for disabled text on the default background (bodyBackground).\\n     */\\n    disabledBodyText: string;\\n    /**\\n     * Disabled de-emphasized text, for use on disabledBackground.\\n     */\\n    disabledSubtext: string;\\n    /**\\n     * Disabled de-emphasized text, for use on the default background (bodyBackground).\\n     */\\n    disabledBodySubtext: string;\\n    /**\\n     * The default color of error text on bodyBackground.\\n     */\\n    errorText: string;\\n    /**\\n     * The default color of text in a message bar.\\n     */\\n    messageText: string;\\n    /**\\n     * The color of input text.\\n     */\\n    inputText: string;\\n    /**\\n     * The color of input text on hover.\\n     */\\n    inputTextHovered: string;\\n    /**\\n     * The color of placeholder text.\\n     */\\n    inputPlaceholderText: string;\\n    /**\\n     * Color of text in a standard button\\n     */\\n    buttonText: string;\\n    /**\\n     * Color of text in a hovered standard button\\n     */\\n    buttonTextHovered: string;\\n    /**\\n     * Color of text in a checked standard button\\n     */\\n    buttonTextChecked: string;\\n    /**\\n     * Color of text in a checked and hovered standard button\\n     */\\n    buttonTextCheckedHovered: string;\\n    /**\\n     * Color of text in a pressed standard button; i.e. currently being clicked by mouse\\n     */\\n    buttonTextPressed: string;\\n    /**\\n     * Color of text in a disabled standard button\\n     */\\n    buttonTextDisabled: string;\\n    /**\\n     * Color of text in a primary button\\n     */\\n    primaryButtonText: string;\\n    /**\\n     * Color of text in a hovered primary button\\n     */\\n    primaryButtonTextHovered: string;\\n    /**\\n     * Color of text in a pressed primary button; i.e. currently being clicked by mouse\\n     */\\n    primaryButtonTextPressed: string;\\n    /**\\n     * Color of text in a disabled primary button\\n     */\\n    primaryButtonTextDisabled: string;\\n    /**\\n     * Color of text for accent button (kicker)\\n     */\\n    accentButtonText: string;\\n    /**\\n     * The default text color for list item titles and text in column fields.\\n     */\\n    listText: string;\\n    /** @deprecated\\n     * This slot was incorrectly named. Use listText instead. */\\n    listTextColor: string;\\n    /** @deprecated\\n     * No longer used. Consider using messageText and/or warningIcon instead.\\n     */\\n    warningText: string;\\n    /** @deprecated\\n     * No longer used. Consider using messageText and/or successIcon instead.\\n     */\\n    successText: string;\\n}\\n\\n/**\\n * @internal This is an experimental interface and will be changed post design review.\\n * {@docCategory ISpacing}\\n */\\nexport declare interface ISpacing {\\n    s2: string;\\n    s1: string;\\n    m: string;\\n    l1: string;\\n    l2: string;\\n}\\n\\n/**\\n * {@docCategory ITheme}\\n */\\nexport declare interface ITheme extends Theme {\\n}\\n\\nexport declare namespace LocalizedFontFamilies {\\n    const Arabic: string;\\n    const ChineseSimplified = \\\"'Microsoft Yahei UI', Verdana, Simsun\\\";\\n    const ChineseTraditional = \\\"'Microsoft Jhenghei UI', Pmingliu\\\";\\n    const Cyrillic: string;\\n    const EastEuropean: string;\\n    const Greek: string;\\n    const Hebrew: string;\\n    const Hindi = \\\"'Nirmala UI'\\\";\\n    const Japanese = \\\"'Yu Gothic UI', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka\\\";\\n    const Korean = \\\"'Malgun Gothic', Gulim\\\";\\n    const Selawik: string;\\n    const Thai = \\\"'Leelawadee UI Web', 'Kmer UI'\\\";\\n    const Vietnamese: string;\\n    const WestEuropean: string;\\n    const Armenian: string;\\n    const Georgian: string;\\n}\\n\\nexport declare namespace LocalizedFontNames {\\n    const Arabic = \\\"Segoe UI Web (Arabic)\\\";\\n    const Cyrillic = \\\"Segoe UI Web (Cyrillic)\\\";\\n    const EastEuropean = \\\"Segoe UI Web (East European)\\\";\\n    const Greek = \\\"Segoe UI Web (Greek)\\\";\\n    const Hebrew = \\\"Segoe UI Web (Hebrew)\\\";\\n    const Thai = \\\"Leelawadee UI Web\\\";\\n    const Vietnamese = \\\"Segoe UI Web (Vietnamese)\\\";\\n    const WestEuropean = \\\"Segoe UI Web (West European)\\\";\\n    const Selawik = \\\"Selawik Web\\\";\\n    const Armenian = \\\"Segoe UI Web (Armenian)\\\";\\n    const Georgian = \\\"Segoe UI Web (Georgian)\\\";\\n}\\n\\n/**\\n * Merge a partial/full theme into a full theme and returns a merged full theme.\\n */\\nexport declare function mergeThemes(theme: Theme, partialTheme?: PartialTheme): Theme;\\n\\nexport declare namespace MotionAnimations {\\n    const fadeIn: string;\\n    const fadeOut: string;\\n    const scaleDownIn: string;\\n    const scaleDownOut: string;\\n    const slideLeftOut: string;\\n    const slideRightOut: string;\\n    const slideLeftIn: string;\\n    const slideRightIn: string;\\n    const slideUpOut: string;\\n    const slideDownOut: string;\\n    const slideUpIn: string;\\n    const slideDownIn: string;\\n}\\n\\nexport declare namespace MotionDurations {\\n    const duration1 = \\\"100ms\\\";\\n    const duration2 = \\\"200ms\\\";\\n    const duration3 = \\\"300ms\\\";\\n    const duration4 = \\\"400ms\\\";\\n}\\n\\nexport declare namespace MotionTimings {\\n    const accelerate = \\\"cubic-bezier(0.9, 0.1, 1, 0.2)\\\";\\n    const decelerate = \\\"cubic-bezier(0.1, 0.9, 0.2, 1)\\\";\\n    const linear = \\\"cubic-bezier(0, 0, 1, 1)\\\";\\n    const standard = \\\"cubic-bezier(0.8, 0, 0.2, 1)\\\";\\n}\\n\\nexport declare namespace NeutralColors {\\n    const black = \\\"#000000\\\";\\n    const gray220 = \\\"#11100f\\\";\\n    const gray210 = \\\"#161514\\\";\\n    const gray200 = \\\"#1b1a19\\\";\\n    const gray190 = \\\"#201f1e\\\";\\n    const gray180 = \\\"#252423\\\";\\n    const gray170 = \\\"#292827\\\";\\n    const gray160 = \\\"#323130\\\";\\n    const gray150 = \\\"#3b3a39\\\";\\n    const gray140 = \\\"#484644\\\";\\n    const gray130 = \\\"#605e5c\\\";\\n    const gray120 = \\\"#797775\\\";\\n    const gray110 = \\\"#8a8886\\\";\\n    const gray100 = \\\"#979593\\\";\\n    const gray90 = \\\"#a19f9d\\\";\\n    const gray80 = \\\"#b3b0ad\\\";\\n    const gray70 = \\\"#bebbb8\\\";\\n    const gray60 = \\\"#c8c6c4\\\";\\n    const gray50 = \\\"#d2d0ce\\\";\\n    const gray40 = \\\"#e1dfdd\\\";\\n    const gray30 = \\\"#edebe9\\\";\\n    const gray20 = \\\"#f3f2f1\\\";\\n    const gray10 = \\\"#faf9f8\\\";\\n    const white = \\\"#ffffff\\\";\\n}\\n\\n/**\\n * {@docCategory Theme}\\n * A partial theme.\\n */\\nexport declare interface PartialTheme {\\n    components?: ComponentsStyles;\\n    palette?: Partial<IPalette>;\\n    fonts?: Partial<IFontStyles>;\\n    semanticColors?: Partial<ISemanticColors>;\\n    isInverted?: boolean;\\n    disableGlobalClassNames?: boolean;\\n    rtl?: boolean;\\n    spacing?: Partial<ISpacing>;\\n    effects?: Partial<IEffects>;\\n    /**\\n     * Use this property to specify font property defaults.\\n     */\\n    defaultFontStyle?: IRawStyle;\\n    /**\\n     * @internal\\n     * CSS stylesheets to be registered.\\n     * This is still in an experimental phase and is only applied by `ThemeProvider`.\\n     */\\n    stylesheets?: string[];\\n    /**\\n     * @internal\\n     * Global tokens. This is experimental and not production-ready.\\n     * */\\n    tokens?: RecursivePartial<Tokens>;\\n    /**\\n     * @internal\\n     * The schemes property is still in an experimental phase. The intent is to have it work\\n     * in conjunction with new 'schemes' prop that any component making use of Foundation can use.\\n     * Alternative themes that can be referred to by name.\\n     */\\n    schemes?: {\\n        [P in ISchemeNames]?: IScheme;\\n    };\\n}\\n\\n/**\\n * Recursive partial type.\\n */\\nexport declare type RecursivePartial<T> = {\\n    [P in keyof T]?: T[P] extends Array<infer I> ? Array<RecursivePartial<I>> : RecursivePartial<T[P]>;\\n};\\n\\nexport declare function registerDefaultFontFaces(baseUrl: string): void;\\n\\nexport declare namespace SharedColors {\\n    const pinkRed10 = \\\"#750b1c\\\";\\n    const red20 = \\\"#a4262c\\\";\\n    const red10 = \\\"#d13438\\\";\\n    const redOrange20 = \\\"#603d30\\\";\\n    const redOrange10 = \\\"#da3b01\\\";\\n    const orange30 = \\\"#8e562e\\\";\\n    const orange20 = \\\"#ca5010\\\";\\n    const orange10 = \\\"#ffaa44\\\";\\n    const yellow10 = \\\"#fce100\\\";\\n    const orangeYellow20 = \\\"#986f0b\\\";\\n    const orangeYellow10 = \\\"#c19c00\\\";\\n    const yellowGreen10 = \\\"#8cbd18\\\";\\n    const green20 = \\\"#0b6a0b\\\";\\n    const green10 = \\\"#498205\\\";\\n    const greenCyan10 = \\\"#00ad56\\\";\\n    const cyan40 = \\\"#005e50\\\";\\n    const cyan30 = \\\"#005b70\\\";\\n    const cyan20 = \\\"#038387\\\";\\n    const cyan10 = \\\"#00b7c3\\\";\\n    const cyanBlue20 = \\\"#004e8c\\\";\\n    const cyanBlue10 = \\\"#0078d4\\\";\\n    const blue10 = \\\"#4f6bed\\\";\\n    const blueMagenta40 = \\\"#373277\\\";\\n    const blueMagenta30 = \\\"#5c2e91\\\";\\n    const blueMagenta20 = \\\"#8764b8\\\";\\n    const blueMagenta10 = \\\"#8378de\\\";\\n    const magenta20 = \\\"#881798\\\";\\n    const magenta10 = \\\"#c239b3\\\";\\n    const magentaPink20 = \\\"#9b0062\\\";\\n    const magentaPink10 = \\\"#e3008c\\\";\\n    const gray40 = \\\"#393939\\\";\\n    const gray30 = \\\"#7a7574\\\";\\n    const gray20 = \\\"#69797e\\\";\\n    const gray10 = \\\"#a0aeb2\\\";\\n}\\n\\n/**\\n * A ramp of size values.\\n */\\nexport declare type SizeValue = 'smallest' | 'smaller' | 'small' | 'medium' | 'large' | 'larger' | 'largest';\\n\\n/**\\n * {@docCategory Theme}\\n * A prepared (fully expanded) theme object.\\n */\\nexport declare interface Theme extends IScheme {\\n    /**\\n     * Component-level styles and token set.\\n     * This is still in an experimental phase and is only applied by `ThemeProvider`.\\n     */\\n    components?: ComponentsStyles;\\n    /**\\n     * @internal\\n     * CSS stylesheets to be registered.\\n     * This is still in an experimental phase and is only applied by `ThemeProvider`.\\n     */\\n    stylesheets?: string[];\\n    /**\\n     * @internal\\n     * Id of the theme. This is for internal use only.\\n     */\\n    id?: string;\\n    /**\\n     * @internal\\n     * Global tokens. This is for internal use only and is not production-ready.\\n     * */\\n    tokens?: RecursivePartial<Tokens>;\\n    /**\\n     * @internal\\n     * The schemes property is still in an experimental phase. The intent is to have it work\\n     * in conjunction with new 'schemes' prop that any component making use of Foundation can use.\\n     * Alternative themes that can be referred to by name.\\n     */\\n    schemes?: {\\n        [P in ISchemeNames]?: IScheme;\\n    };\\n}\\n\\nexport declare interface Tokens {\\n    color: {\\n        body: ColorTokenSet & TokenSetType;\\n        brand: ColorTokenSet & TokenSetType;\\n        [key: string]: TokenSetType;\\n    };\\n    [key: string]: TokenSetType;\\n}\\n\\n/**\\n * A token set can provide a single string or object, mapping additional sub-parts of a token set.\\n */\\nexport declare type TokenSetType = {\\n    [key: string]: TokenSetType | string | number | undefined;\\n};\\n\\n/**\\n * A set of style configurations for variants of a component (e.g. primary is a variant for the Button component).\\n */\\nexport declare type Variants = Record<string, any>;\\n\\nexport { }\\n\"\n\n//# sourceURL=webpack:///../tsx-editor/dist/types/theme.d.ts?/mnt/work/5/s/node_modules/raw-loader");

/***/ }),

/***/ "../../node_modules/raw-loader/index.js!../tsx-editor/dist/types/utilities.d.ts":
/*!*************************************************************************************!*\
  !*** /mnt/work/5/s/node_modules/raw-loader!../tsx-editor/dist/types/utilities.d.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"import { DATA_PORTAL_ATTRIBUTE } from '@fluentui/dom-utilities';\\nimport { elementContains } from '@fluentui/dom-utilities';\\nimport { elementContainsAttribute } from '@fluentui/dom-utilities';\\nimport { findElementRecursive } from '@fluentui/dom-utilities';\\nimport { getChildren } from '@fluentui/dom-utilities';\\nimport { getParent } from '@fluentui/dom-utilities';\\nimport { getVirtualParent } from '@fluentui/dom-utilities';\\nimport { IProcessedStyleSet } from '@uifabric/merge-styles';\\nimport { IStyleFunction } from '@uifabric/merge-styles';\\nimport { IStyleFunctionOrObject } from '@uifabric/merge-styles';\\nimport { IStyleSet } from '@uifabric/merge-styles';\\nimport { isVirtualElement } from '@fluentui/dom-utilities';\\nimport { IVirtualElement } from '@fluentui/dom-utilities';\\nimport { Omit } from '@uifabric/merge-styles';\\nimport { portalContainsElement } from '@fluentui/dom-utilities';\\nimport * as React from 'react';\\nimport { setPortalAttribute } from '@fluentui/dom-utilities';\\nimport { setVirtualParent } from '@fluentui/dom-utilities';\\n\\n/**\\n * Adds a keycode to the list of keys that, when pressed, should cause the focus outlines to be visible.\\n * This can be used to add global shortcut keys that directionally move from section to section within\\n * an app or between focus trap zones.\\n */\\nexport declare function addDirectionalKeyCode(which: number): void;\\n\\n/**\\n * Given an array, this function returns a new array where an element has been inserted at the given index.\\n * @param array - The array to operate on\\n * @param index - The index where an element should be inserted\\n * @param itemToAdd - The element to insert\\n */\\nexport declare function addElementAtIndex<T>(array: T[], index: number, itemToAdd: T): T[];\\n\\n/**\\n * Same as allowScrollOnElement but does not prevent overscrolling.\\n */\\nexport declare const allowOverscrollOnElement: (element: HTMLElement | null, events: EventGroup) => void;\\n\\n/**\\n * Allows the user to scroll within a element,\\n * while preventing the user from scrolling the body\\n */\\nexport declare const allowScrollOnElement: (element: HTMLElement | null, events: EventGroup) => void;\\n\\n/**\\n * An array of A tag properties and events.\\n *\\n * @public\\n */\\nexport declare const anchorProperties: Record<string, number>;\\n\\n/**\\n * Returns a single function which will call each of the given functions in the context of the\\n * parent.\\n */\\nexport declare function appendFunction(parent: any, ...functions: any[]): () => void;\\n\\n/**\\n * Returns a boolean indicating if the two given arrays are equal in length and values.\\n *\\n * @param array1 - First array to compare\\n * @param array2 - Second array to compare\\n * @returns True if the arrays are the same length and have the same values in the same positions, false otherwise.\\n */\\nexport declare function arraysEqual<T>(array1: T[], array2: T[]): boolean;\\n\\n/**\\n * Produces a component which internally loads the target component before first mount.\\n * The component passes all props through to the loaded component.\\n *\\n * This overload accepts a module with a default export for the component.\\n */\\nexport declare function asAsync<TProps>(options: IAsAsyncOptions<TProps>): React.ForwardRefExoticComponent<React.PropsWithoutRef<TProps & {\\n    asyncPlaceholder?: \\\"symbol\\\" | \\\"object\\\" | \\\"text\\\" | \\\"table\\\" | \\\"ruby\\\" | \\\"small\\\" | \\\"input\\\" | \\\"progress\\\" | \\\"select\\\" | \\\"a\\\" | \\\"abbr\\\" | \\\"address\\\" | \\\"area\\\" | \\\"article\\\" | \\\"aside\\\" | \\\"audio\\\" | \\\"b\\\" | \\\"base\\\" | \\\"bdi\\\" | \\\"bdo\\\" | \\\"blockquote\\\" | \\\"body\\\" | \\\"br\\\" | \\\"button\\\" | \\\"canvas\\\" | \\\"caption\\\" | \\\"cite\\\" | \\\"code\\\" | \\\"col\\\" | \\\"colgroup\\\" | \\\"data\\\" | \\\"datalist\\\" | \\\"dd\\\" | \\\"del\\\" | \\\"details\\\" | \\\"dfn\\\" | \\\"dialog\\\" | \\\"div\\\" | \\\"dl\\\" | \\\"dt\\\" | \\\"em\\\" | \\\"embed\\\" | \\\"fieldset\\\" | \\\"figcaption\\\" | \\\"figure\\\" | \\\"footer\\\" | \\\"form\\\" | \\\"h1\\\" | \\\"h2\\\" | \\\"h3\\\" | \\\"h4\\\" | \\\"h5\\\" | \\\"h6\\\" | \\\"head\\\" | \\\"header\\\" | \\\"hgroup\\\" | \\\"hr\\\" | \\\"html\\\" | \\\"i\\\" | \\\"iframe\\\" | \\\"img\\\" | \\\"ins\\\" | \\\"kbd\\\" | \\\"label\\\" | \\\"legend\\\" | \\\"li\\\" | \\\"link\\\" | \\\"main\\\" | \\\"map\\\" | \\\"mark\\\" | \\\"menu\\\" | \\\"meta\\\" | \\\"meter\\\" | \\\"nav\\\" | \\\"noscript\\\" | \\\"ol\\\" | \\\"optgroup\\\" | \\\"option\\\" | \\\"output\\\" | \\\"p\\\" | \\\"param\\\" | \\\"picture\\\" | \\\"pre\\\" | \\\"q\\\" | \\\"rp\\\" | \\\"rt\\\" | \\\"s\\\" | \\\"samp\\\" | \\\"script\\\" | \\\"section\\\" | \\\"source\\\" | \\\"span\\\" | \\\"strong\\\" | \\\"style\\\" | \\\"sub\\\" | \\\"summary\\\" | \\\"sup\\\" | \\\"tbody\\\" | \\\"td\\\" | \\\"template\\\" | \\\"textarea\\\" | \\\"tfoot\\\" | \\\"th\\\" | \\\"thead\\\" | \\\"time\\\" | \\\"title\\\" | \\\"tr\\\" | \\\"track\\\" | \\\"u\\\" | \\\"ul\\\" | \\\"var\\\" | \\\"video\\\" | \\\"wbr\\\" | \\\"big\\\" | React.ComponentClass<any, any> | React.FunctionComponent<any> | \\\"keygen\\\" | \\\"menuitem\\\" | \\\"noindex\\\" | \\\"webview\\\" | \\\"svg\\\" | \\\"animate\\\" | \\\"animateMotion\\\" | \\\"animateTransform\\\" | \\\"circle\\\" | \\\"clipPath\\\" | \\\"defs\\\" | \\\"desc\\\" | \\\"ellipse\\\" | \\\"feBlend\\\" | \\\"feColorMatrix\\\" | \\\"feComponentTransfer\\\" | \\\"feComposite\\\" | \\\"feConvolveMatrix\\\" | \\\"feDiffuseLighting\\\" | \\\"feDisplacementMap\\\" | \\\"feDistantLight\\\" | \\\"feDropShadow\\\" | \\\"feFlood\\\" | \\\"feFuncA\\\" | \\\"feFuncB\\\" | \\\"feFuncG\\\" | \\\"feFuncR\\\" | \\\"feGaussianBlur\\\" | \\\"feImage\\\" | \\\"feMerge\\\" | \\\"feMergeNode\\\" | \\\"feMorphology\\\" | \\\"feOffset\\\" | \\\"fePointLight\\\" | \\\"feSpecularLighting\\\" | \\\"feSpotLight\\\" | \\\"feTile\\\" | \\\"feTurbulence\\\" | \\\"filter\\\" | \\\"foreignObject\\\" | \\\"g\\\" | \\\"image\\\" | \\\"line\\\" | \\\"linearGradient\\\" | \\\"marker\\\" | \\\"mask\\\" | \\\"metadata\\\" | \\\"mpath\\\" | \\\"path\\\" | \\\"pattern\\\" | \\\"polygon\\\" | \\\"polyline\\\" | \\\"radialGradient\\\" | \\\"rect\\\" | \\\"stop\\\" | \\\"switch\\\" | \\\"textPath\\\" | \\\"tspan\\\" | \\\"use\\\" | \\\"view\\\" | undefined;\\n}> & React.RefAttributes<React.ElementType<TProps>>>;\\n\\n/**\\n * AssertNever is a utility function that can be used for exhaustiveness checks in switch statements.\\n *\\n * @public\\n */\\nexport declare function assertNever(x: never): never;\\n\\n/**\\n * Makes a resulting merge of a bunch of objects. Pass in the target object followed by 1 or more\\n * objects as arguments and they will be merged sequentially into the target. Note that this will\\n * shallow merge; it will not create new cloned values for target members.\\n *\\n * @public\\n * @param target - Target object to merge following object arguments into.\\n * @param args - One or more objects that will be mixed into the target in the order they are provided.\\n * @returns Resulting merged target.\\n */\\nexport declare function assign(target: any, ...args: any[]): any;\\n\\n/**\\n * Bugs often appear in async code when stuff gets disposed, but async operations don't get canceled.\\n * This Async helper class solves these issues by tying async code to the lifetime of a disposable object.\\n *\\n * Usage: Anything class extending from BaseModel can access this helper via this.async. Otherwise create a\\n * new instance of the class and remember to call dispose() during your code's dispose handler.\\n *\\n * @public\\n */\\nexport declare class Async {\\n    private _timeoutIds;\\n    private _immediateIds;\\n    private _intervalIds;\\n    private _animationFrameIds;\\n    private _isDisposed;\\n    private _parent;\\n    private _onErrorHandler;\\n    private _noop;\\n    constructor(parent?: object, onError?: (e: any) => void);\\n    /**\\n     * Dispose function, clears all async operations.\\n     */\\n    dispose(): void;\\n    /**\\n     * SetTimeout override, which will auto cancel the timeout during dispose.\\n     * @param callback - Callback to execute.\\n     * @param duration - Duration in milliseconds.\\n     * @returns The setTimeout id.\\n     */\\n    setTimeout(callback: () => void, duration: number): number;\\n    /**\\n     * Clears the timeout.\\n     * @param id - Id to cancel.\\n     */\\n    clearTimeout(id: number): void;\\n    /**\\n     * SetImmediate override, which will auto cancel the immediate during dispose.\\n     * @param callback - Callback to execute.\\n     * @param targetElement - Optional target element to use for identifying the correct window.\\n     * @returns The setTimeout id.\\n     */\\n    setImmediate(callback: () => void, targetElement?: Element | null): number;\\n    /**\\n     * Clears the immediate.\\n     * @param id - Id to cancel.\\n     * @param targetElement - Optional target element to use for identifying the correct window.\\n     */\\n    clearImmediate(id: number, targetElement?: Element | null): void;\\n    /**\\n     * SetInterval override, which will auto cancel the timeout during dispose.\\n     * @param callback - Callback to execute.\\n     * @param duration - Duration in milliseconds.\\n     * @returns The setTimeout id.\\n     */\\n    setInterval(callback: () => void, duration: number): number;\\n    /**\\n     * Clears the interval.\\n     * @param id - Id to cancel.\\n     */\\n    clearInterval(id: number): void;\\n    /**\\n     * Creates a function that, when executed, will only call the func function at most once per\\n     * every wait milliseconds. Provide an options object to indicate that func should be invoked\\n     * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled\\n     * function will return the result of the last func call.\\n     *\\n     * Note: If leading and trailing options are true func will be called on the trailing edge of\\n     * the timeout only if the throttled function is invoked more than once during the wait timeout.\\n     *\\n     * @param func - The function to throttle.\\n     * @param wait - The number of milliseconds to throttle executions to. Defaults to 0.\\n     * @param options - The options object.\\n     * @returns The new throttled function.\\n     */\\n    throttle<T extends (...args: any[]) => any>(func: T, wait?: number, options?: {\\n        leading?: boolean;\\n        trailing?: boolean;\\n    }): T;\\n    /**\\n     * Creates a function that will delay the execution of func until after wait milliseconds have\\n     * elapsed since the last time it was invoked. Provide an options object to indicate that func\\n     * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls\\n     * to the debounced function will return the result of the last func call.\\n     *\\n     * Note: If leading and trailing options are true func will be called on the trailing edge of\\n     * the timeout only if the debounced function is invoked more than once during the wait\\n     * timeout.\\n     *\\n     * @param func - The function to debounce.\\n     * @param wait - The number of milliseconds to delay.\\n     * @param options - The options object.\\n     * @returns The new debounced function.\\n     */\\n    debounce<T extends (...args: any[]) => any>(func: T, wait?: number, options?: {\\n        leading?: boolean;\\n        maxWait?: number;\\n        trailing?: boolean;\\n    }): ICancelable<T> & T;\\n    requestAnimationFrame(callback: () => void, targetElement?: Element | null): number;\\n    cancelAnimationFrame(id: number, targetElement?: Element | null): void;\\n    protected _logError(e: any): void;\\n}\\n\\n/**\\n * An array of AUDIO tag properties and events.\\n\\n * @public\\n */\\nexport declare const audioProperties: Record<string, number>;\\n\\n/**\\n * AutoScroll simply hooks up mouse events given a parent element, and scrolls the container\\n * up/down depending on how close the mouse is to the top/bottom of the container.\\n *\\n * Once you don't want autoscroll any more, just dispose the helper and it will unhook events.\\n *\\n * @public\\n * {@docCategory AutoScroll}\\n */\\nexport declare class AutoScroll {\\n    private _events;\\n    private _scrollableParent;\\n    private _scrollRect;\\n    private _scrollVelocity;\\n    private _isVerticalScroll;\\n    private _timeoutId;\\n    constructor(element: HTMLElement);\\n    dispose(): void;\\n    private _onMouseMove;\\n    private _onTouchMove;\\n    private _computeScrollVelocity;\\n    private _startScroll;\\n    private _incrementScroll;\\n    private _stopScroll;\\n}\\n\\n/**\\n * BaseComponent class, which provides basic helpers for all components.\\n *\\n * @public\\n * {@docCategory BaseComponent}\\n *\\n * @deprecated Do not use. We are moving away from class component.\\n */\\nexport declare class BaseComponent<TProps extends IBaseProps = {}, TState = {}> extends React.Component<TProps, TState> {\\n    /**\\n     * @deprecated Use React's error boundaries instead.\\n     */\\n    static onError: (errorMessage?: string, ex?: any) => void;\\n    /**\\n     * Controls whether the componentRef prop will be resolved by this component instance. If you are\\n     * implementing a passthrough (higher-order component), you would set this to false and pass through\\n     * the props to the inner component, allowing it to resolve the componentRef.\\n     */\\n    protected _skipComponentRefResolution: boolean;\\n    private __async;\\n    private __events;\\n    private __disposables;\\n    private __resolves;\\n    private __className;\\n    /**\\n     * BaseComponent constructor\\n     * @param props - The props for the component.\\n     * @param context - The context for the component.\\n     */\\n    constructor(props: TProps, context?: any);\\n    /**\\n     * When the component receives props, make sure the componentRef is updated.\\n     */\\n    componentDidUpdate(prevProps: TProps, prevState: TState): void;\\n    /**\\n     * When the component has mounted, update the componentRef.\\n     */\\n    componentDidMount(): void;\\n    /**\\n     * If we have disposables, dispose them automatically on unmount.\\n     */\\n    componentWillUnmount(): void;\\n    /**\\n     * Gets the object's class name.\\n     */\\n    readonly className: string;\\n    /**\\n     * Allows subclasses to push things to this._disposables to be auto disposed.\\n     */\\n    protected readonly _disposables: IDisposable[];\\n    /**\\n     * Gets the async instance associated with the component, created on demand. The async instance gives\\n     * subclasses a way to execute setTimeout/setInterval async calls safely, where the callbacks\\n     * will be cleared/ignored automatically after unmounting. The helpers within the async object also\\n     * preserve the this pointer so that you don't need to \\\"bind\\\" the callbacks.\\n     */\\n    protected readonly _async: Async;\\n    /**\\n     * Gets the event group instance assocaited with the component, created on demand. The event instance\\n     * provides on/off methods for listening to DOM (or regular javascript object) events. The event callbacks\\n     * will be automatically disconnected after unmounting. The helpers within the events object also\\n     * preserve the this reference so that you don't need to \\\"bind\\\" the callbacks.\\n     */\\n    protected readonly _events: EventGroup;\\n    /**\\n     * Helper to return a memoized ref resolver function.\\n     * @param refName - Name of the member to assign the ref to.\\n     * @returns A function instance keyed from the given refname.\\n     * @deprecated Use `createRef` from React.createRef.\\n     */\\n    protected _resolveRef(refName: string): (ref: React.ReactNode) => React.ReactNode;\\n    /**\\n     * Updates the componentRef (by calling it with \\\"this\\\" when necessary.)\\n     */\\n    protected _updateComponentRef(currentProps: IBaseProps, newProps?: IBaseProps): void;\\n    /**\\n     * Warns when a deprecated props are being used.\\n     *\\n     * @param deprecationMap - The map of deprecations, where key is the prop name and the value is\\n     * either null or a replacement prop name.\\n     */\\n    protected _warnDeprecations(deprecationMap: ISettingsMap<TProps>): void;\\n    /**\\n     * Warns when props which are mutually exclusive with each other are both used.\\n     *\\n     * @param mutuallyExclusiveMap - The map of mutually exclusive props.\\n     */\\n    protected _warnMutuallyExclusive(mutuallyExclusiveMap: ISettingsMap<TProps>): void;\\n    /**\\n     * Warns when props are required if a condition is met.\\n     *\\n     * @param requiredProps - The name of the props that are required when the condition is met.\\n     * @param conditionalPropName - The name of the prop that the condition is based on.\\n     * @param condition - Whether the condition is met.\\n     */\\n    protected _warnConditionallyRequiredProps(requiredProps: string[], conditionalPropName: string, condition: boolean): void;\\n    private _setComponentRef;\\n}\\n\\n/**\\n * An array of events that are allowed on every html element type.\\n *\\n * @public\\n */\\nexport declare const baseElementEvents: Record<string, number>;\\n\\n/**\\n * An array of element attributes which are allowed on every html element type.\\n *\\n * @public\\n */\\nexport declare const baseElementProperties: Record<string, number>;\\n\\n/**\\n * An array of BUTTON tag properties and events.\\n *\\n * @public\\n */\\nexport declare const buttonProperties: Record<string, number>;\\n\\n/**\\n * Calculates a number's precision based on the number of trailing\\n * zeros if the number does not have a decimal indicated by a negative\\n * precision. Otherwise, it calculates the number of digits after\\n * the decimal point indicated by a positive precision.\\n * @param value - the value to determine the precision of\\n */\\nexport declare function calculatePrecision(value: number | string): number;\\n\\n/**\\n * Creates a getClassNames function which calls getStyles given the props, and injects them\\n * into mergeStyleSets.\\n *\\n * Note that the props you pass in on every render should be in the same order and\\n * immutable (numbers, strings, and booleans). This will allow the results to be memoized. Violating\\n * these will cause extra recalcs to occur.\\n */\\nexport declare function classNamesFunction<TStyleProps extends {}, TStyleSet extends IStyleSet<TStyleSet>>(options?: IClassNamesFunctionOptions): (getStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined, styleProps?: TStyleProps) => IProcessedStyleSet<TStyleSet>;\\n\\nexport declare const colGroupProperties: Record<string, number>;\\n\\nexport declare const colProperties: Record<string, number>;\\n\\n/**\\n * Composes two components which conform to the `IComponentAs` specification; that is, two\\n * components which accept a `defaultRender` prop, which is a 'default' implementation of\\n * a component which accepts the same overall props.\\n *\\n * @public\\n */\\nexport declare function composeComponentAs<TProps>(outer: IComponentAs<TProps>, inner: IComponentAs<TProps>): IComponentAs<TProps>;\\n\\n/**\\n * Composes two 'render functions' to produce a final render function that renders\\n * the outer function, passing the inner function as 'default render'. The inner function\\n * is then passed the original 'default render' prop.\\n * @public\\n */\\nexport declare function composeRenderFunction<TProps>(outer: IRenderFunction<TProps>, inner: IRenderFunction<TProps>): IRenderFunction<TProps>;\\n\\n/**\\n * Creates an array of a given size and helper method to populate.\\n *\\n * @public\\n * @param size - Size of array.\\n * @param getItem - Callback to populate given cell index.\\n */\\nexport declare function createArray<T>(size: number, getItem: (index: number) => T): T[];\\n\\n/**\\n * Creates a memoizer for a single-value function, backed by a WeakMap.\\n * With a WeakMap, the memoized values are only kept as long as the source objects,\\n * ensuring that there is no memory leak.\\n *\\n * This function assumes that the input values passed to the wrapped function will be\\n * `function` or `object` types. To memoize functions which accept other inputs, use\\n * `memoizeFunction`, which memoizes against arbitrary inputs using a lookup cache.\\n *\\n * @public\\n */\\nexport declare function createMemoizer<F extends (input: any) => any>(getValue: F): F;\\n\\n/**\\n * Helper to merge refs from within class components.\\n */\\nexport declare const createMergedRef: <TType, TValue = null>(value?: TValue | undefined) => (...newRefs: (((instance: TType | TValue | null) => void) | React.RefObject<TType | TValue | null> | null | undefined)[]) => (newValue: TType | TValue | null) => void;\\n\\n/**\\n * Concatination helper, which can merge class names together. Skips over falsey values.\\n *\\n * @public\\n */\\nexport declare function css(...args: ICssInput[]): string;\\n\\nexport declare function customizable(scope: string, fields: string[], concatStyles?: boolean): <P>(ComposedComponent: React.ComponentType<P>) => any;\\n\\nexport declare class Customizations {\\n    private static _suppressUpdates;\\n    static reset(): void;\\n    /** Apply global Customization settings.\\n     * @example Customizations.applySettings(\\\\{ theme: \\\\{...\\\\} \\\\});\\n     */\\n    static applySettings(settings: ISettings): void;\\n    /** Apply Customizations to a particular named scope, like a component.\\n     * @example Customizations.applyScopedSettings('Nav', \\\\{ styles: () =\\\\> \\\\{\\\\} \\\\});\\n     */\\n    static applyScopedSettings(scopeName: string, settings: ISettings): void;\\n    static getSettings(properties: string[], scopeName?: string, localSettings?: ICustomizations): any;\\n    /** Used to run some code that sets Customizations without triggering an update until the end.\\n     * Useful for applying Customizations that don't affect anything currently rendered, or for\\n     * applying many customizations at once.\\n     * @param suppressUpdate - Do not raise the change event at the end, preventing all updates\\n     */\\n    static applyBatchedUpdates(code: () => void, suppressUpdate?: boolean): void;\\n    static observe(onChange: () => void): void;\\n    static unobserve(onChange: () => void): void;\\n    private static _raiseChange;\\n}\\n\\n/**\\n * The Customizer component allows for default props to be mixed into components which\\n * are decorated with the customizable() decorator, or use the styled HOC. This enables\\n * injection scenarios like:\\n *\\n * 1. render svg icons instead of the icon font within all buttons\\n * 2. inject a custom theme object into a component\\n *\\n * Props are provided via the settings prop which should be one of the following:\\n * - A json map which contains 1 or more name/value pairs representing injectable props.\\n * - A function that receives the current settings and returns the new ones that apply to the scope\\n *\\n * @public\\n */\\nexport declare class Customizer extends React.Component<ICustomizerProps> {\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    render(): React.ReactElement<{}>;\\n    private _onCustomizationChange;\\n}\\n\\nexport declare const CustomizerContext: React.Context<ICustomizerContext>;\\n\\n/**\\n * Placing this attribute on scrollable divs optimizes detection to know\\n * if the div is scrollable or not (given we can avoid expensive operations\\n * like getComputedStyle.)\\n *\\n * @public\\n */\\nexport declare const DATA_IS_SCROLLABLE_ATTRIBUTE = \\\"data-is-scrollable\\\";\\nexport { DATA_PORTAL_ATTRIBUTE }\\n\\n/**\\n * Utility component for delaying the render of a child component after a given delay. This component\\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\\n * if necessary.\\n *\\n * @public\\n * {@docCategory DelayedRender}\\n */\\nexport declare class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\\n    static defaultProps: {\\n        delay: number;\\n    };\\n    private _timeoutId;\\n    constructor(props: IDelayedRenderProps);\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    render(): React.ReactElement<{}> | null;\\n}\\n\\n/**\\n * Disables the body scrolling.\\n *\\n * @public\\n */\\nexport declare function disableBodyScroll(): void;\\n\\n/**\\n * An array of DIV tag properties and events.\\n *\\n * @public\\n */\\nexport declare const divProperties: Record<string, number>;\\n\\n/**\\n * Determines if an element, or any of its children, contain focus.\\n *\\n * @public\\n */\\nexport declare function doesElementContainFocus(element: HTMLElement): boolean;\\nexport { elementContains }\\nexport { elementContainsAttribute }\\n\\n/**\\n * Enables the body scrolling.\\n *\\n * @public\\n */\\nexport declare function enableBodyScroll(): void;\\n\\n/** An instance of EventGroup allows anything with a handle to it to trigger events on it.\\n *  If the target is an HTMLElement, the event will be attached to the element and can be\\n *  triggered as usual (like clicking for onClick).\\n *  The event can be triggered by calling EventGroup.raise() here. If the target is an\\n *  HTMLElement, the event gets raised and is handled by the browser. Otherwise, it gets\\n *  handled here in EventGroup, and the handler is called in the context of the parent\\n *  (which is passed in in the constructor).\\n *\\n * @public\\n * {@docCategory EventGroup}\\n */\\nexport declare class EventGroup {\\n    private static _uniqueId;\\n    private _parent;\\n    private _eventRecords;\\n    private _id;\\n    private _isDisposed;\\n    /** For IE8, bubbleEvent is ignored here and must be dealt with by the handler.\\n     *  Events raised here by default have bubbling set to false and cancelable set to true.\\n     *  This applies also to built-in events being raised manually here on HTMLElements,\\n     *  which may lead to unexpected behavior if it differs from the defaults.\\n     *\\n     */\\n    static raise(target: any, eventName: string, eventArgs?: any, bubbleEvent?: boolean): boolean | undefined;\\n    static isObserved(target: any, eventName: string): boolean;\\n    /** Check to see if the target has declared support of the given event. */\\n    static isDeclared(target: any, eventName: string): boolean;\\n    static stopPropagation(event: any): void;\\n    private static _isElement;\\n    /** parent: the context in which events attached to non-HTMLElements are called */\\n    constructor(parent: any);\\n    dispose(): void;\\n    /** On the target, attach a set of events, where the events object is a name to function mapping. */\\n    onAll(target: any, events: {\\n        [key: string]: (args?: any) => void;\\n    }, useCapture?: boolean): void;\\n    /**\\n     * On the target, attach an event whose handler will be called in the context of the parent\\n     * of this instance of EventGroup.\\n     */\\n    on(target: any, eventName: string, callback: (args?: any) => void, options?: boolean | AddEventListenerOptions): void;\\n    off(target?: any, eventName?: string, callback?: (args?: any) => void, options?: boolean | AddEventListenerOptions): void;\\n    /** Trigger the given event in the context of this instance of EventGroup. */\\n    raise(eventName: string, eventArgs?: any, bubbleEvent?: boolean): boolean | undefined;\\n    /** Declare an event as being supported by this instance of EventGroup. */\\n    declare(event: string | string[]): void;\\n}\\n\\n/**\\n * Extends a component's lifetime methods by appending new functions to the existing lifetime functions.\\n */\\nexport declare function extendComponent<T extends React.Component>(parent: T, methods: {\\n    [key in keyof T]?: T[key];\\n}): void;\\n\\n/**\\n * Performance helper class for measuring things.\\n *\\n * @public\\n * {@docCategory FabricPerformance}\\n */\\nexport declare class FabricPerformance {\\n    static summary: IPerfSummary;\\n    private static _timeoutId;\\n    /**\\n     * Measures execution time of the given syncronous function. If the same logic is executed multiple times,\\n     * each individual measurement will be collected as well the overall numbers.\\n     * @param name - The name of this measurement\\n     * @param func - The logic to be measured for execution time\\n     */\\n    static measure(name: string, func: () => void): void;\\n    static reset(): void;\\n    static setPeriodicReset(): void;\\n}\\n\\n/**\\n * Makes a resulting merge of a bunch of objects, but allows a filter function to be passed in to filter\\n * the resulting merges. This allows for scenarios where you want to merge \\\"everything except that one thing\\\"\\n * or \\\"properties that start with data-\\\". Note that this will shallow merge; it will not create new cloned\\n * values for target members.\\n *\\n * @public\\n * @param isAllowed - Callback to determine if the given propName is allowed in the result.\\n * @param target - Target object to merge following object arguments into.\\n * @param args - One or more objects that will be mixed into the target in the order they are provided.\\n * @returns Resulting merged target.\\n */\\nexport declare function filteredAssign(isAllowed: (propName: string) => boolean, target: any, ...args: any[]): any;\\n\\n/**\\n * Helper to find the first item within an array that satisfies the callback.\\n * @param array - Array to search\\n * @param cb - Callback which returns true on matches\\n */\\nexport declare function find<T>(array: T[], cb: (item: T, index: number) => boolean): T | undefined;\\nexport { findElementRecursive }\\n\\n/**\\n * Helper to find the index of an item within an array, using a callback to\\n * determine the match.\\n *\\n * @public\\n * @param array - Array to search.\\n * @param cb - Callback which returns true on matches.\\n * @param fromIndex - Optional index to start from (defaults to 0)\\n */\\nexport declare function findIndex<T>(array: T[], cb: (item: T, index: number) => boolean, fromIndex?: number): number;\\n\\n/**\\n * Traverses up the DOM for the element with the data-is-scrollable=true attribute, or returns\\n * document.body.\\n *\\n * @public\\n */\\nexport declare function findScrollableParent(startingElement: HTMLElement | null): HTMLElement | Window | undefined | null;\\n\\n/**\\n * Produces a proportionally-scaled version of an input content size when fit to a bounding size.\\n * Given a `contentSize` and a `boundsSize`, this function scales `contentSize` proportionally\\n * using either `contain` or `cover` fit behaviors.\\n * Use this function to pre-calculate the layout for the CSS `object-fit` and `background-fit` behaviors.\\n * With `contain`, the output size must be the largest it can be while completely within the `boundsSize`.\\n * With `cover`, the output size must be the smallest it can be while completely around the `boundsSize`.\\n * By default, there is a `maxScale` value of 1, which prevents the `contentSize` from being scaled larger.\\n *\\n * @param options - the options for the bounds fit operation\\n */\\nexport declare function fitContentToBounds(options: IFitContentToBoundsOptions): ISize;\\n\\n/**\\n * The available fit modes. These should match the fit modes for CSS.\\n */\\nexport declare type FitMode = 'contain' | 'cover';\\n\\n/**\\n * Given an array where each element is of type T or T[], flatten it into an array of T\\n * @param array - The array where each element can optionally also be an array\\n */\\nexport declare function flatten<T>(array: (T | T[])[]): T[];\\n\\n/**\\n * Sets focus to an element asynchronously. The focus will be set at the next browser repaint,\\n * meaning it won't cause any extra recalculations. If more than one focusAsync is called during one frame,\\n * only the latest called focusAsync element will actually be focused\\n * @param element - The element to focus\\n */\\nexport declare function focusAsync(element: HTMLElement | {\\n    focus: () => void;\\n} | undefined | null): void;\\n\\n/**\\n * Attempts to focus the first focusable element that is a child or child's child of the rootElement.\\n *\\n * @public\\n * @param rootElement - Element to start the search for a focusable child.\\n * @returns True if focus was set, false if it was not.\\n */\\nexport declare function focusFirstChild(rootElement: HTMLElement): boolean;\\n\\n/**\\n * Function Component wrapper which enables calling `useFocusRects` hook.\\n * Renders nothing.\\n */\\nexport declare const FocusRects: React.FunctionComponent<{\\n    rootRef?: React.RefObject<HTMLElement>;\\n}>;\\n\\n/**\\n * String format method, used for scenarios where at runtime you\\n * need to evaluate a formatted string given a tokenized string. This\\n * usually only is needed in localization scenarios.\\n\\n * @example\\n * ```tsx\\n * \\\"I love {0} every {1}\\\".format(\\\"CXP\\\")\\n * ```\\n * will result in a Debug Exception.\\n *\\n * @public\\n */\\nexport declare function format(s: string, ...values: any[]): string;\\n\\n/**\\n * An array of FORM tag properties and events.\\n *\\n * @public\\n */\\nexport declare const formProperties: Record<string, number>;\\nexport { getChildren }\\n\\n/**\\n * Determines the distance between two points.\\n *\\n * @public\\n */\\nexport declare function getDistanceBetweenPoints(point1: Point, point2: Point): number;\\n\\n/**\\n * Helper to get the document object. Note that in popup window cases, document\\n * might be the wrong document, which is why we look at ownerDocument for the\\n * truth. Also note that the SSR flag is used to test ssr scenarios even if\\n * document is defined (from JSDOM for example.)\\n *\\n * @public\\n */\\nexport declare function getDocument(rootElement?: HTMLElement | null): Document | undefined;\\n\\n/**\\n * Finds the element index path from a parent element to a child element.\\n *\\n * If you had this node structure: \\\"A has children [B, C] and C has child D\\\",\\n * the index path from A to D would be [1, 0], or `parent.chidren[1].children[0]`.\\n */\\nexport declare function getElementIndexPath(fromElement: HTMLElement, toElement: HTMLElement): number[];\\n\\n/**\\n * Gets the first focusable element.\\n *\\n * @public\\n */\\nexport declare function getFirstFocusable(rootElement: HTMLElement, currentElement: HTMLElement, includeElementsInFocusZones?: boolean): HTMLElement | null;\\n\\n/**\\n * Gets the first tabbable element. (The difference between focusable and tabbable is that tabbable elements are\\n * focusable elements that also have tabIndex != -1.)\\n * @param rootElement - The parent element to search beneath.\\n * @param currentElement - The descendant of rootElement to start the search at.  This element is the first one checked,\\n * and iteration continues forward.  Typical use passes rootElement.firstChild.\\n * @param includeElementsInFocusZones - true if traversal should go into FocusZone descendants.\\n * @param checkNode - Include currentElement in search when true. Defaults to true.\\n * @public\\n */\\nexport declare function getFirstTabbable(rootElement: HTMLElement, currentElement: HTMLElement, includeElementsInFocusZones?: boolean, checkNode?: boolean): HTMLElement | null;\\n\\n/**\\n * Finds the closest focusable element via an index path from a parent. See\\n * `getElementIndexPath` for getting an index path from an element to a child.\\n */\\nexport declare function getFocusableByIndexPath(parent: HTMLElement, path: number[]): HTMLElement | undefined;\\n\\n/**\\n * Generates a unique id in the global scope (this spans across duplicate copies of the same library.)\\n *\\n * @public\\n */\\nexport declare function getId(prefix?: string): string;\\n\\n/**\\n * Get (up to 2 characters) initials based on display name of the persona.\\n *\\n * @public\\n */\\nexport declare function getInitials(displayName: string | undefined | null, isRtl: boolean, allowPhoneInitials?: boolean): string;\\n\\n/**\\n * Gets the language set for the page.\\n * @param persistenceType - Where to persist the value. Default is `localStorage` if available.\\n * (In version 8, the default will be `sessionStorage`.)\\n */\\nexport declare function getLanguage(persistenceType?: 'localStorage' | 'sessionStorage' | 'none'): string | null;\\n\\n/**\\n * Gets the last focusable element.\\n *\\n * @public\\n */\\nexport declare function getLastFocusable(rootElement: HTMLElement, currentElement: HTMLElement, includeElementsInFocusZones?: boolean): HTMLElement | null;\\n\\n/**\\n * Gets the last tabbable element. (The difference between focusable and tabbable is that tabbable elements are\\n * focusable elements that also have tabIndex != -1.)\\n * @param rootElement - The parent element to search beneath.\\n * @param currentElement - The descendant of rootElement to start the search at.  This element is the first one checked,\\n * and iteration continues in reverse.  Typical use passes rootElement.lastChild.\\n * @param includeElementsInFocusZones - true if traversal should go into FocusZone descendants.\\n * @param checkNode - Include currentElement in search when true. Defaults to true.\\n * @public\\n */\\nexport declare function getLastTabbable(rootElement: HTMLElement, currentElement: HTMLElement, includeElementsInFocusZones?: boolean, checkNode?: boolean): HTMLElement | null;\\n\\n/**\\n * Given an element tagname and user props, filters the props to only allowed props for the given\\n * element type.\\n * @param tagName - Tag name (e.g. \\\"div\\\")\\n * @param props - Props object\\n * @param excludedPropNames - List of props to disallow\\n */\\nexport declare function getNativeElementProps<TAttributes extends React.HTMLAttributes<any>>(tagName: string, props: {}, excludedPropNames?: string[]): TAttributes;\\n\\n/**\\n * Gets native supported props for an html element provided the allowance set. Use one of the property\\n * sets defined (divProperties, buttonPropertes, etc) to filter out supported properties from a given\\n * props set. Note that all data- and aria- prefixed attributes will be allowed.\\n * NOTE: getNativeProps should always be applied first when adding props to a react component. The\\n * non-native props should be applied second. This will prevent getNativeProps from overriding your custom props.\\n * For example, if props passed to getNativeProps has an onClick function and getNativeProps is added to\\n * the component after an onClick function is added, then the getNativeProps onClick will override it.\\n *\\n * @public\\n * @param props - The unfiltered input props\\n * @param allowedPropsNames - The array or record of allowed prop names.\\n * @returns The filtered props\\n */\\nexport declare function getNativeProps<T extends Record<string, any>>(props: Record<string, any>, allowedPropNames: string[] | Record<string, number>, excludedPropNames?: string[]): T;\\n\\n/**\\n * Traverse to find the next focusable element.\\n * If tabbable is true, the element must have tabIndex != -1.\\n *\\n * @public\\n * @param checkNode - Include currentElement in search when true.\\n */\\nexport declare function getNextElement(rootElement: HTMLElement, currentElement: HTMLElement | null, checkNode?: boolean, suppressParentTraversal?: boolean, suppressChildTraversal?: boolean, includeElementsInFocusZones?: boolean, allowFocusRoot?: boolean, tabbable?: boolean): HTMLElement | null;\\nexport { getParent }\\n\\n/**\\n * Traverse to find the previous element.\\n * If tabbable is true, the element must have tabIndex != -1.\\n *\\n * @public\\n */\\nexport declare function getPreviousElement(rootElement: HTMLElement, currentElement: HTMLElement | null, checkNode?: boolean, suppressParentTraversal?: boolean, traverseChildren?: boolean, includeElementsInFocusZones?: boolean, allowFocusRoot?: boolean, tabbable?: boolean): HTMLElement | null;\\n\\n/**\\n * Function to apply default values to a component props object. This function is intended for function components,\\n * to maintain parity with the `defaultProps` feature of class components. It accounts for properties that are\\n * specified, but undefined.\\n * @param defaultProps- An object with default values for various properties\\n * @param propsWithoutDefaults- The props object passed into the component\\n */\\nexport declare function getPropsWithDefaults<TProps extends {}>(defaultProps: Partial<TProps>, propsWithoutDefaults: TProps): TProps;\\n\\n/**\\n * Helper to get bounding client rect. Passing in window will get the window size.\\n *\\n * @public\\n */\\nexport declare function getRect(element: HTMLElement | Window | null): IRectangle | undefined;\\n\\n/** Sets the current base url used for fetching images. */\\nexport declare function getResourceUrl(url: string): string;\\n\\n/**\\n * Gets the rtl state of the page (returns true if in rtl.)\\n */\\nexport declare function getRTL(theme?: {\\n    rtl?: boolean;\\n}): boolean;\\n\\n/**\\n * Returns the given key, but flips right/left arrows if necessary.\\n */\\nexport declare function getRTLSafeKeyCode(key: number, theme?: {\\n    rtl?: boolean;\\n}): number;\\n\\n/**\\n * Calculates the width of a scrollbar for the browser/os.\\n *\\n * @public\\n */\\nexport declare function getScrollbarWidth(): number;\\nexport { getVirtualParent }\\n\\n/**\\n * Helper to get the window object. The helper will make sure to use a cached variable\\n * of \\\"window\\\", to avoid overhead and memory leaks in IE11. Note that in popup scenarios the\\n * window object won't match the \\\"global\\\" window object, and for these scenarios, you should\\n * pass in an element hosted within the popup.\\n *\\n * @public\\n */\\nexport declare function getWindow(rootElement?: Element | null): Window | undefined;\\n\\n/**\\n * Global settings helper, which stores settings in the global (window) namespace.\\n * If window is not provided, it will store settings in module scope. Provides a\\n * way to observe changes as well when their values change.\\n *\\n * @public\\n * {@docCategory GlobalSettings}\\n */\\nexport declare class GlobalSettings {\\n    static getValue<T>(key: string, defaultValue?: T | (() => T)): T;\\n    static setValue<T>(key: string, value: T): T;\\n    static addChangeListener(cb: IChangeEventCallback): void;\\n    static removeChangeListener(cb: IChangeEventCallback): void;\\n}\\n\\n/**\\n * Detects whether an element's content has horizontal overflow\\n *\\n * @public\\n * @param element - Element to check for overflow\\n * @returns True if element's content overflows\\n */\\nexport declare function hasHorizontalOverflow(element: HTMLElement): boolean;\\n\\n/**\\n * Detects whether an element's content has overflow in any direction\\n *\\n * @public\\n * @param element - Element to check for overflow\\n * @returns True if element's content overflows\\n */\\nexport declare function hasOverflow(element: HTMLElement): boolean;\\n\\n/**\\n * Detects whether an element's content has vertical overflow\\n *\\n * @public\\n * @param element - Element to check for overflow\\n * @returns True if element's content overflows\\n */\\nexport declare function hasVerticalOverflow(element: HTMLElement): boolean;\\n\\n/**\\n * Allows you to hoist methods, except those in an exclusion set from a source object into a destination object.\\n *\\n * @public\\n * @param destination - The instance of the object to hoist the methods onto.\\n * @param source - The instance of the object where the methods are hoisted from.\\n * @param exclusions - (Optional) What methods to exclude from being hoisted.\\n * @returns An array of names of methods that were hoisted.\\n */\\nexport declare function hoistMethods(destination: any, source: any, exclusions?: string[]): string[];\\n\\n/**\\n * Allows you to hoist static functions in components.\\n * Created for the purpose of fixing broken static functions in classes\\n * that utilize decorators.\\n *\\n * @public\\n * @param source - The object where the methods are hoisted from.\\n * @param dest - The object to hoist the methods onto.\\n * @returns The dest object with methods added\\n */\\nexport declare function hoistStatics<TSource extends Object, TDest>(source: TSource, dest: TDest): TDest;\\n\\n/**\\n * An array of HTML element properties and events.\\n *\\n * @public\\n */\\nexport declare const htmlElementProperties: Record<string, number>;\\n\\nexport declare interface IAsAsyncOptions<TProps> {\\n    /**\\n     * Callback which returns a promise resolving an object which exports the component.\\n     */\\n    load: () => Promise<React.ElementType<TProps>>;\\n    /**\\n     * Callback executed when async loading is complete.\\n     */\\n    onLoad?: () => void;\\n    /**\\n     * Callback when async loading fails.\\n     */\\n    onError?: (error: Error) => void;\\n}\\n\\n/**\\n * BaseProps interface.\\n *\\n * @public\\n * {@docCategory IBaseProps}\\n */\\nexport declare interface IBaseProps<T = any> {\\n    componentRef?: IRefObject<T>;\\n}\\n\\nexport declare type ICancelable<T extends (...args: any[]) => any> = {\\n    flush: () => ReturnType<T>;\\n    cancel: () => void;\\n    pending: () => boolean;\\n};\\n\\n/**\\n * Change description used for change callbacks in GlobalSettings.\\n *\\n * @public\\n * {@docCategory IChangeDescription}\\n */\\nexport declare interface IChangeDescription {\\n    key: string;\\n    oldValue: any;\\n    value: any;\\n}\\n\\n/**\\n * Change event callback.\\n *\\n * @public\\n * {@docCategory IChangeEventCallback}\\n */\\nexport declare interface IChangeEventCallback {\\n    __id__?: string;\\n    (changeDescription?: IChangeDescription): void;\\n}\\n\\n/**\\n * @deprecated Use `IProcessedStyleSet` from `@uifabric/styling` or `@uifabric/merge-styles` instead.\\n */\\nexport declare type IClassNames<T> = {\\n    [key in keyof T]: string;\\n};\\n\\nexport declare interface IClassNamesFunctionOptions {\\n    /**\\n     * Disables class caching for scenarios where styleProp parts mutate frequently.\\n     */\\n    disableCaching?: boolean;\\n    /**\\n     * Size of the cache. It overwrites default cache size when defined.\\n     */\\n    cacheSize?: number;\\n    /**\\n     * Set to true if component base styles are implemented in scss instead of css-in-js.\\n     */\\n    useStaticStyles?: boolean;\\n}\\n\\n/**\\n * Render function interface for providing overrideable render callbacks.\\n *\\n * @public\\n * {@docCategory IComponentAs}\\n */\\nexport declare type IComponentAs<T> = React.ComponentType<IComponentAsProps<T>>;\\n\\n/**\\n * Properties used by render function interface for providing overrideable render callbacks.\\n *\\n * @public\\n * {@docCategory IComponentAsProps}\\n */\\nexport declare type IComponentAsProps<T> = T & {\\n    defaultRender?: React.ComponentType<T>;\\n};\\n\\n/**\\n * css input type.\\n *\\n * @internal\\n */\\nexport declare type ICssInput = string | ISerializableObject | IDictionary | null | undefined | boolean;\\n\\nexport declare interface ICustomizableProps {\\n    /**\\n     * Name of scope, which can be targeted using the Customizer.\\n     */\\n    scope: string;\\n    /**\\n     * List of fields which can be customized.\\n     * @defaultvalue [ 'theme', 'styles' ]\\n     */\\n    fields?: string[];\\n}\\n\\nexport declare interface ICustomizations {\\n    settings: ISettings;\\n    scopedSettings: {\\n        [key: string]: ISettings;\\n    };\\n    inCustomizerContext?: boolean;\\n}\\n\\nexport declare interface ICustomizerContext {\\n    customizations: ICustomizations;\\n}\\n\\nexport declare type ICustomizerProps = IBaseProps & Partial<{\\n    /**\\n     * Settings are used as general settings for the React tree below.\\n     * Components can subscribe to receive the settings by using `customizable`.\\n     *\\n     * @example\\n     * ```\\n     * // Settings can be represented by a plain object that contains the key value pairs.\\n     * <Customizer settings={{ color: 'red' }} />\\n     *\\n     * // or a function that receives the current settings and returns the new ones\\n     * <Customizer settings={(currentSettings) => ({ ...currentSettings, color: 'red' })} />\\n     * ```\\n     */\\n    settings: ISettings | ISettingsFunction;\\n    /**\\n     * Scoped settings are settings that are scoped to a specific scope. The\\n     * scope is the name that is passed to the `customizable` function when the\\n     * the component is customized.\\n     *\\n     * @example\\n     * ```\\n     * // Scoped settings can be represented by a plain object that contains the key value pairs.\\n     * const myScopedSettings = {\\n     *   Button: { color: 'red' };\\n     * };\\n     * <Customizer scopedSettings={myScopedSettings} />\\n     *\\n     * // or a function that receives the current settings and returns the new ones\\n     * const myScopedSettings = {\\n     *   Button: { color: 'red' };\\n     * };\\n     * <Customizer scopedSettings={(currentScopedSettings) => ({ ...currentScopedSettings, ...myScopedSettings })} />\\n     * ```\\n     */\\n    scopedSettings: ISettings | ISettingsFunction;\\n}> & {\\n    /**\\n     * Optional transform function for context. Any implementations should take care to return context without\\n     * mutating it.\\n     */\\n    contextTransform?: (context: Readonly<ICustomizerContext>) => ICustomizerContext;\\n};\\n\\n/**\\n * @internal\\n */\\nexport declare interface IDeclaredEventsByName {\\n    [eventName: string]: boolean;\\n}\\n\\n/**\\n * DelayedRender component props.\\n *\\n * @public\\n */\\nexport declare interface IDelayedRenderProps extends React.Props<{}> {\\n    /**\\n     * Number of milliseconds to delay rendering children.\\n     */\\n    delay?: number;\\n}\\n\\n/**\\n * DelayedRender component state.\\n *\\n * @internal\\n */\\nexport declare interface IDelayedRenderState {\\n    /**\\n     * Whether the component is rendered or not.\\n     */\\n    isRendered: boolean;\\n}\\n\\n/**\\n * Dictionary of booleans.\\n *\\n * @internal\\n */\\nexport declare interface IDictionary {\\n    [className: string]: boolean;\\n}\\n\\n/**\\n * Disposable interface.\\n *\\n * @public\\n * {@docCategory IDisposable}\\n */\\nexport declare interface IDisposable {\\n    dispose: () => void;\\n}\\n\\n/**\\n * @internal\\n */\\nexport declare interface IEventRecord {\\n    target: any;\\n    eventName: string;\\n    parent: any;\\n    callback: (args?: any) => void;\\n    elementCallback?: (...args: any[]) => void;\\n    objectCallback?: (args?: any) => void;\\n    options?: boolean | AddEventListenerOptions;\\n}\\n\\n/**\\n * @internal\\n */\\nexport declare interface IEventRecordList {\\n    [id: string]: IEventRecord[] | number;\\n    count: number;\\n}\\n\\n/**\\n * @internal\\n */\\nexport declare interface IEventRecordsByName {\\n    [eventName: string]: IEventRecordList;\\n}\\n\\n/**\\n * Options for fitting content sizes into bounding sizes.\\n */\\nexport declare interface IFitContentToBoundsOptions {\\n    /**\\n     * The size of the content to fit to the bounds.\\n     * The output will be proportional to this value.\\n     */\\n    contentSize: ISize;\\n    /**\\n     * The size of the bounds.\\n     */\\n    boundsSize: ISize;\\n    /**\\n     * The fit mode to apply, either 'contain' or 'cover'.\\n     */\\n    mode: FitMode;\\n    /**\\n     * An optional maximum scale factor to apply. The default is 1.\\n     * Use Infinity for an unbounded resize.\\n     */\\n    maxScale?: number;\\n}\\n\\n/**\\n * An array of IFRAME tag properties and events.\\n *\\n * @public\\n */\\nexport declare const iframeProperties: Record<string, number>;\\n\\n/**\\n * @deprecated Use imgProperties for img elements.\\n */\\nexport declare const imageProperties: Record<string, number>;\\n\\n/**\\n * An array of IMAGE tag properties and events.\\n *\\n * @public\\n */\\nexport declare const imgProperties: Record<string, number>;\\n\\n/**\\n * Helper to manage componentRef resolution. Internally appends logic to\\n * lifetime methods to resolve componentRef to the passed in object.\\n *\\n * Usage: call initializeComponentRef(this) in the constructor,\\n */\\nexport declare function initializeComponentRef<TProps extends IBaseProps, TState>(obj: React.Component<TProps, TState>): void;\\n\\n/**\\n * Initializes the logic which:\\n *\\n * 1. Subscribes keydown and mousedown events. (It will only do it once per window,\\n *    so it's safe to call this method multiple times.)\\n * 2. When the user presses directional keyboard keys, adds the 'ms-Fabric--isFocusVisible' classname\\n *    to the document body, removes the 'ms-Fabric-isFocusHidden' classname.\\n * 3. When the user clicks a mouse button, adds the 'ms-Fabric-isFocusHidden' classname to the\\n *    document body, removes the 'ms-Fabric--isFocusVisible' classname.\\n *\\n * This logic allows components on the page to conditionally render focus treatments based on\\n * the existence of global classnames, which simplifies logic overall.\\n *\\n * @param window - the window used to add the event listeners\\n * @deprecated Use useFocusRects hook or FocusRects component instead.\\n */\\nexport declare function initializeFocusRects(window?: Window): void;\\n\\n/**\\n * An array of INPUT tag properties and events.\\n *\\n * @public\\n */\\nexport declare const inputProperties: Record<string, number>;\\n\\n/**\\n * {@docCategory Selection}\\n */\\nexport declare interface IObjectWithKey {\\n    key?: string | number;\\n}\\n\\n/**\\n * PerfData interface.\\n *\\n * @internal\\n */\\nexport declare interface IPerfData {\\n    duration: number;\\n    timeStamp: number;\\n}\\n\\n/**\\n * PerfMeasurement interface.\\n *\\n * @internal\\n */\\nexport declare interface IPerfMeasurement {\\n    totalDuration: number;\\n    count: number;\\n    all: IPerfData[];\\n}\\n\\n/**\\n * PerfSummary interface.\\n *\\n * @internal\\n */\\nexport declare interface IPerfSummary {\\n    [key: string]: IPerfMeasurement;\\n}\\n\\n/**\\n * Point interface.\\n *\\n * @public\\n * @deprecated Use `Point` instead.\\n * {@docCategory Point}\\n */\\nexport declare interface IPoint extends Point {\\n}\\n\\nexport declare interface IPropsWithStyles<TStyleProps, TStyleSet extends IStyleSet<TStyleSet>> {\\n    styles?: IStyleFunctionOrObject<TStyleProps, TStyleSet>;\\n}\\n\\n/**\\n * Rectangle interface.\\n *\\n * @public\\n * {@docCategory IRectangle}\\n */\\nexport declare interface IRectangle {\\n    left: number;\\n    top: number;\\n    width: number;\\n    height: number;\\n    right?: number;\\n    bottom?: number;\\n}\\n\\nexport declare type IRefObject<T> = React.RefObject<T> | RefObject<T> | ((ref: T | null) => void);\\n\\n/**\\n * An interface representing a component that will not output any DOM, will just render its children and\\n * pass through items to modify the children.\\n *\\n * {@docCategory IRenderComponent}\\n */\\nexport declare interface IRenderComponent<TProps> {\\n    /**\\n     * JSX.Element to return in this component's render() function.\\n     */\\n    children: (props: TProps) => JSX.Element;\\n}\\n\\n/**\\n * Render function interface for providing overrideable render callbacks.\\n *\\n * @public\\n */\\nexport declare interface IRenderFunction<P> {\\n    (props?: P, defaultRender?: (props?: P) => JSX.Element | null): JSX.Element | null;\\n}\\n\\n/**\\n * Determines whether a component is controlled.\\n * @param props - Component props\\n * @param valueProp - Prop containing the controlled value\\n * @returns true if controlled, false if uncontrolled\\n */\\nexport declare function isControlled<P>(props: P, valueProp: keyof P): boolean;\\n\\n/**\\n * Returns true if the keycode is a directional keyboard key.\\n */\\nexport declare function isDirectionalKeyCode(which: number): boolean;\\n\\n/**\\n * {@docCategory Selection}\\n */\\nexport declare interface ISelection<TItem = IObjectWithKey> {\\n    count: number;\\n    mode: SelectionMode;\\n    canSelectItem: (item: TItem, index?: number) => boolean;\\n    setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void;\\n    setItems(items: TItem[], shouldClear: boolean): void;\\n    getItems(): TItem[];\\n    getSelection(): TItem[];\\n    getSelectedIndices(): number[];\\n    getSelectedCount(): number;\\n    isRangeSelected(fromIndex: number, count: number): boolean;\\n    isAllSelected(): boolean;\\n    isKeySelected(key: string): boolean;\\n    isIndexSelected(index: number): boolean;\\n    isModal?(): boolean;\\n    setAllSelected(isAllSelected: boolean): void;\\n    setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void;\\n    setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void;\\n    setModal?(isModal: boolean): void;\\n    selectToKey(key: string, clearSelection?: boolean): void;\\n    selectToIndex(index: number, clearSelection?: boolean): void;\\n    toggleAllSelected(): void;\\n    toggleKeySelected(key: string): void;\\n    toggleIndexSelected(index: number): void;\\n    toggleRangeSelected(fromIndex: number, count: number): void;\\n}\\n\\n/**\\n * {@docCategory Selection}\\n */\\nexport declare interface ISelectionOptions<TItem = IObjectWithKey> {\\n    onSelectionChanged?: () => void;\\n    /** Custom logic to generate item keys. Required if `TItem` does not have a `key` property. */\\n    getKey?: (item: TItem, index?: number) => string | number;\\n    canSelectItem?: (item: TItem, index?: number) => boolean;\\n    selectionMode?: SelectionMode;\\n    items?: TItem[];\\n}\\n\\n/**\\n * Selection options with required `getKey` property.\\n * {@docCategory Selection}\\n */\\nexport declare type ISelectionOptionsWithRequiredGetKey<TItem> = ISelectionOptions<TItem> & Required<Pick<ISelectionOptions<TItem>, 'getKey'>>;\\n\\n/**\\n * Determines if a given element is a focus sub zone.\\n *\\n * @public\\n */\\nexport declare function isElementFocusSubZone(element?: HTMLElement): boolean;\\n\\n/**\\n * Determines if a given element is a focus zone.\\n *\\n * @public\\n */\\nexport declare function isElementFocusZone(element?: HTMLElement): boolean;\\n\\n/**\\n * Determines if an element can receive focus programmatically or via a mouse click.\\n * If checkTabIndex is true, additionally checks to ensure the element can be focused with the tab key,\\n * meaning tabIndex != -1.\\n *\\n * @public\\n */\\nexport declare function isElementTabbable(element: HTMLElement, checkTabIndex?: boolean): boolean;\\n\\n/**\\n * Determines if an element is visible.\\n *\\n * @public\\n */\\nexport declare function isElementVisible(element: HTMLElement | undefined | null): boolean;\\n\\n/**\\n * Serializable object.\\n *\\n * @internal\\n */\\nexport declare interface ISerializableObject {\\n    toString?: () => string;\\n}\\n\\nexport declare type ISettings = {\\n    [key: string]: any;\\n};\\n\\nexport declare type ISettingsFunction = (settings: ISettings) => ISettings;\\n\\nexport declare type ISettingsMap<T> = {\\n    [P in keyof T]?: string;\\n};\\n\\nexport declare const IsFocusVisibleClassName = \\\"ms-Fabric--isFocusVisible\\\";\\n\\nexport declare const isIE11: () => boolean;\\n\\n/**\\n * Returns true if and only if the user is on a iOS device.\\n * Used to determine whether iOS-specific behavior should be applied.\\n */\\nexport declare const isIOS: () => boolean;\\n\\n/**\\n * {@docCategory ISize}\\n */\\nexport declare interface ISize {\\n    width: number;\\n    height: number;\\n}\\n\\n/**\\n * Returns true if the user is on a Mac. Caches the result value.\\n * @param reset - Reset the cached result value (mainly for testing).\\n */\\nexport declare function isMac(reset?: boolean): boolean;\\nexport { IStyleFunction }\\nexport { IStyleFunctionOrObject }\\nexport { isVirtualElement }\\nexport { IVirtualElement }\\n\\nexport declare interface IWarnControlledUsageParams<P> {\\n    /** ID of the component instance. Used to prevent showing warnings repeatedly. */\\n    componentId: string;\\n    /** Name of the component class. */\\n    componentName: string;\\n    /** Current props to evaluate. */\\n    props: P;\\n    /** Previous props to evaluate (undefined if called in the constructor). */\\n    oldProps?: P;\\n    /** Name of the prop for the controlled value. */\\n    valueProp: keyof P;\\n    /** Name of the prop for the uncontrolled initial value. */\\n    defaultValueProp: keyof P;\\n    /** Name of the change handler prop. */\\n    onChangeProp: keyof P;\\n    /** Name of the read-only prop. */\\n    readOnlyProp?: keyof P;\\n}\\n\\n/**\\n * Simulated enum for keycodes. These will get inlined by uglify when used much like an enum\\n *\\n * @public\\n * {@docCategory KeyCodes}\\n */\\nexport declare const KeyCodes: {\\n    backspace: 8;\\n    tab: 9;\\n    enter: 13;\\n    shift: 16;\\n    ctrl: 17;\\n    alt: 18;\\n    pauseBreak: 19;\\n    capslock: 20;\\n    escape: 27;\\n    space: 32;\\n    pageUp: 33;\\n    pageDown: 34;\\n    end: 35;\\n    home: 36;\\n    left: 37;\\n    up: 38;\\n    right: 39;\\n    down: 40;\\n    insert: 45;\\n    del: 46;\\n    zero: 48;\\n    one: 49;\\n    two: 50;\\n    three: 51;\\n    four: 52;\\n    five: 53;\\n    six: 54;\\n    seven: 55;\\n    eight: 56;\\n    nine: 57;\\n    a: 65;\\n    b: 66;\\n    c: 67;\\n    d: 68;\\n    e: 69;\\n    f: 70;\\n    g: 71;\\n    h: 72;\\n    i: 73;\\n    j: 74;\\n    k: 75;\\n    l: 76;\\n    m: 77;\\n    n: 78;\\n    o: 79;\\n    p: 80;\\n    q: 81;\\n    r: 82;\\n    s: 83;\\n    t: 84;\\n    u: 85;\\n    v: 86;\\n    w: 87;\\n    x: 88;\\n    y: 89;\\n    z: 90;\\n    leftWindow: 91;\\n    rightWindow: 92;\\n    select: 93;\\n    zero_numpad: 96;\\n    one_numpad: 97;\\n    two_numpad: 98;\\n    three_numpad: 99;\\n    four_numpad: 100;\\n    five_numpad: 101;\\n    six_numpad: 102;\\n    seven_numpad: 103;\\n    eight_numpad: 104;\\n    nine_numpad: 105;\\n    multiply: 106;\\n    add: 107;\\n    subtract: 109;\\n    decimalPoint: 110;\\n    divide: 111;\\n    f1: 112;\\n    f2: 113;\\n    f3: 114;\\n    f4: 115;\\n    f5: 116;\\n    f6: 117;\\n    f7: 118;\\n    f8: 119;\\n    f9: 120;\\n    f10: 121;\\n    f11: 122;\\n    f12: 123;\\n    numlock: 144;\\n    scrollLock: 145;\\n    semicolon: 186;\\n    equalSign: 187;\\n    comma: 188;\\n    dash: 189;\\n    period: 190;\\n    forwardSlash: 191;\\n    graveAccent: 192;\\n    openBracket: 219;\\n    backSlash: 220;\\n    closeBracket: 221;\\n    singleQuote: 222;\\n};\\n\\nexport declare type KeyCodes = number;\\n\\n/**\\n * An array of LABEL tag properties and events.\\n *\\n * @public\\n */\\nexport declare const labelProperties: Record<string, number>;\\n\\n/**\\n * An array of LI tag properties and events.\\n *\\n * @public\\n */\\nexport declare const liProperties: Record<string, number>;\\n\\n/**\\n * Takes an enum and iterates over each value of the enum (as a string), running the callback on each,\\n * returning a mapped array.\\n * @param theEnum - Enum to iterate over\\n * @param callback - The first parameter the name of the entry, and the second parameter is the value\\n * of that entry, which is the value you'd normally use when using the enum (usually a number).\\n */\\nexport declare function mapEnumByName<T>(theEnum: any, callback: (name?: string, value?: string | number) => T | undefined): (T | undefined)[] | undefined;\\n\\n/**\\n * Memoize decorator to be used on class methods. WARNING: the `this` reference\\n * will be inaccessible within a memoized method, given that a cached method's `this`\\n * would not be instance-specific.\\n *\\n * @public\\n */\\nexport declare function memoize<T extends Function>(target: any, key: string, descriptor: TypedPropertyDescriptor<T>): {\\n    configurable: boolean;\\n    get(): T;\\n};\\n\\n/**\\n * Memoizes a function; when you pass in the same parameters multiple times, it returns a cached result.\\n * Be careful when passing in objects, you need to pass in the same INSTANCE for caching to work. Otherwise\\n * it will grow the cache unnecessarily. Also avoid using default values that evaluate functions; passing in\\n * undefined for a value and relying on a default function will execute it the first time, but will not\\n * re-evaluate subsequent times which may have been unexpected.\\n *\\n * By default, the cache will reset after 100 permutations, to avoid abuse cases where the function is\\n * unintendedly called with unique objects. Without a reset, the cache could grow infinitely, so we safeguard\\n * by resetting. To override this behavior, pass a value of 0 to the maxCacheSize parameter.\\n *\\n * @public\\n * @param cb - The function to memoize.\\n * @param maxCacheSize - Max results to cache. If the cache exceeds this value, it will reset on the next call.\\n * @param ignoreNullOrUndefinedResult - Flag to decide whether to cache callback result if it is undefined/null.\\n * If the flag is set to true, the callback result is recomputed every time till the callback result is\\n * not undefined/null for the first time, and then the non-undefined/null version gets cached.\\n * @returns A memoized version of the function.\\n */\\nexport declare function memoizeFunction<T extends (...args: any[]) => RetType, RetType>(cb: T, maxCacheSize?: number, ignoreNullOrUndefinedResult?: boolean): T;\\n\\n/**\\n * Simple deep merge function. Takes all arguments and returns a deep copy of the objects merged\\n * together in the order provided. If an object creates a circular reference, it will assign the\\n * original reference.\\n */\\nexport declare function merge<T = {}>(target: Partial<T>, ...args: (Partial<T> | null | undefined | false)[]): T;\\n\\n/**\\n * ARIA helper to concatenate attributes, returning undefined if all attributes\\n * are undefined. (Empty strings are not a valid ARIA attribute value.)\\n *\\n * @param ariaAttributes - ARIA attributes to merge\\n */\\nexport declare function mergeAriaAttributeValues(...ariaAttributes: (string | undefined | false)[]): string | undefined;\\n\\n/**\\n * Merge props and customizations giving priority to props over context.\\n * NOTE: This function will always perform multiple merge operations. Use with caution.\\n * @param props - New settings to merge in.\\n * @param parentContext - Context containing current settings.\\n * @returns Merged customizations.\\n */\\nexport declare function mergeCustomizations(props: ICustomizerProps, parentContext: ICustomizerContext): ICustomizerContext;\\n\\nexport declare function mergeScopedSettings(oldSettings?: ISettings, newSettings?: ISettings | ISettingsFunction): ISettings;\\n\\n/**\\n * Merge new and old settings, giving priority to new settings.\\n * New settings is optional in which case oldSettings is returned as-is.\\n * @param oldSettings - Old settings to fall back to.\\n * @param newSettings - New settings that will be merged over oldSettings.\\n * @returns Merged settings.\\n */\\nexport declare function mergeSettings(oldSettings?: ISettings, newSettings?: ISettings | ISettingsFunction): ISettings;\\n\\n/**\\n * The helper functions here will make the target element as modal to screen readers, by placing aria-hidden on elements\\n * that are siblings to the target element and the target element's ancestors (because aria-hidden gets inherited).\\n * That way, all other elements on the page are hidden to the screen reader.\\n */\\n/**\\n * Call this on a target element to make it modal to screen readers.\\n * Returns a function that undoes the changes it made.\\n */\\nexport declare function modalize(target: HTMLElement): () => void;\\n\\n/**\\n * Simple constant function for returning null, used to render empty templates in JSX.\\n *\\n * @public\\n */\\nexport declare function nullRender(): JSX.Element | null;\\n\\n/**\\n * An array of OL tag properties and events.\\n *\\n * @public\\n */\\nexport declare const olProperties: Record<string, number>;\\nexport { Omit }\\n\\n/**\\n * Tiny helper to do the minimal amount of work in duplicating an object but omitting some\\n * props. This ends up faster than using object ...rest or reduce to filter.\\n *\\n * This behaves very much like filteredAssign, but does not merge many objects together,\\n * uses an exclusion object map, and avoids spreads all for optimal performance.\\n *\\n * See perf test for background:\\n * https://jsperf.com/omit-vs-rest-vs-reduce/1\\n *\\n * @param obj - The object to clone\\n * @param exclusions - The array of keys to exclude\\n */\\nexport declare function omit<TObj extends Record<string, any>>(obj: TObj, exclusions: (keyof TObj)[]): TObj;\\n\\nexport declare function on(element: Element | Window | Document, eventName: string, callback: (ev: Event) => void, options?: boolean): () => void;\\n\\nexport declare const optionProperties: Record<string, number>;\\n\\n/**\\n * Point interface.\\n *\\n * @public\\n * {@docCategory Point}\\n */\\nexport declare interface Point {\\n    left?: number;\\n    top?: number;\\n    /** @deprecated Use `left` instead */\\n    x?: number;\\n    /** @deprecated Use `top` instead */\\n    y?: number;\\n}\\nexport { portalContainsElement }\\n\\n/**\\n * Rounds a number to a certain level of precision. Accepts negative precision.\\n * @param value - The value that is being rounded.\\n * @param precision - The number of decimal places to round the number to\\n */\\nexport declare function precisionRound(value: number, precision: number, base?: number): number;\\n\\n/** Raises a click event. */\\nexport declare function raiseClick(target: Element): void;\\n\\n/**\\n * Rectangle helper class.\\n *\\n * @public\\n * {@docCategory Rectangle}\\n */\\nexport declare class Rectangle {\\n    top: number;\\n    bottom: number;\\n    left: number;\\n    right: number;\\n    constructor(left?: number, right?: number, top?: number, bottom?: number);\\n    /**\\n     * Calculated automatically by subtracting the right from left\\n     */\\n    readonly width: number;\\n    /**\\n     * Calculated automatically by subtracting the bottom from top.\\n     */\\n    readonly height: number;\\n    /**\\n     * Tests if another rect is approximately equal to this rect (within 4 decimal places.)\\n     */\\n    equals(rect: Rectangle): boolean;\\n}\\n\\nexport declare type RefObject<T> = {\\n    (component: T | null): void;\\n    current: T | null;\\n};\\n\\n/**\\n * Given an array, it returns a new array that does not contain the item at the given index.\\n * @param array - The array to operate on\\n * @param index - The index of the element to remove\\n */\\nexport declare function removeIndex<T>(array: T[], index: number): T[];\\n\\n/**\\n * Given an array, this function returns a new array where the element at a given index has been replaced.\\n * @param array - The array to operate on\\n * @param newElement - The element that will be placed in the new array\\n * @param index - The index of the element that should be replaced\\n */\\nexport declare function replaceElement<T>(array: T[], newElement: T, index: number): T[];\\n\\n/** Reset controlled usage warnings for testing purposes. */\\nexport declare function resetControlledWarnings(): void;\\n\\n/**\\n * Resets id counter to an (optional) number.\\n *\\n * @public\\n */\\nexport declare function resetIds(counter?: number): void;\\n\\n/**\\n * Reset memoizations.\\n */\\nexport declare function resetMemoizations(): void;\\n\\n/**\\n * Generates a function to be attached to a React component, which can be called\\n * as a replacement to RAF. In-flight async calls will be auto canceled if the component\\n * is unmounting before the async code is executed, preventing bugs where code\\n * accesses things within the component after being unmounted.\\n */\\nexport declare const safeRequestAnimationFrame: (component: React.Component<{}, {}, any>) => (cb: Function) => void;\\n\\n/**\\n * Generates a function to be attached to a React component, which can be called\\n * as a replacement to setTimeout. In-flight async calls will be auto canceled if the component\\n * is unmounting before the async code is executed, preventing bugs where code\\n * accesses things within the component after being unmounted.\\n */\\nexport declare const safeSetTimeout: (component: React.Component<{}, {}, any>) => (cb: Function, duration: number) => void;\\n\\n/**\\n * {@docCategory Selection}\\n */\\nexport declare class Selection<TItem = IObjectWithKey> implements ISelection<TItem> {\\n    /** Number of items selected. Do not modify. */\\n    count: number;\\n    readonly mode: SelectionMode;\\n    private _getKey;\\n    private _canSelectItem;\\n    private _changeEventSuppressionCount;\\n    private _items;\\n    private _selectedItems;\\n    private _selectedIndices;\\n    private _isAllSelected;\\n    private _exemptedIndices;\\n    private _exemptedCount;\\n    private _keyToIndexMap;\\n    private _anchoredIndex;\\n    private _onSelectionChanged;\\n    private _hasChanged;\\n    private _unselectableIndices;\\n    private _unselectableCount;\\n    private _isModal;\\n    /**\\n     * Create a new Selection. If `TItem` does not have a `key` property, you must provide an options\\n     * object with a `getKey` implementation. Providing options is optional otherwise.\\n     * (At most one `options` object is accepted.)\\n     */\\n    constructor(...options: TItem extends IObjectWithKey ? [] | [ISelectionOptions<TItem>] : [ISelectionOptionsWithRequiredGetKey<TItem>]);\\n    canSelectItem(item: TItem, index?: number): boolean;\\n    getKey(item: TItem, index?: number): string;\\n    setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void;\\n    isModal(): boolean;\\n    setModal(isModal: boolean): void;\\n    /**\\n     * Selection needs the items, call this method to set them. If the set\\n     * of items is the same, this will re-evaluate selection and index maps.\\n     * Otherwise, shouldClear should be set to true, so that selection is\\n     * cleared.\\n     */\\n    setItems(items: TItem[], shouldClear?: boolean): void;\\n    getItems(): TItem[];\\n    getSelection(): TItem[];\\n    getSelectedCount(): number;\\n    getSelectedIndices(): number[];\\n    isRangeSelected(fromIndex: number, count: number): boolean;\\n    isAllSelected(): boolean;\\n    isKeySelected(key: string): boolean;\\n    isIndexSelected(index: number): boolean;\\n    setAllSelected(isAllSelected: boolean): void;\\n    setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void;\\n    setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void;\\n    selectToKey(key: string, clearSelection?: boolean): void;\\n    selectToIndex(index: number, clearSelection?: boolean): void;\\n    toggleAllSelected(): void;\\n    toggleKeySelected(key: string): void;\\n    toggleIndexSelected(index: number): void;\\n    toggleRangeSelected(fromIndex: number, count: number): void;\\n    private _updateCount;\\n    private _setAllSelected;\\n    private _change;\\n}\\n\\nexport declare const SELECTION_CHANGE = \\\"change\\\";\\n\\n/**\\n * {@docCategory Selection}\\n */\\nexport declare enum SelectionDirection {\\n    horizontal = 0,\\n    vertical = 1\\n}\\n\\n/**\\n * {@docCategory Selection}\\n */\\nexport declare enum SelectionMode {\\n    none = 0,\\n    single = 1,\\n    multiple = 2\\n}\\n\\n/**\\n * An array of SELECT tag properties and events.\\n *\\n * @public\\n */\\nexport declare const selectProperties: Record<string, number>;\\n\\n/** Gets the current base url used for fetching images. */\\nexport declare function setBaseUrl(baseUrl: string): void;\\n\\n/**\\n * Sets the visibility of focus styling.\\n *\\n * By default, focus styles (the box surrounding a focused Button, for example) only show up when navigational\\n * keypresses occur (through Tab, arrows, PgUp/PgDn, Home and End), and are hidden when mouse interactions occur.\\n * This API provides an imperative way to turn them on/off.\\n *\\n * A use case might be when you have a keypress like ctrl-f6 navigate to a particular region on the page,\\n * and want focus to show up.\\n *\\n * @param enabled - whether to remove or add focus\\n * @param target - optional target\\n */\\nexport declare function setFocusVisibility(enabled: boolean, target?: Element): void;\\n\\n/**\\n * Sets the language for the page (by adjusting the lang attribute of the html element).\\n * @param language - Language to set.\\n * @param persistenceType - Where to persist the value. Default is `localStorage` if available.\\n * (In version 8, the default will be `sessionStorage`.)\\n */\\nexport declare function setLanguage(language: string, persistenceType?: 'localStorage' | 'sessionStorage' | 'none'): void;\\n\\n/**\\n * Sets the language for the page (by adjusting the lang attribute of the html element).\\n * @deprecated Use string parameter version.\\n * @param language - Language to set.\\n * @param avoidPersisting - If true, don't store the value.\\n */\\nexport declare function setLanguage(language: string, avoidPersisting?: boolean): void;\\n\\n/**\\n *  Test utility for providing a custom weakmap.\\n *\\n * @internal\\n * */\\nexport declare function setMemoizeWeakMap(weakMap: any): void;\\nexport { setPortalAttribute }\\n\\n/**\\n * Sets the rtl state of the page (by adjusting the dir attribute of the html element.)\\n */\\nexport declare function setRTL(isRTL: boolean, persistSetting?: boolean): void;\\n\\n/**\\n * Helper to set ssr mode to simulate no window object returned from getWindow helper.\\n *\\n * @public\\n */\\nexport declare function setSSR(isEnabled: boolean): void;\\n\\n/**\\n * @deprecated Use ISettings.\\n */\\nexport declare type Settings = ISettings;\\n\\n/**\\n * @deprecated Use ISettingsFunction.\\n */\\nexport declare type SettingsFunction = ISettingsFunction;\\nexport { setVirtualParent }\\n\\n/**\\n * Configures the warning callback. Passing in undefined will reset it to use the default\\n * console.warn function.\\n *\\n * @public\\n * @param warningCallback - Callback to override the generated warnings.\\n */\\nexport declare function setWarningCallback(warningCallback?: (message: string) => void): void;\\n\\n/**\\n * Compares a to b and b to a.\\n *\\n * @public\\n */\\nexport declare function shallowCompare<TA extends any, TB extends any>(a: TA, b: TB): boolean;\\n\\n/**\\n * Determines if an, or any of its ancestors, sepcificies that it doesn't want focus to wrap\\n * @param element - element to start searching from\\n * @param noWrapDataAttribute - the no wrap data attribute to match (either)\\n * @returns true if focus should wrap, false otherwise\\n */\\nexport declare function shouldWrapFocus(element: HTMLElement, noWrapDataAttribute: 'data-no-vertical-wrap' | 'data-no-horizontal-wrap'): boolean;\\n\\n/**\\n * The styled HOC wrapper allows you to create a functional wrapper around a given component which will resolve\\n * getStyles functional props, and mix customized props passed in using concatStyleSets.\\n *\\n * @example\\n * ```tsx\\n * export const Toggle = styled(\\n *   ToggleBase,\\n *   props => ({ root: { background: 'red' }})\\n * );\\n * ```\\n * @param Component - The unstyled base component to render, which receives styles.\\n * @param baseStyles - The styles which should be curried with the component.\\n * @param getProps - A helper which provides default props.\\n * @param customizable - An object which defines which props can be customized using the Customizer.\\n * @param pure - A boolean indicating if the component should avoid re-rendering when props haven't changed.\\n * Note that pure should not be used on components which allow children, or take in complex objects or\\n * arrays as props which could mutate on every render.\\n */\\nexport declare function styled<TComponentProps extends IPropsWithStyles<TStyleProps, TStyleSet>, TStyleProps, TStyleSet extends IStyleSet<TStyleSet>>(Component: React.ComponentClass<TComponentProps> | React.FunctionComponent<TComponentProps>, baseStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>, getProps?: (props: TComponentProps) => Partial<TComponentProps>, customizable?: ICustomizableProps, pure?: boolean): React.FunctionComponent<TComponentProps>;\\n\\nexport declare function styled<TComponentProps extends IPropsWithStyles<TStyleProps, TStyleSet> & React.RefAttributes<TRef>, TStyleProps, TStyleSet extends IStyleSet<TStyleSet>, TRef = unknown>(Component: React.ComponentClass<TComponentProps> | React.FunctionComponent<TComponentProps>, baseStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>, getProps?: (props: TComponentProps) => Partial<TComponentProps>, customizable?: ICustomizableProps, pure?: boolean): React.ForwardRefExoticComponent<React.PropsWithoutRef<TComponentProps> & React.RefAttributes<TRef>>;\\n\\nexport declare type StyleFunction<TStyleProps, TStyleSet> = IStyleFunctionOrObject<TStyleProps, TStyleSet> & {\\n    /** Cache for all style functions. */\\n    __cachedInputs__: (IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined)[];\\n    /** True if no styles prop or styles from Customizer is passed to wrapped component. */\\n    __noStyleOverride__: boolean;\\n};\\n\\n/**\\n * An array of TABLE tag properties and events.\\n *\\n * @public\\n */\\nexport declare const tableProperties: Record<string, number>;\\n\\n/**\\n * An array of TD tag properties and events.\\n *\\n * @public\\n */\\nexport declare const tdProperties: Record<string, number>;\\n\\n/**\\n * An array of TEXTAREA tag properties and events.\\n *\\n * @public\\n */\\nexport declare const textAreaProperties: Record<string, number>;\\n\\n/**\\n * An array of TH tag properties and events.\\n *\\n * @public\\n */\\nexport declare const thProperties: Record<string, number>;\\n\\n/**\\n * Convert the given array to a matrix with columnCount number\\n * of columns.\\n *\\n * @public\\n * @param items - The array to convert\\n * @param columnCount - The number of columns for the resulting matrix\\n * @returns A matrix of items\\n */\\nexport declare function toMatrix<T>(items: T[], columnCount: number): T[][];\\n\\n/**\\n * An array of TR tag properties and events.\\n *\\n * @public\\n */\\nexport declare const trProperties: Record<string, number>;\\n\\n/**\\n * Provides a method for convenience to unhoist hoisted methods.\\n *\\n * @public\\n * @param source - The source object upon which methods were hoisted.\\n * @param methodNames - An array of method names to unhoist.\\n */\\nexport declare function unhoistMethods(source: any, methodNames: string[]): void;\\n\\n/**\\n * Hook to get Customizations settings from Customizations singleton or CustomizerContext.\\n * It will trigger component state update on settings change observed.\\n */\\nexport declare function useCustomizationSettings(properties: string[], scopeName?: string): ISettings;\\n\\n/**\\n * Initializes the logic which:\\n *\\n * 1. Subscribes keydown and mousedown events. (It will only do it once per window,\\n *    so it's safe to call this method multiple times.)\\n * 2. When the user presses directional keyboard keys, adds the 'ms-Fabric--isFocusVisible' classname\\n *    to the document body, removes the 'ms-Fabric-isFocusHidden' classname.\\n * 3. When the user clicks a mouse button, adds the 'ms-Fabric-isFocusHidden' classname to the\\n *    document body, removes the 'ms-Fabric--isFocusVisible' classname.\\n *\\n * This logic allows components on the page to conditionally render focus treatments based on\\n * the existence of global classnames, which simplifies logic overall.\\n *\\n * @param rootRef - A Ref object. Focus rectangle can be applied on itself and all its children.\\n */\\nexport declare function useFocusRects(rootRef?: React.RefObject<HTMLElement>): void;\\n\\n/**\\n * Get all values in an object dictionary\\n *\\n * @param obj - The dictionary to get values for\\n */\\nexport declare function values<T>(obj: any): T[];\\n\\n/**\\n * An array of VIDEO tag properties and events.\\n *\\n * @public\\n */\\nexport declare const videoProperties: Record<string, number>;\\n\\n/**\\n * Sends a warning to console, if the api is present.\\n *\\n * @public\\n * @param message - Warning message.\\n */\\nexport declare function warn(message: string): void;\\n\\n/**\\n * Warns when props are required if a condition is met.\\n *\\n * @public\\n * @param componentName - The name of the component being used.\\n * @param props - The props passed into the component.\\n * @param requiredProps - The name of the props that are required when the condition is met.\\n * @param conditionalPropName - The name of the prop that the condition is based on.\\n * @param condition - Whether the condition is met.\\n */\\nexport declare function warnConditionallyRequiredProps<P>(componentName: string, props: P, requiredProps: string[], conditionalPropName: string, condition: boolean): void;\\n\\n/**\\n * Check for and warn on the following error conditions with a form component:\\n * - A value prop is provided (indicated it's being used as controlled) without a change handler,\\n *    and the component is not read-only\\n * - Both the value and defaultValue props are provided\\n * - The component is attempting to switch between controlled and uncontrolled\\n *\\n * The messages mimic the warnings React gives for these error conditions on input elements.\\n * The warning will only be displayed once per component ID.\\n */\\nexport declare function warnControlledUsage<P>(params: IWarnControlledUsageParams<P>): void;\\n\\n/**\\n * Warns when a deprecated props are being used.\\n *\\n * @public\\n * @param componentName - The name of the component being used.\\n * @param props - The props passed into the component.\\n * @param deprecationMap - The map of deprecations, where key is the prop name and the value is\\n * either null or a replacement prop name.\\n */\\nexport declare function warnDeprecations<P>(componentName: string, props: P, deprecationMap: ISettingsMap<P>): void;\\n\\n/**\\n * Warns when two props which are mutually exclusive are both being used.\\n *\\n * @public\\n * @param componentName - The name of the component being used.\\n * @param props - The props passed into the component.\\n * @param exclusiveMap - A map where the key is a parameter, and the value is the other parameter.\\n */\\nexport declare function warnMutuallyExclusive<P>(componentName: string, props: P, exclusiveMap: ISettingsMap<P>): void;\\n\\nexport { }\\n\"\n\n//# sourceURL=webpack:///../tsx-editor/dist/types/utilities.d.ts?/mnt/work/5/s/node_modules/raw-loader");

/***/ })

}]);