{"version":3,"file":"CollapsibleSection.state.js","sourceRoot":"../src/","sources":["components/CollapsibleSection/CollapsibleSection.state.tsx"],"names":[],"mappings":";AACA,OAAO,EAAE,WAAW,EAAE,mBAAmB,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AACjE,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AACtD,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAOnD,MAAM,CAAC,IAAM,0BAA0B,GAA0C,UAC/E,KAAyC;IAEzC,IAAM,eAAe,GAAG,MAAM,CAA2B,IAAI,CAAC,CAAC;IAEzD,IAAA;;;MAGJ,EAHK,iBAAS,EAAE,oBAGhB,CAAC;IAEH,mBAAmB,CAAC,KAAK,CAAC,YAAY,EAAE,cAAM,OAAA,CAAC;QAC7C,KAAK,EAAE;YACL,eAAe,CAAC,OAAO,IAAI,eAAe,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QAC7D,CAAC;KACF,CAAC,EAJ4C,CAI5C,CAAC,CAAC;IAEJ,IAAM,QAAQ,GAAG,WAAW,CAC1B,UAAC,EAA6B;QAC5B,YAAY,CAAC,CAAC,SAAS,CAAC,CAAC;QACzB,EAAE,CAAC,cAAc,EAAE,CAAC;QACpB,EAAE,CAAC,eAAe,EAAE,CAAC;IACvB,CAAC,EACD,CAAC,SAAS,EAAE,YAAY,CAAC,CAC1B,CAAC;IAEF,IAAM,UAAU,GAAG,WAAW,CAC5B,UAAC,EAAgC;QAC/B,IAAM,WAAW,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;QAC9D,IAAM,SAAS,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC;QAE5D,IAAI,EAAE,CAAC,KAAK,KAAK,WAAW,IAAI,CAAC,SAAS,EAAE;YAC1C,YAAY,CAAC,IAAI,CAAC,CAAC;YACnB,EAAE,CAAC,cAAc,EAAE,CAAC;YACpB,EAAE,CAAC,eAAe,EAAE,CAAC;SACtB;aAAM,IAAI,EAAE,CAAC,KAAK,KAAK,SAAS,IAAI,SAAS,EAAE;YAC9C,YAAY,CAAC,KAAK,CAAC,CAAC;YACpB,EAAE,CAAC,cAAc,EAAE,CAAC;YACpB,EAAE,CAAC,eAAe,EAAE,CAAC;SACtB;IACH,CAAC,EACD,CAAC,SAAS,EAAE,YAAY,CAAC,CAC1B,CAAC;IAEF,IAAM,cAAc,GAAG,WAAW,CAAC,UAAC,EAAgC;QAClE,IAAM,OAAO,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;QAE1D,6FAA6F;QAC7F,oBAAoB;QACpB,IACE,EAAE,CAAC,KAAK,KAAK,OAAO;YACpB,EAAE,CAAC,MAAM,KAAK,eAAe,CAAC,OAAO;YACrC,eAAe,CAAC,OAAO;YACvB,CAAC,CAAC,EAAE,CAAC,MAAM,YAAY,mBAAmB,CAAC;YAC3C,CAAC,CAAC,EAAE,CAAC,MAAM,YAAY,gBAAgB,IAAI,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,EACrE;YACA,eAAe,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;YAChC,EAAE,CAAC,cAAc,EAAE,CAAC;YACpB,EAAE,CAAC,eAAe,EAAE,CAAC;SACtB;IACH,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,SAAS,yBACV,KAAK,KACR,SAAS,WAAA,EACT,OAAO,EAAE,QAAQ,EACjB,SAAS,EAAE,UAAU,EACrB,aAAa,EAAE,cAAc,EAC7B,eAAe,iBAAA,GAChB,CAAC;IAEF,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { useCallback, useImperativeHandle, useRef } from 'react';\nimport { useControlledState } from '../../Foundation';\nimport { getRTL, KeyCodes } from '../../Utilities';\nimport {\n  ICollapsibleSectionProps,\n  ICollapsibleSectionViewProps,\n  ICollapsibleSectionComponent,\n} from './CollapsibleSection.types';\n\nexport const useCollapsibleSectionState: ICollapsibleSectionComponent['state'] = (\n  props: Readonly<ICollapsibleSectionProps>,\n): ICollapsibleSectionViewProps => {\n  const titleElementRef = useRef<HTMLButtonElement | null>(null);\n\n  const [collapsed, setCollapsed] = useControlledState(props, 'collapsed', {\n    defaultPropName: 'defaultCollapsed',\n    defaultPropValue: false,\n  });\n\n  useImperativeHandle(props.componentRef, () => ({\n    focus: () => {\n      titleElementRef.current && titleElementRef.current.focus();\n    },\n  }));\n\n  const _onClick = useCallback(\n    (ev: React.MouseEvent<Element>) => {\n      setCollapsed(!collapsed);\n      ev.preventDefault();\n      ev.stopPropagation();\n    },\n    [collapsed, setCollapsed],\n  );\n\n  const _onKeyDown = useCallback(\n    (ev: React.KeyboardEvent<Element>) => {\n      const collapseKey = getRTL() ? KeyCodes.right : KeyCodes.left;\n      const expandKey = getRTL() ? KeyCodes.left : KeyCodes.right;\n\n      if (ev.which === collapseKey && !collapsed) {\n        setCollapsed(true);\n        ev.preventDefault();\n        ev.stopPropagation();\n      } else if (ev.which === expandKey && collapsed) {\n        setCollapsed(false);\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    },\n    [collapsed, setCollapsed],\n  );\n\n  const _onRootKeyDown = useCallback((ev: React.KeyboardEvent<Element>) => {\n    const rootKey = getRTL() ? KeyCodes.right : KeyCodes.left;\n\n    // If left/right keypress originates from text input or text area inside collapsible section,\n    // ignore the event.\n    if (\n      ev.which === rootKey &&\n      ev.target !== titleElementRef.current &&\n      titleElementRef.current &&\n      !(ev.target instanceof HTMLTextAreaElement) &&\n      !(ev.target instanceof HTMLInputElement && ev.target.type === 'text')\n    ) {\n      titleElementRef.current.focus();\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }, []);\n\n  const viewProps: ICollapsibleSectionViewProps = {\n    ...props,\n    collapsed,\n    onClick: _onClick,\n    onKeyDown: _onKeyDown,\n    onRootKeyDown: _onRootKeyDown,\n    titleElementRef,\n  };\n\n  return viewProps;\n};\n"]}