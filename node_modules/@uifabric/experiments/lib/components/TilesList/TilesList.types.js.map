{"version":3,"file":"TilesList.types.js","sourceRoot":"../src/","sources":["components/TilesList/TilesList.types.ts"],"names":[],"mappings":"AA+DA,MAAM,CAAN,IAAkB,aAiBjB;AAjBD,WAAkB,aAAa;IAC7B;;OAEG;IACH,iDAAI,CAAA;IACJ;;OAEG;IACH,mDAAK,CAAA;IACL;;OAEG;IACH,iDAAI,CAAA;IACJ;;OAEG;IACH,qEAAc,CAAA;AAChB,CAAC,EAjBiB,aAAa,KAAb,aAAa,QAiB9B","sourcesContent":["import * as React from 'react';\nimport { IRefObject, IBaseProps, ISize } from 'office-ui-fabric-react/lib/Utilities';\nimport { TilesList } from './TilesList';\nimport { IFocusZone } from 'office-ui-fabric-react/lib/FocusZone';\nimport { IListProps } from 'office-ui-fabric-react/lib/List';\nimport { IRenderFunction } from '@uifabric/utilities';\n\nexport interface ITilesGridItemCellProps<TItem> {\n  item: TItem;\n  finalSize: {\n    width: number;\n    height: number;\n  };\n  position: {\n    column: number;\n  };\n}\n\nexport interface ITilesListRowProps<TItem> {\n  cellElements: JSX.Element[];\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n}\n\nexport interface ITilesListRootProps<TItem> {\n  surfaceElement: JSX.Element | null;\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n  rowCount: number;\n  columnCount: number;\n}\n\nexport interface ITilesGridItem<TItem> {\n  /**\n   * A unique key to assign to the item within the grid.\n   * This is only used for reconciliation, not selection behavior.\n   */\n  key: string;\n  /**\n   * The content item to be rendered. This will be passed back to `onRender`.\n   */\n  content: TItem;\n  /**\n   * The desired dimensions of the item, used to compute aspect ratio.\n   * If not provided, this is assumed to be a square equivalent to the current row height.\n   */\n  desiredSize?: { width: number; height: number };\n  /**\n   * Set to true if the item is intended to be a placeholder\n   */\n  isPlaceholder?: boolean;\n  /**\n   * Invoked to render the virtual DOM for the item.\n   * This content will be rendered inside the cell allocated for the item.\n   * This is invoked if present, and only if `onRenderCell` is not provided.\n   */\n  onRender?: (content: TItem, finalSize?: ISize) => React.ReactNode;\n  /**\n   * Invoked to render the virtual DOM for the item in its positioned cell.\n   * Provided positioning and sizing information in addition to the item.\n   * Preferred over `onRender`.\n   */\n  onRenderCell?: (props: ITilesGridItemCellProps<TItem>) => JSX.Element | null;\n}\n\nexport const enum TilesGridMode {\n  /**\n   * Every item in the grid gets its own row.\n   */\n  none,\n  /**\n   * Items in the row are stacked without resizing until they overflow.\n   */\n  stack,\n  /**\n   * Items in the row are stretched proportionally if necessary to fill the row.\n   */\n  fill,\n  /**\n   * Items in the row are stretched horizontally only if necessary to fill the row.\n   */\n  fillHorizontal,\n}\n\nexport interface ITilesGridSegment<TItem> {\n  /**\n   * A unique key to assign to the grid segment.\n   * This will only be used for reconciliation.\n   */\n  key: string;\n  /**\n   * The items to render as part of a contiguous, flowing grid.\n   * All items will be rendered with the same base row height and margin.\n   */\n  items: ITilesGridItem<TItem>[];\n  /**\n   * The spacing to allocate between items.\n   */\n  spacing?: number;\n  /**\n   * The base height for each row.\n   */\n  minRowHeight: number;\n  /**\n   * A maximum number of rows to fill, before 'hiding' all other items in the grid.\n   */\n  maxRowCount?: number;\n  /**\n   * The maximum scale factor to use when stretching items to fill a row.\n   */\n  maxScaleFactor?: number;\n  /**\n   * The mode for the grid.\n   */\n  mode: TilesGridMode;\n  /**\n   * The top margin for the grid.\n   */\n  marginTop?: number;\n  /**\n   * The bottom margin for the grid.\n   */\n  marginBottom?: number;\n  /**\n   * The minimum aspect ratio for an item in the grid.\n   */\n  minAspectRatio?: number;\n  /**\n   * The maximum aspect ratio for an item in the grid.\n   */\n  maxAspectRatio?: number;\n  /**\n   * Set to true if the item is intended to be a placeholder\n   */\n  isPlaceholder?: boolean;\n}\n\nexport { ISize as ITileSize };\n\nexport interface ITilesListProps<TItem>\n  extends IBaseProps,\n    React.Props<TilesList<TItem>>, // eslint-disable-line deprecation/deprecation\n    React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * An array of items to assign to the list.\n   * This should be complete and not contain any holes.\n   * The items may either be header row specifications, or grid specifications which each\n   * define their own items.\n   */\n  items: (ITilesGridItem<TItem> | ITilesGridSegment<TItem>)[];\n  /**\n   * The desired number of content cells to render per page.\n   */\n  cellsPerPage?: number;\n  /**\n   * Component ref for the focus zone within the list. Use this to control auto-focus.\n   */\n  focusZoneComponentRef?: IRefObject<IFocusZone>;\n  /**\n   * Callback for when the active element within the list's FocusZone changes.\n   */\n  onActiveElementChanged?: (element: HTMLElement) => void;\n  /**\n   * props to pass through to the underlying List\n   */\n  listProps?: Partial<IListProps>;\n  /**\n   * Override to render a 'row' of tiles in the list.\n   * Use this to append accessibility semantics based on the tiles in a row.\n   */\n  onRenderRow?: IRenderFunction<ITilesListRowProps<TItem>>;\n  /**\n   * Override to render the 'root' element of the list.\n   * Use this to append accessibility semantics based on the final layout of the list.\n   */\n  onRenderRoot?: IRenderFunction<ITilesListRootProps<TItem>>;\n}\n"]}