{"version":3,"file":"SelectedItemsList.js","sourceRoot":"../src/","sources":["components/SelectedItemsList/SelectedItemsList.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ISelectedItemsList, ISelectedItemsListProps, BaseSelectedItem } from './SelectedItemsList.types';\n\nconst _SelectedItemsList = <TItem extends BaseSelectedItem>(\n  props: ISelectedItemsListProps<TItem>,\n  ref: React.Ref<ISelectedItemsList<TItem>>,\n) => {\n  const { dragDropEvents, dragDropHelper, selectedItems, defaultSelectedItems, replaceItem } = props;\n  const [items, setItems] = React.useState(selectedItems || defaultSelectedItems || []);\n\n  const renderedItems = React.useMemo(() => items, [items]);\n  const didMountRef = React.useRef(false);\n\n  React.useEffect(() => {\n    // block first call of the hook and forward each consecutive one\n    // We do this so that if defaultSelectedItems are set, they don't get overwritten\n    if (didMountRef.current) {\n      setItems(selectedItems || []);\n    } else {\n      didMountRef.current = true;\n    }\n  }, [selectedItems]);\n\n  const removeItems = (itemsToRemove: TItem[]): void => {\n    // Intentionally not using .filter here as we want to only remove a specific\n    // item in case of duplicates of same item.\n    const updatedItems: TItem[] = [...items];\n    itemsToRemove.forEach(item => {\n      const index: number = updatedItems.indexOf(item);\n      updatedItems.splice(index, 1);\n    });\n    setItems(updatedItems);\n    props.onItemsRemoved?.(itemsToRemove);\n  };\n\n  const _replaceItem = React.useCallback(\n    (newItem: TItem | TItem[], index: number): void => {\n      const newItemsArray = !Array.isArray(newItem) ? [newItem] : newItem;\n\n      if (index >= 0) {\n        const newItems: TItem[] = [...items];\n        newItems.splice(index, 1, ...newItemsArray);\n        setItems(newItems);\n        replaceItem?.(newItem, index);\n      }\n    },\n    [items, replaceItem],\n  );\n\n  const onRemoveItemCallbacks = React.useMemo(\n    () =>\n      // create callbacks ahead of time with memo.\n      // (hooks have to be called in the same order)\n      items.map((item: TItem) => () => removeItems([item])),\n    // TODO: consider whether dependency on removeItems should be added\n    // (removeItems would likely need to be wrapped in useCallback)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [items],\n  );\n\n  const SelectedItem = props.onRenderItem;\n  return (\n    <>\n      {items.length > 0 && (\n        <div role={'list'}>\n          {SelectedItem &&\n            renderedItems.map((item: TItem, index: number) => (\n              <SelectedItem\n                item={item}\n                index={index}\n                // To keep react from complaining for duplicate elements with the same key\n                // we will append the index to the key so that we have unique key for each item\n                key={item.key !== undefined ? item.key + '_' + index : index}\n                selected={props.focusedItemIndices?.includes(index)}\n                removeButtonAriaLabel={props.removeButtonAriaLabel}\n                onRemoveItem={onRemoveItemCallbacks[index]}\n                onItemChange={_replaceItem}\n                dragDropEvents={dragDropEvents}\n                dragDropHelper={dragDropHelper}\n                createGenericItem={props.createGenericItem}\n              />\n            ))}\n        </div>\n      )}\n    </>\n  );\n};\n\n// Typescript only respects unifying a generic type with a generic const _function_ of the same name for function types.\n// In order to satisfy the type checker, here we lie about the type of the const so that it is still a generic function.\nexport type SelectedItemsList<TItem extends BaseSelectedItem> = React.Component<ISelectedItemsListProps<TItem>>;\nexport const SelectedItemsList = React.forwardRef(_SelectedItemsList) as typeof _SelectedItemsList;\n"]}