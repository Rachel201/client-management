{"version":3,"file":"Toggle.view.js","sourceRoot":"../src/","sources":["components/Toggle/Toggle.view.tsx"],"names":[],"mappings":";AAAA,qBAAqB;AACrB,OAAO,EAAE,UAAU,EAAE,MAAM,uCAAuC,CAAC;AACnE,OAAO,EAAE,KAAK,EAAE,MAAM,mCAAmC,CAAC;AAE1D,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AACvD,OAAO,EAAE,eAAe,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAGlE,4CAA4C;AAE5C,kBAAkB;AAClB,MAAM,CAAC,IAAM,UAAU,GAA6B,UAAA,KAAK;IAErD,IAAA,aAAoB,EAApB,qCAAoB,EACpB,mBAAK,EACL,2BAAS,EACT,uBAAO,EACP,yBAAQ,EACR,yBAAQ,EACR,+BAAW,EACX,uBAAO,EACP,uCAAe,CACP;IACV,IAAM,iBAAiB,GAAG,cAAc,CAAC,KAAK,EAAE,eAAe,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAErF,IAAM,KAAK,GAAG,QAAQ,CAA6B,KAAK,EAAE;QACxD,IAAI,EAAE,QAAQ;QACd,KAAK,EAAE,KAAK;QACZ,SAAS,EAAE,KAAK;QAChB,IAAI,EAAE,QAAQ;QACd,KAAK,EAAE,KAAK;QACZ,IAAI,EAAE,KAAK;KACZ,CAAC,CAAC;IAEH,gEAAgE;IAChE,uBAAuB;IACvB,IAAM,EAAE,GAAG,SAAS,CAAC;IAErB,OAAO,CACL,UAAC,KAAK,CAAC,IAAI;QACT,UAAC,KAAK,CAAC,KAAK,IAAC,OAAO,EAAE,EAAE,IAAG,KAAK,CAAe;QAC/C,UAAC,KAAK,CAAC,SAAS;YACd,UAAC,UAAU,IACT,WAAW,EAAE,WAAW,EACxB,eAAe,EAAG,iBAAyB,CAAC,kBAAkB,CAAC,EAC/D,QAAQ,EAAE,QAAQ,IAEjB,UAAC,gBAAqB,IAAkB,OAAA,CACvC,UAAC,KAAK,CAAC,IAAI,eACL,iBAAiB,EACjB,gBAAgB,IACpB,QAAQ,EAAE,QAAQ,EAClB,EAAE,EAAE,EAAE,EACN,IAAI,EAAC,QAAQ,EACb,IAAI,EAAC,QAAQ,CAAC,8CAA8C;kBAC5D,GAAG,EAAE,eAAe,mBACL,QAAQ,kBACT,OAAO,gBACT,SAAS,uBACF,IAAI,EACvB,QAAQ,EAAE,QAAQ,EAClB,OAAO,EAAE,OAAO;gBAEhB,UAAC,KAAK,CAAC,KAAK,OAAG,CACJ,CACd,EAlBwC,CAkBxC,CACU;YACb,UAAC,KAAK,CAAC,IAAI,OAAG,CACE,CACP,CACd,CAAC;AACJ,CAAC,CAAC","sourcesContent":["/** @jsx withSlots */\nimport { KeytipData } from 'office-ui-fabric-react/lib/KeytipData';\nimport { Label } from '../../utilities/factoryComponents';\n\nimport { withSlots, getSlots } from '../../Foundation';\nimport { inputProperties, getNativeProps } from '../../Utilities';\nimport { IToggleComponent, IToggleProps, IToggleSlots } from './Toggle.types';\n\n/* eslint-disable deprecation/deprecation */\n\n/** @deprecated */\nexport const ToggleView: IToggleComponent['view'] = props => {\n  const {\n    as: RootType = 'div',\n    label,\n    ariaLabel,\n    checked,\n    disabled,\n    onChange,\n    keytipProps,\n    onClick,\n    toggleButtonRef,\n  } = props;\n  const toggleNativeProps = getNativeProps(props, inputProperties, ['defaultChecked']);\n\n  const Slots = getSlots<IToggleProps, IToggleSlots>(props, {\n    root: RootType,\n    label: Label,\n    container: 'div',\n    pill: 'button',\n    thumb: 'div',\n    text: Label,\n  });\n\n  // TODO: need to fix this._id usage. should _id come from state?\n  // const id = this._id;\n  const id = undefined;\n\n  return (\n    <Slots.root>\n      <Slots.label htmlFor={id}>{label}</Slots.label>\n      <Slots.container>\n        <KeytipData\n          keytipProps={keytipProps}\n          ariaDescribedBy={(toggleNativeProps as any)['aria-describedby']}\n          disabled={disabled}\n        >\n          {(keytipAttributes: any): JSX.Element => (\n            <Slots.pill\n              {...toggleNativeProps}\n              {...keytipAttributes}\n              disabled={disabled}\n              id={id}\n              type=\"button\"\n              role=\"switch\" // ARIA 1.1 definition; \"checkbox\" in ARIA 1.0\n              ref={toggleButtonRef}\n              aria-disabled={disabled}\n              aria-checked={checked}\n              aria-label={ariaLabel}\n              data-is-focusable={true}\n              onChange={onChange}\n              onClick={onClick}\n            >\n              <Slots.thumb />\n            </Slots.pill>\n          )}\n        </KeytipData>\n        <Slots.text />\n      </Slots.container>\n    </Slots.root>\n  );\n};\n"]}