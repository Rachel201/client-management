{"version":3,"file":"Tile.types.js","sourceRoot":"../src/","sources":["components/Tile/Tile.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { IBaseProps, ISize } from 'office-ui-fabric-react/lib/Utilities';\nimport { ISelection } from 'office-ui-fabric-react/lib/Selection';\n\nexport type TileSize = keyof {\n  small: 'small';\n  large: 'large';\n};\n\nexport interface ITileForegroundProps {\n  foregroundSize?: ISize;\n}\n\nexport interface ITileBackgroundProps {\n  backgroundSize?: ISize;\n}\n\nexport interface ITileProps extends IBaseProps, React.AllHTMLAttributes<HTMLSpanElement | HTMLAnchorElement> {\n  /**\n   * The intended dimensions for the Tile.\n   */\n  contentSize?: ISize;\n  /**\n   * The breakpoint size for the Tile.\n   */\n  tileSize?: TileSize;\n  /**\n   * Index of the item in the selection controller.\n   */\n  selectionIndex?: number;\n  /**\n   * Whether or not item is selectable;\n   */\n  isSelectable?: boolean;\n  /**\n   * Selection controller for the item rendered in the tile.\n   */\n  selection?: ISelection;\n  /**\n   * Whether or not the item should be invoked if clicked.\n   */\n  invokeSelection?: boolean;\n  /**\n   * Name to use on the nameplate for the tile.\n   */\n  itemName?: React.ReactNode;\n  /**\n   * Activity to use on the nameplate for the tile.\n   */\n  itemActivity?: React.ReactNode;\n  /**\n   * Content to render as the full-size background of the tile.\n   */\n  background?: React.ReactNode | ((backgroundProps: ITileBackgroundProps) => JSX.Element);\n  /**\n   * Whether or not to frame the background.\n   */\n  showBackgroundFrame?: boolean;\n  /**\n   * Whether or not to hide the background, regardless of whether it is present.\n   * Use this to control when the background \"fades in\" if the content needs to be loaded.\n   */\n  hideBackground?: boolean;\n  /**\n   * Content to render as the foreground of the tile, bounded by padding and the nameplate.\n   */\n  foreground?: React.ReactNode | ((foregroundProps: ITileForegroundProps) => JSX.Element);\n  /**\n   * Whether or not to frame the foreground.\n   */\n  showForegroundFrame?: boolean;\n  /**\n   * Whether or not to hide the foreground, regardless of whether it is present.\n   * Use this to control when the foreground \"fades in\" if the content needs to be loaded.\n   */\n  hideForeground?: boolean;\n  /**\n   * The accessible label representing the tile and its content.\n   */\n  ariaLabel?: string;\n  /**\n   * The accessible label providing description or instructions for the tile.\n   */\n  descriptionAriaLabel?: string;\n  /**\n   * The accessible label for the selection checkbox.\n   */\n  toggleSelectionAriaLabel?: string;\n\n  /**\n   * Link ref\n   */\n  linkRef?: (element: HTMLAnchorElement | HTMLButtonElement | null) => void;\n\n  /**\n   * Whether the component should render with Fluent styling or not\n   */\n  isFluentStyling?: boolean;\n\n  /**\n   * The accessible label representing tile selected state.\n   */\n  ariaLabelSelected?: string;\n\n  /*\n   * Hide nameplate and activity until the tile is hovered or selected (applies only to media tiles)\n   */\n  nameplateOnlyOnHover?: boolean;\n}\n"]}