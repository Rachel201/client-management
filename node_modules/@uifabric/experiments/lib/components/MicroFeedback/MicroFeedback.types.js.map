{"version":3,"file":"MicroFeedback.types.js","sourceRoot":"../src/","sources":["components/MicroFeedback/MicroFeedback.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { IComponent, IComponentStyles, ISlotProp, IStyleableComponentProps } from '../../Foundation';\nimport { ICalloutSlot, IListSlot } from '../../utilities/factoryComponents.types';\nimport { IBaseProps } from '../../Utilities';\nimport { IButtonSlot } from '../Button/Button.types';\nimport { IStackSlot, ITextSlot } from 'office-ui-fabric-react';\n\nexport type IMicroFeedbackComponent = IComponent<\n  IMicroFeedbackProps,\n  IMicroFeedbackTokens,\n  IMicroFeedbackStyles,\n  IMicroFeedbackViewProps\n>;\n\n// These types are redundant with IMicroFeedbackComponent but are needed until TS function return widening issue\n// is resolved: https://github.com/Microsoft/TypeScript/issues/241\n// For now, these helper types can be used to provide return type safety when specifying tokens and styles functions.\nexport type IMicroFeedbackTokenReturnType = ReturnType<Extract<IMicroFeedbackComponent['tokens'], Function>>;\nexport type IMicroFeedbackStylesReturnType = ReturnType<Extract<IMicroFeedbackComponent['styles'], Function>>;\n\nexport type IMicroFeedbackSlot = ISlotProp<IMicroFeedbackProps>;\n\n/**\n * Defines the type of feedback that is being given (positive, none or negative).\n */\nexport type VoteType = 'dislike' | 'no_vote' | 'like';\n\nexport interface IMicroFeedbackQuestion {\n  /**\n   * Defines the text of the question to be asked after a vote is given.\n   */\n  question: string;\n\n  /**\n   * Defines a list of options from which to choose as an answer to the given question.\n   */\n  options: string[];\n\n  /**\n   * Defines an identifier that correlates the question to the Like or Dislike.\n   */\n  id: string;\n}\n\nexport interface IMicroFeedbackSlots {\n  /**\n   * Defines the root slot of the component.\n   */\n  root?: IStackSlot;\n\n  /**\n   * Defines the stack container for the Like/Dislike pair of icons.\n   */\n  iconContainer?: IStackSlot;\n\n  /**\n   * Defines the container element that includes the follow up question and options.\n   */\n  followUpContainer?: ICalloutSlot | IStackSlot;\n\n  /**\n   * Defines the follow up question text.\n   */\n  followUpQuestion?: ITextSlot;\n\n  /**\n   * Defines the list of options that can be chosen as an answer to the follow up question.\n   */\n  followUpOptionList?: IListSlot;\n\n  /**\n   * Defines the options available for the follow up questions.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  followUpOption?: IButtonSlot;\n\n  /**\n   * Defines the text that is provided in the options available for the follow up questions.\n   */\n  followUpOptionText?: ITextSlot;\n\n  /**\n   * Defines the thanks that follows after a vote or followup.\n   */\n  thanksContainer?: ICalloutSlot;\n}\n\nexport interface IMicroFeedback {}\n\nexport interface IMicroFeedbackProps\n  extends IMicroFeedbackSlots,\n    IStyleableComponentProps<IMicroFeedbackProps, IMicroFeedbackTokens, IMicroFeedbackStyles>,\n    IBaseProps<IMicroFeedback> {\n  /**\n   * Defines a callback that sends the feedback to a potential backend.\n   */\n  sendFeedback?: (vote: VoteType) => void;\n\n  /**\n   * Defines a callback for sending the index of the chosen option for the follow up question to a potential backend.\n   */\n  sendFollowUpIndex?: (id: string, index: number) => void;\n\n  /**\n   * Defines a localized string for the Like icon.\n   */\n  likeIconTitle?: string;\n\n  /**\n   * Defines a localized string for the Dislike icon.\n   */\n  dislikeIconTitle?: string;\n\n  /**\n   * Defines a localized string for the aria label of the Like icon for the benefit of screen readers.\n   */\n  likeIconAriaLabel?: string;\n\n  /**\n   * Defines a localized string for the aria label of the Dislike icon for the benefit of screen readers.\n   */\n  dislikeIconAriaLabel?: string;\n\n  /**\n   * Defines an optional question that is asked if Like is selected.\n   */\n  likeQuestion?: IMicroFeedbackQuestion;\n\n  /**\n   * Defines an optional question that is asked if Dislike is selected.\n   */\n  dislikeQuestion?: IMicroFeedbackQuestion;\n\n  /**\n   * Determines if this is a Stack or Callout followup.\n   */\n\n  inline?: boolean;\n\n  /**\n   * Determines if a thank you note needs to be shown\n   */\n\n  thanksText?: string;\n}\n\nexport interface IMicroFeedbackViewProps extends IMicroFeedbackProps {\n  /**\n   * Defines the current vote selection so far.\n   * @defaultvalue 'no_vote'\n   */\n  vote: VoteType;\n\n  /**\n   * Determines if the follow up section is visible or not.\n   * @defaultvalue false\n   */\n  isFollowUpVisible?: boolean;\n\n  /**\n   * Determines if the Callout with the \"thank you\" message is visible or not.\n   * @defaultvalue false\n   */\n  isThanksVisible?: boolean;\n\n  /**\n   * Defines a reference for the Like button.\n   */\n  likeRef: React.RefObject<HTMLDivElement>;\n\n  /**\n   * Defines a reference for the Dislike button.\n   */\n  dislikeRef: React.RefObject<HTMLDivElement>;\n\n  /**\n   * Defines a callback that is called when the Callout is dismissed.\n   */\n  onCalloutDismiss: () => void;\n\n  /**\n   * Defines a callback that is called when the Thanks is dismissed.\n   */\n  onThanksDismiss: () => void;\n\n  /**\n   * Defines a callback that is called when the Thanks is shown.\n   */\n  onThanksShow: () => void;\n\n  /**\n   * Defines a callback that is called when Like is selected.\n   */\n  onLikeVote: () => void;\n\n  /**\n   * Defines a callback that is called when Dislike is selected.\n   */\n  onDislikeVote: () => void;\n}\n\nexport interface IMicroFeedbackTokens {\n  followUpBackgroundColor?: string;\n  questionMargin?: number | string;\n  width?: number | string;\n}\n\nexport type IMicroFeedbackStyles = IComponentStyles<IMicroFeedbackSlots>;\n"]}