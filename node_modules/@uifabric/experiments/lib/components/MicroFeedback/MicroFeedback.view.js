/** @jsx withSlots */
import { Callout, IconButton, FocusZone, FocusZoneDirection, List, Stack, Text } from 'office-ui-fabric-react';
import { Button } from '../Button/Button';
import { withSlots, getSlots } from '../../Foundation';
export var MicroFeedbackView = function (props) {
    var children = props.children, sendFollowUpIndex = props.sendFollowUpIndex, likeIconTitle = props.likeIconTitle, dislikeIconTitle = props.dislikeIconTitle, likeIconAriaLabel = props.likeIconAriaLabel, dislikeIconAriaLabel = props.dislikeIconAriaLabel, likeQuestion = props.likeQuestion, dislikeQuestion = props.dislikeQuestion, vote = props.vote, isFollowUpVisible = props.isFollowUpVisible, isThanksVisible = props.isThanksVisible, likeRef = props.likeRef, dislikeRef = props.dislikeRef, onCalloutDismiss = props.onCalloutDismiss, onThanksDismiss = props.onThanksDismiss, onThanksShow = props.onThanksShow, onLikeVote = props.onLikeVote, onDislikeVote = props.onDislikeVote, thanksText = props.thanksText, inline = props.inline;
    var likeIcon = vote === 'like' ? 'LikeSolid' : 'Like';
    var dislikeIcon = vote === 'dislike' ? 'DislikeSolid' : 'Dislike';
    var hideDislikeCallout = vote !== 'dislike' || !isFollowUpVisible;
    var hideLikeCallout = vote !== 'like' || !isFollowUpVisible;
    var Slots = getSlots(props, {
        root: Stack,
        iconContainer: Stack,
        followUpContainer: inline ? Stack : Callout,
        followUpQuestion: Text,
        followUpOptionList: List,
        // eslint-disable-next-line deprecation/deprecation
        followUpOption: Button,
        followUpOptionText: Text,
        thanksContainer: Callout,
    });
    // eslint-disable-next-line deprecation/deprecation
    var followUpOptionTokens = { contentPadding: '6px 0px' };
    var renderFollowup = function (followUp, targetRef) {
        var onRenderCalloutItem = function (item, index) {
            var listOption = function () {
                onCalloutDismiss();
                if (sendFollowUpIndex && index !== undefined && followUp) {
                    sendFollowUpIndex(followUp.id, index);
                    onThanksShow();
                }
            };
            return (withSlots(Slots.followUpOption, { "data-is-focusable": true, 
                // eslint-disable-next-line react/jsx-no-bind
                onClick: listOption, tokens: followUpOptionTokens },
                withSlots(Slots.followUpOptionText, null, "" + item)));
        };
        return (withSlots(Slots.followUpContainer, { gapSpace: 0, onDismiss: onCalloutDismiss, role: "alertdialog", setInitialFocus: true, target: targetRef },
            withSlots(FocusZone, { direction: FocusZoneDirection.vertical },
                withSlots(Slots.followUpQuestion, { block: true, variant: "small" }, followUp.question),
                withSlots(Slots.followUpOptionList, { items: followUp.options, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onRenderCell: onRenderCalloutItem }))));
    };
    var showThanks = function (followUp, voteType) {
        // If vote while thanks is showing, dismiss
        if (isThanksVisible) {
            onThanksDismiss();
        }
        // Show thanks if there is no follow up question and not  unselecting a vote
        if (!followUp && vote !== voteType) {
            onThanksShow();
        }
    };
    var likeVoteClick = function () {
        showThanks(likeQuestion, 'like');
        onLikeVote();
    };
    var dislikeVoteClick = function () {
        showThanks(dislikeQuestion, 'dislike');
        onDislikeVote();
    };
    return (withSlots(Slots.root, null,
        withSlots(Slots.iconContainer, { horizontal: true },
            children,
            withSlots("div", { ref: likeRef },
                withSlots(IconButton, { menuIconProps: { iconName: likeIcon }, title: likeIconTitle, ariaLabel: likeIconAriaLabel, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onClick: likeVoteClick })),
            withSlots("div", { ref: dislikeRef },
                withSlots(IconButton, { menuIconProps: { iconName: dislikeIcon }, title: dislikeIconTitle, ariaLabel: dislikeIconAriaLabel, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onClick: dislikeVoteClick }))),
        likeQuestion && !hideLikeCallout && renderFollowup(likeQuestion, likeRef.current),
        dislikeQuestion && !hideDislikeCallout && renderFollowup(dislikeQuestion, dislikeRef.current),
        thanksText && isThanksVisible && (withSlots(Slots.thanksContainer, { setInitialFocus: false, target: vote === 'like' ? likeRef.current : dislikeRef.current, gapSpace: 0, isBeakVisible: false, onDismiss: onThanksDismiss },
            withSlots(Slots.followUpOptionText, { block: true, variant: "small" }, thanksText)))));
};
//# sourceMappingURL=MicroFeedback.view.js.map