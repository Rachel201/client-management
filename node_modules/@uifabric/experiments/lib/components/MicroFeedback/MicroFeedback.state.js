import { __assign } from "tslib";
import { useCallback, useRef, useState } from 'react';
export var useMicroFeedbackState = function (props) {
    var sendFeedback = props.sendFeedback;
    var likeRef = useRef(null);
    var dislikeRef = useRef(null);
    var _a = useState(undefined), timerHandle = _a[0], setTimerHandle = _a[1];
    var _b = useState('no_vote'), vote = _b[0], setVote = _b[1];
    var _c = useState(false), isFollowUpVisible = _c[0], setIsFollowUpVisible = _c[1];
    var _d = useState(false), isThanksVisible = _d[0], setIsThanksVisible = _d[1];
    var onCalloutDismiss = useCallback(function () {
        setIsFollowUpVisible(false);
    }, []);
    var onThanksDismiss = useCallback(function () {
        clearTimeout(timerHandle);
        setIsThanksVisible(false);
    }, [timerHandle]);
    var processVote = useCallback(function (newVote) {
        // If the vote that is already selected is picked, then toggle off
        var updatedVote = vote === newVote ? 'no_vote' : newVote;
        setIsFollowUpVisible(true);
        setVote(updatedVote);
        if (updatedVote !== 'no_vote' && sendFeedback) {
            sendFeedback(updatedVote);
        }
    }, [sendFeedback, vote]);
    var onLikeVote = useCallback(function () {
        processVote('like');
    }, [processVote]);
    var onDislikeVote = useCallback(function () {
        processVote('dislike');
    }, [processVote]);
    var hideThanksMessage = useCallback(function () {
        setIsThanksVisible(false);
    }, []);
    var onThanksShow = useCallback(function () {
        setIsThanksVisible(true);
        // Hide the Thanks message after 2 seconds
        setTimerHandle(setTimeout(hideThanksMessage, 2000));
    }, [hideThanksMessage]);
    var viewProps = __assign(__assign({}, props), { vote: vote, isFollowUpVisible: isFollowUpVisible,
        likeRef: likeRef,
        dislikeRef: dislikeRef,
        onCalloutDismiss: onCalloutDismiss,
        onThanksDismiss: onThanksDismiss,
        onThanksShow: onThanksShow,
        onLikeVote: onLikeVote,
        onDislikeVote: onDislikeVote,
        isThanksVisible: isThanksVisible });
    return viewProps;
};
//# sourceMappingURL=MicroFeedback.state.js.map