import { __assign, __rest } from "tslib";
/** @jsx withSlots */
import { ContextualMenu, Text } from 'office-ui-fabric-react';
import { withSlots } from '../../../Foundation';
import { FontIcon } from '../../../utilities/factoryComponents';
import { Button } from '../Button';
import { MenuButton } from '../MenuButton/MenuButton';
/* eslint-disable deprecation/deprecation */
/** @deprecated */
export var SplitButtonSlots = function (props) { return ({
    root: 'span',
    button: Button,
    menuButton: MenuButton,
    icon: FontIcon,
    content: Text,
    menuArea: 'span',
    menu: ContextualMenu,
    menuIcon: FontIcon,
    splitDividerContainer: 'span',
    splitDivider: 'span',
}); };
/** @deprecated */
export var SplitButtonView = function (props, slots) {
    var styles = props.styles, tokens = props.tokens, children = props.children, content = props.content, primary = props.primary, disabled = props.disabled, onClick = props.onClick, onKeyDown = props.onKeyDown, allowDisabledFocus = props.allowDisabledFocus, ariaLabel = props.ariaLabel, keytipProps = props.keytipProps, defaultExpanded = props.defaultExpanded, expanded = props.expanded, onMenuDismiss = props.onMenuDismiss, primaryActionDisabled = props.primaryActionDisabled, secondaryAriaLabel = props.secondaryAriaLabel, onSecondaryActionClick = props.onSecondaryActionClick, root = props.root, button = props.button, menu = props.menu, buttonRef = props.buttonRef, menuButtonRef = props.menuButtonRef, rest = __rest(props, ["styles", "tokens", "children", "content", "primary", "disabled", "onClick", "onKeyDown", "allowDisabledFocus", "ariaLabel", "keytipProps", "defaultExpanded", "expanded", "onMenuDismiss", "primaryActionDisabled", "secondaryAriaLabel", "onSecondaryActionClick", "root", "button", "menu", "buttonRef", "menuButtonRef"]);
    var menuButtonAriaLabel = secondaryAriaLabel ? secondaryAriaLabel : ariaLabel ? ariaLabel : content;
    var _a = tokens, contentPadding = _a.contentPadding, contentPaddingFocused = _a.contentPaddingFocused, secondaryPadding = _a.secondaryPadding, splitButtonTokens = __rest(_a, ["contentPadding", "contentPaddingFocused", "secondaryPadding"]);
    var backgroundColor = splitButtonTokens.backgroundColor, backgroundColorHovered = splitButtonTokens.backgroundColorHovered, backgroundColorPressed = splitButtonTokens.backgroundColorPressed, borderColor = splitButtonTokens.borderColor, borderColorHovered = splitButtonTokens.borderColorHovered, borderColorPressed = splitButtonTokens.borderColorPressed, color = splitButtonTokens.color, colorHovered = splitButtonTokens.colorHovered, colorPressed = splitButtonTokens.colorPressed, highContrastBackgroundColor = splitButtonTokens.highContrastBackgroundColor, highContrastBackgroundColorHovered = splitButtonTokens.highContrastBackgroundColorHovered, highContrastBackgroundColorPressed = splitButtonTokens.highContrastBackgroundColorPressed, highContrastBorderColor = splitButtonTokens.highContrastBorderColor, highContrastBorderColorHovered = splitButtonTokens.highContrastBorderColorHovered, highContrastBorderColorPressed = splitButtonTokens.highContrastBorderColorPressed, highContrastColor = splitButtonTokens.highContrastColor, highContrastColorHovered = splitButtonTokens.highContrastColorHovered, highContrastColorPressed = splitButtonTokens.highContrastColorPressed, highContrastIconColor = splitButtonTokens.highContrastIconColor, highContrastIconColorHovered = splitButtonTokens.highContrastIconColorHovered, highContrastIconColorPressed = splitButtonTokens.highContrastIconColorPressed, iconColor = splitButtonTokens.iconColor, iconColorHovered = splitButtonTokens.iconColorHovered, iconColorPressed = splitButtonTokens.iconColorPressed, nonColoredButtonTokens = __rest(splitButtonTokens, ["backgroundColor", "backgroundColorHovered", "backgroundColorPressed", "borderColor", "borderColorHovered", "borderColorPressed", "color", "colorHovered", "colorPressed", "highContrastBackgroundColor", "highContrastBackgroundColorHovered", "highContrastBackgroundColorPressed", "highContrastBorderColor", "highContrastBorderColorHovered", "highContrastBorderColorPressed", "highContrastColor", "highContrastColorHovered", "highContrastColorPressed", "highContrastIconColor", "highContrastIconColorHovered", "highContrastIconColorPressed", "iconColor", "iconColorHovered", "iconColorPressed"]);
    var buttonTokens = primaryActionDisabled
        ? __assign({ contentPadding: contentPadding, contentPaddingFocused: contentPaddingFocused }, nonColoredButtonTokens) : tokens;
    var menuButtonTokens = __assign({ contentPadding: secondaryPadding }, splitButtonTokens);
    return (withSlots(slots.root, null,
        withSlots(slots.button, __assign({ primary: primary, disabled: primaryActionDisabled || disabled, allowDisabledFocus: allowDisabledFocus, ariaLabel: ariaLabel, onClick: onClick, componentRef: buttonRef, content: content, onKeyDown: onKeyDown, tokens: buttonTokens }, rest), children),
        withSlots(slots.splitDividerContainer, null,
            withSlots(slots.splitDivider, null)),
        withSlots(slots.menuButton, { primary: primary, disabled: disabled, defaultExpanded: defaultExpanded, expanded: expanded, allowDisabledFocus: allowDisabledFocus, ariaLabel: menuButtonAriaLabel, onClick: onSecondaryActionClick, componentRef: menuButtonRef, keytipProps: keytipProps, menu: menu, onKeyDown: onKeyDown, onMenuDismiss: onMenuDismiss, tokens: menuButtonTokens })));
};
//# sourceMappingURL=SplitButton.view.js.map