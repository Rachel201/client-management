// Temporary import file to experiment with next version of foundation.
import { composed } from '@uifabric/foundation/lib/next/composed';
import { FontWeights } from '../../../Styling';
import { useButtonState as state } from '../Button.state';
import { ButtonStyles } from '../Button.styles';
import { ButtonSlots as slots, ButtonView as view } from '../Button.view';
/* eslint-disable deprecation/deprecation */
var baseTokens = function (props, theme) {
    var effects = theme.effects, palette = theme.palette, semanticColors = theme.semanticColors;
    return {
        backgroundColor: 'transparent',
        backgroundColorHovered: 'transparent',
        backgroundColorPressed: 'transparent',
        borderColor: 'transparent',
        borderColorHovered: 'transparent',
        borderColorPressed: 'transparent',
        borderRadius: effects.roundedCorner2,
        borderStyle: 'solid',
        borderWidth: 1,
        childrenGap: 8,
        color: semanticColors.buttonText,
        colorHovered: palette.themePrimary,
        colorPressed: palette.black,
        contentPadding: '0px 8px',
        cursor: 'pointer',
        height: '40px',
        highContrastBorderColor: 'transparent',
        highContrastBorderColorHovered: 'transparent',
        highContrastBorderColorPressed: 'transparent',
        highContrastColorHovered: 'Highlight',
        highContrastColorPressed: 'Highlight',
        highContrastIconColorHovered: 'Highlight',
        highContrastIconColorPressed: 'Highlight',
        iconColor: semanticColors.buttonText,
        iconColorHovered: palette.themePrimary,
        iconColorPressed: palette.black,
        iconSize: 16,
        minWidth: 100,
        textWeight: FontWeights.regular,
    };
};
var disabledTokens = function (props, theme) {
    var semanticColors = theme.semanticColors;
    return {
        color: semanticColors.buttonTextDisabled,
        colorHovered: semanticColors.buttonTextDisabled,
        colorPressed: semanticColors.buttonTextDisabled,
        cursor: 'default',
        highContrastColor: 'GrayText',
        highContrastColorHovered: 'GrayText',
        highContrastColorPressed: 'GrayText',
        highContrastIconColor: 'GrayText',
        highContrastIconColorHovered: 'GrayText',
        highContrastIconColorPressed: 'GrayText',
        iconColor: semanticColors.buttonTextDisabled,
        iconColorHovered: semanticColors.buttonTextDisabled,
        iconColorPressed: semanticColors.buttonTextDisabled,
    };
};
var ActionButtonTokens = function (props, theme) { return [
    baseTokens,
    props.disabled && disabledTokens,
]; };
var ActionButtonStyles = function (props, theme, tokens) {
    var regularStyles = ButtonStyles(props, theme, tokens);
    return {
        root: [
            regularStyles.root,
            {
                justifyContent: 'flex-start',
            },
        ],
        content: regularStyles.content,
        icon: regularStyles.icon,
    };
};
/**
 * @deprecated This component was experimental and is not longer being developed on, nor will it be supported in the
 * future.
 */
export var ActionButton = composed({
    displayName: 'ActionButton',
    slots: slots,
    state: state,
    styles: ActionButtonStyles,
    tokens: ActionButtonTokens,
    view: view,
});
//# sourceMappingURL=ActionButton.js.map