{"version":3,"file":"Button.types.js","sourceRoot":"../src/","sources":["components/Button/Button.types.tsx"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\n// Temporary import file to experiment with next version of foundation.\nimport { IComponent } from '@uifabric/foundation/lib/next/IComponent';\nimport { IRawFontStyle, IRawStyleBase } from '@uifabric/merge-styles/lib/IRawStyleBase';\nimport { ITextSlot } from 'office-ui-fabric-react';\nimport { IComponentStyles, ISlottableProps, ISlotProp, IStyleableComponentProps } from '../../Foundation';\nimport { IFontIconSlot } from '../../utilities/factoryComponents.types';\nimport { IBaseProps } from '../../Utilities';\nimport {\n  IActionable,\n  IActionableProps,\n  IActionableSlots,\n  IActionableTokens,\n  IActionableViewProps,\n} from './Actionable/Actionable.types';\n\n/* eslint-disable deprecation/deprecation */\n\n/**\n * @deprecated\n * {@docCategory Button}\n */\nexport type IButtonComponent = IComponent<IButtonProps, IButtonTokens, IButtonStyles, IButtonViewProps, IButtonSlots>;\n\n// These types are redundant with IButtonComponent but are needed until TS function return widening issue is resolved:\n// https://github.com/Microsoft/TypeScript/issues/241\n// For now, these helper types can be used to provide return type safety when specifying tokens and styles functions.\n/**\n * @deprecated\n * {@docCategory Button}\n */\nexport type IButtonTokenReturnType = ReturnType<Extract<IButtonComponent['tokens'], Function>>;\n\n/**\n * @deprecated\n * {@docCategory Button}\n */\nexport type IButtonStylesReturnType = ReturnType<Extract<IButtonComponent['styles'], Function>>;\n\n/**\n * @deprecated\n * {@docCategory Button}\n */\nexport type IButtonSlot = ISlotProp<IButtonProps>;\n\n/**\n * @deprecated\n * {@docCategory Button}\n */\nexport interface IButtonSlots extends IActionableSlots {\n  /**\n   * Defines the text that is displayed inside the Button.\n   * @deprecated\n   */\n  content?: ITextSlot;\n\n  /**\n   * Defines the icon that is displayed next to the text inside the Button.\n   * @deprecated\n   */\n  icon?: IFontIconSlot;\n}\n\n/**\n * @deprecated\n * {@docCategory Button}\n */\nexport interface IButton extends IActionable {}\n\nexport type INativeButtonProps = Omit<\n  React.AllHTMLAttributes<HTMLAnchorElement | HTMLButtonElement | HTMLDivElement>,\n  'content'\n>;\n\n/**\n * @deprecated This component was experimental and is not longer being developed on, nor will it be supported in the\n * future.\n * {@docCategory Button}\n */\nexport interface IButtonProps\n  extends ISlottableProps<IButtonSlots>,\n    Pick<\n      IActionableProps,\n      'href' | 'disabled' | 'checked' | 'allowDisabledFocus' | 'ariaLabel' | 'keytipProps' | 'uniqueId'\n    >,\n    IStyleableComponentProps<IButtonProps, IButtonTokens, IButtonStyles>,\n    IBaseProps<IButton>,\n    INativeButtonProps {\n  /**\n   * Defines whether the Button should be circular.\n   * In general, circular Buttons should not specify the menu and container slots.\n   * @defaultvalue false\n   * @deprecated\n   */\n  circular?: boolean;\n\n  /**\n   * Defines whether the visual representation of the Button should be emphasized.\n   * @defaultvalue false\n   * @deprecated\n   */\n  primary?: boolean;\n}\n\n/**\n * @deprecated\n * {@docCategory Button}\n */\nexport interface IButtonViewProps extends Pick<IActionableViewProps, 'buttonRef'>, IButtonProps {}\n\n/**\n * @deprecated\n * {@docCategory Button}\n */\nexport interface IButtonTokens extends IActionableTokens {\n  /**\n   * Defines how far should the background extend within the Button when the focus is on it.\n   * @deprecated\n   */\n  backgroundClipFocused?: IRawStyleBase['backgroundClip'];\n\n  /**\n   * Defines the border color of the Button when the focus is on it.\n   * @deprecated\n   */\n  borderColorFocused?: string;\n\n  /**\n   * Defines the border style of the Button when the focus is on it.\n   * @deprecated\n   */\n  borderStyleFocused?: string;\n\n  /**\n   * Defines the border width of the Button when the focus is on it.\n   * @deprecated\n   */\n  borderWidthFocused?: number | string;\n\n  /**\n   * Defines the padding of the Button, between the Button border and contents, when the focus is on the Button.\n   * @deprecated\n   */\n  contentPaddingFocused?: number | string;\n\n  /**\n   * Defines the icon color of the Button when in high contrast mode.\n   * @deprecated\n   */\n  highContrastIconColor?: string;\n\n  /**\n   * Defines the icon color of the Button when it is in a hovered state and in high contrast mode.\n   * @deprecated\n   */\n  highContrastIconColorHovered?: string;\n\n  /**\n   * Defines the icon color of the Button when it is in an active state and in high contrast mode.\n   * @deprecated\n   */\n  highContrastIconColorPressed?: string;\n\n  /**\n   * Defines the icon color of the Button.\n   * @deprecated\n   */\n  iconColor?: string;\n\n  /**\n   * Defines the icon color of the Button when it is in a hovered state.\n   * @deprecated\n   */\n  iconColorHovered?: string;\n\n  /**\n   * Defines the icon color of the Button when it is in an active state.\n   * @deprecated\n   */\n  iconColorPressed?: string;\n\n  /**\n   * Defines the size of the icon inside the Button.\n   * @deprecated\n   */\n  iconSize?: number | string;\n\n  /**\n   * Defines the font weight of the icon inside the Button.\n   * @deprecated\n   */\n  iconWeight?: IRawFontStyle['fontWeight'];\n}\n\n/**\n * @deprecated\n * {@docCategory Button}\n */\nexport type IButtonStyles = IComponentStyles<IButtonSlots>;\n"]}