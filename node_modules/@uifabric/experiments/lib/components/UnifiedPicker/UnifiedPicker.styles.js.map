{"version":3,"file":"UnifiedPicker.styles.js","sourceRoot":"../src/","sources":["components/UnifiedPicker/UnifiedPicker.styles.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,QAAQ,EAAU,MAAM,mBAAmB,CAAC;AAW1E,IAAM,gBAAgB,GAAG;IACvB,UAAU,EAAE,uBAAuB;IACnC,WAAW,EAAE,wBAAwB;IACrC,SAAS,EAAE,sBAAsB;IACjC,aAAa,EAAE,gCAAgC;CAChD,CAAC;AAEF,MAAM,CAAC,IAAM,SAAS,GAAG,UAAC,KAA+B;IACvD,IAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IAEzB,IAAI,CAAC,KAAK,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;KACnF;IAED,oCAAoC;IAC9B,IAAA,kBAA+C,EAA7C,oCAAe,EAAE,0BAA4B,CAAC;IACtD,IAAM,UAAU,GAAG,mBAAmB,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;IAEhE,OAAO;QACL,UAAU,EAAE;YACV,UAAU,CAAC,UAAU;YACrB;gBACE,OAAO,EAAE,MAAM;gBACf,IAAI,EAAE,UAAU;gBAChB,QAAQ,EAAE,MAAM;gBAChB,UAAU,EAAE,QAAQ;gBACpB,SAAS,EAAE,YAAY;gBACvB,MAAM,EAAE,eAAa,eAAiB;gBACtC,QAAQ,EAAE,OAAO;gBACjB,OAAO,EAAE,KAAK;gBACd,SAAS,EAAE,MAAM;gBACjB,SAAS,EAAE;oBACT,SAAS,EAAE;wBACT,WAAW,EAAE,UAAU;qBACxB;iBACF;aACF;SACF;QACD,WAAW,EAAE;YACX,UAAU,CAAC,WAAW;YACtB;gBACE,OAAO,EAAE,MAAM;gBACf,IAAI,EAAE,UAAU;gBAChB,MAAM,EAAE,MAAM;gBACd,MAAM,EAAE,MAAM;gBACd,QAAQ,EAAE,GAAG;gBACb,OAAO,EAAE,MAAM;gBACf,OAAO,EAAE,WAAW;gBACpB,MAAM,EAAE,KAAK;gBACb,SAAS,EAAE;oBACT,cAAc,EAAE;wBACd,OAAO,EAAE,MAAM;qBAChB;iBACF;aACF;SACF;QACD,SAAS,EAAE;YACT,UAAU,CAAC,SAAS;YACpB;gBACE,OAAO,EAAE,MAAM;gBACf,IAAI,EAAE,UAAU;aACjB;SACF;QACD,aAAa,EAAE;YACb,UAAU,CAAC,aAAa;YACxB;gBACE,OAAO,EAAE,MAAM;gBACf,IAAI,EAAE,UAAU;aACjB;SACF;KACF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { getGlobalClassNames, getTheme, IStyle } from '@uifabric/styling';\n\nexport interface IUnifiedPickerStyleProps {}\n\nexport interface IUnifiedPickerStyles {\n  pickerText: IStyle;\n  pickerInput: IStyle;\n  pickerDiv: IStyle;\n  selectionZone: IStyle;\n}\n\nconst GlobalClassNames = {\n  pickerText: 'ms-UnifiedPicker-text',\n  pickerInput: 'ms-UnifiedPicker-input',\n  pickerDiv: 'ms-UnifiedPicker-div',\n  selectionZone: 'ms-UnifiedPicker-selectionZone',\n};\n\nexport const getStyles = (props: IUnifiedPickerStyleProps): IUnifiedPickerStyles => {\n  const theme = getTheme();\n\n  if (!theme) {\n    throw new Error('theme is undefined or null in Editing item getStyles function.');\n  }\n\n  // const { semanticColors } = theme;\n  const { neutralTertiary, themeLight } = theme.palette;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    pickerText: [\n      classNames.pickerText,\n      {\n        display: 'flex',\n        flex: '1 1 auto',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        boxSizing: 'border-box',\n        border: `1px solid ${neutralTertiary}`,\n        minWidth: '180px',\n        padding: '1px',\n        minHeight: '32px',\n        selectors: {\n          '&:hover': {\n            borderColor: themeLight,\n          },\n        },\n      },\n    ],\n    pickerInput: [\n      classNames.pickerInput,\n      {\n        display: 'flex',\n        flex: '1 1 auto',\n        height: '34px',\n        border: 'none',\n        flexGrow: '1',\n        outline: 'none',\n        padding: '0 6px 0px',\n        margin: '1px',\n        selectors: {\n          '&::-ms-clear': {\n            display: 'none',\n          },\n        },\n      },\n    ],\n    pickerDiv: [\n      classNames.pickerDiv,\n      {\n        display: 'flex',\n        flex: '1 1 auto',\n      },\n    ],\n    selectionZone: [\n      classNames.selectionZone,\n      {\n        display: 'flex',\n        flex: '1 1 auto',\n      },\n    ],\n  };\n};\n"]}