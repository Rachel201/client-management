{"version":3,"file":"FloatingSuggestions.types.js","sourceRoot":"../src/","sources":["components/FloatingSuggestions/FloatingSuggestions.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { ISuggestionModel } from 'office-ui-fabric-react/lib/Pickers';\nimport { ISuggestionsControlProps } from './Suggestions/Suggestions.types';\nimport { SuggestionsStore } from './Suggestions/SuggestionsStore';\nimport { IBaseProps } from 'office-ui-fabric-react/lib/Utilities';\n\nimport { ISuggestionsCoreProps } from './Suggestions/Suggestions.types';\n\nexport interface IFloatingSuggestions<TItem> {\n  /** Whether the suggestions are shown */\n  isSuggestionsShown: boolean;\n\n  /** On queryString changed */\n  onQueryStringChanged: (input: string) => void;\n\n  /** Hides the picker */\n  hidePicker: () => void;\n\n  /** Shows the picker\n   * @param updateValue - Optional param to indicate whether to update the query string\n   */\n  showPicker: (updateValue?: boolean) => void;\n\n  /** Gets the suggestions */\n  suggestions: ISuggestionModel<TItem>[];\n\n  /** Gets the input text */\n  inputText: string;\n\n  /** Gets the current selected index in the suggestions box*/\n  currentSelectedSuggestionIndex: number;\n\n  /** Forces the current selection to resolve, if it is valid */\n  forceResolveSuggestion: () => void;\n}\n\n// Type T is the type of the item that is displayed\n// and searched for by the people picker. For example, if the picker is\n// displaying persona's than type T could either be of Persona or Ipersona props\nexport interface IFloatingSuggestionsProps<T> extends IBaseProps<IFloatingSuggestions<T>> {\n  /**\n   * The suggestions store\n   */\n  suggestionsStore: SuggestionsStore<T>;\n\n  /**\n   * The suggestions to show on zero query, return null if using as a controlled component\n   */\n  onZeroQuerySuggestion?: (selectedItems?: T[]) => T[] | PromiseLike<T[]> | null;\n\n  /**\n   * The input element to listen on events\n   */\n  inputElement?: HTMLInputElement | null;\n\n  /**\n   * Function that specifies how an individual suggestion item will appear.\n   */\n  onRenderSuggestionsItem: ISuggestionsCoreProps<T>['onRenderSuggestion'];\n  /**\n   * A callback for what should happen when a person types text into the input.\n   * Returns the already selected items so the resolver can filter them out.\n   * If used in conjunction with resolveDelay this will only kick off after the delay throttle.\n   * Return null if using as a controlled component\n   */\n  onResolveSuggestions: (filter: string) => T[] | PromiseLike<T[]> | null;\n\n  /**\n   * A callback for when the input has been changed\n   */\n  onInputChanged?: (filter: string) => void;\n\n  /**\n   * The delay time in ms before resolving suggestions, which is kicked off when input has been changed.\n   * e.g. If a second input change happens within the resolveDelay time, the timer will start over.\n   * Only until after the timer completes will onResolveSuggestions be called.\n   */\n  resolveDelay?: number;\n\n  /**\n   * A callback for when a suggestion is clicked\n   */\n  onSuggestionSelected?: (item: T) => void;\n\n  /**\n   * ClassName for the picker.\n   */\n  className?: string;\n  /**\n   * How to render the Suggestions control used by this floating picker.\n   */\n  onRenderSuggestionControl?: React.ComponentType<IFloatingSuggestionsInnerSuggestionProps<T>>;\n\n  /**\n   * A callback for when a persona is removed from the suggestion list\n   */\n  onRemoveSuggestion?: (item: T) => void;\n\n  /**\n   * Determines if the input string should be resolved to an item in the well.\n   *\n   * Called only if the suggestion list is empty and we are not focused on a\n   * focusable header / footer item.\n   *\n   * If unset, all insertions of unmatched content will not be inserted.\n   */\n  isQueryForceResolveable?: (inputQuery: string) => boolean;\n\n  /**\n   * Function that specifies how a force resolved suggestion is entered into the well.\n   */\n  createForceResolvedItem?: (input: string) => ISuggestionModel<T>;\n\n  /**\n   * The text to display while searching for more results in a limited suggestions list\n   */\n  searchingText?: ((props: { input: string }) => string) | string;\n\n  /**\n   * Width for the suggestions callout\n   */\n  calloutWidth?: number;\n\n  /**\n   * The callback that should be called when the suggestions are shown\n   */\n  onSuggestionsShown?: () => void;\n\n  /**\n   * The callback that should be called when the suggestions are hiden\n   */\n  onSuggestionsHidden?: () => void;\n\n  /**\n   * If using as a controlled component, the items to show in the suggestion list\n   */\n  suggestionItems?: T[];\n}\n\n/**\n * Props which are passed on to the inner Suggestions component by\n * BaseFloatingPicker.\n */\nexport type IFloatingSuggestionsInnerSuggestionProps<T> = Pick<\n  ISuggestionsControlProps<T>,\n  | 'onSuggestionClick'\n  | 'onSuggestionRemove'\n  | 'suggestions'\n  | 'componentRef'\n  | 'onCurrentlySelectedSuggestionChosen'\n  | 'shouldLoopSelection'\n  | 'onRenderSuggestion'\n>;\n"]}