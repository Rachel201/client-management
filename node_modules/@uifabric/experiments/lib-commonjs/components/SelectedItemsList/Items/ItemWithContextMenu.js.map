{"version":3,"file":"ItemWithContextMenu.js","sourceRoot":"../src/","sources":["components/SelectedItemsList/Items/ItemWithContextMenu.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,4EAAiH;AAWjH,qFAAqF;AACxE,QAAA,mBAAmB,GAAG,UACjC,wBAAqD;IAErD,OAAO,KAAK,CAAC,IAAI,CAAC,UAAA,iBAAiB;QAC3B,IAAA,0BAAiE,EAAhE,yBAAiB,EAAE,4BAA6C,CAAC;QACxE,IAAM,eAAe,GAAG,KAAK,CAAC,WAAW,CAAC;YACxC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAC7B,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC,CAAC;QAC3B,IAAM,gBAAgB,GAAG,KAAK,CAAC,WAAW,CACxC,UAAA,CAAC;YACC,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC,EACD,CAAC,oBAAoB,CAAC,CACvB,CAAC;QACF,IAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAC7B,cAAM,OAAA,wBAAwB,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,EAAE,iBAAiB,CAAC,SAAS,CAAC,EAAvF,CAAuF;QAC7F,2EAA2E;QAC3E,mGAAmG;QACnG,8EAA8E;QAC9E,yFAAyF;QACzF,sCAAsC;QACtC,uDAAuD;QACvD,CAAC,iBAAiB,CAAC,IAAI,EAAE,iBAAiB,CAAC,SAAS,EAAE,wBAAwB,CAAC,SAAS,CAAC,CAC1F,CAAC;QAEF,IAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAc,IAAI,CAAC,CAAC;QACrD,IAAM,aAAa,GAAG,wBAAwB,CAAC,aAAa,CAAC;QAE7D,OAAO,CACL,8BAAM,GAAG,EAAE,YAAY;YACrB,oBAAC,aAAa,uBAAK,iBAAiB,IAAE,SAAS,EAAE,eAAe,IAAI;YACnE,iBAAiB,CAAC,CAAC,CAAC,CACnB,oBAAC,+BAAc,IACb,KAAK,EAAE,SAAS,EAChB,kBAAkB,EAAE,IAAI,EACxB,MAAM,EAAE,YAAY,CAAC,OAAO,EAC5B,SAAS,EAAE,gBAAgB,EAC3B,eAAe,EAAE,gCAAe,CAAC,cAAc,GAC/C,CACH,CAAC,CAAC,CAAC,IAAI,CACH,CACR,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { ContextualMenu, DirectionalHint, IContextualMenuItem } from 'office-ui-fabric-react/lib/ContextualMenu';\nimport { ItemCanDispatchTrigger } from './ItemTrigger.types';\n\n/**\n * Parameters to the EditingItem higher-order component\n */\nexport type ItemWithContextMenuProps<T> = {\n  itemComponent: ItemCanDispatchTrigger<T>;\n  menuItems: (item: T, onTrigger?: () => void) => IContextualMenuItem[];\n};\n\n// `extends any` to trick the parser into parsing as a type decl instead of a jsx tag\nexport const ItemWithContextMenu = <T extends any>(\n  itemWithContextMenuProps: ItemWithContextMenuProps<T>,\n): ItemCanDispatchTrigger<T> => {\n  return React.memo(selectedItemProps => {\n    const [isContextMenuOpen, setIsContextMenuOpen] = React.useState(false);\n    const openContextMenu = React.useCallback(() => {\n      setIsContextMenuOpen(true);\n    }, [setIsContextMenuOpen]);\n    const closeContextMenu = React.useCallback(\n      e => {\n        e.preventDefault();\n        setIsContextMenuOpen(false);\n      },\n      [setIsContextMenuOpen],\n    );\n    const menuItems = React.useMemo(\n      () => itemWithContextMenuProps.menuItems(selectedItemProps.item, selectedItemProps.onTrigger),\n      // TODO: evaluate whether anything should be changed here based on warning:\n      //   \"React Hook React.useMemo has an unnecessary dependency: 'itemWithContextMenuProps.menuItems'.\n      //   Either exclude it or remove the dependency array. Outer scope values like\n      //   'itemWithContextMenuProps.menuItems' aren't valid dependencies because mutating them\n      //   doesn't re-render the component.\"\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [selectedItemProps.item, selectedItemProps.onTrigger, itemWithContextMenuProps.menuItems],\n    );\n\n    const containerRef = React.useRef<HTMLElement>(null);\n    const ItemComponent = itemWithContextMenuProps.itemComponent;\n\n    return (\n      <span ref={containerRef}>\n        <ItemComponent {...selectedItemProps} onTrigger={openContextMenu} />\n        {isContextMenuOpen ? (\n          <ContextualMenu\n            items={menuItems}\n            shouldFocusOnMount={true}\n            target={containerRef.current}\n            onDismiss={closeContextMenu}\n            directionalHint={DirectionalHint.bottomLeftEdge}\n          />\n        ) : null}\n      </span>\n    );\n  });\n};\n"]}