{"version":3,"file":"FolderCover.js","sourceRoot":"../src/","sources":["components/FolderCover/FolderCover.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IFolderCoverProps, FolderCoverSize, FolderCoverType } from './FolderCover.types';\nimport { ISize, css } from '../../Utilities';\nimport * as FolderCoverStylesModule from './FolderCover.scss';\nimport * as SignalStylesModule from '../signals/Signal.scss';\nimport { Icon } from 'office-ui-fabric-react/lib/Icon';\n\nconst FolderCoverStyles = FolderCoverStylesModule as any;\nconst SignalStyles = SignalStylesModule as any;\n\nexport interface IFolderCoverState {\n  // TODO Add animation support for drag/drop events.\n}\n\nconst FolderCoverLayoutValues = {\n  smallWidth: 72 as 72,\n  smallHeight: 44 as 44,\n  largeWidth: 112 as 112,\n  largeHeight: 72 as 72,\n  contentPadding: 4 as 4,\n};\n\nconst SIZES: { [P in FolderCoverSize]: ISize } = {\n  small: {\n    width: FolderCoverLayoutValues.smallWidth - FolderCoverLayoutValues.contentPadding * 2,\n    height: FolderCoverLayoutValues.smallHeight - FolderCoverLayoutValues.contentPadding * 2,\n  },\n  large: {\n    width: FolderCoverLayoutValues.largeWidth - FolderCoverLayoutValues.contentPadding * 2,\n    height: FolderCoverLayoutValues.largeHeight - FolderCoverLayoutValues.contentPadding * 2,\n  },\n};\n\nconst ASSETS: {\n  [P in FolderCoverSize]: {\n    [T in FolderCoverType]: {\n      back: string;\n      front: string;\n    };\n  };\n} = {\n  small: {\n    default: {\n      back: `folderCoverSmallDefaultBack`,\n      front: `folderCoverSmallDefaultFront`,\n    },\n    linked: {\n      back: `folderCoverSmallLinkedBack`,\n      front: `folderCoverSmallLinkedFront`,\n    },\n    media: {\n      back: `folderCoverSmallMediaBack`,\n      front: `folderCoverSmallMediaFront`,\n    },\n  },\n  large: {\n    default: {\n      back: `folderCoverLargeDefaultBack`,\n      front: `folderCoverLargeDefaultFront`,\n    },\n    linked: {\n      back: `folderCoverLargeLinkedBack`,\n      front: `folderCoverLargeLinkedFront`,\n    },\n    media: {\n      back: `folderCoverLargeMediaBack`,\n      front: `folderCoverLargeMediaFront`,\n    },\n  },\n};\n\nexport class FolderCover extends React.Component<IFolderCoverProps, IFolderCoverState> {\n  public render(): JSX.Element | null {\n    const {\n      folderCoverSize: size = 'large',\n      folderCoverType: type = 'default',\n      hideContent = false,\n      metadata,\n      signal,\n      children,\n      isFluent,\n      ...divProps\n    } = this.props;\n\n    const assets = ASSETS[size][type];\n    const metadataIcon = <span className={css('ms-FolderCover-metadata', FolderCoverStyles.metadata)}>{metadata}</span>;\n\n    const signalIcon = (\n      <span className={css('ms-FolderCover-signal', FolderCoverStyles.signal, SignalStyles.isFluent)}>{signal}</span>\n    );\n    return (\n      <div\n        {...divProps}\n        className={css(FolderCoverStyles.root, {\n          [`ms-FolderCover--isSmall ${FolderCoverStyles.isSmall}`]: size === 'small',\n          [`ms-FolderCover--isLarge ${FolderCoverStyles.isLarge}`]: size === 'large',\n          [`ms-FolderCover--isDefault ${FolderCoverStyles.isDefault}`]: type === 'default',\n          [`ms-FolderCover--isMedia ${FolderCoverStyles.isMedia}`]: type === 'media',\n          [`ms-FolderCover--isLinked ${FolderCoverStyles.isLinked}`]: type === 'linked',\n          [`ms-FolderCover--hideContent ${FolderCoverStyles.hideContent}`]: hideContent,\n          [`ms-FolderCover--isFluent ${FolderCoverStyles.isFluent}`]: true,\n        })}\n      >\n        <Icon\n          aria-hidden={true}\n          className={css('ms-FolderCover-back', FolderCoverStyles.back)}\n          iconName={assets.back}\n        />\n        {this._renderChildren({ children })}\n        <Icon\n          aria-hidden={true}\n          className={css('ms-FolderCover-front', FolderCoverStyles.front)}\n          iconName={assets.front}\n        />\n        <>\n          {metadataIcon}\n          {signalIcon}\n        </>\n      </div>\n    );\n  }\n\n  private _renderChildren({ children }: Pick<IFolderCoverProps, 'children'>): JSX.Element | null {\n    const finalChildren =\n      typeof children === 'function' ? children(getFolderCoverLayoutFromProps(this.props)) : children;\n\n    return finalChildren ? (\n      <span className={css('ms-FolderCover-content', FolderCoverStyles.content)}>\n        <span className={css('ms-FolderCover-frame', FolderCoverStyles.frame)}>{finalChildren}</span>\n      </span>\n    ) : null;\n  }\n}\n\nexport interface IFolderCoverLayout {\n  contentSize: ISize;\n}\n\nexport function getFolderCoverLayout(element: JSX.Element): IFolderCoverLayout {\n  const folderCoverProps: IFolderCoverProps = element.props;\n\n  return getFolderCoverLayoutFromProps(folderCoverProps);\n}\n\nfunction getFolderCoverLayoutFromProps(folderCoverProps: IFolderCoverProps): IFolderCoverLayout {\n  const { folderCoverSize = 'large' } = folderCoverProps;\n\n  const contentSize = { ...SIZES[folderCoverSize] };\n\n  return {\n    contentSize,\n  };\n}\n\nexport function renderFolderCoverWithLayout(element: JSX.Element, props: Partial<IFolderCoverProps>): JSX.Element {\n  const Tag = element.type;\n\n  return <Tag {...element.props} {...props} />;\n}\n"]}