{"version":3,"file":"Sidebar.types.js","sourceRoot":"../src/","sources":["components/Sidebar/Sidebar.types.tsx"],"names":[],"mappings":";;AAwJa,QAAA,uBAAuB,GAAG;IACrC;;OAEG;IACH,YAAY,EAAE,OAAO;IAErB;;OAEG;IACH,qBAAqB,EAAE,MAAM;IAE7B;;OAEG;IACH,eAAe,EAAE,MAAM;CACxB,CAAC","sourcesContent":["import * as React from 'react';\nimport { IButtonProps, IButtonStyles } from 'office-ui-fabric-react/lib/Button';\nimport { IContextualMenuItem } from 'office-ui-fabric-react/lib/ContextualMenu';\nimport { IStyle, ITheme } from 'office-ui-fabric-react/lib/Styling';\nimport { IComponentAs } from 'office-ui-fabric-react/lib/Utilities';\nimport { IRefObject } from 'office-ui-fabric-react/lib/Utilities';\nimport { SidebarColors } from './Sidebar.styles';\n\nexport interface ISidebar {\n  /**\n   * Toggles the sidebar state to put the sidebar in or out of collapsed mode\n   * @type {(boolean) => void}\n   */\n  toggleCollapsed: () => void;\n\n  /**\n   * Sets the sidebar in or out of collapsed mode\n   * @type {(boolean) => void}\n   */\n  setCollapsed: (newValue: boolean) => void;\n\n  /**\n   * Gets the current collapsed state of the sidebar.\n   * @type {() => boolean}\n   */\n  getCollapsed: () => boolean;\n}\n\nexport interface ISidebarProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the ISidebar interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   * @type {(component: ISidebar | null) => void}\n   */\n  componentRef?: IRefObject<ISidebar>;\n\n  /**\n   * Whether the Sidebar is collapsible or not. If it is, a collapsible button\n   * is added to the top, and each element will render their onRenderCollapsed element.\n   * @type {boolean}\n   */\n  collapsible?: boolean;\n\n  /**\n   * Callback for when the collapse state is toggled.\n   * @type {() => void}\n   */\n  onCollapseChanged?: () => void;\n\n  /**\n   * Whether the Sidebar is collapsible or not. If it is, a collapsible button\n   * is added to the top, and each element will render their onRenderCollapsed element.\n   * @type {string}\n   */\n  collapseButtonAriaLabel?: string;\n\n  /**\n   * The items to be rendered at the bottom of the sidebar.\n   * @type {ISidebarItemProps[]}\n   */\n  footerItems?: ISidebarItemProps[];\n\n  /**\n   * Items to render as children of this Sidebar Item.\n   * @type {ISidebarItemProps[]}\n   */\n  items: ISidebarItemProps[];\n\n  /**\n   * Items to render as children of this Sidebar Item.\n   * @type {ITheme}\n   */\n  theme?: ITheme;\n\n  /**\n   * Current colors for the sidebar. This will default to SidebarColors.Light if none is passed in.\n   * @type {SidebarColors}\n   */\n  colors?: SidebarColors;\n\n  /**\n   * Custom styles to be applied to the sidebar.\n   * @type {ISidebarStyles}\n   */\n  styles?: ISidebarStyles;\n\n  /**\n   * Custom styles to be applied to the collpase button if the sidebar is collapsible.\n   * @type {IButtonStyles}\n   */\n  collapseButtonStyles?: IButtonStyles;\n\n  /**\n   * Custom styles to be applied to all sidebar items.\n   * @type {IButtonStyles}\n   */\n  buttonStyles?: IButtonStyles;\n\n  /**\n   * Button to use for all sidebar items\n   * @type {any}\n   */\n  defaultButton?: IComponentAs<IButtonProps>;\n}\n\nexport interface ISidebarItemProps extends IContextualMenuItem {\n  /**\n   * Whether the item is currently the active page or not\n   * @type {boolean}\n   */\n  active?: boolean;\n\n  /**\n   * Items to render as children of this Sidebar Item.\n   * @type {ISidebarItemProps[]}\n   */\n  items?: ISidebarItemProps[];\n\n  /**\n   * Button to use for this sidebar item\n   * @type {any}\n   */\n  buttonAs?: IComponentAs<IButtonProps>;\n}\n\nexport interface ISidebarStyles {\n  /**\n   * Style for the root element\n   */\n  root?: IStyle;\n\n  /**\n   * Style for the root element when in the collapsed state\n   */\n  rootCollapsed?: IStyle;\n\n  /**\n   * Style for the content element\n   */\n  content?: IStyle;\n\n  /**\n   * Style for the content element when the sidebar is collapsed\n   */\n  contentCollapsed?: IStyle;\n\n  /**\n   * Style for the footer element\n   */\n  footer?: IStyle;\n}\n\nexport const SidebarStylingConstants = {\n  /**\n   * The width of the sidebar when it is in the collapsed state\n   */\n  sidebarWidth: '220px',\n\n  /**\n   * The width of the sidebar when it is in the collapsed state\n   */\n  sidebarCollapsedWidth: '48px',\n\n  /**\n   * The width of the sidebar when it is in the collapsed state\n   */\n  sidebarIconSize: '16px',\n};\n"]}