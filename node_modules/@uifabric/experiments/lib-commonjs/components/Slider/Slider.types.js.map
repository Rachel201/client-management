{"version":3,"file":"Slider.types.js","sourceRoot":"../src/","sources":["components/Slider/Slider.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { SliderBase } from './Slider.base';\nimport { IStyle, ITheme } from '../../Styling';\nimport { IStyleFunctionOrObject, IRefObject } from '../../Utilities';\n\n/* eslint-disable deprecation/deprecation */\n\n/**\n * @deprecated\n * {@docCategory Slider}\n */\nexport interface ISlider {\n  /** @deprecated */\n  value: number | undefined;\n\n  /** @deprecated */\n  focus: () => void;\n}\n/**\n * Format for the array of custom marks.\n * @deprecated\n * {@docCategory Slider}\n */\nexport interface ISliderMarks {\n  /**\n   * value denotes the \"where\" or at what location the label should be placed at\n   * @deprecated\n   */\n  value: number;\n  /**\n   * the custom label string that will be placed at the location denoted by the value\n   * @deprecated\n   */\n  label: string;\n}\n\n/**\n * @deprecated This component was experimental and is not longer being developed on, nor will it be supported in the\n * future.\n * {@docCategory Slider}\n */\nexport interface ISliderProps extends React.ClassAttributes<SliderBase> {\n  /**\n   * Optional callback to access the ISlider interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   * @deprecated\n   */\n  componentRef?: IRefObject<ISlider>;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   * @deprecated\n   */\n  styles?: IStyleFunctionOrObject<ISliderStyleProps, ISliderStyles>;\n\n  /**\n   * Theme provided by High-Order Component.\n   * @deprecated\n   */\n  theme?: ITheme;\n\n  /**\n   * Description label of the Slider.\n   * @deprecated\n   */\n  label?: string;\n\n  /**\n   * The initial value of the Slider. Use this if you intend for the Slider to be an uncontrolled component.\n   * This value is mutually exclusive to value. Use one or the other.\n   * @deprecated\n   */\n  defaultValue?: number;\n\n  /**\n   * The initial value of the Slider. Use this if you intend to pass in a new value as a result of onChange events.\n   * This value is mutually exclusive to defaultValue. Use one or the other.\n   * @deprecated\n   */\n  value?: number;\n\n  /**\n   * The min value of the Slider\n   * @defaultvalue 0\n   * @deprecated\n   */\n  min?: number;\n\n  /**\n   * The max value of the Slider\n   * @defaultvalue 10\n   * @deprecated\n   */\n  max?: number;\n\n  /**\n   * The difference between the two adjacent values of the Slider\n   * @defaultvalue 1\n   * @deprecated\n   */\n  step?: number;\n\n  /**\n   * Whether to show the value on the right of the Slider.\n   * @defaultvalue true\n   * @deprecated\n   */\n  showValue?: boolean;\n\n  /**\n   * Callback when the value has been changed\n   * @deprecated\n   */\n  onChange?: (value: number) => void;\n\n  /**\n   * Callback on mouse up or touch end\n   * @deprecated\n   */\n  onChanged?: (event: MouseEvent | TouchEvent | KeyboardEvent, value: number) => void;\n\n  /**\n   * A description of the Slider for the benefit of screen readers.\n   * @deprecated\n   */\n  ariaLabel?: string;\n\n  /**\n   * A text description of the Slider number value for the benefit of screen readers.\n   * This should be used when the Slider number value is not accurately represented by a number.\n   * @deprecated\n   */\n  ariaValueText?: (value: number) => string;\n\n  /**\n   * Optional flag to render the slider vertically. Defaults to rendering horizontal.\n   * @deprecated\n   */\n  vertical?: boolean;\n\n  /**\n   * Optional flag to render the Slider as disabled.\n   * @defaultvalue false\n   * @deprecated\n   */\n  disabled?: boolean;\n\n  /**\n   * Optional className to attach to the slider root element.\n   * @deprecated\n   */\n  className?: string;\n\n  /**\n   * Optional mixin for additional props on the thumb button within the slider.\n   * @deprecated\n   */\n  buttonProps?: React.HTMLAttributes<HTMLButtonElement>;\n\n  /**\n   * Optional function to format the slider value.\n   * @deprecated\n   */\n  valueFormat?: (value: number) => string;\n\n  /**\n   * Optional flag to attach the origin of slider to zero. Helpful when the range include negatives.\n   * @defaultvalue false\n   * @deprecated\n   */\n  originFromZero?: boolean;\n\n  /**\n   * Optional flag to display tooltip on hover.\n   * @defaultvalue false\n   * @deprecated\n   */\n  showThumbTooltip?: boolean;\n\n  /**\n   * Optional flag to indicate whether to have the Slider component render tick marks or add custom labels\n   * If marks is `true`, tick marks will be placed according to the value of the `step` prop.\n   * If marks is an array, it should contain objects with keys of `value` (denote the where to place the label on the\n   * slider if specified) and `label` (what to label to display at specified position).\n   * @defaultvalue false\n   * @deprecated\n   */\n  marks?: boolean | ISliderMarks[];\n\n  /**\n   * Optional flag to decide that thumb will snap to closest value while moving the slider.\n   * @defaultvalue false\n   * @deprecated\n   */\n  snapToStep?: boolean;\n}\n\n/**\n * @deprecated\n * {@docCategory Slider}\n */\nexport type ISliderStyleProps = Required<Pick<ISliderProps, 'theme'>> &\n  Pick<ISliderProps, 'className' | 'disabled' | 'vertical'> & {\n    /** @deprecated */\n    showTransitions?: boolean;\n    /** @deprecated */\n    showValue?: boolean;\n    /** @deprecated */\n    titleLabelClassName?: string;\n  };\n\n/**\n * @deprecated\n * {@docCategory Slider}\n */\nexport interface ISliderStyles {\n  /**\n   * Style set for the root element.\n   * @deprecated\n   */\n  root: IStyle;\n\n  /**\n   * Style set for the title label above the slider.\n   * @deprecated\n   */\n  titleLabel: IStyle;\n\n  /**\n   * Style set for the container of the slider.\n   * @deprecated\n   */\n  container: IStyle;\n\n  /**\n   * Style set for the actual box containting interactive elements of the slider.\n   * @deprecated\n   */\n  slideBox: IStyle;\n\n  /**\n   * Style set for element that contains all the lines.\n   * @deprecated\n   */\n  line: IStyle;\n\n  /**\n   * Style set for thumb of the slider.\n   * @deprecated\n   */\n  thumb: IStyle;\n\n  /**\n   * Style set for both active and inactive sections of the line.\n   * @deprecated\n   */\n  lineContainer: IStyle;\n\n  /**\n   * Style set for active portion of the line.\n   * @deprecated\n   */\n  activeSection: IStyle;\n\n  /**\n   * Style set for inactive portion of the line.\n   * @deprecated\n   */\n  inactiveSection: IStyle;\n\n  /**\n   * Style set for value label on right/below of the slider.\n   * @deprecated\n   */\n  valueLabel: IStyle;\n\n  /**\n   * Style set for tick on 0 on number line. This element only shows up when originFromZero prop is true.\n   * @deprecated\n   */\n  zeroTick: IStyle;\n\n  /**\n   * Style set for tick on number line. This element only shows up when marks prop is true.\n   * @deprecated\n   */\n  regularTick: IStyle;\n\n  /**\n   * Style set for specified labels on number line. This element only shows up when marks prop is true.\n   * @deprecated\n   */\n  regularLabel: IStyle;\n}\n"]}