{"version":3,"file":"SuggestionsItem.js","sourceRoot":"../src/","sources":["components/FloatingSuggestions/Suggestions/SuggestionsItem.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAE/B,kEAAuF;AAEvF,4DAA8E;AAE9E,mEAAqD;AAErD,IAAM,aAAa,GAAG,8BAAkB,EAAsD,CAAC;AAElF,QAAA,oBAAoB,GAEP,UAAA,KAAK;IAE3B,IAAA,uCAAe,EACf,2CAAoC,EACpC,uBAAO,EACP,2BAAS,EACT,iCAAY,EACZ,6CAAkB,EAClB,mDAAqB,EACrB,qBAAM,EACN,mBAAK,CACG;IAEV,IAAM,UAAU,GAAwD,MAAM;QAC5E,CAAC,CAAC,2EAA2E;YAC3E,aAAa,CAAC,MAAM,IAAI,kCAAS,EAAE;gBACjC,KAAK,EAAE,KAAM;gBACb,SAAS,WAAA;gBACT,SAAS,EAAE,eAAe,CAAC,QAAQ,IAAI,kBAAkB;aAC1D,CAAC;QACJ,CAAC,CAAC;YACE,UAAU,EAAE,eAAG,CAAC,2BAA2B,CAAC;YAC5C,WAAW,EAAE,eAAG,CAAC,4BAA4B,CAAC;SAC/C,CAAC;IAEN,OAAO,CACL,6BAAK,SAAS,EAAE,UAAU,CAAC,IAAI;QAC7B,oBAAC,sBAAa,IAAC,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,CAAC,UAAU;YAC/D,oBAAC,gBAAgB,uBAAK,KAAK,CAAC,eAAe,EAAI,CACjC;QACf,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CACxB,oBAAC,mBAAU,IACT,SAAS,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,EACzE,KAAK,EAAE,qBAAqB,EAC5B,SAAS,EAAE,qBAAqB,EAChC,OAAO,EAAE,YAAY,EACrB,SAAS,EAAE,UAAU,CAAC,WAAW,GACjC,CACH,CAAC,CAAC,CAAC,IAAI,CACJ,CACP,CAAC;AACJ,CAAC,CAAC;AAEW,QAAA,eAAe,GAAG,kBAAM,CACnC,4BAAoB,EACpB,kCAAS,CACV,CAAC","sourcesContent":["import * as React from 'react';\n\nimport { classNamesFunction, css, styled } from 'office-ui-fabric-react/lib/Utilities';\nimport { IProcessedStyleSet } from 'office-ui-fabric-react/lib/Styling';\nimport { CommandButton, IconButton } from 'office-ui-fabric-react/lib/Button';\nimport { ISuggestionItemProps, ISuggestionsItemStyleProps, ISuggestionsItemStyles } from './SuggestionsItem.types';\nimport { getStyles } from './SuggestionsItem.styles';\n\nconst getClassNames = classNamesFunction<ISuggestionsItemStyleProps, ISuggestionsItemStyles>();\n\nexport const SuggestionsItemInner: <TSuggestion>(\n  props: ISuggestionItemProps<TSuggestion>,\n) => React.ReactElement = props => {\n  const {\n    suggestionModel,\n    onRenderSuggestion: RenderSuggestion,\n    onClick,\n    className,\n    onRemoveItem,\n    isSelectedOverride,\n    removeButtonAriaLabel,\n    styles,\n    theme,\n  } = props;\n\n  const classNames: Partial<IProcessedStyleSet<ISuggestionsItemStyles>> = styles\n    ? // TODO don't do this horrible hack to get around `styled` typing problems.\n      getClassNames(styles || getStyles, {\n        theme: theme!,\n        className,\n        suggested: suggestionModel.selected || isSelectedOverride,\n      })\n    : {\n        itemButton: css('ms-Suggestions-itemButton'),\n        closeButton: css('ms-Suggestions-closeButton'),\n      };\n\n  return (\n    <div className={classNames.root}>\n      <CommandButton onClick={onClick} className={classNames.itemButton}>\n        <RenderSuggestion {...props.suggestionModel} />\n      </CommandButton>\n      {props.showRemoveButton ? (\n        <IconButton\n          iconProps={{ iconName: 'Cancel', styles: { root: { fontSize: '12px' } } }}\n          title={removeButtonAriaLabel}\n          ariaLabel={removeButtonAriaLabel}\n          onClick={onRemoveItem}\n          className={classNames.closeButton}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nexport const SuggestionsItem = styled<ISuggestionItemProps<any>, ISuggestionsItemStyleProps, ISuggestionsItemStyles>(\n  SuggestionsItemInner,\n  getStyles,\n);\nexport type SuggestionsItem<T> = React.ComponentType<ISuggestionItemProps<T>>;\n"]}