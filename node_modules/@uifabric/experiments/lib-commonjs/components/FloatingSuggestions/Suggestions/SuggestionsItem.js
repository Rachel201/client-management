"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var Utilities_1 = require("office-ui-fabric-react/lib-commonjs/Utilities");
var Button_1 = require("office-ui-fabric-react/lib-commonjs/Button");
var SuggestionsItem_styles_1 = require("./SuggestionsItem.styles");
var getClassNames = Utilities_1.classNamesFunction();
exports.SuggestionsItemInner = function (props) {
    var suggestionModel = props.suggestionModel, RenderSuggestion = props.onRenderSuggestion, onClick = props.onClick, className = props.className, onRemoveItem = props.onRemoveItem, isSelectedOverride = props.isSelectedOverride, removeButtonAriaLabel = props.removeButtonAriaLabel, styles = props.styles, theme = props.theme;
    var classNames = styles
        ? // TODO don't do this horrible hack to get around `styled` typing problems.
            getClassNames(styles || SuggestionsItem_styles_1.getStyles, {
                theme: theme,
                className: className,
                suggested: suggestionModel.selected || isSelectedOverride,
            })
        : {
            itemButton: Utilities_1.css('ms-Suggestions-itemButton'),
            closeButton: Utilities_1.css('ms-Suggestions-closeButton'),
        };
    return (React.createElement("div", { className: classNames.root },
        React.createElement(Button_1.CommandButton, { onClick: onClick, className: classNames.itemButton },
            React.createElement(RenderSuggestion, tslib_1.__assign({}, props.suggestionModel))),
        props.showRemoveButton ? (React.createElement(Button_1.IconButton, { iconProps: { iconName: 'Cancel', styles: { root: { fontSize: '12px' } } }, title: removeButtonAriaLabel, ariaLabel: removeButtonAriaLabel, onClick: onRemoveItem, className: classNames.closeButton })) : null));
};
exports.SuggestionsItem = Utilities_1.styled(exports.SuggestionsItemInner, SuggestionsItem_styles_1.getStyles);
//# sourceMappingURL=SuggestionsItem.js.map