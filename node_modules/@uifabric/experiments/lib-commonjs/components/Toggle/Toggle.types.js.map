{"version":3,"file":"Toggle.types.js","sourceRoot":"../src/","sources":["components/Toggle/Toggle.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport {\n  IComponent,\n  IComponentStyles,\n  IHTMLElementSlot,\n  IHTMLSlot,\n  ISlottableProps,\n  IStyleableComponentProps,\n} from '../../Foundation';\nimport { IKeytipProps } from 'office-ui-fabric-react/lib/Keytip';\nimport { IBaseProps, IComponentAs } from '../../Utilities';\nimport { IRawStyleBase } from '@uifabric/merge-styles/lib/IRawStyleBase';\nimport { ILabelSlot } from '../../utilities/factoryComponents.types';\n\n/* eslint-disable deprecation/deprecation */\n\n/** @deprecated */\nexport type IToggleComponent = IComponent<IToggleProps, IToggleTokens, IToggleStyles, IToggleViewProps>;\n\n// These types are redundant with IToggleComponent but are needed until TS function return widening issue is resolved:\n// https://github.com/Microsoft/TypeScript/issues/241\n// For now, these helper types can be used to provide return type safety when specifying tokens and styles functions.\n/** @deprecated */\nexport type IToggleTokenReturnType = ReturnType<Extract<IToggleComponent['tokens'], Function>>;\n/** @deprecated */\nexport type IToggleStylesReturnType = ReturnType<Extract<IToggleComponent['styles'], Function>>;\n\n/** @deprecated */\nexport interface IToggleSlots {\n  /**\n   * Defines root slot.\n   * @deprecated\n   */\n  root?: IHTMLSlot;\n\n  /**\n   * Defines label slot displayed above pill.\n   * @deprecated\n   */\n  label?: ILabelSlot;\n\n  /**\n   * Defines container slot for the toggle pill and the text next to it.\n   * @deprecated\n   */\n  container?: IHTMLSlot;\n\n  /**\n   * Defines pill slot, rendered as a button by default.\n   * @deprecated\n   */\n  pill?: IHTMLElementSlot<'button'>;\n\n  /**\n   * Defines thumb slot inside of the pill.\n   * @deprecated\n   */\n  thumb?: IHTMLSlot;\n\n  /**\n   * Defines text slot displayed alongside pill. Overrides onText and offText.\n   * @deprecated\n   */\n  text?: ILabelSlot;\n}\n\n/** @deprecated */\nexport interface IToggle {\n  focus: () => void;\n}\n\n/**\n * @deprecated This component was experimental and is not longer being developed on, nor will it be supported in the\n * future.\n */\nexport interface IToggleProps\n  extends ISlottableProps<IToggleSlots>,\n    IStyleableComponentProps<IToggleViewProps, IToggleTokens, IToggleStyles>,\n    IBaseProps<IToggle> {\n  /**\n   * Render the root element as another type.\n   * @deprecated\n   */\n  as?: IComponentAs<React.HTMLAttributes<HTMLElement>>;\n\n  /**\n   * Text for screen-reader to announce as the name of the toggle.\n   * @deprecated\n   */\n  ariaLabel?: string;\n\n  /**\n   * Initial state of the toggle. If you want the toggle to maintain its own state, use this.\n   * Otherwise use `checked`.\n   * @default false\n   * @deprecated\n   */\n  defaultChecked?: boolean;\n\n  /**\n   * Checked state of the toggle. If you are maintaining state yourself, use this property.\n   * Otherwise use `defaultChecked`.\n   * @default defaultChecked\n   * @deprecated\n   */\n  checked?: boolean;\n\n  /**\n   * Optional disabled flag.\n   * @default false\n   * @deprecated\n   */\n  disabled?: boolean;\n\n  /**\n   * Callback issued when the value changes.\n   * @deprecated\n   */\n  onChange?: (event: React.MouseEvent<HTMLElement>, checked?: boolean) => void;\n\n  /**\n   * Optional keytip for this toggle\n   * @deprecated\n   */\n  keytipProps?: IKeytipProps;\n\n  /**\n   * Text to display when toggle is ON.\n   * @deprecated\n   */\n  onText?: string;\n\n  /**\n   * Text to display when toggle is OFF.\n   * @deprecated\n   */\n  offText?: string;\n}\n\n/** @deprecated */\nexport interface IToggleViewProps extends IToggleProps {\n  /**\n   * Toggle input callback triggered by mouse and keyboard input.\n   * @deprecated\n   */\n  onClick?: (ev: React.MouseEvent<Element>) => void;\n\n  /**\n   * Reference to the toggle button.\n   * @deprecated\n   */\n  toggleButtonRef?: React.RefObject<HTMLButtonElement>;\n}\n\n/** @deprecated */\nexport interface IToggleTokens {\n  /** @deprecated */\n  pillBackground?: string;\n  /** @deprecated */\n  pillHoveredBackground?: string;\n  /** @deprecated */\n  pillBorderColor?: string;\n  /** @deprecated */\n  pillHoveredBorderColor?: string;\n  /** @deprecated */\n  pillJustifyContent?: IRawStyleBase['justifyContent'];\n  /** @deprecated */\n  pillHighContrastBackground?: string;\n  /** @deprecated */\n  pillHighContrastHoveredBackground?: string;\n  /** @deprecated */\n  pillHighContrastBorderColor?: string;\n  /** @deprecated */\n  pillHighContrastHoveredBorderColor?: string;\n\n  /** @deprecated */\n  thumbBackground?: string;\n  /** @deprecated */\n  thumbHighContrastBackground?: string;\n  /** @deprecated */\n  thumbHighContrastBorderColor?: string;\n\n  /** @deprecated */\n  textColor?: string;\n  /** @deprecated */\n  textHighContrastColor?: string;\n}\n\n/** @deprecated */\nexport type IToggleStyles = IComponentStyles<IToggleSlots>;\n"]}