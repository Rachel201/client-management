{"version":3,"file":"ChicletCard.base.js","sourceRoot":"../src/","sources":["components/Chiclet/ChicletCard.base.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,6CAA0D;AAE1D,yCAA4C;AAE5C,IAAM,aAAa,GAAG,8BAAkB,EAA8C,CAAC;AAEvF,IAAM,oBAAoB,GAAG,qBAAW,CAAC,+BAA+B,EAAE;IACxE,MAAM,EAAE,GAAG;IACX,KAAK,EAAE,MAAM;IACb,SAAS,EAAE,SAAS;CACrB,CAAC,CAAC;AAEH,IAAM,YAAY,GAAG,qBAAW,CAAC;IAC/B,QAAQ,EAAE,MAAM;IAChB,MAAM,EAAE,MAAM;IACd,QAAQ,EAAE,QAAQ;IAClB,SAAS,EAAE,SAAS;CACrB,CAAC,CAAC;AAEH;IAAqC,2CAAsC;IAA3E;;IAuCA,CAAC;IApCQ,gCAAM,GAAb;QACQ,IAAA,eAAmF,EAAjF,gBAAK,EAAE,4BAAW,EAAE,YAAG,EAAE,oBAAO,EAAE,wBAAS,EAAE,kBAAM,EAAE,gBAAK,EAAE,kBAAqB,CAAC;QAE1F,IAAM,UAAU,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QAE1C,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,KAAM,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;QAEvE,4DAA4D;QAC5D,IAAM,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC;QACzC,IAAM,QAAQ,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAE5C,OAAO,CACL,6BAAK,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;YACpF,IAAI,CAAC,cAAc,EAAE;YACtB,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;gBACnC,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK,IAAG,KAAK,CAAO;gBACrD,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,WAAW,IAAG,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAO;gBACpF,MAAM,CACH,CACF,CACP,CAAC;IACJ,CAAC;IAEO,wCAAc,GAAtB;QACQ,IAAA,eAAyC,EAAvC,gBAAK,EAAE,sBAAQ,EAAE,oBAAsB,CAAC;QAEhD,OAAO,CACL,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,IACrC,OAAO,CAAC,CAAC,CAAC,EAAE,wBAAwB;QACnC,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,eAAG,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,EAAE,oBAAoB,CAAC,EAAE,CAAC,CAC/F,CAAC,CAAC,CAAC,CACF,6BAAK,SAAS,EAAE,YAAY,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,GAAI,CACnF,CACG,CACP,CAAC;IACJ,CAAC;IACH,sBAAC;AAAD,CAAC,AAvCD,CAAqC,KAAK,CAAC,SAAS,GAuCnD;AAvCY,0CAAe","sourcesContent":["import * as React from 'react';\nimport { css, classNamesFunction } from '../../Utilities';\nimport { IChicletCardStyles, IChicletCardStyleProps, IChicletCardProps } from './ChicletCard.types';\nimport { mergeStyles } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IChicletCardStyleProps, IChicletCardStyles>();\n\nconst customPreviewStyling = mergeStyles('ms-ChicletCard-preview-custom', {\n  height: 112,\n  width: '100%',\n  objectFit: 'contain',\n});\n\nconst imageStyling = mergeStyles({\n  maxWidth: '100%',\n  height: '100%',\n  overflow: 'hidden',\n  objectFit: 'contain',\n});\n\nexport class ChicletCardBase extends React.Component<IChicletCardProps, {}> {\n  private _classNames: { [key in keyof IChicletCardStyles]: string };\n\n  public render(): JSX.Element {\n    const { title, description, url, onClick, className, footer, theme, styles } = this.props;\n\n    const actionable = onClick ? true : false;\n\n    this._classNames = getClassNames(styles, { theme: theme!, className });\n\n    // if this element is actionable it should have an aria role\n    const role = onClick ? 'button' : 'link';\n    const tabIndex = actionable ? 0 : undefined;\n\n    return (\n      <div tabIndex={tabIndex} role={role} onClick={onClick} className={this._classNames.root}>\n        {this._renderPreview()}\n        <div className={this._classNames.info}>\n          <div className={this._classNames.title}>{title}</div>\n          <div className={this._classNames.description}>{description ? description : url}</div>\n          {footer}\n        </div>\n      </div>\n    );\n  }\n\n  private _renderPreview(): JSX.Element {\n    const { image, imageAlt, preview } = this.props;\n\n    return (\n      <div className={this._classNames.preview}>\n        {preview ? ( // render custom preview\n          React.cloneElement(preview, { className: css(preview.props.className, customPreviewStyling) })\n        ) : (\n          <img className={imageStyling} src={image} alt={imageAlt ? imageAlt : undefined} />\n        )}\n      </div>\n    );\n  }\n}\n"]}