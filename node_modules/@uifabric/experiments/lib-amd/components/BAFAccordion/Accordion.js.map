{"version":3,"file":"Accordion.js","sourceRoot":"../src/","sources":["components/BAFAccordion/Accordion.tsx"],"names":[],"mappings":"AAAA;;GAEG;;;;IAaH;QAA+B,qCAAiD;QAC9E,mBAAY,KAAsB;YAAlC,YACE,kBAAM,KAAK,CAAC,SAOb;YA0CM,iBAAW,GAAG;gBACnB,KAAI,CAAC,QAAQ,CAAC,UAAC,SAA0B;oBACvC,OAAO,EAAE,gBAAgB,EAAE,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC;gBAC3D,CAAC,CAAC,CAAC;YACL,CAAC,CAAC;YAnDA,kCAAsB,CAAC,KAAI,CAAC,CAAC;YAE7B,KAAI,CAAC,KAAK,GAAG;gBACX,gBAAgB,EAAE,KAAK;aACxB,CAAC;;QACJ,CAAC;QAEM,sCAAkB,GAAzB,UAA0B,SAA0B,EAAE,SAA0B;YAC9E,IAAI,IAAI,CAAC,KAAK,CAAC,gBAAgB,IAAI,CAAC,SAAS,CAAC,gBAAgB,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;gBACnF,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;aACrB;iBAAM,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,IAAI,SAAS,CAAC,gBAAgB,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;gBAC3F,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;aACtB;QACH,CAAC;QAEM,0BAAM,GAAb;YACE,mDAAmD;YACnD,IAAM,eAAqE,EAAnE,8BAAY,EAAE,wBAAS,EAAE,sBAAQ,EAAE,oBAAO,EAAE,gFAAuB,CAAC;YACtE,IAAA,wCAAa,CAAgB;YAEnC,IAAM,eAAe,GAAG,QAAQ,IAAI,sBAAa,CAAC;YAElD,IAAI,CAAC,aAAa,EAAE;gBAClB,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,aAAa,EAAE,CAAC;aACvG;YAED,IAAM,eAAe,GAAG,YAAY;gBAClC,CAAC,CAAC,iCAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,YAAY,CAAC;gBACjE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;YAE/B,OAAO,CACL,6BAAK,SAAS,EAAE,eAAG,CAAC,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,gBAAgB,IAAI,8BAA8B,EAAE,SAAS,CAAC;gBAC3G,oBAAC,eAAe,qBACd,OAAO,EAAE,IAAI,CAAC,WAAW,EACzB,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,aAAa,EAAE,aAAa,EAC5B,SAAS,EAAE,qBAAqB,mBACjB,IAAI,CAAC,KAAK,CAAC,gBAAgB,IACtC,KAAK,EACT;gBACD,IAAI,CAAC,KAAK,CAAC,gBAAgB,IAAI,CAC9B,6BAAK,SAAS,EAAE,sBAAsB,IAAG,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAO,CACtF,CACG,CACP,CAAC;QACJ,CAAC;QAOH,gBAAC;IAAD,CAAC,AAxDD,CAA+B,KAAK,CAAC,SAAS,GAwD7C;IAxDY,8BAAS","sourcesContent":["/*!\n * Copyright (C) Microsoft Corporation. All rights reserved.\n */\n\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport { initializeComponentRef, css, composeRenderFunction } from 'office-ui-fabric-react/lib/Utilities';\nimport * as React from 'react';\nimport './Accordion.scss';\nimport { IAccordion, IAccordionProps } from './Accordion.types';\n\nexport interface IAccordionState {\n  // represents whether the accordion is currently expanded or closed.\n  isContentVisible?: boolean | undefined;\n}\n\nexport class Accordion extends React.Component<IAccordionProps, IAccordionState> implements IAccordion {\n  constructor(props: IAccordionProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      isContentVisible: false,\n    };\n  }\n\n  public componentDidUpdate(prevProps: IAccordionProps, prevState: IAccordionState): void {\n    if (this.state.isContentVisible && !prevState.isContentVisible && this.props.onOpen) {\n      this.props.onOpen();\n    } else if (!this.state.isContentVisible && prevState.isContentVisible && this.props.onClose) {\n      this.props.onClose();\n    }\n  }\n\n  public render(): JSX.Element {\n    // eslint-disable-next-line deprecation/deprecation\n    const { onRenderMenu, className, buttonAs, onClick, ...other } = this.props;\n    let { menuIconProps } = this.props;\n\n    const AccordionButton = buttonAs || DefaultButton;\n\n    if (!menuIconProps) {\n      menuIconProps = this.state.isContentVisible ? { iconName: 'ChevronUp' } : { iconName: 'ChevronDown' };\n    }\n\n    const onRenderContent = onRenderMenu\n      ? composeRenderFunction(this.props.onRenderContent, onRenderMenu)\n      : this.props.onRenderContent;\n\n    return (\n      <div className={css('ba-Accordion', this.state.isContentVisible && 'ba-Accordion--contentVisible', className)}>\n        <AccordionButton\n          onClick={this.toggleState}\n          onMenuClick={this.toggleState}\n          menuIconProps={menuIconProps}\n          className={'ba-Accordion-header'}\n          aria-expanded={this.state.isContentVisible}\n          {...other}\n        />\n        {this.state.isContentVisible && (\n          <div className={'ba-Accordion-content'}>{onRenderContent(this.props.menuProps)}</div>\n        )}\n      </div>\n    );\n  }\n\n  public toggleState = () => {\n    this.setState((prevState: IAccordionState) => {\n      return { isContentVisible: !prevState.isContentVisible };\n    });\n  };\n}\n"]}