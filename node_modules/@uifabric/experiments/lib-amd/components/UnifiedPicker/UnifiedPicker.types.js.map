{"version":3,"file":"UnifiedPicker.types.js","sourceRoot":"../src/","sources":["components/UnifiedPicker/UnifiedPicker.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { IRefObject } from '@uifabric/utilities';\nimport { IBaseFloatingSuggestionsProps } from '../FloatingSuggestionsComposite/FloatingSuggestions.types';\nimport { ISelectedItemsListProps } from '../SelectedItemsList/SelectedItemsList.types';\nimport { IFocusZoneProps, IInputProps, Autofill, IDragDropEvents } from 'office-ui-fabric-react';\n\nexport interface IUnifiedPickerProps<T> {\n  /**\n   * Ref of the component\n   */\n  componentRef?: IRefObject<any>;\n\n  /**\n   * ClassName for the picker\n   */\n  className?: string;\n\n  /**\n   * Component to render selected items\n   * selectedItemsListProps will be passed as props to this component\n   */\n  onRenderSelectedItems: (props: ISelectedItemsListProps<T>) => JSX.Element;\n\n  /**\n   * Props to pass to SelectedItems component\n   */\n  selectedItemsListProps: ISelectedItemsListProps<T>;\n\n  /**\n   * Component to render floating suggestions\n   * floatingSuggestionProps will be passed as props to this component\n   */\n  onRenderFloatingSuggestions: (props: IBaseFloatingSuggestionsProps<T>) => JSX.Element;\n\n  /**\n   * Props to pass to floating suggestions component\n   */\n  floatingSuggestionProps: IBaseFloatingSuggestionsProps<T>;\n\n  /**\n   * Current query string to show in input component\n   */\n  currentRenderedQuerystring?: string;\n\n  /**\n   * Callback when input query string changes\n   */\n  onQueryStringChange?: (query: string) => void;\n\n  /**\n   * A callback for when the user put focus on the picker\n   */\n  onFocus?: React.FocusEventHandler<HTMLInputElement | Autofill>;\n\n  /**\n   * A callback for when the user moves the focus away from the picker\n   */\n  onBlur?: React.FocusEventHandler<HTMLInputElement | Autofill>;\n\n  /**\n   * Focus zone props\n   */\n  focusZoneProps?: IFocusZoneProps;\n\n  /**\n   * Autofill input native props\n   * @defaultvalue undefined\n   */\n  inputProps?: IInputProps;\n\n  /**\n   * Header component\n   */\n  headerComponent?: JSX.Element;\n\n  /**\n   * On paste to input\n   */\n  onPaste?: (pastedValue: string, selectedItemsList: T[]) => void;\n\n  /**\n   * On input value change\n   */\n  onInputChange?: (filter: string, composing?: boolean, resultItemsList?: T[]) => void;\n\n  /**\n   * Callback for when a key is pressed\n   */\n  onKeyDown?: (ev: React.KeyboardEvent<HTMLDivElement>) => void;\n\n  /**\n   * Drag drop events callback interface\n   */\n  dragDropEvents?: IDragDropEvents;\n\n  /**\n   * String used in drag drop to identify information for this specific control\n   * Is only used when dragDropEvents is not specified (default)\n   * getSerializedItems and getDeserializedItems on the selectedItemsListProps should be specified as well\n   * if this is used\n   */\n  customClipboardType?: string;\n\n  /**\n   * If dragDropEvents is set, this property will be ignored\n   * @defaultvalue true\n   */\n  defaultDragDropEnabled?: boolean;\n\n  /**\n   * If this property is not specified, defaultDragDropEnabled will be used\n   * @defaultvalue true\n   */\n  autofillDragDropEnabled?: boolean;\n\n  /**\n   * Function to customize drop behavior over the autofill portion\n   * If this is not set, but autofillDragDropEnabled is, the built\n   * in drop behavior will be used.\n   */\n  onDropAutoFill?: (event?: React.DragEvent<HTMLDivElement>) => void;\n\n  /**\n   * A function used to validate if raw text entered into the well can be added\n   */\n  onValidateInput?: (input: string) => boolean;\n}\n"]}