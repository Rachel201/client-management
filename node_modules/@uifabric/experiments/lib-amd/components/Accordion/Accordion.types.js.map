{"version":3,"file":"Accordion.types.js","sourceRoot":"../src/","sources":["components/Accordion/Accordion.types.ts"],"names":[],"mappings":"","sourcesContent":["import { IStyle } from '../../Styling';\nimport { IComponent, IHTMLSlot, IStyleableComponentProps } from '../../Foundation';\n\nexport type IAccordionComponent = IComponent<IAccordionProps, IAccordionTokens, IAccordionStyles>;\n\n// These types are redundant with IAccordionComponent but are needed until TS function\n// return widening issue is resolved:\n// https://github.com/Microsoft/TypeScript/issues/241\n// For now, these helper types can be used to provide return type safety when specifying tokens and styles functions.\nexport type IAccordionTokenReturnType = ReturnType<Extract<IAccordionComponent['tokens'], Function>>;\nexport type IAccordionStylesReturnType = ReturnType<Extract<IAccordionComponent['styles'], Function>>;\n\nexport interface IAccordionSlots {\n  root?: IHTMLSlot;\n}\n\nexport interface IAccordionProps\n  extends IAccordionSlots,\n    IStyleableComponentProps<IAccordionProps, IAccordionTokens, IAccordionStyles> {\n  collapseItems?: boolean;\n}\n\nexport interface IAccordionTokens {}\n\nexport interface IAccordionStyles {\n  root: IStyle;\n}\n"]}