{"version":3,"file":"Chiclet.types.js","sourceRoot":"../src/","sources":["components/Chiclet/Chiclet.types.ts"],"names":[],"mappings":";;;IA6FA,IAAY,WAoBX;IApBD,WAAY,WAAW;QACrB;;WAEG;QACH,iDAAU,CAAA;QAEV;;WAEG;QACH,+CAAS,CAAA;QAET;;WAEG;QACH,iDAAU,CAAA;QAEV;;WAEG;QACH,+CAAS,CAAA;IACX,CAAC,EApBW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAoBtB","sourcesContent":["import * as React from 'react';\nimport { IStyleFunctionOrObject, IRefObject } from '../../Utilities';\nimport { IStyle, ITheme } from '../../Styling';\n\nexport interface IChiclet {}\n\nexport interface IChicletProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * Optional callback to access the IChiclet interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IChiclet>;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IChicletStyleProps, IChicletStyles>;\n\n  /**\n   * Optional class for chiclet.\n   */\n  className?: string;\n\n  /**\n   * Sharing link.\n   */\n  url: string;\n\n  /**\n   * File title to render for the component.\n   */\n  title: string;\n\n  /**\n   * Chiclet size to render\n   */\n  size?: ChicletSize;\n\n  /**\n   * Description to render for the component in place of the url.\n   */\n  description?: React.ReactElement<JSX.Element>;\n\n  /**\n   * Preview to render for the component.\n   */\n  preview?: React.ReactElement<HTMLElement>;\n\n  /**\n   * Image to render for the component.\n   */\n  image?: string;\n\n  /**\n   * Alternate image to render for the component.\n   */\n  imageAlt?: string;\n\n  /**\n   * Icon to render for the component.\n   */\n  itemType?: 'word' | 'docx' | 'powerpoint' | 'pptx' | 'excel' | 'xlsx';\n\n  /**\n   * Function to call when the card is clicked.\n   */\n  onClick?: (ev?: React.MouseEvent<HTMLElement>) => void;\n\n  /**\n   * Footer to render for the component.\n   */\n  footer?: React.ReactElement<JSX.Element>;\n\n  /**\n   * Theme for the component.\n   */\n  theme?: ITheme;\n}\n\nexport interface IChicletStyleProps {\n  /**\n   * Theme for the component.\n   */\n  theme?: ITheme;\n}\n\nexport interface IChicletStyles {\n  /**\n   * Style for the root element when fixed.\n   */\n  root?: IStyle;\n}\n\nexport enum ChicletSize {\n  /**\n   * X-Small Chiclet\n   */\n  xSmall = 0,\n\n  /**\n   * Small Chiclet\n   */\n  small = 1,\n\n  /**\n   * Medium Chiclet\n   */\n  medium = 2,\n\n  /**\n   * Large Chiclet\n   */\n  large = 3,\n}\n"]}