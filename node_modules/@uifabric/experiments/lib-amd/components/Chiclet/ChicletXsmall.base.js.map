{"version":3,"file":"ChicletXsmall.base.js","sourceRoot":"../src/","sources":["components/Chiclet/ChicletXsmall.base.tsx"],"names":[],"mappings":";;;IAMA,IAAM,aAAa,GAAG,8BAAkB,EAA8C,CAAC;IAEvF,IAAM,oBAAoB,GAAG,qBAAW,CAAC;QACvC,MAAM,EAAE,EAAE;QACV,KAAK,EAAE,MAAM;QACb,SAAS,EAAE,SAAS;KACrB,CAAC,CAAC;IAEH,IAAM,YAAY,GAAG,qBAAW,CAAC;QAC/B,QAAQ,EAAE,MAAM;QAChB,MAAM,EAAE,MAAM;QACd,QAAQ,EAAE,QAAQ;QAClB,SAAS,EAAE,SAAS;KACrB,CAAC,CAAC;IAEH;QAAuC,6CAAsC;QAA7E;;QAuCA,CAAC;QApCQ,kCAAM,GAAb;YACQ,IAAA,eAAsE,EAApE,oBAAO,EAAE,gBAAK,EAAE,wBAAS,EAAE,kBAAM,EAAE,gBAAK,EAAE,kBAAM,EAAE,YAAkB,CAAC;YAE7E,IAAM,cAAc,GAAG,CAAC,CAAC,MAAM,CAAC;YAEhC,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,KAAM,EAAE,SAAS,WAAA,EAAE,cAAc,gBAAA,EAAE,CAAC,CAAC;YAEvF,4DAA4D;YAC5D,IAAM,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC;YACzC,IAAM,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YAEzC,OAAO,CACL,6BAAK,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;gBACpF,IAAI,CAAC,cAAc,EAAE;gBACtB,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;oBACnC,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK,IAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAO;oBACpE,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,IAAG,GAAG,CAAO,CAC7C;gBACL,MAAM,CACH,CACP,CAAC;QACJ,CAAC;QAEO,0CAAc,GAAtB;YACQ,IAAA,eAAyC,EAAvC,gBAAK,EAAE,sBAAQ,EAAE,oBAAsB,CAAC;YAEhD,OAAO,CACL,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,IACrC,OAAO,CAAC,CAAC,CAAC,EAAE,wBAAwB;YACnC,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,eAAG,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,EAAE,oBAAoB,CAAC,EAAE,CAAC,CAC/F,CAAC,CAAC,CAAC,CACF,6BAAK,SAAS,EAAE,YAAY,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,GAAI,CACnF,CACG,CACP,CAAC;QACJ,CAAC;QACH,wBAAC;IAAD,CAAC,AAvCD,CAAuC,KAAK,CAAC,SAAS,GAuCrD;IAvCY,8CAAiB","sourcesContent":["import * as React from 'react';\nimport { css, classNamesFunction } from '../../Utilities';\nimport { IChicletCardStyles, IChicletCardStyleProps } from './ChicletCard.types';\nimport { IChicletCardProps } from './ChicletCard.types';\nimport { mergeStyles } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IChicletCardStyleProps, IChicletCardStyles>();\n\nconst customPreviewStyling = mergeStyles({\n  height: 60,\n  width: '100%',\n  objectFit: 'contain',\n});\n\nconst imageStyling = mergeStyles({\n  maxWidth: '100%',\n  height: '100%',\n  overflow: 'hidden',\n  objectFit: 'contain',\n});\n\nexport class ChicletXsmallBase extends React.Component<IChicletCardProps, {}> {\n  private _classNames: { [key in keyof IChicletCardStyles]: string };\n\n  public render(): JSX.Element {\n    const { onClick, title, className, footer, theme, styles, url } = this.props;\n\n    const footerProvided = !!footer;\n\n    this._classNames = getClassNames(styles, { theme: theme!, className, footerProvided });\n\n    // if this element is actionable it should have an aria role\n    const role = onClick ? 'button' : 'link';\n    const tabIndex = onClick ? 0 : undefined;\n\n    return (\n      <div tabIndex={tabIndex} role={role} onClick={onClick} className={this._classNames.root}>\n        {this._renderPreview()}\n        <div className={this._classNames.info}>\n          <div className={this._classNames.title}>{title ? title : null}</div>\n          <div className={this._classNames.url}>{url}</div>\n        </div>\n        {footer}\n      </div>\n    );\n  }\n\n  private _renderPreview(): JSX.Element {\n    const { image, imageAlt, preview } = this.props;\n\n    return (\n      <div className={this._classNames.preview}>\n        {preview ? ( // render custom preview\n          React.cloneElement(preview, { className: css(preview.props.className, customPreviewStyling) })\n        ) : (\n          <img className={imageStyling} src={image} alt={imageAlt ? imageAlt : undefined} />\n        )}\n      </div>\n    );\n  }\n}\n"]}