{"version":3,"file":"FloatingSuggestions.types.js","sourceRoot":"../src/","sources":["components/FloatingSuggestionsComposite/FloatingSuggestions.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { ICalloutProps } from 'office-ui-fabric-react/lib/Callout';\nimport { IStyle } from '@uifabric/styling';\nimport {\n  IFloatingSuggestionItemProps,\n  IFloatingSuggestionOnRenderItemProps,\n  IFloatingSuggestionItem,\n} from './FloatingSuggestionsItem/FloatingSuggestionsItem.types';\nimport { IRenderFunction, IRefObject } from '@uifabric/utilities';\nimport { IFloatingSuggestionsHeaderFooterProps } from './FloatingSuggestionsHeaderFooterItem/FloatingSuggestionsHeaderFooterItem.types';\n\n/**\n * FloatingSuggestions component props\n * Type T is option data parameter to render custom suggestions\n */\nexport interface IBaseFloatingSuggestionsProps<T> {\n  /**\n   * Component reference in case needed to focus FloatingSuggestions\n   */\n  componentRef?: IRefObject<HTMLDivElement>;\n  /**\n   * List of suggestions to be displayed with Type T\n   */\n  suggestions: IFloatingSuggestionItem<T>[];\n  /**\n   * This param decides whether to display suggestions or not\n   * Must be set by parent component\n   */\n  isSuggestionsVisible: boolean;\n  /**\n   * Custom component to render suggestion\n   */\n  onRenderSuggestion?: (renderProps: IFloatingSuggestionOnRenderItemProps<T>) => JSX.Element;\n  /**\n   * Callback function on remove of suggestion from list\n   */\n  onRemoveSuggestion?: (ev: React.MouseEvent<HTMLElement>, item: IFloatingSuggestionItemProps<T>) => void;\n  /**\n   * Callback function on selection of suggestion from list\n   */\n  onSuggestionSelected?: (ev: React.MouseEvent<HTMLElement>, item: IFloatingSuggestionItemProps<T>) => void;\n  /**\n   * Custom header renderer which takes suggestions and headertext if passed\n   * Going forward, this should accept the user defined type as parameter\n   */\n  onRenderHeader?: (suggestionItems?: IFloatingSuggestionItemProps<T>[], suggestionsHeaderText?: string) => JSX.Element;\n  /**\n   * Custom footer renderer which takes suggestions as param\n   * Going forward, this should accept the user defined type as param\n   */\n  onRenderFooter?: (suggestionItems?: IFloatingSuggestionItemProps<T>[]) => JSX.Element;\n  /**\n   * Callback when the callout dismiss is called\n   * When this callback is called parent comoponent must handle suggestion visibility\n   */\n  onFloatingSuggestionsDismiss?: (ev?: React.MouseEvent) => void;\n  /**\n   * Option to show suggestion remove button\n   * By default this is false\n   */\n  showSuggestionRemoveButton?: boolean;\n  /**\n   * class name for the FloatingSuggestions div\n   */\n  className?: string;\n  /**\n   * Target element here callout should be mounted\n   * Pass the element current value to position the callout\n   */\n  targetElement: HTMLInputElement | undefined | null;\n  /**\n   * Callout width\n   */\n  calloutWidth?: number;\n  /**\n   * Callout props\n   */\n  calloutProps?: ICalloutProps;\n  /**\n   * Class name for suggestion list container\n   */\n  suggestionListClassName?: string;\n  /**\n   * Clas name for Suggestion item\n   */\n  suggestionsItemClassName?: string;\n  /**\n   * Header text to display\n   */\n  suggestionsHeaderText?: string;\n  /**\n   * Custom renderer when there are no results found\n   */\n  onRenderNoResultFound?: IRenderFunction<void>;\n  /**\n   * Text to display when there are no results found\n   */\n  noResultsFoundText?: string;\n  /**\n   * Maximum suggestions to how\n   * Might not be used as showing suggestion must be by sending the suggestions\n   */\n  maximumSuggestionsToShow?: number;\n  /**\n   * Aria label for suggestions container\n   */\n  suggestionsContainerAriaLabel?: string;\n  /**\n   * Aria label for suggestions list container\n   */\n  suggestionListAriaLabel?: string;\n  /**\n   * Aria label for suggestion remove button\n   */\n  removeItemButtonAriaLabel?: string;\n  /**\n   * Index to indicate the selected suggestion\n   * This logic must be driven by parent component by setting isSelected in data model\n   * There should be no logic to handle this in Suggestion component as the focus is never on this component\n   */\n  selectedSuggestionIndex?: number;\n  /**\n   * If set, the picker will be this width. If not, picker will be as wide as necessary\n   * to fully display input values.\n   */\n  pickerWidth?: string;\n  /**\n   * Arrow key callback\n   */\n  onKeyDown?: (ev: React.KeyboardEvent<HTMLElement>) => void;\n  /**\n   * The properties used for selectable headers and footers\n   * takes precedence over onRenderHeader and onRenderFooter\n   */\n  pickerSuggestionsProps?: IBaseFloatingPickerHeaderFooterProps;\n  /**\n   * Index to indicate the selected header\n   * This logic must be driven by parent component\n   * Should be used with the headerItemProps on the pickerSuggestionProps\n   */\n  selectedHeaderIndex?: number;\n  /**\n   * Index to indicate the selected footer\n   * This logic must be driven by parent component\n   * Should be used with the footerItemProps on the pickerSuggestionProps\n   */\n  selectedFooterIndex?: number;\n\n  /**\n   * A callback for when the floating suggestions are shown\n   */\n  onSuggestionsShown?: () => void;\n\n  /**\n   * A callback for when the floating suggestions are hidden (on dismiss or selection)\n   */\n  onSuggestionsHidden?: () => void;\n}\n\nexport interface IBaseFloatingPickerHeaderFooterProps {\n  /**\n   * An ARIA label for the container that is the parent of the suggestions header items.\n   */\n  suggestionsHeaderContainerAriaLabel?: string;\n  /**\n   * An ARIA label for the container that is the parent of the suggestions footer items.\n   */\n  suggestionsFooterContainerAriaLabel?: string;\n  /**\n   * The header items props\n   */\n  headerItemsProps?: IFloatingSuggestionsHeaderFooterProps[];\n  /**\n   * The footer items props\n   */\n  footerItemsProps?: IFloatingSuggestionsHeaderFooterProps[];\n}\n\n/**\n * FLoatingSuggestions style props\n */\nexport interface IBaseFloatingSuggestionsStylesProps {}\n\n/**\n * FLoatingSuggestions styles\n */\nexport interface IBaseFloatingSuggestionsStyles {\n  root: IStyle;\n  callout: IStyle;\n}\n"]}