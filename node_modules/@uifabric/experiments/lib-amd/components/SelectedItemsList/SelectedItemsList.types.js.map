{"version":3,"file":"SelectedItemsList.types.js","sourceRoot":"../src/","sources":["components/SelectedItemsList/SelectedItemsList.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { IPickerItemProps } from 'office-ui-fabric-react/lib/Pickers';\nimport { IRefObject } from 'office-ui-fabric-react/lib/Utilities';\nimport { IDragDropEvents, IDragDropHelper } from 'office-ui-fabric-react/lib/utilities/dragdrop/index';\nexport interface ISelectedItemsList<T> {\n  /**\n   * Current value of the input\n   */\n  items: T[];\n  /**\n   * The items that are in the selection -- either the one passed in\n   * via props, or the internal selection maintained by the component\n   * when no seleciton is provided in the props\n   */\n  itemsInSelection: T[] | undefined;\n  /*\n   * Adds items to the selection\n   */\n  addItems: (items: T[]) => void;\n  /*\n   * Removes all items from the selection.\n   * If called with a selection passed in, this will mutate the\n   * seelection in props. Prefer to update the selection yourself.\n   */\n  unselectAll: () => void;\n  /**\n   * Removes items from the selection\n   */\n  removeItems: (items: T[]) => void;\n}\n\nexport interface ISelectedItemProps<T> extends IPickerItemProps<T> {\n  onCopyItem?: () => void;\n  /**\n   * Override onItemChange to support replacing an item with multiple items.\n   */\n  onItemChange: (newItem: T | T[], index: number) => void;\n\n  /**\n   * Handling drag and drop events\n   */\n  dragDropEvents?: IDragDropEvents;\n\n  /**\n   * Helper for the drag and drop\n   */\n  dragDropHelper?: IDragDropHelper;\n\n  /**\n   * A list of events to register\n   */\n  eventsToRegister?: { eventName: string; callback: (item?: any, index?: number, event?: any) => void }[];\n\n  /**\n   * Function that specifies how arbitrary text entered into the edit input is handled.\n   */\n  createGenericItem?: (input: string) => T;\n}\n\nexport type BaseSelectedItem = {\n  key?: React.Key;\n};\n\n// Type T is the type of the item that is displayed\n// For example, if the picker is displaying persona's than type T could either be of Persona or Ipersona props\nexport interface ISelectedItemsListProps<T> extends React.ClassAttributes<any> {\n  componentRef?: IRefObject<ISelectedItemsList<T>>;\n\n  /**\n   * The selection\n   */\n  focusedItemIndices?: number[];\n  /**\n   * Gets the copy text that will be set in the item.\n   */\n  getItemCopyText?: (items: T[]) => string;\n  /**\n   * Function that specifies how the selected item will appear.\n   */\n  onRenderItem?: React.ComponentType<ISelectedItemProps<T>>;\n  /**\n   * Initial items that have already been selected and should appear in the people picker.\n   */\n  defaultSelectedItems?: T[];\n  /**\n   * A callback for when the selected list of items changes.\n   */\n  onChange?: (items?: T[]) => void;\n  /**\n   * Function that specifies how arbitrary text entered into the well is handled.\n   */\n  createGenericItem?: (input: string, isValid?: boolean) => T;\n  /**\n   * The items that the base picker should currently display as selected. If this is provided then the picker will\n   * act as a controlled component.\n   */\n  selectedItems?: T[];\n\n  /**\n   * Aria label for the 'X' button in the selected item component.\n   * @defaultvalue ''\n   */\n  removeButtonAriaLabel?: string;\n\n  /**\n   * A callback when an item or items are removed\n   */\n  onItemsRemoved?: (removedItems: T[]) => void;\n\n  /**\n   * A callback on whether this item can be removed\n   */\n  canRemoveItem?: (item: T) => boolean;\n\n  /** Drag & drop event callback interface. */\n  dragDropEvents?: IDragDropEvents;\n\n  /**\n   * Helper for the drag and drop\n   */\n  dragDropHelper?: IDragDropHelper;\n\n  /**\n   * Callback for when items need to be converted to a string for a drag action\n   */\n  serializeItemsForDrag?: (items: T[]) => string;\n\n  /**\n   * Callback for when a data transfer item (drag drop action) needs to be converted to an item or items\n   */\n  deserializeItemsFromDrop?: (input: string) => T[];\n\n  /**\n   * Callback for when an item or items needs to be inserted into the list\n   */\n  dropItemsAt?: (insertIndex: number, itemsToInsert: T[], indicesToRemove: number[]) => void;\n\n  /**\n   * Callback for when an item needs to be replaced with another item or items\n   */\n  replaceItem?: (newItem: T | T[], index: number) => void;\n\n  /**\n   * Callback to check to see if two items are equal\n   * Should be used if it's possible to change some properties on items so a strict compare will fail\n   */\n  itemsAreEqual?: (item1?: any, item2?: any) => boolean;\n}\n"]}