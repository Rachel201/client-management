{"version":3,"file":"CopyableItem.js","sourceRoot":"../src/","sources":["components/SelectedItemsList/Items/CopyableItem.tsx"],"names":[],"mappings":";;;IAaA,qFAAqF;IACxE,QAAA,YAAY,GAAG,UAC1B,iBAAuC;QAEvC,OAAO,KAAK,CAAC,IAAI,CAAC,UAAC,iBAAwC;YACzD,IAAM,MAAM,GAAG,KAAK,CAAC,WAAW,CAC9B,UAAA,IAAI;gBACF,IAAM,QAAQ,GAAG,iBAAiB,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC3D,IAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAqB,CAAC;gBACtE,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAErC,IAAI;oBACF,iDAAiD;oBACjD,SAAS,CAAC,KAAK,GAAG,QAAQ,CAAC;oBAC3B,SAAS,CAAC,MAAM,EAAE,CAAC;oBACnB,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;wBACjC,oDAAoD;wBACpD,MAAM,IAAI,KAAK,EAAE,CAAC;qBACnB;iBACF;gBAAC,OAAO,GAAG,EAAE;oBACZ,QAAQ;iBACT;wBAAS;oBACR,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;iBACtC;YACH,CAAC;YACD,2EAA2E;YAC3E,sGAAsG;YACtG,8EAA8E;YAC9E,wFAAwF;YACxF,sCAAsC;YACtC,uDAAuD;YACvD,CAAC,iBAAiB,CAAC,eAAe,CAAC,CACpC,CAAC;YAEF,IAAM,aAAa,GAAG,iBAAiB,CAAC,aAAa,CAAC;YACtD,OAAO,oBAAC,aAAa,uBAAK,iBAAiB,IAAE,MAAM,EAAE,MAAM,IAAI,CAAC;QAClE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { ISelectedItemProps } from '../SelectedItemsList.types';\n\ntype CopyableItemWrappedComponent<T> = React.ComponentType<ISelectedItemProps<T>>;\n\n/**\n * Parameters to the EditingItem higher-order component\n */\nexport type CopyableItemProps<T> = {\n  itemComponent: CopyableItemWrappedComponent<T>;\n  getCopyItemText: (items: T[]) => string;\n};\n\n// `extends any` to trick the parser into parsing as a type decl instead of a jsx tag\nexport const CopyableItem = <T extends any>(\n  copyableItemProps: CopyableItemProps<T>,\n): CopyableItemWrappedComponent<T> => {\n  return React.memo((selectedItemProps: ISelectedItemProps<T>) => {\n    const onCopy = React.useCallback(\n      item => {\n        const copyText = copyableItemProps.getCopyItemText([item]);\n        const copyInput = document.createElement('input') as HTMLInputElement;\n        document.body.appendChild(copyInput);\n\n        try {\n          // Try to copy the text directly to the clipboard\n          copyInput.value = copyText;\n          copyInput.select();\n          if (!document.execCommand('copy')) {\n            // The command failed. Fallback to the method below.\n            throw new Error();\n          }\n        } catch (err) {\n          // no op\n        } finally {\n          document.body.removeChild(copyInput);\n        }\n      },\n      // TODO: evaluate whether anything should be changed here based on warning:\n      //   \"React Hook React.useCallback has an unnecessary dependency: 'copyableItemProps.getCopyItemText'.\n      //   Either exclude it or remove the dependency array. Outer scope values like\n      //   'copyableItemProps.getCopyItemText' aren't valid dependencies because mutating them\n      //   doesn't re-render the component.\"\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [copyableItemProps.getCopyItemText],\n    );\n\n    const ItemComponent = copyableItemProps.itemComponent;\n    return <ItemComponent {...selectedItemProps} onCopy={onCopy} />;\n  });\n};\n"]}