{"version":3,"file":"SuggestionsStore.js","sourceRoot":"../src/","sources":["components/FloatingSuggestions/Suggestions/SuggestionsStore.ts"],"names":[],"mappings":";;;IAEA;QAGE;YAAA,iBAEC;YA0BO,uBAAkB,GAAG,UAAC,KAA8B;gBAC1D,OAA6B,KAAM,CAAC,IAAI,KAAK,SAAS,CAAC;YACzD,CAAC,CAAC;YAEM,2BAAsB,GAAG,UAAC,UAAmC;gBACnE,IAAI,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAE;oBACvC,OAAO,UAAiC,CAAC;iBAC1C;qBAAM;oBACL,OAAO;wBACL,IAAI,EAAE,UAAU;wBAChB,QAAQ,EAAE,KAAK;wBACf,SAAS,EAAQ,UAAW,CAAC,IAAI,IAAU,UAAW,CAAC,WAAW;qBAC5C,CAAC;iBAC1B;YACH,CAAC,CAAC;YAzCA,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACxB,CAAC;QAEM,4CAAiB,GAAxB,UAAyB,cAAmB;YAC1C,IAAI,cAAc,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC/C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,mCAAmC,CAAC,cAAc,CAAC,CAAC;aAC7E;iBAAM;gBACL,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;aACvB;QACH,CAAC;QAEM,yCAAc,GAArB;YACE,OAAO,IAAI,CAAC,WAAW,CAAC;QAC1B,CAAC;QAEM,+CAAoB,GAA3B,UAA4B,KAAa;YACvC,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC;QAEM,2CAAgB,GAAvB,UAAwB,KAAa;YACnC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACpC,CAAC;QAEM,8DAAmC,GAA1C,UAA2C,WAA2C;YACpF,OAAO,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACxF,CAAC;QAiBH,uBAAC;IAAD,CAAC,AA9CD,IA8CC;IA9CY,4CAAgB","sourcesContent":["import { ISuggestionModel } from 'office-ui-fabric-react/lib/Pickers';\n\nexport class SuggestionsStore<T> {\n  public suggestions: ISuggestionModel<T>[];\n\n  constructor() {\n    this.suggestions = [];\n  }\n\n  public updateSuggestions(newSuggestions: T[]): void {\n    if (newSuggestions && newSuggestions.length > 0) {\n      this.suggestions = this.convertSuggestionsToSuggestionItems(newSuggestions);\n    } else {\n      this.suggestions = [];\n    }\n  }\n\n  public getSuggestions(): ISuggestionModel<T>[] {\n    return this.suggestions;\n  }\n\n  public getSuggestionAtIndex(index: number): ISuggestionModel<T> {\n    return this.suggestions[index];\n  }\n\n  public removeSuggestion(index: number): void {\n    this.suggestions.splice(index, 1);\n  }\n\n  public convertSuggestionsToSuggestionItems(suggestions: Array<ISuggestionModel<T> | T>): ISuggestionModel<T>[] {\n    return Array.isArray(suggestions) ? suggestions.map(this._ensureSuggestionModel) : [];\n  }\n\n  private _isSuggestionModel = (value: ISuggestionModel<T> | T): value is ISuggestionModel<T> => {\n    return (<ISuggestionModel<T>>value).item !== undefined;\n  };\n\n  private _ensureSuggestionModel = (suggestion: ISuggestionModel<T> | T): ISuggestionModel<T> => {\n    if (this._isSuggestionModel(suggestion)) {\n      return suggestion as ISuggestionModel<T>;\n    } else {\n      return {\n        item: suggestion,\n        selected: false,\n        ariaLabel: (<any>suggestion).name || (<any>suggestion).primaryText,\n      } as ISuggestionModel<T>;\n    }\n  };\n}\n"]}