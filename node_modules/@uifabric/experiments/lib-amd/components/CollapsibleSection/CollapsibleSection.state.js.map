{"version":3,"file":"CollapsibleSection.state.js","sourceRoot":"../src/","sources":["components/CollapsibleSection/CollapsibleSection.state.tsx"],"names":[],"mappings":";;;IAUa,QAAA,0BAA0B,GAA0C,UAC/E,KAAyC;QAEzC,IAAM,eAAe,GAAG,cAAM,CAA2B,IAAI,CAAC,CAAC;QAEzD,IAAA;;;UAGJ,EAHK,iBAAS,EAAE,oBAGhB,CAAC;QAEH,2BAAmB,CAAC,KAAK,CAAC,YAAY,EAAE,cAAM,OAAA,CAAC;YAC7C,KAAK,EAAE;gBACL,eAAe,CAAC,OAAO,IAAI,eAAe,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;YAC7D,CAAC;SACF,CAAC,EAJ4C,CAI5C,CAAC,CAAC;QAEJ,IAAM,QAAQ,GAAG,mBAAW,CAC1B,UAAC,EAA6B;YAC5B,YAAY,CAAC,CAAC,SAAS,CAAC,CAAC;YACzB,EAAE,CAAC,cAAc,EAAE,CAAC;YACpB,EAAE,CAAC,eAAe,EAAE,CAAC;QACvB,CAAC,EACD,CAAC,SAAS,EAAE,YAAY,CAAC,CAC1B,CAAC;QAEF,IAAM,UAAU,GAAG,mBAAW,CAC5B,UAAC,EAAgC;YAC/B,IAAM,WAAW,GAAG,kBAAM,EAAE,CAAC,CAAC,CAAC,oBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,oBAAQ,CAAC,IAAI,CAAC;YAC9D,IAAM,SAAS,GAAG,kBAAM,EAAE,CAAC,CAAC,CAAC,oBAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,oBAAQ,CAAC,KAAK,CAAC;YAE5D,IAAI,EAAE,CAAC,KAAK,KAAK,WAAW,IAAI,CAAC,SAAS,EAAE;gBAC1C,YAAY,CAAC,IAAI,CAAC,CAAC;gBACnB,EAAE,CAAC,cAAc,EAAE,CAAC;gBACpB,EAAE,CAAC,eAAe,EAAE,CAAC;aACtB;iBAAM,IAAI,EAAE,CAAC,KAAK,KAAK,SAAS,IAAI,SAAS,EAAE;gBAC9C,YAAY,CAAC,KAAK,CAAC,CAAC;gBACpB,EAAE,CAAC,cAAc,EAAE,CAAC;gBACpB,EAAE,CAAC,eAAe,EAAE,CAAC;aACtB;QACH,CAAC,EACD,CAAC,SAAS,EAAE,YAAY,CAAC,CAC1B,CAAC;QAEF,IAAM,cAAc,GAAG,mBAAW,CAAC,UAAC,EAAgC;YAClE,IAAM,OAAO,GAAG,kBAAM,EAAE,CAAC,CAAC,CAAC,oBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,oBAAQ,CAAC,IAAI,CAAC;YAE1D,6FAA6F;YAC7F,oBAAoB;YACpB,IACE,EAAE,CAAC,KAAK,KAAK,OAAO;gBACpB,EAAE,CAAC,MAAM,KAAK,eAAe,CAAC,OAAO;gBACrC,eAAe,CAAC,OAAO;gBACvB,CAAC,CAAC,EAAE,CAAC,MAAM,YAAY,mBAAmB,CAAC;gBAC3C,CAAC,CAAC,EAAE,CAAC,MAAM,YAAY,gBAAgB,IAAI,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,EACrE;gBACA,eAAe,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;gBAChC,EAAE,CAAC,cAAc,EAAE,CAAC;gBACpB,EAAE,CAAC,eAAe,EAAE,CAAC;aACtB;QACH,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,IAAM,SAAS,yCACV,KAAK,KACR,SAAS,WAAA,EACT,OAAO,EAAE,QAAQ,EACjB,SAAS,EAAE,UAAU,EACrB,aAAa,EAAE,cAAc,EAC7B,eAAe,iBAAA,GAChB,CAAC;QAEF,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { useCallback, useImperativeHandle, useRef } from 'react';\nimport { useControlledState } from '../../Foundation';\nimport { getRTL, KeyCodes } from '../../Utilities';\nimport {\n  ICollapsibleSectionProps,\n  ICollapsibleSectionViewProps,\n  ICollapsibleSectionComponent,\n} from './CollapsibleSection.types';\n\nexport const useCollapsibleSectionState: ICollapsibleSectionComponent['state'] = (\n  props: Readonly<ICollapsibleSectionProps>,\n): ICollapsibleSectionViewProps => {\n  const titleElementRef = useRef<HTMLButtonElement | null>(null);\n\n  const [collapsed, setCollapsed] = useControlledState(props, 'collapsed', {\n    defaultPropName: 'defaultCollapsed',\n    defaultPropValue: false,\n  });\n\n  useImperativeHandle(props.componentRef, () => ({\n    focus: () => {\n      titleElementRef.current && titleElementRef.current.focus();\n    },\n  }));\n\n  const _onClick = useCallback(\n    (ev: React.MouseEvent<Element>) => {\n      setCollapsed(!collapsed);\n      ev.preventDefault();\n      ev.stopPropagation();\n    },\n    [collapsed, setCollapsed],\n  );\n\n  const _onKeyDown = useCallback(\n    (ev: React.KeyboardEvent<Element>) => {\n      const collapseKey = getRTL() ? KeyCodes.right : KeyCodes.left;\n      const expandKey = getRTL() ? KeyCodes.left : KeyCodes.right;\n\n      if (ev.which === collapseKey && !collapsed) {\n        setCollapsed(true);\n        ev.preventDefault();\n        ev.stopPropagation();\n      } else if (ev.which === expandKey && collapsed) {\n        setCollapsed(false);\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    },\n    [collapsed, setCollapsed],\n  );\n\n  const _onRootKeyDown = useCallback((ev: React.KeyboardEvent<Element>) => {\n    const rootKey = getRTL() ? KeyCodes.right : KeyCodes.left;\n\n    // If left/right keypress originates from text input or text area inside collapsible section,\n    // ignore the event.\n    if (\n      ev.which === rootKey &&\n      ev.target !== titleElementRef.current &&\n      titleElementRef.current &&\n      !(ev.target instanceof HTMLTextAreaElement) &&\n      !(ev.target instanceof HTMLInputElement && ev.target.type === 'text')\n    ) {\n      titleElementRef.current.focus();\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }, []);\n\n  const viewProps: ICollapsibleSectionViewProps = {\n    ...props,\n    collapsed,\n    onClick: _onClick,\n    onKeyDown: _onKeyDown,\n    onRootKeyDown: _onRootKeyDown,\n    titleElementRef,\n  };\n\n  return viewProps;\n};\n"]}