{"version":3,"file":"Actionable.view.js","sourceRoot":"../src/","sources":["components/Button/Actionable/Actionable.view.tsx"],"names":[],"mappings":";;;IAQA,4CAA4C;IAE5C,kBAAkB;IACL,QAAA,eAAe,GAAkC,UAAA,KAAK,IAAI,OAAA,CAAC;QACtE,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ;KAClC,CAAC,EAFqE,CAErE,CAAC;IAEH,kBAAkB;IACL,QAAA,cAAc,GAAiC,UAAC,KAAK,EAAE,KAAK;QAC/D,IAAA,yBAAQ,EAAE,yBAAQ,EAAE,uBAAO,EAAE,6CAAkB,EAAE,2BAAS,EAAE,+BAAW,EAAE,2BAAS,EAAE,gIAAO,CAAW;QAExG,IAAA,2BAAqD,EAAnD,sBAAQ,EAAE,kCAAyC,CAAC;QAE5D,0EAA0E;QAC1E,IAAM,WAAW,wBAAQ,0BAAc,CAAgD,IAAI,EAAE,cAAc,CAAC,CAAE,CAAC;QAE/G,IAAM,QAAQ,GAAG,UAAC,EAA4E;YAC5F,IAAI,CAAC,QAAQ,IAAI,OAAO,EAAE;gBACxB,OAAO,CAAC,EAAE,CAAC,CAAC;gBAEZ,IAAI,EAAE,CAAC,gBAAgB,EAAE;oBACvB,OAAO;iBACR;aACF;QACH,CAAC,CAAC;QAEF,IAAM,MAAM,GAAG,UAAC,gBAAsB,IAAkB,OAAA,CACtD,uBAAC,KAAK,CAAC,IAAI,qBACT,IAAI,EAAE,QAAQ,EACd,IAAI,EAAC,QAAQ,EACb,OAAO,EAAE,QAAQ,IACb,WAAW,EACX,gBAAgB,IACpB,QAAQ,EAAE,QAAQ,IAAI,CAAC,kBAAkB,mBAC1B,QAAQ,EACvB,QAAQ,EAAE,CAAC,QAAQ,IAAI,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,gBAC7C,SAAS,EACrB,GAAG,EAAE,SAAS,KAEb,QAAQ,CACE,CACd,EAfuD,CAevD,CAAC;QAEF,OAAO,WAAW,CAAC,CAAC,CAAC,CACnB,uBAAC,mCAAU,IAAC,WAAW,EAAE,WAAW,EAAE,QAAQ,EAAE,QAAQ,IAAI,CAAC,kBAAkB,IAC5E,UAAC,gBAAqB,IAAkB,OAAA,MAAM,CAAC,gBAAgB,CAAC,EAAxB,CAAwB,CACtD,CACd,CAAC,CAAC,CAAC,CACF,MAAM,EAAE,CACT,CAAC;IACJ,CAAC,CAAC;IAOF,SAAS,eAAe,CAAC,KAA2B;QAClD,OAAO,KAAK,CAAC,IAAI;YACf,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,4BAAgB,EAAE;YACxD,CAAC,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,cAAc,EAAE,4BAAgB,EAAE,CAAC;IAC/D,CAAC","sourcesContent":["/** @jsx withSlots */\nimport * as React from 'react';\nimport { KeytipData } from 'office-ui-fabric-react';\nimport { withSlots } from '../../../Foundation';\nimport { getNativeProps, anchorProperties, buttonProperties } from '../../../Utilities';\n\nimport { IActionableComponent, IActionableViewProps } from './Actionable.types';\n\n/* eslint-disable deprecation/deprecation */\n\n/** @deprecated */\nexport const ActionableSlots: IActionableComponent['slots'] = props => ({\n  root: props.href ? 'a' : 'button',\n});\n\n/** @deprecated */\nexport const ActionableView: IActionableComponent['view'] = (props, slots) => {\n  const { children, disabled, onClick, allowDisabledFocus, ariaLabel, keytipProps, buttonRef, ...rest } = props;\n\n  const { htmlType, propertiesType } = _deriveRootType(props);\n\n  // TODO: 'href' is anchor property... consider getNativeProps by root type\n  const buttonProps = { ...getNativeProps<React.ButtonHTMLAttributes<HTMLButtonElement>>(rest, propertiesType) };\n\n  const _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement | HTMLDivElement>) => {\n    if (!disabled && onClick) {\n      onClick(ev);\n\n      if (ev.defaultPrevented) {\n        return;\n      }\n    }\n  };\n\n  const Button = (keytipAttributes?: any): JSX.Element => (\n    <slots.root\n      type={htmlType}\n      role=\"button\"\n      onClick={_onClick}\n      {...buttonProps}\n      {...keytipAttributes}\n      disabled={disabled && !allowDisabledFocus}\n      aria-disabled={disabled}\n      tabIndex={!disabled || allowDisabledFocus ? 0 : undefined}\n      aria-label={ariaLabel}\n      ref={buttonRef}\n    >\n      {children}\n    </slots.root>\n  );\n\n  return keytipProps ? (\n    <KeytipData keytipProps={keytipProps} disabled={disabled && !allowDisabledFocus}>\n      {(keytipAttributes: any): JSX.Element => Button(keytipAttributes)}\n    </KeytipData>\n  ) : (\n    Button()\n  );\n};\n\ninterface IActionableRootType {\n  htmlType: 'link' | 'button';\n  propertiesType: string[] | Record<string, number>;\n}\n\nfunction _deriveRootType(props: IActionableViewProps): IActionableRootType {\n  return props.href\n    ? { htmlType: 'link', propertiesType: anchorProperties }\n    : { htmlType: 'button', propertiesType: buttonProperties };\n}\n"]}