{"version":3,"file":"Actionable.types.js","sourceRoot":"../src/","sources":["components/Button/Actionable/Actionable.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\n// Temporary import file to experiment with next version of foundation.\nimport { IComponent } from '@uifabric/foundation/lib/next/IComponent';\nimport { IFontWeight, IKeytipProps } from 'office-ui-fabric-react';\nimport {\n  IComponentStyles,\n  IHTMLElementSlot,\n  ISlotProp,\n  ISlottableProps,\n  IStyleableComponentProps,\n} from '../../../Foundation';\nimport { IBaseProps } from '../../../Utilities';\n\n/* eslint-disable deprecation/deprecation */\n\n/**\n * @deprecated\n * {@docCategory Actionable}\n */\nexport type IActionableComponent = IComponent<\n  IActionableProps,\n  IActionableTokens,\n  IActionableStyles,\n  IActionableViewProps,\n  IActionableSlots\n>;\n\n// These types are redundant with IActionableComponent but are needed until TS function return widening issue\n// is resolved: https://github.com/Microsoft/TypeScript/issues/241\n// For now, these helper types can be used to provide return type safety when specifying tokens and styles functions.\n/**\n * @deprecated\n * {@docCategory Actionable}\n */\nexport type IActionableTokenReturnType = ReturnType<Extract<IActionableComponent['tokens'], Function>>;\n/**\n * @deprecated\n * {@docCategory Actionable}\n */\nexport type IActionableStylesReturnType = ReturnType<Extract<IActionableComponent['styles'], Function>>;\n\n/**\n * @deprecated\n * {@docCategory Actionable}\n */\nexport type IActionableSlot = ISlotProp<IActionableProps>;\n\n/**\n * @deprecated\n * {@docCategory Actionable}\n */\nexport type IActionableRootElements = 'a' | 'button' | 'div';\n\n/**\n * @deprecated\n * {@docCategory Actionable}\n */\nexport interface IActionableSlots {\n  /**\n   * Defines the root slot of the component.\n   */\n  root?: IHTMLElementSlot<IActionableRootElements>;\n}\n\n/**\n * @deprecated\n * {@docCategory Actionable}\n */\nexport interface IActionable {\n  /**\n   * Sets focus to the Button.\n   */\n  focus: () => void;\n}\n\n/**\n * @deprecated This component was experimental and is not longer being developed on, nor will it be supported in the\n * future.\n * {@docCategory Actionable}\n */\nexport interface IActionableProps\n  extends ISlottableProps<IActionableSlots>,\n    IStyleableComponentProps<IActionableProps, IActionableTokens, IActionableStyles>,\n    IBaseProps<IActionable>,\n    React.AllHTMLAttributes<HTMLAnchorElement | HTMLButtonElement | HTMLDivElement> {\n  /**\n   * Defines an href reference that, if provided, will make this component render as an anchor.\n   * @deprecated\n   */\n  href?: string;\n\n  /**\n   * Defines whether the Button is disabled.\n   * @defaultvalue false\n   * @deprecated\n   */\n  disabled?: boolean;\n\n  /**\n   * Defines whether the Button is in a checked state (for toggle buttons).\n   * @defaultvalue false\n   * @deprecated\n   */\n  checked?: boolean;\n\n  /**\n   * Defines whether disabled buttons should be tabbable via keyboard navigation or not.\n   * @defaultvalue false\n   * @deprecated\n   */\n  allowDisabledFocus?: boolean;\n\n  /**\n   * Defines the aria label that the screen readers use when focus goes on the Button.\n   * @deprecated\n   */\n  ariaLabel?: string;\n\n  /**\n   * Defines optional keytips for this button.\n   * @deprecated\n   */\n  keytipProps?: IKeytipProps;\n\n  /**\n   * Defines an unique id to identify the item. Typically a duplicate of key value.\n   * @deprecated\n   */\n  uniqueId?: string | number;\n}\n\n/**\n * @deprecated\n * {@docCategory Actionable}\n */\nexport interface IActionableViewProps extends IActionableProps {\n  /**\n   * Defines a reference to the inner Button.\n   * @deprecated\n   */\n  buttonRef?: React.RefObject<HTMLButtonElement>;\n}\n\n/**\n * @deprecated\n * {@docCategory Actionable}\n */\nexport interface IActionableTokens {\n  /**\n   * Defines the background color of the Button.\n   * @deprecated\n   */\n  backgroundColor?: string;\n\n  /**\n   * Defines the background color of the Button when it is in a hovered state.\n   * @deprecated\n   */\n  backgroundColorHovered?: string;\n\n  /**\n   * Defines the background color of the Button when it is in an active state.\n   * @deprecated\n   */\n  backgroundColorPressed?: string;\n\n  /**\n   * Defines the border color of the Button.\n   * @deprecated\n   */\n  borderColor?: string;\n\n  /**\n   * Defines the border color of the Button when it is in a hovered state.\n   * @deprecated\n   */\n  borderColorHovered?: string;\n\n  /**\n   * Defines the border color of the Button when it is in an active state.\n   * @deprecated\n   */\n  borderColorPressed?: string;\n\n  /**\n   * Defines the border radius of the Button.\n   * @deprecated\n   */\n  borderRadius?: number | string;\n\n  /**\n   * Defines the border style of the Button.\n   * @deprecated\n   */\n  borderStyle?: string;\n\n  /**\n   * Defines the border width of the Button.\n   * @deprecated\n   */\n  borderWidth?: number | string;\n\n  /**\n   * Defines the spacing between Button children.\n   * @deprecated\n   */\n  childrenGap?: number | string;\n\n  /**\n   * Defines the text color of elements inside the Button.\n   * @deprecated\n   */\n  color?: string;\n\n  /**\n   * Defines the text color of elements inside the Button when it is in a hovered state.\n   *\n   * @deprecated\n   */\n  colorHovered?: string;\n\n  /**\n   * Defines the text color of elements inside the Button when it is in an active state.\n   * @deprecated\n   */\n  colorPressed?: string;\n\n  /**\n   * Defines the padding of the Button, between the Button border and the Button contents.\n   * @deprecated\n   */\n  contentPadding?: number | string;\n\n  /**\n   * Defines the mouse cursor to be displayed when pointing over the Button.\n   * @deprecated\n   */\n  cursor?: string;\n\n  /**\n   * Defines a fixed height for the Button.\n   * @deprecated\n   */\n  height?: number | string;\n\n  /**\n   * Defines the background color of the Button when in high contrast mode.\n   * @deprecated\n   */\n  highContrastBackgroundColor?: string;\n\n  /**\n   * Defines the background color of the Button when it is in a hovered state and in high contrast mode.\n   * @deprecated\n   */\n  highContrastBackgroundColorHovered?: string;\n\n  /**\n   * Defines the background color of the Button when it is in an active state and in high contrast mode.\n   * @deprecated\n   */\n  highContrastBackgroundColorPressed?: string;\n\n  /**\n   * Defines the border color of the Button when in high contrast mode.\n   * @deprecated\n   */\n  highContrastBorderColor?: string;\n\n  /**\n   * Defines the border color of the Button when it is in a hovered state and in high contrast mode.\n   * @deprecated\n   */\n  highContrastBorderColorHovered?: string;\n\n  /**\n   * Defines the border color of the Button when it is in an active state and in high contrast mode.\n   * @deprecated\n   */\n  highContrastBorderColorPressed?: string;\n\n  /**\n   * Defines the text color of elements inside the Button when in high contrast mode.\n   * @deprecated\n   */\n  highContrastColor?: string;\n\n  /**\n   * Defines the text color of elements inside the Button when it is in a hovered state and in high contrast mode.\n   * @deprecated\n   */\n  highContrastColorHovered?: string;\n\n  /**\n   * Defines the text color of elements inside the Button when it is in an active state and in high contrast mode.\n   * @deprecated\n   */\n  highContrastColorPressed?: string;\n\n  /**\n   * Defines the line height of elements inside the Button.\n   * @deprecated\n   */\n  lineHeight?: number | string;\n\n  /**\n   * Defines a minimum height for the Button.\n   * @deprecated\n   */\n  minHeight?: number | string;\n\n  /**\n   * Defines a minimum width for the Button.\n   * @deprecated\n   */\n  minWidth?: number | string;\n\n  /**\n   * Defines whether or not to override any styling properties that would have been set in high contrast mode.\n   * @deprecated\n   */\n  msHighContrastAdjust?: string;\n\n  /**\n   * Defines the outline color of the Button.\n   * @deprecated\n   */\n  outlineColor?: string;\n\n  /**\n   * Defines the font to be used for the text inside the Button.\n   * @deprecated\n   */\n  textFamily?: string;\n\n  /**\n   * Defines the size of the text inside the Button.\n   * @deprecated\n   */\n  textSize?: number | string;\n\n  /**\n   * Defines the font weight of the text inside the Button.\n   * @deprecated\n   */\n  textWeight?: IFontWeight;\n\n  /**\n   * Defines a fixed width for the Button.\n   * @deprecated\n   */\n  width?: number | string;\n}\n\n/**\n * @deprecated\n * {@docCategory Actionable}\n */\nexport type IActionableStyles = IComponentStyles<IActionableSlots>;\n"]}