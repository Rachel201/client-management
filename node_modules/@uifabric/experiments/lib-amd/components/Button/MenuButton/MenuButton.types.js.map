{"version":3,"file":"MenuButton.types.js","sourceRoot":"../src/","sources":["components/Button/MenuButton/MenuButton.types.tsx"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\n// Temporary import file to experiment with next version of foundation.\nimport { IComponent } from '@uifabric/foundation/lib/next/IComponent';\nimport { IComponentStyles, IHTMLSlot, ISlottableProps, ISlotProp, IStyleableComponentProps } from '../../../Foundation';\nimport { IContextualMenuSlot, IFontIconSlot } from '../../../utilities/factoryComponents.types';\nimport { IBaseProps } from '../../../Utilities';\nimport {\n  IButton,\n  IButtonProps,\n  IButtonSlot,\n  IButtonSlots,\n  IButtonTokens,\n  IButtonViewProps,\n  INativeButtonProps,\n} from '../Button.types';\n\n/* eslint-disable deprecation/deprecation */\n\n/**\n * {@docCategory Button}\n * @deprecated\n */\nexport type IMenuButtonComponent = IComponent<\n  IMenuButtonProps,\n  IMenuButtonTokens,\n  IMenuButtonStyles,\n  IMenuButtonViewProps,\n  IMenuButtonSlots\n>;\n\n// These types are redundant with IButtonComponent but are needed until TS function return widening issue is resolved:\n// https://github.com/Microsoft/TypeScript/issues/241\n// For now, these helper types can be used to provide return type safety when specifying tokens and styles functions.\n/**\n * @deprecated\n * {@docCategory Button}\n */\nexport type IMenuButtonTokenReturnType = ReturnType<Extract<IMenuButtonComponent['tokens'], Function>>;\n/**\n * @deprecated\n * {@docCategory Button}\n */\nexport type IMenuButtonStylesReturnType = ReturnType<Extract<IMenuButtonComponent['styles'], Function>>;\n\n/**\n * @deprecated\n * {@docCategory Button}\n */\nexport type IMenuButtonSlot = ISlotProp<IMenuButtonProps>;\n\n/**\n * @deprecated\n * {@docCategory Button}\n */\nexport interface IMenuButtonSlots extends IButtonSlots {\n  /**\n   * Defines the button that is going to be rendered.\n   * @deprecated\n   */\n  button?: IButtonSlot;\n\n  /**\n   * Defines the section on the right of the MenuButton that contains the menu icon.\n   * @deprecated\n   */\n  menuArea?: IHTMLSlot;\n\n  /**\n   * Defines the contextual menu that appears when you click on the MenuButton.\n   * @deprecated\n   */\n  menu?: IContextualMenuSlot;\n\n  /**\n   * Defines the menu chevron icon that is displayed insisde the MenuButton.\n   * @deprecated\n   */\n  menuIcon?: IFontIconSlot;\n}\n\n/**\n * @deprecated\n * {@docCategory Button}\n */\nexport interface IMenuButton extends IButton {}\n\n/**\n * @deprecated This component was experimental and is not longer being developed on, nor will it be supported in the\n * future.\n * {@docCategory Button}\n */\nexport interface IMenuButtonProps\n  extends ISlottableProps<IMenuButtonSlots>,\n    Pick<\n      IButtonProps,\n      'href' | 'primary' | 'disabled' | 'checked' | 'allowDisabledFocus' | 'ariaLabel' | 'keytipProps' | 'uniqueId'\n    >,\n    IStyleableComponentProps<IMenuButtonProps, IMenuButtonTokens, IMenuButtonStyles>,\n    IBaseProps<IMenuButton>,\n    INativeButtonProps {\n  /**\n   * Inital expanded state of the MenuButton. Use this if you want the MenuButton to maintain its own state.\n   * Otherwise use `expanded`.\n   * @defaultvalue false\n   * @deprecated\n   */\n  defaultExpanded?: boolean;\n\n  /**\n   * Defines whether the MenuButton is in an expanded state.\n   * @defaultvalue defaultExpanded\n   * @deprecated\n   */\n  expanded?: boolean;\n\n  /**\n   * Defines a callback that runs after the MenuButton's contextual menu has been closed (removed from the DOM).\n   * @deprecated\n   */\n  onMenuDismiss?: () => void;\n}\n\n/**\n * @deprecated\n * {@docCategory Button}\n */\nexport interface IMenuButtonViewProps extends Pick<IButtonViewProps, 'buttonRef'>, IMenuButtonProps {\n  /**\n   * Defines a reference to the MenuButton.\n   * @deprecated\n   */\n  menuButtonRef?: React.RefObject<HTMLButtonElement>;\n}\n\n/**\n * @deprecated\n * {@docCategory Button}\n */\nexport interface IMenuButtonTokens extends IButtonTokens {\n  /**\n   * Defines the background color of the MenuButton when its menu is in an expanded state.\n   * @deprecated\n   */\n  backgroundColorExpanded?: string;\n\n  /**\n   * Defines the background color of the MenuButton when its menu is in an expanded state and the Button is in\n   * a hovered state.\n   * @deprecated\n   */\n  backgroundColorExpandedHovered?: string;\n\n  /**\n   * Defines the background color of the MenuButton when its menu is in an expanded state and the Button is in\n   * an active state.\n   * @deprecated\n   */\n  backgroundColorExpandedPressed?: string;\n\n  /**\n   * Defines the size of the menu icon inside the MenuButton.\n   * @deprecated\n   */\n  menuIconSize?: number | string;\n}\n\n/**\n * @deprecated\n * {@docCategory Button}\n */\nexport type IMenuButtonStyles = IComponentStyles<IMenuButtonSlots>;\n"]}