{"version":3,"file":"MenuButton.state.js","sourceRoot":"../src/","sources":["components/Button/MenuButton/MenuButton.state.ts"],"names":[],"mappings":";;;IAKA,4CAA4C;IAE5C,kBAAkB;IACL,QAAA,kBAAkB,GAAkC,UAAA,KAAK;QACpE,IAAM,aAAa,GAAG,KAAK,CAAC,MAAM,CAA2B,IAAI,CAAC,CAAC;QAC7D,IAAA;;;UAGJ,EAHK,gBAAQ,EAAE,mBAGf,CAAC;QAEK,IAAA,yBAAQ,EAAE,uBAAO,EAAE,2BAAS,EAAE,mCAAa,CAAW;QAE9D,IAAM,cAAc,GAAG,KAAK,CAAC,WAAW,CAAC;YACvC,aAAa,IAAI,aAAa,EAAE,CAAC;YACjC,WAAW,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC,EAAE,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,CAAC;QAEjC,IAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAChC,UAAC,EAA4E;YAC3E,IAAI,CAAC,QAAQ,EAAE;gBACb,IAAI,OAAO,EAAE;oBACX,OAAO,CAAC,EAAE,CAAC,CAAC;oBAEZ,IAAI,EAAE,CAAC,gBAAgB,EAAE;wBACvB,OAAO;qBACR;iBACF;gBACD,WAAW,CAAC,CAAC,QAAQ,CAAC,CAAC;aACxB;QACH,CAAC,EACD,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,CAAC,CAC3C,CAAC;QAEF,IAAM,UAAU,GAAG,KAAK,CAAC,WAAW,CAClC,UAAC,EAA+E;YAC9E,IAAI,CAAC,QAAQ,EAAE;gBACb,IAAI,SAAS,EAAE;oBACb,SAAS,CAAC,EAAE,CAAC,CAAC;oBAEd,IAAI,EAAE,CAAC,gBAAgB,EAAE;wBACvB,OAAO;qBACR;iBACF;gBAED,IAAI,CAAC,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,OAAO,KAAK,oBAAQ,CAAC,IAAI,EAAE;oBAC7D,WAAW,CAAC,IAAI,CAAC,CAAC;iBACnB;aACF;QACH,CAAC,EACD,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,CAAC,CACnC,CAAC;QAEF,IAAM,SAAS,yCACV,KAAK,KACR,QAAQ,UAAA,EACR,OAAO,EAAE,QAAQ,EACjB,SAAS,EAAE,UAAU,EACrB,aAAa,EAAE,cAAc,EAC7B,aAAa,eAAA,GACd,CAAC;QAEF,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { useControlledState } from '../../../Foundation';\nimport { KeyCodes } from '../../../Utilities';\nimport { IMenuButtonComponent, IMenuButtonViewProps } from './MenuButton.types';\n\n/* eslint-disable deprecation/deprecation */\n\n/** @deprecated */\nexport const useMenuButtonState: IMenuButtonComponent['state'] = props => {\n  const menuButtonRef = React.useRef<HTMLButtonElement | null>(null);\n  const [expanded, setExpanded] = useControlledState(props, 'expanded', {\n    defaultPropName: 'defaultExpanded',\n    defaultPropValue: false,\n  });\n\n  const { disabled, onClick, onKeyDown, onMenuDismiss } = props;\n\n  const _onMenuDismiss = React.useCallback(() => {\n    onMenuDismiss && onMenuDismiss();\n    setExpanded(false);\n  }, [onMenuDismiss, setExpanded]);\n\n  const _onClick = React.useCallback(\n    (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement | HTMLDivElement>) => {\n      if (!disabled) {\n        if (onClick) {\n          onClick(ev);\n\n          if (ev.defaultPrevented) {\n            return;\n          }\n        }\n        setExpanded(!expanded);\n      }\n    },\n    [disabled, expanded, onClick, setExpanded],\n  );\n\n  const _onKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLAnchorElement | HTMLButtonElement | HTMLDivElement>) => {\n      if (!disabled) {\n        if (onKeyDown) {\n          onKeyDown(ev);\n\n          if (ev.defaultPrevented) {\n            return;\n          }\n        }\n\n        if ((ev.altKey || ev.metaKey) && ev.keyCode === KeyCodes.down) {\n          setExpanded(true);\n        }\n      }\n    },\n    [disabled, onKeyDown, setExpanded],\n  );\n\n  const viewProps: IMenuButtonViewProps = {\n    ...props,\n    expanded,\n    onClick: _onClick,\n    onKeyDown: _onKeyDown,\n    onMenuDismiss: _onMenuDismiss,\n    menuButtonRef,\n  };\n\n  return viewProps;\n};\n"]}