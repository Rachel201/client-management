{"version":3,"file":"IconButton.js","sourceRoot":"../src/","sources":["components/Button/ButtonVariants/IconButton.tsx"],"names":[],"mappings":";;;IASA,4CAA4C;IAE5C,IAAM,UAAU,GAA+B,UAAC,KAAK,EAAE,KAAK;QAClD,IAAA,uBAAO,EAAE,qCAAc,CAAW;QAE1C,OAAO;YACL,eAAe,EAAE,aAAa;YAC9B,sBAAsB,EAAE,OAAO,CAAC,cAAc;YAC9C,sBAAsB,EAAE,cAAc,CAAC,uBAAuB;YAC9D,WAAW,EAAE,aAAa;YAC1B,kBAAkB,EAAE,aAAa;YACjC,kBAAkB,EAAE,aAAa;YACjC,YAAY,EAAE,KAAK;YACnB,WAAW,EAAE,OAAO;YACpB,WAAW,EAAE,CAAC;YACd,cAAc,EAAE,CAAC;YACjB,MAAM,EAAE,SAAS;YACjB,2BAA2B,EAAE,YAAY;YACzC,kCAAkC,EAAE,WAAW;YAC/C,kCAAkC,EAAE,WAAW;YAC/C,uBAAuB,EAAE,aAAa;YACtC,8BAA8B,EAAE,aAAa;YAC7C,8BAA8B,EAAE,aAAa;YAC7C,qBAAqB,EAAE,QAAQ;YAC/B,4BAA4B,EAAE,QAAQ;YACtC,4BAA4B,EAAE,QAAQ;YACtC,SAAS,EAAE,OAAO,CAAC,YAAY;YAC/B,gBAAgB,EAAE,OAAO,CAAC,YAAY;YACtC,gBAAgB,EAAE,OAAO,CAAC,SAAS;YACnC,QAAQ,EAAE,EAAE;YACZ,UAAU,EAAE,CAAC;YACb,SAAS,EAAE,EAAE;YACb,QAAQ,EAAE,EAAE;YACZ,oBAAoB,EAAE,MAAM;YAC5B,YAAY,EAAE,aAAa;YAC3B,UAAU,EAAE,SAAS;YACrB,QAAQ,EAAE,EAAE;YACZ,UAAU,EAAE,qBAAW,CAAC,QAAQ;SACjC,CAAC;IACJ,CAAC,CAAC;IAEF,IAAM,cAAc,GAA+B,UAAC,KAAK,EAAE,KAAK;QACtD,IAAA,qCAAc,CAAW;QAEjC,OAAO;YACL,eAAe,EAAE,cAAc,CAAC,eAAe;YAC/C,sBAAsB,EAAE,cAAc,CAAC,eAAe;YACtD,sBAAsB,EAAE,cAAc,CAAC,eAAe;YACtD,MAAM,EAAE,SAAS;YACjB,2BAA2B,EAAE,QAAQ;YACrC,kCAAkC,EAAE,QAAQ;YAC5C,kCAAkC,EAAE,QAAQ;YAC5C,qBAAqB,EAAE,UAAU;YACjC,4BAA4B,EAAE,UAAU;YACxC,4BAA4B,EAAE,UAAU;YACxC,SAAS,EAAE,cAAc,CAAC,YAAY;YACtC,gBAAgB,EAAE,cAAc,CAAC,YAAY;YAC7C,gBAAgB,EAAE,cAAc,CAAC,YAAY;SAC9C,CAAC;IACJ,CAAC,CAAC;IAEF,IAAM,gBAAgB,GAA+B,UAAC,KAAK,EAAE,KAAK,IAA6B,OAAA;QAC7F,UAAU;QACV,KAAK,CAAC,QAAQ,IAAI,cAAc;KACjC,EAH8F,CAG9F,CAAC;IAEF;;;OAGG;IACU,QAAA,UAAU,GAA0C,mBAAQ,CAAC;QACxE,WAAW,EAAE,YAAY;QACzB,KAAK,2BAAA;QACL,KAAK,+BAAA;QACL,MAAM,8BAAA;QACN,MAAM,EAAE,gBAAgB;QACxB,IAAI,0BAAA;KACL,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n// Temporary import file to experiment with next version of foundation.\nimport { composed } from '@uifabric/foundation/lib/next/composed';\nimport { FontWeights } from '../../../Styling';\nimport { useButtonState as state } from '../Button.state';\nimport { ButtonStyles as styles } from '../Button.styles';\nimport { IButtonComponent, IButtonProps, IButtonTokenReturnType } from '../Button.types';\nimport { ButtonSlots as slots, ButtonView as view } from '../Button.view';\n\n/* eslint-disable deprecation/deprecation */\n\nconst baseTokens: IButtonComponent['tokens'] = (props, theme): IButtonTokenReturnType => {\n  const { palette, semanticColors } = theme;\n\n  return {\n    backgroundColor: 'transparent',\n    backgroundColorHovered: palette.neutralLighter,\n    backgroundColorPressed: semanticColors.buttonBackgroundPressed,\n    borderColor: 'transparent',\n    borderColorHovered: 'transparent',\n    borderColorPressed: 'transparent',\n    borderRadius: '50%',\n    borderStyle: 'solid',\n    borderWidth: 1,\n    contentPadding: 0,\n    cursor: 'pointer',\n    highContrastBackgroundColor: 'WindowText',\n    highContrastBackgroundColorHovered: 'Highlight',\n    highContrastBackgroundColorPressed: 'Highlight',\n    highContrastBorderColor: 'transparent',\n    highContrastBorderColorHovered: 'transparent',\n    highContrastBorderColorPressed: 'transparent',\n    highContrastIconColor: 'Window',\n    highContrastIconColorHovered: 'Window',\n    highContrastIconColorPressed: 'Window',\n    iconColor: palette.themePrimary,\n    iconColorHovered: palette.themeDarkAlt,\n    iconColorPressed: palette.themeDark,\n    iconSize: 16,\n    lineHeight: 1,\n    minHeight: 32,\n    minWidth: 32,\n    msHighContrastAdjust: 'none',\n    outlineColor: 'transparent',\n    textFamily: 'inherit',\n    textSize: 14,\n    textWeight: FontWeights.semibold,\n  };\n};\n\nconst disabledTokens: IButtonComponent['tokens'] = (props, theme): IButtonTokenReturnType => {\n  const { semanticColors } = theme;\n\n  return {\n    backgroundColor: semanticColors.inputBackground,\n    backgroundColorHovered: semanticColors.inputBackground,\n    backgroundColorPressed: semanticColors.inputBackground,\n    cursor: 'default',\n    highContrastBackgroundColor: 'Window',\n    highContrastBackgroundColorHovered: 'Window',\n    highContrastBackgroundColorPressed: 'Window',\n    highContrastIconColor: 'GrayText',\n    highContrastIconColorHovered: 'GrayText',\n    highContrastIconColorPressed: 'GrayText',\n    iconColor: semanticColors.disabledText,\n    iconColorHovered: semanticColors.disabledText,\n    iconColorPressed: semanticColors.disabledText,\n  };\n};\n\nconst IconButtonTokens: IButtonComponent['tokens'] = (props, theme): IButtonTokenReturnType => [\n  baseTokens,\n  props.disabled && disabledTokens,\n];\n\n/**\n * @deprecated This component was experimental and is not longer being developed on, nor will it be supported in the\n * future.\n */\nexport const IconButton: React.FunctionComponent<IButtonProps> = composed({\n  displayName: 'IconButton',\n  slots,\n  state,\n  styles,\n  tokens: IconButtonTokens,\n  view,\n});\n"]}