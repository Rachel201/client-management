{"version":3,"file":"CommandBarButton.js","sourceRoot":"../src/","sources":["components/Button/ButtonVariants/CommandBarButton.tsx"],"names":[],"mappings":";;;IAQA,4CAA4C;IAE5C,IAAM,UAAU,GAA+B,UAAC,KAAK,EAAE,KAAK;QAClD,IAAA,uBAAO,EAAE,qCAAc,CAAW;QAE1C,OAAO;YACL,eAAe,EAAE,OAAO,CAAC,KAAK;YAC9B,sBAAsB,EAAE,OAAO,CAAC,cAAc;YAC9C,sBAAsB,EAAE,cAAc,CAAC,uBAAuB;YAC9D,YAAY,EAAE,CAAC;YACf,WAAW,EAAE,CAAC;YACd,WAAW,EAAE,CAAC;YACd,cAAc,EAAE,SAAS;YACzB,KAAK,EAAE,cAAc,CAAC,UAAU;YAChC,YAAY,EAAE,cAAc,CAAC,iBAAiB;YAC9C,YAAY,EAAE,cAAc,CAAC,iBAAiB;YAC9C,MAAM,EAAE,SAAS;YACjB,uBAAuB,EAAE,aAAa;YACtC,8BAA8B,EAAE,aAAa;YAC7C,8BAA8B,EAAE,aAAa;YAC7C,wBAAwB,EAAE,WAAW;YACrC,wBAAwB,EAAE,WAAW;YACrC,4BAA4B,EAAE,WAAW;YACzC,4BAA4B,EAAE,WAAW;YACzC,SAAS,EAAE,cAAc,CAAC,UAAU;YACpC,gBAAgB,EAAE,OAAO,CAAC,YAAY;YACtC,gBAAgB,EAAE,OAAO,CAAC,SAAS;YACnC,SAAS,EAAE,CAAC;YACZ,QAAQ,EAAE,EAAE;YACZ,UAAU,EAAE,QAAQ;SACrB,CAAC;IACJ,CAAC,CAAC;IAEF,IAAM,cAAc,GAA+B,UAAC,KAAK,EAAE,KAAK;QACtD,IAAA,uBAAO,EAAE,qCAAc,CAAW;QAE1C,OAAO;YACL,eAAe,EAAE,OAAO,CAAC,KAAK;YAC9B,sBAAsB,EAAE,OAAO,CAAC,KAAK;YACrC,sBAAsB,EAAE,OAAO,CAAC,KAAK;YACrC,KAAK,EAAE,cAAc,CAAC,kBAAkB;YACxC,YAAY,EAAE,cAAc,CAAC,kBAAkB;YAC/C,YAAY,EAAE,cAAc,CAAC,kBAAkB;YAC/C,MAAM,EAAE,SAAS;YACjB,iBAAiB,EAAE,UAAU;YAC7B,wBAAwB,EAAE,UAAU;YACpC,wBAAwB,EAAE,UAAU;YACpC,qBAAqB,EAAE,UAAU;YACjC,4BAA4B,EAAE,UAAU;YACxC,4BAA4B,EAAE,UAAU;YACxC,SAAS,EAAE,cAAc,CAAC,mBAAmB;YAC7C,gBAAgB,EAAE,cAAc,CAAC,mBAAmB;YACpD,gBAAgB,EAAE,cAAc,CAAC,mBAAmB;SACrD,CAAC;IACJ,CAAC,CAAC;IAEF,IAAM,sBAAsB,GAA+B,UAAC,KAAK,EAAE,KAAK,IAA6B,OAAA;QACnG,UAAU;QACV,KAAK,CAAC,QAAQ,IAAI,cAAc;KACjC,EAHoG,CAGpG,CAAC;IAEF;;;OAGG;IACU,QAAA,gBAAgB,GAA0C,mBAAQ,CAAC;QAC9E,WAAW,EAAE,kBAAkB;QAC/B,KAAK,2BAAA;QACL,KAAK,+BAAA;QACL,MAAM,8BAAA;QACN,MAAM,EAAE,sBAAsB;QAC9B,IAAI,0BAAA;KACL,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n// Temporary import file to experiment with next version of foundation.\nimport { composed } from '@uifabric/foundation/lib/next/composed';\nimport { useButtonState as state } from '../Button.state';\nimport { ButtonStyles as styles } from '../Button.styles';\nimport { IButtonComponent, IButtonProps, IButtonTokenReturnType } from '../Button.types';\nimport { ButtonSlots as slots, ButtonView as view } from '../Button.view';\n\n/* eslint-disable deprecation/deprecation */\n\nconst baseTokens: IButtonComponent['tokens'] = (props, theme): IButtonTokenReturnType => {\n  const { palette, semanticColors } = theme;\n\n  return {\n    backgroundColor: palette.white,\n    backgroundColorHovered: palette.neutralLighter,\n    backgroundColorPressed: semanticColors.buttonBackgroundPressed,\n    borderRadius: 0,\n    borderWidth: 0,\n    childrenGap: 8,\n    contentPadding: '0px 8px',\n    color: semanticColors.buttonText,\n    colorHovered: semanticColors.buttonTextHovered,\n    colorPressed: semanticColors.buttonTextPressed,\n    cursor: 'pointer',\n    highContrastBorderColor: 'transparent',\n    highContrastBorderColorHovered: 'transparent',\n    highContrastBorderColorPressed: 'transparent',\n    highContrastColorHovered: 'Highlight',\n    highContrastColorPressed: 'Highlight',\n    highContrastIconColorHovered: 'Highlight',\n    highContrastIconColorPressed: 'Highlight',\n    iconColor: semanticColors.buttonText,\n    iconColorHovered: palette.themeDarkAlt,\n    iconColorPressed: palette.themeDark,\n    minHeight: 0,\n    minWidth: 40,\n    textWeight: 'normal',\n  };\n};\n\nconst disabledTokens: IButtonComponent['tokens'] = (props, theme): IButtonTokenReturnType => {\n  const { palette, semanticColors } = theme;\n\n  return {\n    backgroundColor: palette.white,\n    backgroundColorHovered: palette.white,\n    backgroundColorPressed: palette.white,\n    color: semanticColors.buttonTextDisabled,\n    colorHovered: semanticColors.buttonTextDisabled,\n    colorPressed: semanticColors.buttonTextDisabled,\n    cursor: 'default',\n    highContrastColor: 'GrayText',\n    highContrastColorHovered: 'GrayText',\n    highContrastColorPressed: 'GrayText',\n    highContrastIconColor: 'GrayText',\n    highContrastIconColorHovered: 'GrayText',\n    highContrastIconColorPressed: 'GrayText',\n    iconColor: semanticColors.disabledBodySubtext,\n    iconColorHovered: semanticColors.disabledBodySubtext,\n    iconColorPressed: semanticColors.disabledBodySubtext,\n  };\n};\n\nconst CommandBarButtonTokens: IButtonComponent['tokens'] = (props, theme): IButtonTokenReturnType => [\n  baseTokens,\n  props.disabled && disabledTokens,\n];\n\n/**\n * @deprecated This component was experimental and is not longer being developed on, nor will it be supported in the\n * future.\n */\nexport const CommandBarButton: React.FunctionComponent<IButtonProps> = composed({\n  displayName: 'CommandBarButton',\n  slots,\n  state,\n  styles,\n  tokens: CommandBarButtonTokens,\n  view,\n});\n"]}