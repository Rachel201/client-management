{"version":3,"file":"SplitButton.state.js","sourceRoot":"../src/","sources":["components/Button/SplitButton/SplitButton.state.ts"],"names":[],"mappings":";;;IAIA,4CAA4C;IAE5C,kBAAkB;IACL,QAAA,mBAAmB,GAAmC,UAAA,KAAK;QAChE,IAAA,0BAAwD,EAAvD,gBAAQ,EAAE,mBAA6C,CAAC;QAEvD,IAAA,yBAAQ,EAAE,mCAAa,EAAE,qDAAsB,CAAW;QAElE,IAAM,cAAc,GAAG,KAAK,CAAC,WAAW,CAAC;YACvC,aAAa,IAAI,aAAa,EAAE,CAAC;YACjC,WAAW,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;QAEpB,IAAM,uBAAuB,GAAG,KAAK,CAAC,WAAW,CAC/C,UAAC,EAA4E;YAC3E,IAAI,CAAC,QAAQ,EAAE;gBACb,IAAI,sBAAsB,EAAE;oBAC1B,sBAAsB,CAAC,EAAE,CAAC,CAAC;oBAE3B,IAAI,EAAE,CAAC,gBAAgB,EAAE;wBACvB,OAAO;qBACR;iBACF;gBACD,WAAW,CAAC,CAAC,QAAQ,CAAC,CAAC;aACxB;QACH,CAAC,EACD,CAAC,QAAQ,EAAE,QAAQ,EAAE,sBAAsB,CAAC,CAC7C,CAAC;QAEF,IAAM,UAAU,GAAG,KAAK,CAAC,WAAW,CAClC,UAAC,EAA+E;YAC9E,IAAI,CAAC,QAAQ,IAAI,CAAC,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,OAAO,KAAK,oBAAQ,CAAC,IAAI,EAAE;gBAC1E,WAAW,CAAC,CAAC,QAAQ,CAAC,CAAC;aACxB;QACH,CAAC,EACD,CAAC,QAAQ,EAAE,QAAQ,CAAC,CACrB,CAAC;QAEF,IAAM,SAAS,yCACV,KAAK,KACR,QAAQ,UAAA,EACR,SAAS,EAAE,UAAU,EACrB,aAAa,EAAE,cAAc,EAC7B,sBAAsB,EAAE,uBAAuB,GAChD,CAAC;QAEF,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { ISplitButtonComponent, ISplitButtonViewProps } from './SplitButton.types';\nimport { KeyCodes } from '../../../Utilities';\n\n/* eslint-disable deprecation/deprecation */\n\n/** @deprecated */\nexport const useSplitButtonState: ISplitButtonComponent['state'] = props => {\n  const [expanded, setExpanded] = React.useState<boolean>(false);\n\n  const { disabled, onMenuDismiss, onSecondaryActionClick } = props;\n\n  const _onMenuDismiss = React.useCallback(() => {\n    onMenuDismiss && onMenuDismiss();\n    setExpanded(false);\n  }, [onMenuDismiss]);\n\n  const _onSecondaryActionClick = React.useCallback(\n    (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement | HTMLDivElement>) => {\n      if (!disabled) {\n        if (onSecondaryActionClick) {\n          onSecondaryActionClick(ev);\n\n          if (ev.defaultPrevented) {\n            return;\n          }\n        }\n        setExpanded(!expanded);\n      }\n    },\n    [disabled, expanded, onSecondaryActionClick],\n  );\n\n  const _onKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLAnchorElement | HTMLButtonElement | HTMLDivElement>) => {\n      if (!disabled && (ev.altKey || ev.metaKey) && ev.keyCode === KeyCodes.down) {\n        setExpanded(!expanded);\n      }\n    },\n    [disabled, expanded],\n  );\n\n  const viewProps: ISplitButtonViewProps = {\n    ...props,\n    expanded,\n    onKeyDown: _onKeyDown,\n    onMenuDismiss: _onMenuDismiss,\n    onSecondaryActionClick: _onSecondaryActionClick,\n  };\n\n  return viewProps;\n};\n"]}