import { FontSizes } from '../AzureType';
import * as StyleConstants from '../Constants';
export var CheckStyles = function (props) {
    var theme = props.theme, checked = props.checked;
    var semanticColors = theme.semanticColors;
    return {
        circle: [
            {
                fontSize: 0,
                paddingTop: 1,
                paddingLeft: 1,
                color: semanticColors.listBackground,
                backgroundColor: semanticColors.listBackground,
                borderColor: semanticColors.controlOutline,
                borderWidth: StyleConstants.borderWidth,
                borderStyle: StyleConstants.borderSolid,
            },
        ],
        check: [
            {
                left: 2.5,
                top: 1.5,
            },
            checked && {
                color: semanticColors.inputText,
            },
            !checked && {
                color: semanticColors.listBackground,
            },
        ],
    };
};
export var DetailsListStyles = function (props) {
    var theme = props.theme;
    var semanticColors = theme.semanticColors;
    var extendedSemanticColors = semanticColors;
    return {
        root: {
            borderTop: StyleConstants.borderNone,
        },
        headerWrapper: {
            selectors: {
                '.ms-DetailsHeader': {
                    borderColor: extendedSemanticColors.rowBorder,
                    borderTop: StyleConstants.borderNone,
                    selectors: {
                        '.ms-DetailsHeader-cellTitle': {
                            backgroundColor: semanticColors.listBackground,
                            borderRightWidth: StyleConstants.borderWidth,
                            borderRightStyle: StyleConstants.borderSolid,
                            borderRightColor: semanticColors.listBackground,
                            fontSize: FontSizes.size10,
                            fontWeight: 700,
                        },
                        ':hover .ms-DetailsHeader-cellTitle': {
                            borderRightWidth: StyleConstants.borderWidth,
                            borderRightStyle: StyleConstants.borderSolid,
                            borderRightColor: semanticColors.variantBorder,
                        },
                    },
                },
            },
        },
    };
};
export var DetailsRowStyles = function (props) {
    var theme = props.theme, isSelected = props.isSelected;
    var semanticColors = theme.semanticColors;
    var extendedSemanticColors = semanticColors;
    return {
        root: [
            {
                borderColor: extendedSemanticColors.rowBorder,
                color: semanticColors.listText,
                fontSize: theme.fonts.medium.fontSize,
            },
            !isSelected && [
                {
                    background: semanticColors.listBackground,
                    color: semanticColors.listText,
                    textDecoration: extendedSemanticColors.listUnderline,
                    selectors: {
                        ':hover': {
                            backgroundColor: semanticColors.listItemBackgroundHovered,
                            textDecorationColor: semanticColors.buttonTextHovered,
                            selectors: {
                                '.ms-DetailsRow-cell': {
                                    color: semanticColors.buttonTextHovered,
                                },
                            },
                        },
                        ':focus': {
                            backgroundColor: semanticColors.listItemBackgroundHovered,
                        },
                        ':focus:hover': {
                            backgroundColor: semanticColors.listItemBackgroundHovered,
                        },
                    },
                },
            ],
            isSelected && [
                {
                    backgroundColor: extendedSemanticColors.listItemBackgroundSelected,
                    textDecoration: extendedSemanticColors.listUnderline,
                    selectors: {
                        ':hover': {
                            background: semanticColors.listItemBackgroundHovered,
                            selectors: {
                                '.ms-DetailsRow-cell': {
                                    color: semanticColors.buttonTextHovered,
                                },
                            },
                        },
                        ':focus': {
                            backgroundColor: extendedSemanticColors.listItemBackgroundSelected,
                        },
                        ':focus:hover': {
                            background: semanticColors.listItemBackgroundHovered,
                        },
                    },
                },
            ],
        ],
        cell: [
            {
                color: semanticColors.listText,
            },
        ],
    };
};
//# sourceMappingURL=DetailsList.styles.js.map