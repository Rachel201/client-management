{"version":3,"file":"Breadcrumb.base.js","sourceRoot":"../src/","sources":["components/Breadcrumb/Breadcrumb.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  getRTL,\n  createRef,\n  classNamesFunction,\n  IClassNames\n} from '../../Utilities';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Link } from '../../Link';\nimport { Icon } from '../../Icon';\nimport { IconButton } from '../../Button';\nimport { customizable } from '../../Utilities';\nimport { IBreadcrumbProps, IBreadcrumbItem, IDividerAsProps } from './Breadcrumb.types';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { TooltipHost, TooltipOverflowMode } from '../../Tooltip';\nimport { IBreadcrumbStyleProps, IBreadcrumbStyles } from './Breadcrumb.styles';\n\nconst getClassNames = classNamesFunction<IBreadcrumbStyleProps, IBreadcrumbStyles>();\n\nexport interface IBreadCrumbData {\n  props: IBreadcrumbProps;\n  renderedItems: IBreadcrumbItem[];\n  renderedOverflowItems: IBreadcrumbItem[];\n}\n\nconst OVERFLOW_KEY = 'overflow';\nconst nullFunction = (): null => null;\n\n@customizable('Breadcrumb', ['theme'])\nexport class BreadcrumbBase extends BaseComponent<IBreadcrumbProps, any> {\n  public static defaultProps: IBreadcrumbProps = {\n    items: [],\n    maxDisplayedItems: 999,\n    overflowIndex: 0\n  };\n\n  private _classNames: IClassNames<IBreadcrumbStyles>;\n  private _focusZone = createRef<FocusZone>();\n\n  constructor(props: IBreadcrumbProps) {\n    super(props);\n\n    this._validateProps(props);\n  }\n\n  /**\n   * Sets focus to the first breadcrumb link.\n   */\n  public focus(): void {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      onReduceData = this._onReduceData,\n      overflowIndex,\n      maxDisplayedItems,\n      items,\n      className,\n      theme,\n      getStyles\n    } = this.props;\n    const renderedItems = [...items];\n    const renderedOverflowItems = renderedItems.splice(overflowIndex!, renderedItems.length - maxDisplayedItems!);\n    const breadCrumbData: IBreadCrumbData = {\n      props: this.props,\n      renderedItems,\n      renderedOverflowItems\n    };\n\n    this._classNames = getClassNames(getStyles, {\n      className,\n      theme: theme!\n    });\n\n    return (\n      <ResizeGroup\n        onRenderData={ this._onRenderBreadcrumb }\n        onReduceData={ onReduceData }\n        data={ breadCrumbData }\n      />\n    );\n  }\n\n  public componentWillReceiveProps(nextProps: IBreadcrumbProps): void {\n    this._validateProps(nextProps);\n  }\n\n  private _onReduceData = (data: IBreadCrumbData): IBreadCrumbData | undefined => {\n    let { renderedItems, renderedOverflowItems } = data;\n    const { overflowIndex } = data.props;\n\n    const movedItem = renderedItems[overflowIndex!];\n    renderedItems = [...renderedItems];\n    renderedItems.splice(overflowIndex!, 1);\n\n    renderedOverflowItems = [...renderedOverflowItems, movedItem];\n\n    if (movedItem !== undefined) {\n      return { ...data, renderedItems, renderedOverflowItems };\n    }\n  }\n\n  private _onRenderBreadcrumb = (data: IBreadCrumbData) => {\n    const {\n      ariaLabel,\n      dividerAs: DividerType = Icon as React.ReactType<IDividerAsProps>,\n      onRenderItem = this._onRenderItem,\n      overflowAriaLabel,\n      overflowIndex\n    } = data.props;\n    const { renderedOverflowItems, renderedItems } = data;\n\n    const contextualItems = renderedOverflowItems.map(\n      (item, index) => ({\n        name: item.text,\n        key: item.key,\n        onClick: item.onClick ? this._onBreadcrumbClicked.bind(this, item) : null,\n        href: item.href\n      })\n    );\n\n    // Find index of last rendered item so the divider icon\n    // knows not to render on that item\n    const lastItemIndex = renderedItems.length - 1;\n    const hasOverflowItems = renderedOverflowItems && renderedOverflowItems.length !== 0;\n\n    const itemElements: JSX.Element[] = renderedItems.map(\n      (item, index) => (\n        <li className={ this._classNames.listItem } key={ item.key || String(index) }>\n          { onRenderItem(item, this._onRenderItem) }\n          { (index !== lastItemIndex || (hasOverflowItems && index === (overflowIndex! - 1))) && (\n            <DividerType\n              className={ this._classNames.chevron }\n              iconName={ getRTL() ? 'ChevronLeft' : 'ChevronRight' }\n              item={ item }\n            />\n          ) }\n        </li>\n      ));\n\n    if (hasOverflowItems) {\n      itemElements.splice(overflowIndex!, 0, (\n        <li className={ this._classNames.overflow } key={ OVERFLOW_KEY }>\n          <IconButton\n            className={ this._classNames.overflowButton }\n            iconProps={ { iconName: 'More' } }\n            role='button'\n            aria-haspopup='true'\n            ariaLabel={ overflowAriaLabel }\n            onRenderMenuIcon={ nullFunction }\n            menuProps={ {\n              items: contextualItems,\n              directionalHint: DirectionalHint.bottomLeftEdge\n            } }\n          />\n          { overflowIndex !== lastItemIndex + 1 && (\n            <DividerType\n              className={ this._classNames.chevron }\n              iconName={ getRTL() ? 'ChevronLeft' : 'ChevronRight' }\n              item={ renderedOverflowItems[renderedOverflowItems.length - 1] }\n            />\n          ) }\n        </li>\n      ));\n    }\n\n    return (\n      <div\n        className={ this._classNames.root }\n        role='navigation'\n        aria-label={ ariaLabel }\n      >\n        <FocusZone componentRef={ this._focusZone } direction={ FocusZoneDirection.horizontal } >\n          <ol className={ this._classNames.list }>\n            { itemElements }\n          </ol>\n        </FocusZone>\n      </div>\n    );\n  }\n\n  private _onRenderItem = (item: IBreadcrumbItem) => {\n    if (item.onClick || item.href) {\n      return (\n        <Link\n          className={ this._classNames.itemLink }\n          href={ item.href }\n          aria-current={ item.isCurrentItem ? 'page' : undefined }\n          onClick={ this._onBreadcrumbClicked.bind(this, item) }\n        >\n          <TooltipHost\n            content={ item.text }\n            overflowMode={ TooltipOverflowMode.Parent }\n          >\n            { item.text }\n          </TooltipHost>\n        </Link>\n      );\n    } else {\n      return (\n        <span className={ this._classNames.item }>\n          <TooltipHost\n            content={ item.text }\n            overflowMode={ TooltipOverflowMode.Parent }\n          >\n            { item.text }\n          </TooltipHost>\n        </span>\n      );\n    }\n  }\n\n  private _onBreadcrumbClicked = (item: IBreadcrumbItem, ev: React.MouseEvent<HTMLElement>) => {\n    if (item.onClick) {\n      item.onClick(ev, item);\n    }\n  }\n\n  /**\n   * Validate incoming props\n   * @param props Props to validate\n   */\n  private _validateProps(props: IBreadcrumbProps): void {\n    const { maxDisplayedItems, overflowIndex, items } = props;\n    if (overflowIndex! < 0 ||\n      maxDisplayedItems! > 1 && overflowIndex! > maxDisplayedItems! - 1 ||\n      items.length > 0 && overflowIndex! > items.length - 1) {\n      throw new Error('Breadcrumb: overflowIndex out of range');\n    }\n  }\n}\n"]}