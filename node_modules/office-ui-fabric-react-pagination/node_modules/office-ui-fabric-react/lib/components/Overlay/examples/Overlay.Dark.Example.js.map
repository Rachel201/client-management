{"version":3,"file":"Overlay.Dark.Example.js","sourceRoot":"../src/","sources":["components/Overlay/examples/Overlay.Dark.Example.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,gDAG4B;AAC5B,4DAAkE;AAElE,sCAAqC;AAErC,mEAA4E;AAM5E;IAAwC,8CAEtC;IACA,4BAAY,KAAS;QAArB,YACE,kBAAM,KAAK,CAAC,SAGb;QA2BO,yBAAmB,GAAG;YAC5B,KAAI,CAAC,QAAQ,CAAC,EAAE,gBAAgB,EAAE,KAAK,EAAE,CAAC,CAAC;QAC7C,CAAC,CAAA;QAEO,oBAAc,GAAG;YACvB,KAAI,CAAC,QAAQ,CAAC,EAAE,gBAAgB,EAAE,CAAC,KAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC,CAAC;QACpE,CAAC,CAAA;QAlCC,KAAI,CAAC,KAAK,GAAG,EAAE,gBAAgB,EAAE,KAAK,EAAE,CAAC;;IAC3C,CAAC;IAEM,mCAAM,GAAb;QACU,IAAA,8CAAgB,CAAgB;QACxC,IAAM,aAAa,GAAG,8BAAkB,EAA6B,CAAC;QACtE,IAAM,UAAU,GAAG,aAAa,CAAC,kCAAS,CAAC,CAAC;QAE5C,OAAO,CACL;YACE,oBAAC,sBAAa,IACZ,OAAO,EAAG,IAAI,CAAC,cAAc,EAC7B,IAAI,EAAC,kBAAkB,GACvB;YACA,gBAAgB,IAAI,CACpB,oBAAC,iBAAO,IACN,YAAY,EAAG,IAAI,EACnB,OAAO,EAAG,IAAI,CAAC,mBAAmB;gBAElC,6BAAK,SAAS,EAAG,UAAU,CAAC,IAAI;oBAC9B,kEAAuC,CACnC,CACE,CACX,CACG,CACP,CAAC;IACJ,CAAC;IASH,yBAAC;AAAD,CAAC,AAzCD,CAAwC,KAAK,CAAC,SAAS,GAyCtD;AAzCY,gDAAkB","sourcesContent":["import * as React from 'react';\nimport {\n  IStyleFunction,\n  classNamesFunction\n} from '../../../Utilities';\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\n\nimport { Overlay } from '../Overlay';\n\nimport { getStyles, IOverlayExampleStyles } from './Overlay.Example.styles';\n\nexport interface IOverlayDarkExampleProps {\n  getStyles?: IStyleFunction<{}, IOverlayExampleStyles>;\n}\n\nexport class OverlayDarkExample extends React.Component<{}, {\n  isOverlayVisible: boolean;\n}> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = { isOverlayVisible: false };\n  }\n\n  public render(): JSX.Element {\n    const { isOverlayVisible } = this.state;\n    const getClassNames = classNamesFunction<{}, IOverlayExampleStyles>();\n    const classNames = getClassNames(getStyles);\n\n    return (\n      <div>\n        <DefaultButton\n          onClick={ this._toggleOverlay }\n          text='Show the overlay'\n        />\n        { isOverlayVisible && (\n          <Overlay\n            isDarkThemed={ true }\n            onClick={ this._setVisibilityFalse }\n          >\n            <div className={ classNames.root }>\n              <p>I am content within the overlay.</p>\n            </div>\n          </Overlay>\n        ) }\n      </div>\n    );\n  }\n\n  private _setVisibilityFalse = (): void => {\n    this.setState({ isOverlayVisible: false });\n  }\n\n  private _toggleOverlay = (): void => {\n    this.setState({ isOverlayVisible: !this.state.isOverlayVisible });\n  }\n}\n"]}