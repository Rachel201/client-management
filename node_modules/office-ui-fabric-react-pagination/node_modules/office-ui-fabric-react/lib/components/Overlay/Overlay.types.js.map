{"version":3,"file":"Overlay.types.js","sourceRoot":"../src/","sources":["components/Overlay/Overlay.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { IStyle, ITheme } from '../../Styling';\nimport { IStyleFunction } from '../../Utilities';\n\nexport interface IOverlay {\n\n}\n\nexport interface IOverlayProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: (component: IOverlayProps | null) => void;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules\n   */\n  getStyles?: IStyleFunction<IOverlayStyleProps, IOverlayStyles>;\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n\n  /**\n   * Additional css class to apply to the Overlay\n   * @defaultvalue undefined\n   */\n  className?: string;\n\n  /**\n   * Whether to use the dark-themed overlay.\n   * @defaultvalue false\n   */\n  isDarkThemed?: boolean;\n\n  onClick?: () => void;\n}\n\nexport interface IOverlayStyleProps {\n  /**\n   * Accept theme prop.\n   */\n  theme: ITheme;\n\n  /**\n   * Accept custom classNames\n   */\n  className?: string;\n\n  /**\n   * Is overlay visible\n   */\n  isNone?: boolean;\n\n  /**\n   * Is overlay dark themed\n   */\n  isDark?: boolean;\n}\n\nexport interface IOverlayStyles {\n  /**\n   * Style for the root element.\n   */\n  root: IStyle;\n}\n"]}