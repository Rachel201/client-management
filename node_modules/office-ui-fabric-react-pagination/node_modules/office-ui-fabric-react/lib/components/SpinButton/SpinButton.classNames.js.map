{"version":3,"file":"SpinButton.classNames.js","sourceRoot":"../src/","sources":["components/SpinButton/SpinButton.classNames.ts"],"names":[],"mappings":";;AAAA,6CAAkD;AAClD,yCAAoD;AAGpD,2DAAuD;AAY1C,QAAA,aAAa,GAAG,2BAAe,CAAC,UAC3C,MAAyB,EACzB,QAAiB,EACjB,SAAkB,EAClB,qBAA4C,EAC5C,aAAwC;IAAxC,8BAAA,EAAA,gBAA0B,sBAAQ,CAAC,KAAK;IAExC,OAAO;QACL,IAAI,EAAE,qBAAW,CACf,MAAM,CAAC,IAAI,CACZ;QACD,YAAY,EAAE,qBAAW,CACvB,MAAM,CAAC,YAAY,EACnB,gCAAgC,CAAC,aAAa,EAAE,MAAM,CAAC,CACxD;QACD,IAAI,EAAE,qBAAW,CACf,MAAM,CAAC,IAAI,EACX,QAAQ,IAAI,MAAM,CAAC,YAAY,CAChC;QACD,KAAK,EAAE,qBAAW,CAChB,MAAM,CAAC,KAAK,EACZ,QAAQ,IAAI,MAAM,CAAC,aAAa,CACjC;QACD,iBAAiB,EAAE,qBAAW,CAC5B,MAAM,CAAC,iBAAiB,EACxB,+BAA+B,CAAC,aAAa,EAAE,MAAM,CAAC,EACtD,CAAC,QAAQ,IAAI;YACX;gBACE,SAAS,EAAE;oBACT,QAAQ,EAAE,MAAM,CAAC,wBAAwB;iBAC1C;aACF;YACD,SAAS,IAAI;gBACX,wDAAwD;gBACxD,iDAAiD;gBACjD,SAAS,EAAE;oBACT,IAAI,EAAE,MAAM,CAAC,wBAAwB;iBACtC;aACF;SACF,EACD,QAAQ,IAAI,MAAM,CAAC,yBAAyB,CAC7C;QACD,KAAK,EAAE,qBAAW,CAChB,qBAAqB,EACrB,MAAM,CAAC,KAAK,EACZ,CAAC,QAAQ,IAAI;YACX,SAAS,EAAE;gBACT,aAAa,EAAE,MAAM,CAAC,iBAAiB;aACxC;SACF,EACD,QAAQ,IAAI,MAAM,CAAC,aAAa,CACjC;QACD,QAAQ,EAAE,qBAAW,CACnB,MAAM,CAAC,qBAAqB,EAC5B,QAAQ,IAAI,MAAM,CAAC,6BAA6B,CACjD;KACF,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH;;GAEG;AACH,0CAA0C,aAAuB,EAAE,MAAyB;IAC1F,QAAQ,aAAa,EAAE;QACrB,KAAK,sBAAQ,CAAC,KAAK;YACjB,OAAO,MAAM,CAAC,iBAAiB,CAAC;QAClC,KAAK,sBAAQ,CAAC,GAAG;YACf,OAAO,MAAM,CAAC,eAAe,CAAC;QAChC,KAAK,sBAAQ,CAAC,GAAG;YACf,OAAO,MAAM,CAAC,eAAe,CAAC;QAChC,KAAK,sBAAQ,CAAC,MAAM;YAClB,OAAO,MAAM,CAAC,kBAAkB,CAAC;KACpC;AACH,CAAC;AAED;;GAEG;AACH,yCAAyC,aAAuB,EAAE,MAAyB;IACzF,QAAQ,aAAa,EAAE;QACrB,KAAK,sBAAQ,CAAC,GAAG,CAAC;QAClB,KAAK,sBAAQ,CAAC,MAAM;YAClB,OAAO,MAAM,CAAC,0BAA0B,CAAC;QAC3C;YACE,OAAO,EAEN,CAAC;KACL;AACH,CAAC","sourcesContent":["import { memoizeFunction } from '../../Utilities';\nimport { mergeStyles, IStyle } from '../../Styling';\nimport { ISpinButtonStyles } from './SpinButton.types';\nimport { KeyboardSpinDirection } from './SpinButton';\nimport { Position } from '../../utilities/positioning';\n\nexport interface ISpinButtonClassNames {\n  root: string;\n  labelWrapper: string;\n  icon: string;\n  label: string;\n  spinButtonWrapper: string;\n  input: string;\n  arrowBox: string;\n}\n\nexport const getClassNames = memoizeFunction((\n  styles: ISpinButtonStyles,\n  disabled: boolean,\n  isFocused: boolean,\n  keyboardSpinDirection: KeyboardSpinDirection,\n  labelPosition: Position = Position.start\n): ISpinButtonClassNames => {\n  return {\n    root: mergeStyles(\n      styles.root\n    ),\n    labelWrapper: mergeStyles(\n      styles.labelWrapper,\n      _getStyleForLabelBasedOnPosition(labelPosition, styles)\n    ),\n    icon: mergeStyles(\n      styles.icon,\n      disabled && styles.iconDisabled\n    ),\n    label: mergeStyles(\n      styles.label,\n      disabled && styles.labelDisabled\n    ),\n    spinButtonWrapper: mergeStyles(\n      styles.spinButtonWrapper,\n      _getStyleForRootBasedOnPosition(labelPosition, styles),\n      !disabled && [\n        {\n          selectors: {\n            ':hover': styles.spinButtonWrapperHovered\n          }\n        },\n        isFocused && {\n          // This is to increase the specifity of the focus styles\n          // and make it equal to that of the hover styles.\n          selectors: {\n            '&&': styles.spinButtonWrapperFocused\n          }\n        }\n      ],\n      disabled && styles.spinButtonWrapperDisabled\n    ),\n    input: mergeStyles(\n      'ms-spinButton-input',\n      styles.input,\n      !disabled && {\n        selectors: {\n          '::selection': styles.inputTextSelected\n        }\n      },\n      disabled && styles.inputDisabled,\n    ),\n    arrowBox: mergeStyles(\n      styles.arrowButtonsContainer,\n      disabled && styles.arrowButtonsContainerDisabled\n    ),\n  };\n});\n\n/**\n * Returns the Style corresponding to the label position\n */\nfunction _getStyleForLabelBasedOnPosition(labelPosition: Position, styles: ISpinButtonStyles): IStyle {\n  switch (labelPosition) {\n    case Position.start:\n      return styles.labelWrapperStart;\n    case Position.end:\n      return styles.labelWrapperEnd;\n    case Position.top:\n      return styles.labelWrapperTop;\n    case Position.bottom:\n      return styles.labelWrapperBottom;\n  }\n}\n\n/**\n * Returns the Style corresponding to the label position\n */\nfunction _getStyleForRootBasedOnPosition(labelPosition: Position, styles: ISpinButtonStyles): IStyle {\n  switch (labelPosition) {\n    case Position.top:\n    case Position.bottom:\n      return styles.spinButtonWrapperTopBottom;\n    default:\n      return {\n\n      };\n  }\n}"]}