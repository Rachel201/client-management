{"version":3,"file":"SpinButton.js","sourceRoot":"../src/","sources":["components/SpinButton/SpinButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IconButton } from '../../Button';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  BaseComponent,\n  getId,\n  KeyCodes,\n  customizable,\n  calculatePrecision,\n  precisionRound,\n  createRef\n} from '../../Utilities';\nimport {\n  ISpinButton,\n  ISpinButtonProps,\n} from './SpinButton.types';\nimport { Position } from '../../utilities/positioning';\nimport { getStyles, getArrowButtonStyles } from './SpinButton.styles';\nimport { getClassNames } from './SpinButton.classNames';\nimport { KeytipData } from '../../KeytipData';\n\nexport enum KeyboardSpinDirection {\n  down = -1,\n  notSpinning = 0,\n  up = 1\n}\n\nexport interface ISpinButtonState {\n\n  /**\n   * Is true when the control has focus.\n   */\n  isFocused: boolean;\n\n  /**\n   * the value of the spin button\n   */\n  value: string;\n\n  /**\n   * keyboard spin direction, used to style the up or down button\n   * as active when up/down arrow is pressed\n   */\n  keyboardSpinDirection: KeyboardSpinDirection;\n\n  /**\n   * The calculated precision for the value.\n   */\n  precision: number;\n}\n\n@customizable('SpinButton', ['theme'])\nexport class SpinButton extends BaseComponent<ISpinButtonProps, ISpinButtonState> implements ISpinButton {\n\n  public static defaultProps: ISpinButtonProps = {\n    step: 1,\n    min: 0,\n    max: 100,\n    disabled: false,\n    labelPosition: Position.start,\n    label: '',\n    incrementButtonIcon: { iconName: 'ChevronUpSmall' },\n    decrementButtonIcon: { iconName: 'ChevronDownSmall' }\n  };\n\n  private _input = createRef<HTMLInputElement>();\n  private _inputId: string;\n  private _labelId: string;\n  private _lastValidValue: string;\n  private _spinningByMouse: boolean;\n\n  private _currentStepFunctionHandle: number;\n  private _initialStepDelay = 400;\n  private _stepDelay = 75;\n\n  constructor(props: ISpinButtonProps) {\n    super(props);\n\n    this._warnMutuallyExclusive({\n      'value': 'defaultValue'\n    });\n\n    const value = props.value || props.defaultValue || String(props.min) || '0';\n    this._lastValidValue = value;\n\n    // Ensure that the autocalculated precision is not negative.\n    const precision = props.precision || Math.max(calculatePrecision(props.step!), 0);\n\n    this.state = {\n      isFocused: false,\n      value: value,\n      keyboardSpinDirection: KeyboardSpinDirection.notSpinning,\n      precision\n    };\n\n    this._currentStepFunctionHandle = -1;\n    this._labelId = getId('Label');\n    this._inputId = getId('input');\n    this._spinningByMouse = false;\n  }\n\n  /**\n  * Invoked when a component is receiving new props. This method is not called for the initial render.\n  */\n  public componentWillReceiveProps(newProps: ISpinButtonProps): void {\n    this._lastValidValue = this.state.value;\n    let value: string = newProps.value ? newProps.value : String(newProps.min);\n    if (newProps.defaultValue) {\n      value = String(Math.max(newProps.min as number, Math.min(newProps.max as number, Number(newProps.defaultValue))));\n    }\n\n    this.setState({\n      value: value,\n      precision: newProps.precision || this.state.precision\n    });\n  }\n\n  public render(): JSX.Element {\n    const {\n      disabled,\n      label,\n      min,\n      max,\n      labelPosition,\n      iconProps,\n      incrementButtonIcon,\n      incrementButtonAriaLabel,\n      decrementButtonIcon,\n      decrementButtonAriaLabel,\n      title,\n      ariaLabel,\n      styles: customStyles,\n      upArrowButtonStyles: customUpArrowButtonStyles,\n      downArrowButtonStyles: customDownArrowButtonStyles,\n      theme,\n      ariaPositionInSet,\n      ariaSetSize,\n      keytipProps\n    } = this.props;\n\n    const {\n      isFocused,\n      value,\n      keyboardSpinDirection\n    } = this.state;\n\n    const classNames = this.props.getClassNames ?\n      this.props.getClassNames(\n        theme!,\n        !!disabled,\n        !!isFocused,\n        keyboardSpinDirection,\n        labelPosition\n      ) : getClassNames(\n        getStyles(theme!, customStyles),\n        !!disabled,\n        !!isFocused,\n        keyboardSpinDirection,\n        labelPosition\n      );\n\n    return (\n      <div className={ classNames.root }>\n        { labelPosition !== Position.bottom && <div className={ classNames.labelWrapper }>\n          { iconProps && <Icon { ...iconProps } className={ classNames.icon } aria-hidden='true' /> }\n          { label &&\n            <Label\n              id={ this._labelId }\n              htmlFor={ this._inputId }\n              className={ classNames.label }\n            >\n              { label }\n            </Label>\n          }\n        </div> }\n        <KeytipData keytipProps={ keytipProps } disabled={ disabled }>\n          { (keytipAttributes: any): JSX.Element => (\n            <div\n              className={ classNames.spinButtonWrapper }\n              title={ title && title }\n              aria-label={ ariaLabel && ariaLabel }\n              aria-posinset={ ariaPositionInSet }\n              aria-setsize={ ariaSetSize }\n              data-ktp-target={ keytipAttributes['data-ktp-target'] }\n            >\n              <input\n                value={ value }\n                id={ this._inputId }\n                onChange={ this._onChange }\n                onInput={ this._onInputChange }\n                className={ classNames.input }\n                type='text'\n                autoComplete='off'\n                role='spinbutton'\n                aria-labelledby={ label && this._labelId }\n                aria-valuenow={ !isNaN(Number(value)) ? Number(value) : undefined }\n                aria-valuetext={ isNaN(Number(value)) ? value : undefined }\n                aria-valuemin={ min }\n                aria-valuemax={ max }\n                aria-describedby={ keytipAttributes['aria-describedby'] }\n                onBlur={ this._onBlur }\n                ref={ this._input }\n                onFocus={ this._onFocus }\n                onKeyDown={ this._handleKeyDown }\n                onKeyUp={ this._handleKeyUp }\n                readOnly={ disabled }\n                disabled={ disabled }\n                aria-disabled={ disabled }\n                data-lpignore={ true }\n                data-ktp-execute-target={ keytipAttributes['data-ktp-execute-target'] }\n              />\n              <span className={ classNames.arrowBox }>\n                <IconButton\n                  styles={ getArrowButtonStyles(theme!, true, customUpArrowButtonStyles) }\n                  className={ 'ms-UpButton' }\n                  checked={ keyboardSpinDirection === KeyboardSpinDirection.up }\n                  disabled={ disabled }\n                  iconProps={ incrementButtonIcon }\n                  onMouseDown={ this._onIncrementMouseDown }\n                  onMouseLeave={ this._stop }\n                  onMouseUp={ this._stop }\n                  tabIndex={ -1 }\n                  ariaLabel={ incrementButtonAriaLabel }\n                  data-is-focusable={ false }\n                />\n                <IconButton\n                  styles={ getArrowButtonStyles(theme!, false, customDownArrowButtonStyles) }\n                  className={ 'ms-DownButton' }\n                  checked={ keyboardSpinDirection === KeyboardSpinDirection.down }\n                  disabled={ disabled }\n                  iconProps={ decrementButtonIcon }\n                  onMouseDown={ this._onDecrementMouseDown }\n                  onMouseLeave={ this._stop }\n                  onMouseUp={ this._stop }\n                  tabIndex={ -1 }\n                  ariaLabel={ decrementButtonAriaLabel }\n                  data-is-focusable={ false }\n                />\n              </span>\n            </div>\n          ) }\n        </KeytipData>\n        { labelPosition === Position.bottom && <div className={ classNames.labelWrapper }>\n          { iconProps && <Icon iconName={ iconProps.iconName } className={ classNames.icon } aria-hidden='true' /> }\n          { label &&\n            <Label\n              id={ this._labelId }\n              htmlFor={ this._inputId }\n              className={ classNames.label }\n            >\n              { label }\n            </Label>\n          }\n        </div>\n        }\n      </div>\n    );\n  }\n\n  public focus(): void {\n    if (this._input.current) {\n      this._input.current.focus();\n    }\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement>): void => {\n    // We can't set focus on a non-existing element\n    if (!this._input.current) {\n      return;\n    }\n\n    if (this._spinningByMouse || this.state.keyboardSpinDirection !== KeyboardSpinDirection.notSpinning) {\n      this._stop();\n    }\n\n    this._input.current.select();\n\n    this.setState({ isFocused: true });\n\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n  }\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement>): void => {\n    this._validate(ev);\n    this.setState({ isFocused: false });\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n  }\n\n  /**\n   * Gets the value of the spin button.\n   */\n  public get value(): string | undefined {\n    return this.props.value === undefined ? this.state.value : this.props.value;\n  }\n\n  private _onValidate = (value: string): string | void => {\n    if (this.props.onValidate) {\n      return this.props.onValidate(value);\n    } else {\n      return this._defaultOnValidate(value);\n    }\n  }\n\n  /**\n   * Validate function to use if one is not passed in\n   */\n  private _defaultOnValidate = (value: string) => {\n    if (isNaN(Number(value))) {\n      return this._lastValidValue;\n    }\n    const newValue = Math.min(this.props.max as number, Math.max(this.props.min as number, Number(value)));\n    return String(newValue);\n  }\n\n  private _onIncrement = (value: string): string | void => {\n    if (this.props.onIncrement) {\n      return this.props.onIncrement(value);\n    } else {\n      return this._defaultOnIncrement(value);\n    }\n  }\n\n  /**\n   * Increment function to use if one is not passed in\n   */\n  private _defaultOnIncrement = (value: string): string | void => {\n    let newValue: number = Math.min(Number(value) + Number(this.props.step)!, this.props.max!);\n    newValue = precisionRound(newValue, this.state.precision);\n    return String(newValue);\n  }\n\n  private _onDecrement = (value: string): string | void => {\n    if (this.props.onDecrement) {\n      return this.props.onDecrement(value);\n    } else {\n      return this._defaultOnDecrement(value);\n    }\n  }\n\n  /**\n   * Increment function to use if one is not passed in\n   */\n  private _defaultOnDecrement = (value: string): string | void => {\n    let newValue: number = Math.max(Number(value) - Number(this.props.step)!, this.props.min!);\n    newValue = precisionRound(newValue, this.state.precision);\n    return String(newValue);\n  }\n\n  private _onChange(): void {\n    /**\n     * A noop input change handler.\n     * https://github.com/facebook/react/issues/7027.\n     * Using the native onInput handler fixes the issue but onChange\n     * still need to be wired to avoid React console errors\n     * TODO: Check if issue is resolved when React 16 is available.\n     */\n  }\n\n  /**\n   * This is used when validating text entry\n   * in the input (not when changed via the buttons)\n   * @param event - the event that fired\n   */\n  private _validate = (event: React.FocusEvent<HTMLInputElement>): void => {\n    const element: HTMLInputElement = event.target as HTMLInputElement;\n    const value: string = element.value;\n    if (this.state.value) {\n      const newValue = this._onValidate!(value);\n      if (newValue) {\n        this._lastValidValue = newValue;\n        this.setState({ value: newValue });\n      }\n    }\n  }\n\n  /**\n   * The method is needed to ensure we are updating the actual input value.\n   * without this our value will never change (and validation will not have the correct number)\n   * @param event - the event that was fired\n   */\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    const element: HTMLInputElement = event.target as HTMLInputElement;\n    const value: string = element.value;\n\n    this.setState({\n      value: value,\n    });\n  }\n\n  /**\n   * Update the value with the given stepFunction\n   * @param shouldSpin - should we fire off another updateValue when we are done here? This should be true\n   * when spinning in response to a mouseDown\n   * @param stepFunction - function to use to step by\n   */\n  private _updateValue = (shouldSpin: boolean, stepDelay: number, stepFunction: (value: string) => string | void): void => {\n    const newValue: string | void = stepFunction(this.state.value);\n    if (newValue) {\n      this._lastValidValue = newValue;\n      this.setState({ value: newValue });\n    }\n\n    if (this._spinningByMouse !== shouldSpin) {\n      this._spinningByMouse = shouldSpin;\n    }\n\n    if (shouldSpin) {\n      this._currentStepFunctionHandle = this._async.setTimeout(() => { this._updateValue(shouldSpin, this._stepDelay, stepFunction); }, stepDelay);\n    }\n  }\n\n  /**\n   * Stop spinning (clear any currently pending update and set spinning to false)\n   */\n  private _stop = (): void => {\n    if (this._currentStepFunctionHandle >= 0) {\n      this._async.clearTimeout(this._currentStepFunctionHandle);\n      this._currentStepFunctionHandle = -1;\n    }\n\n    if (this._spinningByMouse || this.state.keyboardSpinDirection !== KeyboardSpinDirection.notSpinning) {\n      this._spinningByMouse = false;\n      this.setState({ keyboardSpinDirection: KeyboardSpinDirection.notSpinning });\n    }\n  }\n\n  /**\n   * Handle keydown on the text field. We need to update\n   * the value when up or down arrow are depressed\n   * @param event - the keyboardEvent that was fired\n   */\n  private _handleKeyDown = (event: React.KeyboardEvent<HTMLElement>): void => {\n\n    // eat the up and down arrow keys to keep focus in the spinButton\n    // (especially when a spinButton is inside of a FocusZone)\n    if (event.which === KeyCodes.up || event.which === KeyCodes.down) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    if (this.props.disabled) {\n      this._stop();\n      return;\n    }\n\n    let spinDirection = KeyboardSpinDirection.notSpinning;\n\n    if (event.which === KeyCodes.up) {\n\n      spinDirection = KeyboardSpinDirection.up;\n      this._updateValue(false /* shouldSpin */, this._initialStepDelay, this._onIncrement!);\n    } else if (event.which === KeyCodes.down) {\n\n      spinDirection = KeyboardSpinDirection.down;\n      this._updateValue(false /* shouldSpin */, this._initialStepDelay, this._onDecrement!);\n    } else if (event.which === KeyCodes.enter) {\n      event.currentTarget.blur();\n      this.focus();\n    } else if (event.which === KeyCodes.escape) {\n      if (this.state.value !== this._lastValidValue) {\n        this.setState({ value: this._lastValidValue });\n      }\n    }\n\n    // style the increment/decrement button to look active\n    // when the corresponding up/down arrow keys trigger a step\n    if (this.state.keyboardSpinDirection !== spinDirection) {\n      this.setState({ keyboardSpinDirection: spinDirection });\n    }\n  }\n\n  /**\n   * Make sure that we have stopped spinning on keyUp\n   * if the up or down arrow fired this event\n   * @param event stop spinning if we\n   */\n  private _handleKeyUp = (event: React.KeyboardEvent<HTMLElement>): void => {\n    if (this.props.disabled || event.which === KeyCodes.up || event.which === KeyCodes.down) {\n      this._stop();\n      return;\n    }\n  }\n\n  private _onIncrementMouseDown = (): void => {\n    this._updateValue(true /* shouldSpin */, this._initialStepDelay, this._onIncrement!);\n  }\n\n  private _onDecrementMouseDown = (): void => {\n    this._updateValue(true /* shouldSpin */, this._initialStepDelay, this._onDecrement!);\n  }\n}\n"]}