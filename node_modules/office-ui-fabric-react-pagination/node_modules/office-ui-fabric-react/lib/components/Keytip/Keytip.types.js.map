{"version":3,"file":"Keytip.types.js","sourceRoot":"../src/","sources":["components/Keytip/Keytip.types.ts"],"names":[],"mappings":"","sourcesContent":["import { ICalloutProps } from '../../Callout';\nimport { IStyle, ITheme } from '../../Styling';\nimport { IStyleFunction, IPoint } from '../../Utilities';\n\nexport interface IKeytip {\n}\n\nexport interface IKeytipProps {\n  /**\n   * Optional callback to access the Keytip component. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: IKeytip | null) => void;\n\n  /**\n   * Content to put inside the keytip\n   *\n   * @type {string}\n   */\n  content: string;\n\n  /**\n   * Theme for the component\n   *\n   * @type {ITheme}\n   */\n  theme?: ITheme;\n\n  /**\n   * T/F if the corresponding control for this keytip is disabled\n   *\n   * @type {boolean}\n   */\n  disabled?: boolean;\n\n  /**\n   * T/F if the keytip is visible\n   *\n   * @type {boolean}\n   */\n  visible?: boolean;\n\n  /**\n   * Function to call when this keytip is activated\n   * 'el' is the DOM element marked with 'data-ktp-execute-target'\n   *\n   * @type {(HTMLElement) => void}\n   */\n  onExecute?: (el: HTMLElement | null) => void;\n\n  /**\n   * Function to call when the keytip is returned to\n   * 'el' is the DOM element marked with 'data-ktp-execute-target'\n   *\n   * @type {(HTMLElement) => void}\n   */\n  onReturn?: (el: HTMLElement | null) => void;\n\n  /**\n   * Array of KeySequences which is the full key sequence to trigger this keytip\n   * Should not include initial 'start' key sequence\n   *\n   * @type {string[]}\n   */\n  keySequences: string[];\n\n  /**\n   * Full KeySequence of the overflow set button, will be set automatically if this keytip is inside an overflow\n   *\n   * @type {string[]}\n   */\n  overflowSetSequence?: string[];\n\n  /**\n   * ICalloutProps to pass to the callout element\n   *\n   * @type {string}\n   */\n  calloutProps?: ICalloutProps;\n\n  /**\n   * Optional styles for the component.\n   *\n   * @type {IStyleFunction<IKeytipStyleProps, IKeytipStyles>}\n   */\n  getStyles?: IStyleFunction<IKeytipStyleProps, IKeytipStyles>;\n\n  /**\n   * Offset x and y for the keytip, added from the top-left corner\n   * By default the keytip will be anchored to the bottom-center of the element\n   *\n   * @type {IPoint}\n   */\n  offset?: IPoint;\n\n  /**\n   * Whether or not this keytip will have children keytips that are dynamically created (DOM is generated on keytip activation)\n   * Common cases are a Pivot or Modal\n   *\n   * @type {boolean}\n   */\n  hasDynamicChildren?: boolean;\n\n  /**\n   * Whether or not this keytip belongs to a component that has a menu\n   * Keytip mode will stay on when a menu is opened, even if the items in that menu have no keytips\n   *\n   * @type {boolean}\n   */\n  hasMenu?: boolean;\n}\n\n/**\n * Props to style Keytip component\n */\nexport interface IKeytipStyleProps {\n\n  /**\n   * The theme for the keytip.\n   *\n   * @type {ITheme}\n   */\n  theme: ITheme;\n\n  /**\n   * Whether the keytip is disabled or not.\n   *\n   * @type {boolean}\n   */\n  disabled?: boolean;\n\n  /**\n   * T/F if the keytip is visible\n   *\n   * @type {boolean}\n   */\n  visible?: boolean;\n}\n\nexport interface IKeytipStyles {\n\n  /**\n   * Style for the div container surrounding the keytip content.\n   *\n   * @type {IStyle}\n   */\n  container: IStyle;\n\n  /**\n   * Style for the keytip content element.\n   *\n   * @type {IStyle}\n   */\n  root: IStyle;\n}"]}