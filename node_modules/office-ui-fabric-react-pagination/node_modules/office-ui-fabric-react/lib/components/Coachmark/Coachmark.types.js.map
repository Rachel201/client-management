{"version":3,"file":"Coachmark.types.js","sourceRoot":"../src/","sources":["components/Coachmark/Coachmark.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { Coachmark } from './Coachmark';\nimport { ICoachmarkStyles, ICoachmarkStyleProps } from './Coachmark.styles';\nimport { IPositioningContainerTypes } from './PositioningContainer/PositioningContainer.types';\nimport { IStyleFunction } from '../../Utilities';\nimport { ITeachingBubble } from '../../TeachingBubble';\n\nexport interface ICoachmark {\n}\n\nexport interface ICoachmarkTypes extends React.Props<Coachmark> {\n  /**\n   * Optional callback to access the ICoachmark interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: ICoachmark | null) => void;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules\n   */\n  getStyles?: IStyleFunction<ICoachmarkStyleProps, ICoachmarkStyles>;\n\n  /**\n   * The target that the Coachmark should try to position itself based on.\n   */\n  target: HTMLElement | string | null;\n\n  /**\n   * Props to pass to the PositioningContainer component.  Specific the `directionalHint` to indicate which edge the\n   * Coachmark/TeachingBubble should live.\n   * @default directionalHint: DirectionalHint.bottomAutoEdge\n   */\n  positioningContainerProps?: IPositioningContainerTypes;\n\n  /**\n   * Whether or not to force the Coachmark/TeachingBubble content to fit within the window bounds.\n   * @default true\n   */\n  isPositionForced?: boolean;\n\n  /**\n   * The starting collapsed state for the Coachmark.  Use isCollapsed instead.\n   * @default true\n   * @deprecated\n   */\n  collapsed?: boolean;\n\n  /**\n   * The starting collapsed state for the Coachmark.\n   * @default true\n   */\n  isCollapsed?: boolean;\n\n  /**\n   * The distance in pixels the mouse is located\n   * before opening up the Coachmark.\n   * @default 10\n   */\n  mouseProximityOffset?: number;\n\n  /**\n   * Callback when the opening animation begins.\n   */\n  onAnimationOpenStart?: () => void;\n\n  /**\n   * Callback when the opening animation completes.\n   */\n  onAnimationOpenEnd?: () => void;\n\n  /**\n   * The width of the Beak component.\n   * @deprecated\n   */\n  beakWidth?: number;\n\n  /**\n   * The height of the Beak component.\n   * @deprecated\n   */\n  beakHeight?: number;\n\n  /**\n   * Delay before allowing mouse movements to open the Coachmark.\n   * @default 3600\n   */\n  delayBeforeMouseOpen?: number;\n\n  /**\n   * Callback to run when the mouse moves.\n   */\n  onMouseMove?: (e: MouseEvent) => void;\n\n  /**\n   * The width of the Coachmark.\n   * @deprecated\n   */\n  width?: number;\n\n  /**\n   * The height of the Coachmark.\n   * @deprecated\n   */\n  height?: number;\n\n  /**\n   * Color of the Coachmark/TeachingBubble.\n   */\n  color?: string;\n\n  /**\n   * Beacon color one.\n   */\n  beaconColorOne?: string;\n\n  /**\n   * Beacon color two.\n   */\n  beaconColorTwo?: string;\n\n  /**\n   * Text to announce to screen reader / narrator when Coachmark is displayed\n   */\n  ariaAlertText?: string;\n\n  /**\n   * Ref for TeachingBubble\n   */\n  teachingBubbleRef?: ITeachingBubble;\n\n  /**\n   *  Defines the element id referencing the element containing label text for Coachmark.\n   */\n  ariaLabelledBy?: string;\n\n  /**\n   * Defines the element id referencing the element containing the description for the Coachmark.\n   */\n  ariaDescribedBy?: string;\n\n  /**\n   *  Defines the text content for the ariaLabelledBy element\n   */\n  ariaLabelledByText?: string;\n\n  /**\n   * Defines the text content for the ariaDescribedBy element\n   */\n  ariaDescribedByText?: string;\n}\n"]}