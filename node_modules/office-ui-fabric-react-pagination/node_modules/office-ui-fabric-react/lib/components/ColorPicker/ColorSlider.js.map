{"version":3,"file":"ColorSlider.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorSlider.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  css,\n  createRef\n} from '../../Utilities';\nimport * as stylesImport from './ColorPicker.scss';\nconst styles: any = stylesImport;\n\nexport interface IColorSliderProps {\n  componentRef?: () => void;\n  minValue?: number;\n  maxValue?: number;\n  value?: number;\n  thumbColor?: string;\n  overlayStyle?: any;\n  onChanged?: (newValue: number) => void;\n\n  className?: string;\n  style?: any;\n}\n\nexport interface IColorSliderState {\n  isAdjusting?: boolean;\n  origin?: { x: number, originalValue: number };\n  currentValue?: number;\n}\n\nexport class ColorSlider extends BaseComponent<IColorSliderProps, IColorSliderState> {\n  public static defaultProps = {\n    minValue: 0,\n    maxValue: 100,\n    thumbColor: 'inherit',\n    value: 0\n  };\n\n  private _root = createRef<HTMLDivElement>();\n\n  constructor(props: IColorSliderProps) {\n    super(props);\n\n    const { value } = this.props;\n\n    this.state = {\n      isAdjusting: false,\n      origin: undefined,\n      currentValue: value\n    };\n  }\n\n  public componentWillReceiveProps(newProps: IColorSliderProps): void {\n    if (newProps && newProps.value) {\n      this.setState({ currentValue: newProps.value });\n    }\n  }\n\n  public render(): JSX.Element {\n    const { className, minValue, maxValue, overlayStyle } = this.props;\n    const { currentValue, isAdjusting } = this.state;\n\n    const currentPercentage = 100 * (currentValue! - minValue!) / (maxValue! - minValue!);\n\n    return (\n      <div\n        ref={ this._root }\n        className={ css(\n          'ms-ColorPicker-slider',\n          styles.slider,\n          className,\n          isAdjusting && 'is-adjusting'\n        ) }\n        onMouseDown={ this._onMouseDown }\n      >\n        <div className={ css('ms-ColorPicker-sliderOverlay', styles.sliderOverlay) } style={ overlayStyle } />\n        <div className={ css('ms-ColorPicker-thumb is-slider', styles.thumb, styles.thumbIsSlider) } style={ { left: currentPercentage + '%' } } />\n      </div>\n    );\n  }\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._events.on(window, 'mousemove', this._onMouseMove, true);\n    this._events.on(window, 'mouseup', this._onMouseUp, true);\n\n    this._onMouseMove(ev);\n  }\n\n  private _onMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    if (!this._root.current) {\n      return;\n    }\n\n    const { onChanged, minValue, maxValue } = this.props;\n    const rectSize = this._root.current.getBoundingClientRect();\n\n    const currentPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n    const newValue = Math.min(maxValue!, Math.max(minValue!, currentPercentage * maxValue!));\n\n    this.setState({\n      isAdjusting: true,\n      currentValue: newValue\n    });\n\n    if (onChanged) {\n      onChanged(newValue);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  private _onMouseUp = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._events.off();\n\n    this.setState({\n      isAdjusting: false,\n      origin: undefined\n    });\n  }\n\n}\n"]}