{"version":3,"file":"ColorPicker.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorPicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  css\n} from '../../Utilities';\nimport { IColorPickerProps } from './ColorPicker.types';\nimport { TextField } from '../../TextField';\nimport { ColorRectangle } from './ColorRectangle';\nimport { ColorSlider } from './ColorSlider';\nimport {\n  MAX_COLOR_HUE,\n  IColor,\n  getColorFromString,\n  getColorFromRGBA,\n  updateA,\n  updateH,\n  updateSV\n} from '../../utilities/color/colors';\nimport { FontClassNames } from '../../Styling';\nimport * as stylesImport from './ColorPicker.scss';\nconst styles: any = stylesImport;\n\nexport interface IColorPickerState {\n  isOpen: boolean;\n  color: IColor;\n}\n\nexport class ColorPicker extends BaseComponent<IColorPickerProps, IColorPickerState> {\n  public static defaultProps = {\n    hexLabel: 'Hex',\n    redLabel: 'Red',\n    greenLabel: 'Green',\n    blueLabel: 'Blue',\n    alphaLabel: 'Alpha'\n  };\n\n  private hexText: TextField;\n  private rText: TextField;\n  private gText: TextField;\n  private bText: TextField;\n  private aText: TextField;\n\n  constructor(props: IColorPickerProps) {\n    super(props);\n\n    this.state = {\n      color: getColorFromString(props.color)\n    } as IColorPickerState;\n  }\n\n  public componentWillReceiveProps(newProps: IColorPickerProps): void {\n    if (newProps.color) {\n      this._updateColor(getColorFromString(newProps.color));\n    }\n  }\n\n  public render(): JSX.Element {\n    const { color } = this.state;\n\n    return (\n      <div className={ css('ms-ColorPicker', styles.root) }>\n        <div className={ css('ms-ColorPicker-panel', styles.panel) }>\n          <ColorRectangle color={ color } onSVChanged={ this._onSVChanged } />\n          <ColorSlider\n            className={ css('is-hue', styles.colorSliderIsHue) }\n            minValue={ 0 }\n            maxValue={ MAX_COLOR_HUE }\n            value={ color.h }\n            onChanged={ this._onHChanged }\n          />\n          { !this.props.alphaSliderHidden && (\n            <ColorSlider\n              className={ css('is-alpha', styles.colorSliderIsAlpha) }\n              overlayStyle={ { background: `linear-gradient(to right, transparent 0, ${color.str} 100%)` } }\n              minValue={ 0 }\n              maxValue={ 100 }\n              value={ color.a }\n              onChanged={ this._onAChanged }\n            />) }\n          <table className={ css('ms-ColorPicker-table', styles.table) } cellPadding='0' cellSpacing='0'>\n            <thead>\n              <tr className={ FontClassNames.small }>\n                <td className={ styles.tableHexCell }>{ this.props.hexLabel }</td>\n                <td>{ this.props.redLabel }</td>\n                <td>{ this.props.greenLabel }</td>\n                <td>{ this.props.blueLabel }</td>\n                { !this.props.alphaSliderHidden && (\n                  <td>{ this.props.alphaLabel }</td>) }\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>\n                  <TextField\n                    className={ css('ms-ColorPicker-input', styles.input) }\n                    value={ color.hex }\n                    ref={ (ref) => this.hexText = ref! }\n                    onBlur={ this._onHexChanged }\n                    spellCheck={ false }\n                  />\n                </td>\n                <td style={ { width: '18%' } }>\n                  <TextField\n                    className={ css('ms-ColorPicker-input', styles.input) }\n                    onBlur={ this._onRGBAChanged }\n                    value={ String(color.r) }\n                    ref={ (ref) => this.rText = ref! }\n                    spellCheck={ false }\n                  />\n                </td>\n                <td style={ { width: '18%' } }>\n                  <TextField\n                    className={ css('ms-ColorPicker-input', styles.input) }\n                    onBlur={ this._onRGBAChanged }\n                    value={ String(color.g) }\n                    ref={ (ref) => this.gText = ref! }\n                    spellCheck={ false }\n                  />\n                </td>\n                <td style={ { width: '18%' } }>\n                  <TextField\n                    className={ css('ms-ColorPicker-input', styles.input) }\n                    onBlur={ this._onRGBAChanged }\n                    value={ String(color.b) }\n                    ref={ (ref) => this.bText = ref! }\n                    spellCheck={ false }\n                  />\n                </td>\n                { !this.props.alphaSliderHidden && (\n                  <td style={ { width: '18%' } }>\n                    <TextField\n                      className={ css('ms-ColorPicker-input', styles.input) }\n                      onBlur={ this._onRGBAChanged }\n                      value={ String(color.a) }\n                      ref={ (ref) => this.aText = ref! }\n                      spellCheck={ false }\n                    />\n                  </td>\n                ) }\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n\n  private _onSVChanged = (s: number, v: number): void => {\n    this._updateColor(updateSV(this.state.color, s, v));\n  }\n\n  private _onHChanged = (h: number): void => {\n    this._updateColor(updateH(this.state.color, h));\n  }\n\n  private _onAChanged = (a: number): void => {\n    this._updateColor(updateA(this.state.color, a));\n  }\n\n  private _onHexChanged = (): void => {\n    this._updateColor(getColorFromString('#' + this.hexText.value));\n  }\n\n  private _onRGBAChanged = (): void => {\n    this._updateColor(getColorFromRGBA({\n      r: Number(this.rText.value),\n      g: Number(this.gText.value),\n      b: Number(this.bText.value),\n      a: Number((this.aText && this.aText.value) || 100)\n    }));\n  }\n\n  private _updateColor(newColor?: IColor): void {\n    if (!newColor) {\n      return;\n    }\n\n    const { onColorChanged } = this.props;\n\n    if (newColor.str !== this.state.color.str) {\n      this.setState({\n        color: newColor\n      } as IColorPickerState, () => {\n        if (onColorChanged) {\n          onColorChanged(newColor.str);\n        }\n      });\n    }\n  }\n}\n"]}