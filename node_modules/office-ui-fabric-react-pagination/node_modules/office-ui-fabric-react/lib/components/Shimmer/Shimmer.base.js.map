{"version":3,"file":"Shimmer.base.js","sourceRoot":"../src/","sources":["components/Shimmer/Shimmer.base.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,6CAOyB;AAEzB,oFAAmF;AASnF,IAAM,6BAA6B,GAAG,GAAG,CAAC,CAAC,QAAQ;AAEnD,IAAM,aAAa,GAAG,8BAAkB,EAAsC,CAAC;AAG/E;IAAiC,uCAA2C;IAQ1E,qBAAY,KAAoB;QAAhC,YACE,kBAAM,KAAK,CAAC,SAKb;QAHC,KAAI,CAAC,KAAK,GAAG;YACX,aAAa,EAAE,KAAK,CAAC,YAAY;SAClC,CAAC;;IACJ,CAAC;IAEM,+CAAyB,GAAhC,UAAiC,SAAwB;QAAzD,iBAmBC;QAlBS,IAAA,qCAAY,CAAe;QAEnC,IAAI,IAAI,CAAC,cAAc,KAAK,SAAS,EAAE;YACrC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAC9C,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;SACjC;QACD,IAAI,YAAY,EAAE;YAChB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;gBAC3C,KAAI,CAAC,QAAQ,CAAC;oBACZ,aAAa,EAAE,YAAY;iBAC5B,CAAC,CAAC;gBACH,KAAI,CAAC,cAAc,GAAG,SAAS,CAAC;YAClC,CAAC,EAAE,6BAA6B,CAAC,CAAC;SACnC;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC;gBACZ,aAAa,EAAE,YAAY;aAC5B,CAAC,CAAC;SACJ;IACH,CAAC;IAEM,4BAAM,GAAb;QACQ,IAAA,eAUQ,EATZ,wBAAS,EACT,oCAAe,EACf,sBAAQ,EACR,8BAAY,EACZ,gBAAK,EACL,wBAAS,EACT,4CAAmB,EACnB,gBAAK,EACL,wBAAS,CACI;QAEP,IAAA,wCAAa,CAAgB;QAErC,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,SAAU,EAAE;YAC3C,KAAK,EAAE,KAAM;YACb,YAAY,cAAA;YACZ,SAAS,WAAA;YACT,2BAA2B,EAAE,6BAA6B;SAC3D,CAAC,CAAC;QAEH,IAAM,QAAQ,GAAG,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,yBAAa,CAAC,CAAC;QAE3D,OAAO,CACL,gDAAU,QAAQ,IAAG,SAAS,EAAG,IAAI,CAAC,WAAW,CAAC,IAAI;YAClD,CAAC,aAAa,IAAI,CAClB,6BAAK,KAAK,EAAG,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,EAAG,SAAS,EAAG,IAAI,CAAC,WAAW,CAAC,cAAc,IACxF,mBAAmB,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,oBAAC,2CAAoB,IAAC,eAAe,EAAG,eAAe,GAAK,CACtG,CACP;YACC,QAAQ,IAAI,6BAAK,SAAS,EAAG,IAAI,CAAC,WAAW,CAAC,WAAW,IAAK,QAAQ,CAAQ;YAC9E,SAAS;gBACT,CAAC,YAAY,IAAI,CACf,6BAAK,IAAI,EAAC,QAAQ,eAAW,QAAQ;gBACnC,oBAAC,yBAAa;oBACZ,6BAAK,SAAS,EAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,IAAK,SAAS,CAAQ,CAC1D,CACZ,CACP,CACC,CACP,CAAC;IACJ,CAAC;IA9Ea,wBAAY,GAAkB;QAC1C,YAAY,EAAE,KAAK;KACpB,CAAC;IAHS,WAAW;QADvB,wBAAY,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC;OACtB,WAAW,CAgFvB;IAAD,kBAAC;CAAA,AAhFD,CAAiC,yBAAa,GAgF7C;AAhFY,kCAAW","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  classNamesFunction,\n  customizable,\n  DelayedRender,\n  getNativeProps,\n  divProperties\n} from '../../Utilities';\nimport { IShimmerProps, IShimmerStyleProps, IShimmerStyles } from './Shimmer.types';\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\n\nexport interface IShimmerState {\n  /**\n   * Flag for knowing when to remove the shimmerWrapper from the DOM.\n   */\n  contentLoaded?: boolean;\n}\n\nconst TRANSITION_ANIMATION_INTERVAL = 200; /* ms */\n\nconst getClassNames = classNamesFunction<IShimmerStyleProps, IShimmerStyles>();\n\n@customizable('Shimmer', ['theme'])\nexport class ShimmerBase extends BaseComponent<IShimmerProps, IShimmerState> {\n  public static defaultProps: IShimmerProps = {\n    isDataLoaded: false\n  };\n\n  private _classNames: { [key in keyof IShimmerStyles]: string };\n  private _lastTimeoutId: number | undefined;\n\n  constructor(props: IShimmerProps) {\n    super(props);\n\n    this.state = {\n      contentLoaded: props.isDataLoaded\n    };\n  }\n\n  public componentWillReceiveProps(nextProps: IShimmerProps): void {\n    const { isDataLoaded } = nextProps;\n\n    if (this._lastTimeoutId !== undefined) {\n      this._async.clearTimeout(this._lastTimeoutId);\n      this._lastTimeoutId = undefined;\n    }\n    if (isDataLoaded) {\n      this._lastTimeoutId = this._async.setTimeout(() => {\n        this.setState({\n          contentLoaded: isDataLoaded\n        });\n        this._lastTimeoutId = undefined;\n      }, TRANSITION_ANIMATION_INTERVAL);\n    } else {\n      this.setState({\n        contentLoaded: isDataLoaded\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      getStyles,\n      shimmerElements,\n      children,\n      isDataLoaded,\n      width,\n      className,\n      customElementsGroup,\n      theme,\n      ariaLabel\n    } = this.props;\n\n    const { contentLoaded } = this.state;\n\n    this._classNames = getClassNames(getStyles!, {\n      theme: theme!,\n      isDataLoaded,\n      className,\n      transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL\n    });\n\n    const divProps = getNativeProps(this.props, divProperties);\n\n    return (\n      <div { ...divProps } className={ this._classNames.root }>\n        { !contentLoaded && (\n          <div style={ { width: width ? width : '100%' } } className={ this._classNames.shimmerWrapper }>\n            { customElementsGroup ? customElementsGroup : <ShimmerElementsGroup shimmerElements={ shimmerElements } /> }\n          </div>\n        ) }\n        { children && <div className={ this._classNames.dataWrapper }>{ children }</div> }\n        { ariaLabel &&\n          !isDataLoaded && (\n            <div role='status' aria-live='polite'>\n              <DelayedRender>\n                <div className={ this._classNames.screenReaderText }>{ ariaLabel }</div>\n              </DelayedRender>\n            </div>\n          ) }\n      </div>\n    );\n  }\n}\n"]}