{"version":3,"file":"TextField.types.js","sourceRoot":"../src/","sources":["components/TextField/TextField.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { IRenderFunction } from '../../Utilities';\nimport { IIconProps } from '../../Icon';\n\nexport interface ITextField {\n  /** Gets the current value of the input. */\n  value: string | undefined;\n\n  /** Sets focus to the input. */\n  focus: () => void;\n\n  /** Select the value of the text field. */\n  select: () => void;\n\n  /** Sets the selection start of the text field to a specified value. */\n  setSelectionStart: (value: number) => void;\n\n  /** Sets the selection end of the text field to a specified value. */\n  setSelectionEnd: (value: number) => void;\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start Index of the start of the selection.\n   * @param end Index of the end of the selection.\n   */\n  setSelectionRange: (start: number, end: number) => void;\n\n  /** Gets the selection start of the text field. Returns -1 if there is no selection. */\n  selectionStart: number | null;\n\n  /** Gets the selection end of the text field. Returns -1 if there is no selection. */\n  selectionEnd: number | null;\n}\n\n/**\n * TextField component props.\n */\nexport interface ITextFieldProps extends React.AllHTMLAttributes<HTMLInputElement | HTMLTextAreaElement> {\n  /**\n   * Optional callback to access the ITextField interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: ITextField | null) => void;\n\n  /**\n   * Whether or not the textfield is a multiline textfield.\n   * @default false\n   */\n  multiline?: boolean;\n\n  /**\n   * Whether or not the multiline textfield is resizable.\n   * @default true\n   */\n  resizable?: boolean;\n\n  /**\n   * Whether or not to auto adjust textField height. Applies only to multiline textfield.\n   * @default false\n   */\n  autoAdjustHeight?: boolean;\n\n  /**\n   * Whether or not the textfield is underlined.\n   * @default false\n   */\n  underlined?: boolean;\n\n  /**\n   * Whether or not the textfield is borderless.\n   * @default false\n   */\n  borderless?: boolean;\n\n  /**\n   * Label for the textfield.\n   */\n  label?: string;\n\n  /**\n   * Optional custom renderer for the label.\n   */\n  onRenderLabel?: IRenderFunction<ITextFieldProps>;\n\n  /**\n   * The textfield input description\n   */\n  description?: string;\n\n  /**\n   * Optional custom renderer for the description.\n   */\n  onRenderDescription?: IRenderFunction<ITextFieldProps>;\n\n  /**\n   * @deprecated\n   * Deprecated; use prefix instead.\n   */\n  addonString?: string;\n\n  /**\n  * String for prefix\n  */\n  prefix?: string;\n\n  /**\n  * String for suffix\n  */\n  suffix?: string;\n\n  /**\n   * @deprecated\n   * Deprecated; use onRenderPrefix instead.\n   */\n  onRenderAddon?: IRenderFunction<ITextFieldProps>;\n\n  /**\n  * Custom render function for prefix.\n  */\n  onRenderPrefix?: IRenderFunction<ITextFieldProps>;\n\n  /**\n  * Custom render function for suffix.\n  */\n  onRenderSuffix?: IRenderFunction<ITextFieldProps>;\n\n  /**\n   * Optional icon props for an icon.\n   */\n  iconProps?: IIconProps;\n\n  /**\n   * Default value of the textfield, if any. Only provide this if the textfield is an uncontrolled component;\n   * otherwise, use the \"value\" property.\n   */\n  defaultValue?: string;\n\n  /**\n   * Current value of the textfield. Only provide this if the textfield is a controlled component where you\n   * are maintaining its current state; otherwise, use the \"defaultValue\" property.\n   */\n  value?: string;\n\n  /**\n   * Disabled state of the textfield.\n   * @default false\n   */\n  disabled?: boolean;\n\n  /**\n   * If set, this will display an error message for the text field.\n   */\n  errorMessage?: string;\n\n  /**\n   * Callback for the onChanged event.\n   */\n  onChanged?: (newValue: any) => void;\n\n  /**\n   * Callback for the onBeforeChange event.\n   */\n  onBeforeChange?: (newValue: any) => void;\n\n  /**\n   * Callback for the onNotifyValidationResult event.\n   */\n  onNotifyValidationResult?: (errorMessage: string, value: string | undefined) => void;\n\n  /**\n   * The method is used to get the validation error message and determine whether the input value is valid or not.\n   *\n   *   When it returns string:\n   *   - If valid, it returns empty string.\n   *   - If invalid, it returns the error message string and the text field will\n   *     show a red border and show an error message below the text field.\n   *\n   *   When it returns Promise<string>:\n   *   - The resolved value is display as error message.\n   *   - The rejected, the value is thrown away.\n   *\n   */\n  onGetErrorMessage?: (value: string) => string | PromiseLike<string> | undefined;\n\n  /**\n   * Text field will start to validate after users stop typing for `deferredValidationTime` milliseconds.\n   * @default 200\n   */\n  deferredValidationTime?: number;\n\n  /**\n   * Optional class name that is added to the container of the component.\n   */\n  className?: string;\n\n  /**\n   * Optional class name that is added specifically to the input/textarea element.\n   */\n  inputClassName?: string;\n\n  /**\n   * Aria Label for textfield, if any.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Run validation only on input focus\n   * @default false\n   */\n  validateOnFocusIn?: boolean;\n\n  /**\n   * Run validation only on input focus out\n   * @default false\n   */\n  validateOnFocusOut?: boolean;\n\n  /**\n   * Optional flag to disable onload validation\n   * @default true\n   */\n  validateOnLoad?: boolean;\n\n  /**\n   * @deprecated\n   * Deprecated; use iconProps instead.\n   */\n  iconClass?: string;\n\n  /**\n   * Whether the input field should have autocomplete enabled.\n   * This tells the browser to display options based on earlier typed values.\n   */\n  autoComplete?: 'on' | 'off';\n\n  /**\n   * The masking string that defines the mask's behavior.\n   * A backslash will escape any character.\n   * Special format characters are:\n   * '9': [0-9]\n   * 'a': [a-zA-Z]\n   * '*': [a-zA-Z0-9]\n   */\n  mask?: string;\n\n  /**\n   * The character to show in place of unfilled characters of the mask.\n   * @default '_'\n   */\n  maskChar?: string;\n\n  /**\n   * An object defining the format characters and corresponding regexp values.\n   * Default format characters: {\n   *  '9': /[0-9]/,\n   *  'a': /[a-zA-Z]/,\n   *  '*': /[a-zA-Z0-9]/\n   * }\n   */\n  maskFormat?: { [key: string]: RegExp };\n\n  /**\n   * Deprecated property. Serves no function.\n   * @deprecated\n   */\n  componentId?: string;\n}\n"]}