{"version":3,"file":"MaskedTextField.js","sourceRoot":"../src/","sources":["components/TextField/MaskedTextField/MaskedTextField.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,0CAAyC;AAKzC,gDAI4B;AAE5B,+DAW2C;AAgC9B,QAAA,iBAAiB,GAAG,GAAG,CAAC;AAErC,IAAK,eAKJ;AALD,WAAK,eAAe;IAClB,2DAAO,CAAA;IACP,+DAAS,CAAA;IACT,yDAAM,CAAA;IACN,iEAAU,CAAA;AACZ,CAAC,EALI,eAAe,KAAf,eAAe,QAKnB;AAED;IAAqC,2CAAqD;IAwBxF,yBAAY,KAAsB;QAAlC,YACE,kBAAM,KAAK,CAAC,SAgBb;QApCD;;WAEG;QACO,+BAAyB,GAAG,KAAK,CAAC;QAmB1C,+BAA+B;QAC/B,KAAI,CAAC,aAAa,GAAG,qBAAS,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;QAC7D,uEAAuE;QACvE,KAAK,CAAC,KAAK,IAAI,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAE1C,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,KAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;QAElC,KAAI,CAAC,KAAK,GAAG;YACX,YAAY,EAAE,0BAAc,CAC1B,KAAK,CAAC,IAAI,EACV,KAAI,CAAC,aAAa,EAClB,KAAK,CAAC,QAAQ,CAAC;SAClB,CAAC;;IACJ,CAAC;IAEM,mDAAyB,GAAhC,UAAiC,QAAyB;QACxD,IAAI,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;YACrC,IAAI,CAAC,aAAa,GAAG,qBAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC;YACnE,IAAI,CAAC,KAAK,GAAG;gBACX,YAAY,EAAE,0BAAc,CAC1B,QAAQ,CAAC,IAAI,EACb,IAAI,CAAC,aAAa,EAClB,QAAQ,CAAC,QAAQ,CAAC;aACrB,CAAC;SACH;IACH,CAAC;IAEM,4CAAkB,GAAzB;QACE,4DAA4D;QAC5D,IAAI,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE;YACjC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;SACjG;IACH,CAAC;IAEM,gCAAM,GAAb;QACE,OAAO,CACL,oBAAC,qBAAS,uBACH,IAAI,CAAC,KAAK,IACf,OAAO,EAAG,IAAI,CAAC,QAAQ,EACvB,MAAM,EAAG,IAAI,CAAC,OAAO,EACrB,WAAW,EAAG,IAAI,CAAC,YAAY,EAC/B,SAAS,EAAG,IAAI,CAAC,UAAU,EAC3B,SAAS,EAAG,IAAI,CAAC,cAAc,EAC/B,cAAc,EAAG,IAAI,CAAC,eAAe,EACrC,SAAS,EAAG,IAAI,CAAC,UAAU,EAC3B,OAAO,EAAG,IAAI,CAAC,QAAQ,EACvB,KAAK,EAAG,IAAI,CAAC,KAAK,CAAC,YAAY,EAC/B,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IACpC,CACH,CAAC;IACJ,CAAC;IAKD,sBAAW,kCAAK;QAHhB;;WAEG;aACH;YACE,IAAI,KAAK,GAAG,EAAE,CAAC;YAEf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAClD,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;oBAChC,OAAO,SAAS,CAAC;iBAClB;gBACD,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;aACtC;YACD,OAAO,KAAK,CAAC;QACf,CAAC;;;OAAA;IAED;;OAEG;IACI,kCAAQ,GAAf,UAAgB,QAAgB;QAC9B,IAAI,UAAU,GAAG,CAAC,EAChB,aAAa,GAAG,CAAC,CAAC;QAEpB,OAAO,UAAU,GAAG,QAAQ,CAAC,MAAM;YACjC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;YAC3C,6EAA6E;YAC7E,IAAM,OAAO,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAC;YACrC,IAAI,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;gBAC1D,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,KAAK,GAAG,OAAO,CAAC;gBAClD,aAAa,EAAE,CAAC;aACjB;YACD,UAAU,EAAE,CAAC;SACd;IACH,CAAC;IAEM,+BAAK,GAAZ;QACE,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;IAC7C,CAAC;IAEM,gCAAM,GAAb;QACE,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;IAC9C,CAAC;IAEM,2CAAiB,GAAxB,UAAyB,KAAa;QACpC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IAC9D,CAAC;IAEM,yCAAe,GAAtB,UAAuB,KAAa;QAClC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAC;IAEM,2CAAiB,GAAxB,UAAyB,KAAa,EAAE,GAAW;QACjD,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IACnE,CAAC;IAED,sBAAW,2CAAc;aAAzB;YACE,OAAO,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1G,CAAC;;;OAAA;IAED,sBAAW,yCAAY;aAAvB;YACE,OAAO,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7F,CAAC;;;OAAA;IAGO,kCAAQ,GAAhB,UAAiB,KAA+D;QAC9E,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;YACtB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC3B;QAED,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAEvB,6DAA6D;QAC7D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClD,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;gBAChC,IAAI,CAAC,QAAQ,CAAC;oBACZ,kBAAkB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,YAAY;iBACvD,CAAC,CAAC;gBACH,MAAM;aACP;SACF;IACH,CAAC;IAGO,iCAAO,GAAf,UAAgB,KAA+D;QAC7E,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACrB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAC1B;QAED,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;IACnC,CAAC;IAGO,sCAAY,GAApB,UAAqB,KAAyC;QAC5D,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;YAC1B,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SAC/B;QAED,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;SAClC;IACH,CAAC;IAGO,oCAAU,GAAlB,UAAmB,KAAyC;QAC1D,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;YACxB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SAC7B;QAED,0DAA0D;QAC1D,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAC7B,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;YAClC,8DAA8D;YAC9D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAClD,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;oBAChC,IAAI,CAAC,QAAQ,CAAC;wBACZ,kBAAkB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,YAAY;qBACvD,CAAC,CAAC;oBACH,MAAM;iBACP;aACF;SACF;IACH,CAAC;IAGO,yCAAe,GAAvB,UAAwB,KAAa;QACnC,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;YAC7B,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;SAClC;QAED,IAAI,IAAI,CAAC,oBAAoB,KAAK,IAAI,EAAE;YACtC,IAAI,CAAC,oBAAoB,GAAG;gBAC1B,UAAU,EAAE,eAAe,CAAC,OAAO;gBACnC,cAAc,EAAE,IAAI,CAAC,UAAU,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7F,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,YAAY,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;aACxF,CAAC;SACH;IACH,CAAC;IAGO,wCAAc,GAAtB,UAAuB,KAAa;QAClC,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;YACxB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SAC7B;QAED,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;YAC9B,OAAO;SACR;QAEO,IAAA,sCAAY,CAAgB;QAEpC,iDAAiD;QACjD,IAAI,SAAS,GAAG,CAAC,CAAC;QACZ,IAAA,8BAIuB,EAH3B,0BAAU,EACV,kCAAc,EACd,8BAAY,CACgB;QAE9B,IAAI,UAAU,KAAK,eAAe,CAAC,UAAU,EAAE;YAC7C,IAAM,aAAa,GAAG,YAAY,GAAG,cAAc,EACjD,SAAS,GAAG,KAAK,CAAC,MAAM,GAAG,aAAa,GAAG,YAAY,CAAC,MAAM,EAC9D,QAAQ,GAAG,cAAc,EACzB,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YAEnD,gCAAgC;YAChC,IAAI,aAAa,EAAE;gBACjB,IAAI,CAAC,aAAa,GAAG,sBAAU,CAAC,IAAI,CAAC,aAAa,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC;aACpF;YACD,SAAS,GAAG,wBAAY,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;SACtE;aAAM,IAAI,UAAU,KAAK,eAAe,CAAC,MAAM;YAC9C,UAAU,KAAK,eAAe,CAAC,SAAS,EAAE;YAC1C,iEAAiE;YACjE,IAAM,KAAK,GAAG,UAAU,KAAK,eAAe,CAAC,MAAM,EACjD,SAAS,GAAG,YAAY,GAAG,cAAc,CAAC;YAE5C,IAAI,SAAS,EAAE,EAAE,wCAAwC;gBACvD,IAAI,CAAC,aAAa,GAAG,sBAAU,CAAC,IAAI,CAAC,aAAa,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;gBAC/E,SAAS,GAAG,+BAAmB,CAAC,IAAI,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;aACrE;iBAAM,EAAE,gFAAgF;gBACvF,IAAI,KAAK,EAAE;oBACT,IAAI,CAAC,aAAa,GAAG,qBAAS,CAAC,IAAI,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;oBACnE,SAAS,GAAG,+BAAmB,CAAC,IAAI,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;iBACrE;qBAAM;oBACL,IAAI,CAAC,aAAa,GAAG,qBAAS,CAAC,IAAI,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;oBACnE,SAAS,GAAG,8BAAkB,CAAC,IAAI,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;iBACpE;aACF;SACF;aAAM,IAAI,KAAK,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,EAAE;YAC7C,4CAA4C;YAC5C,IAAM,SAAS,GAAG,KAAK,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,EAClD,QAAQ,GAAG,YAAY,GAAG,SAAS,EACnC,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YAEpD,SAAS,GAAG,wBAAY,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;SACvE;aAAM,IAAI,KAAK,CAAC,MAAM,IAAI,YAAY,CAAC,MAAM,EAAE;YAC9C;;;eAGG;YACH,IAAM,SAAS,GAAG,CAAC,EACjB,WAAW,GAAG,YAAY,CAAC,MAAM,GAAG,SAAS,GAAG,KAAK,CAAC,MAAM,EAC5D,QAAQ,GAAG,YAAY,GAAG,SAAS,EACnC,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YAEpD,2BAA2B;YAC3B,IAAI,CAAC,aAAa,GAAG,sBAAU,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;YAC3E,+BAA+B;YAC/B,SAAS,GAAG,wBAAY,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;SACvE;QAED,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;QAEjC,IAAI,CAAC,QAAQ,CAAC;YACZ,YAAY,EAAE,0BAAc,CAC1B,IAAI,CAAC,KAAK,CAAC,IAAI,EACf,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;YACtB,kBAAkB,EAAE,SAAS;SAC9B,CAAC,CAAC;IACL,CAAC;IAGO,oCAAU,GAAlB,UAAmB,KAA4C;QAC7D,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;YACxB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SAC7B;QAED,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;QACjC,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE;YAEvB,IAAA,uBAAO,EACP,uBAAO,EACP,uBAAO,CACC;YAEV,+BAA+B;YAC/B,IAAI,OAAO,IAAI,OAAO,EAAE;gBACtB,OAAO;aACR;YAED,8DAA8D;YAC9D,IAAI,OAAO,sBAAuB,IAAI,OAAO,iBAAiB,EAAE;gBAC9D,IAAM,cAAc,GAAI,KAAK,CAAC,MAA2B,CAAC,cAAc,EACtE,YAAY,GAAI,KAAK,CAAC,MAA2B,CAAC,YAAY,CAAC;gBAEjE,+CAA+C;gBAC/C,IAAI,CAAC,CAAC,OAAO,sBAAuB,IAAI,YAAY,IAAI,YAAY,GAAG,CAAC,CAAC;uBACpE,CAAC,CAAC,OAAO,iBAAiB,IAAI,cAAc,KAAK,IAAI,IAAI,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;oBAC5G,OAAO;iBACR;gBAED,IAAI,CAAC,oBAAoB,GAAG;oBAC1B,UAAU,EAAE,OAAO,sBAAuB,CAAC,CAAC;wBAC1C,eAAe,CAAC,SAAS,CAAC,CAAC;wBAC3B,eAAe,CAAC,MAAM;oBACxB,cAAc,EAAE,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC7D,YAAY,EAAE,YAAY,KAAK,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;iBACxD,CAAC;aACH;SACF;IACH,CAAC;IAGO,kCAAQ,GAAhB,UAAiB,KAA6C;QAC5D,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;YACtB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC3B;QAED,IAAM,cAAc,GAAI,KAAK,CAAC,MAA2B,CAAC,cAAc,EACtE,YAAY,GAAI,KAAK,CAAC,MAA2B,CAAC,YAAY,CAAC;QACjE,kCAAkC;QAClC,IAAI,CAAC,oBAAoB,GAAG;YAC1B,UAAU,EAAE,eAAe,CAAC,UAAU;YACtC,cAAc,EAAE,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7D,YAAY,EAAE,YAAY,KAAK,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;SACxD,CAAC;IACJ,CAAC;IAnWa,4BAAY,GAAoB;QAC5C,QAAQ,EAAE,yBAAiB;QAC3B,UAAU,EAAE,qCAAyB;KACtC,CAAC;IA2IF;QADC,oBAAQ;mDAiBR;IAGD;QADC,oBAAQ;kDAQR;IAGD;QADC,oBAAQ;uDASR;IAGD;QADC,oBAAQ;qDAmBR;IAGD;QADC,oBAAQ;0DAaR;IAGD;QADC,oBAAQ;yDAiFR;IAGD;QADC,oBAAQ;qDAuCR;IAGD;QADC,oBAAQ;mDAcR;IACH,sBAAC;CAAA,AArWD,CAAqC,yBAAa,GAqWjD;AArWY,0CAAe","sourcesContent":["import * as React from 'react';\nimport { TextField } from '../TextField';\nimport {\n  ITextField,\n  ITextFieldProps\n} from '../TextField.types';\nimport {\n  autobind,\n  BaseComponent,\n  KeyCodes,\n} from '../../../Utilities';\n\nimport {\n  clearNext,\n  clearPrev,\n  clearRange,\n  DEFAULT_MASK_FORMAT_CHARS,\n  getLeftFormatIndex,\n  getMaskDisplay,\n  getRightFormatIndex,\n  IMaskValue,\n  insertString,\n  parseMask\n} from '@uifabric/utilities/lib/inputMask';\n\n/**\n * props.mask:\n *  The string containing the prompt and format characters.\n * Example:\n *  'Phone Number: (999) 9999'\n *\n * _maskCharData\n *  An array of data containing information regarding the format characters,\n *  their indices inside the display text, and their corresponding values.\n * Example:\n *  [\n *    { value: '1', displayIndex: 16, format: /[0-9]/ },\n *    { value: '2', displayIndex: 17, format: /[0-9]/ },\n *    { displayIndex: 18, format: /[0-9]/ },\n *    { value: '4', displayIndex: 22, format: /[0-9]/ },\n *    ...\n *  ]\n */\nexport interface IMaskedTextFieldState {\n  /**\n   * The mask string formatted with the input value.\n   * This is what is displayed inside the TextField\n   * Example:\n   *  'Phone Number: 12_ - 4___'\n   */\n  displayValue: string;\n  /** The index into the rendered value of the first unfilled format character */\n  maskCursorPosition?: number;\n}\n\nexport const DEFAULT_MASK_CHAR = '_';\n\nenum inputChangeType {\n  default,\n  backspace,\n  delete,\n  textPasted\n}\n\nexport class MaskedTextField extends BaseComponent<ITextFieldProps, IMaskedTextFieldState> implements ITextField {\n  public static defaultProps: ITextFieldProps = {\n    maskChar: DEFAULT_MASK_CHAR,\n    maskFormat: DEFAULT_MASK_FORMAT_CHARS,\n  };\n  /**\n   * Tell BaseComponent to bypass resolution of componentRef.\n   */\n  protected _shouldUpdateComponentRef = false;\n\n  private _textField: ITextField;\n  private _maskCharData: IMaskValue[];\n  // True if the TextField is focused\n  private _isFocused: boolean;\n  // True if the TextField was not focused and it was clicked into\n  private _moveCursorOnMouseUp: boolean;\n\n  // The stored selection data prior to input change events.\n  private _changeSelectionData: {\n    changeType: inputChangeType\n    selectionStart: number,\n    selectionEnd: number\n  } | null;\n\n  constructor(props: ITextFieldProps) {\n    super(props);\n\n    // Translate mask into charData\n    this._maskCharData = parseMask(props.mask, props.maskFormat);\n    // If an initial value is provided, use it to populate the format chars\n    props.value && this.setValue(props.value);\n\n    this._isFocused = false;\n    this._moveCursorOnMouseUp = false;\n\n    this.state = {\n      displayValue: getMaskDisplay(\n        props.mask,\n        this._maskCharData,\n        props.maskChar),\n    };\n  }\n\n  public componentWillReceiveProps(newProps: ITextFieldProps) {\n    if (newProps.mask !== this.props.mask) {\n      this._maskCharData = parseMask(newProps.mask, newProps.maskFormat);\n      this.state = {\n        displayValue: getMaskDisplay(\n          newProps.mask,\n          this._maskCharData,\n          newProps.maskChar),\n      };\n    }\n  }\n\n  public componentDidUpdate() {\n    // Move the cursor to the start of the mask format on update\n    if (this.state.maskCursorPosition) {\n      this._textField.setSelectionRange(this.state.maskCursorPosition, this.state.maskCursorPosition);\n    }\n  }\n\n  public render() {\n    return (\n      <TextField\n        { ...this.props }\n        onFocus={ this._onFocus }\n        onBlur={ this._onBlur }\n        onMouseDown={ this._onMouseDown }\n        onMouseUp={ this._onMouseUp }\n        onChanged={ this._onInputChange }\n        onBeforeChange={ this._onBeforeChange }\n        onKeyDown={ this._onKeyDown }\n        onPaste={ this._onPaste }\n        value={ this.state.displayValue }\n        ref={ this._resolveRef('_textField') }\n      />\n    );\n  }\n\n  /**\n   * @return The value of all filled format characters or undefined if not all format characters are filled\n   */\n  public get value(): string | undefined {\n    let value = '';\n\n    for (let i = 0; i < this._maskCharData.length; i++) {\n      if (!this._maskCharData[i].value) {\n        return undefined;\n      }\n      value += this._maskCharData[i].value;\n    }\n    return value;\n  }\n\n  /**\n   *\n   */\n  public setValue(newValue: string): void {\n    let valueIndex = 0,\n      charDataIndex = 0;\n\n    while (valueIndex < newValue.length &&\n      charDataIndex < this._maskCharData.length) {\n      // Test if the next character in the new value fits the next format character\n      const testVal = newValue[valueIndex];\n      if (this._maskCharData[charDataIndex].format.test(testVal)) {\n        this._maskCharData[charDataIndex].value = testVal;\n        charDataIndex++;\n      }\n      valueIndex++;\n    }\n  }\n\n  public focus(): void {\n    this._textField && this._textField.focus();\n  }\n\n  public select(): void {\n    this._textField && this._textField.select();\n  }\n\n  public setSelectionStart(value: number): void {\n    this._textField && this._textField.setSelectionStart(value);\n  }\n\n  public setSelectionEnd(value: number): void {\n    this._textField && this._textField.setSelectionEnd(value);\n  }\n\n  public setSelectionRange(start: number, end: number): void {\n    this._textField && this._textField.setSelectionRange(start, end);\n  }\n\n  public get selectionStart(): number | null {\n    return this._textField && this._textField.selectionStart !== null ? this._textField.selectionStart : -1;\n  }\n\n  public get selectionEnd(): number | null {\n    return this._textField && this._textField.selectionEnd ? this._textField.selectionEnd : -1;\n  }\n\n  @autobind\n  private _onFocus(event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) {\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n\n    this._isFocused = true;\n\n    // Move the cursor position to the leftmost unfilled position\n    for (let i = 0; i < this._maskCharData.length; i++) {\n      if (!this._maskCharData[i].value) {\n        this.setState({\n          maskCursorPosition: this._maskCharData[i].displayIndex\n        });\n        break;\n      }\n    }\n  }\n\n  @autobind\n  private _onBlur(event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) {\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n\n    this._isFocused = false;\n    this._moveCursorOnMouseUp = true;\n  }\n\n  @autobind\n  private _onMouseDown(event: React.MouseEvent<HTMLInputElement>) {\n    if (this.props.onMouseDown) {\n      this.props.onMouseDown(event);\n    }\n\n    if (!this._isFocused) {\n      this._moveCursorOnMouseUp = true;\n    }\n  }\n\n  @autobind\n  private _onMouseUp(event: React.MouseEvent<HTMLInputElement>) {\n    if (this.props.onMouseUp) {\n      this.props.onMouseUp(event);\n    }\n\n    // Move the cursor on mouseUp after focusing the textField\n    if (this._moveCursorOnMouseUp) {\n      this._moveCursorOnMouseUp = false;\n      // Move the cursor position to the rightmost unfilled position\n      for (let i = 0; i < this._maskCharData.length; i++) {\n        if (!this._maskCharData[i].value) {\n          this.setState({\n            maskCursorPosition: this._maskCharData[i].displayIndex\n          });\n          break;\n        }\n      }\n    }\n  }\n\n  @autobind\n  private _onBeforeChange(value: String) {\n    if (this.props.onBeforeChange) {\n      this.props.onBeforeChange(value);\n    }\n\n    if (this._changeSelectionData === null) {\n      this._changeSelectionData = {\n        changeType: inputChangeType.default,\n        selectionStart: this._textField.selectionStart !== null ? this._textField.selectionStart : -1,\n        selectionEnd: this._textField.selectionEnd !== null ? this._textField.selectionEnd : -1\n      };\n    }\n  }\n\n  @autobind\n  private _onInputChange(value: string) {\n    if (this.props.onChanged) {\n      this.props.onChanged(value);\n    }\n\n    if (!this._changeSelectionData) {\n      return;\n    }\n\n    const { displayValue } = this.state;\n\n    // The initial value of cursorPos does not matter\n    let cursorPos = 0;\n    const {\n      changeType,\n      selectionStart,\n      selectionEnd\n    } = this._changeSelectionData;\n\n    if (changeType === inputChangeType.textPasted) {\n      const charsSelected = selectionEnd - selectionStart,\n        charCount = value.length + charsSelected - displayValue.length,\n        startPos = selectionStart,\n        pastedString = value.substr(startPos, charCount);\n\n      // Clear any selected characters\n      if (charsSelected) {\n        this._maskCharData = clearRange(this._maskCharData, selectionStart, charsSelected);\n      }\n      cursorPos = insertString(this._maskCharData, startPos, pastedString);\n    } else if (changeType === inputChangeType.delete ||\n      changeType === inputChangeType.backspace) {\n      // isDel is true If the characters are removed LTR, otherwise RTL\n      const isDel = changeType === inputChangeType.delete,\n        charCount = selectionEnd - selectionStart;\n\n      if (charCount) { // charCount is > 0 if range was deleted\n        this._maskCharData = clearRange(this._maskCharData, selectionStart, charCount);\n        cursorPos = getRightFormatIndex(this._maskCharData, selectionStart);\n      } else { // If charCount === 0, there was no selection and a single character was deleted\n        if (isDel) {\n          this._maskCharData = clearNext(this._maskCharData, selectionStart);\n          cursorPos = getRightFormatIndex(this._maskCharData, selectionStart);\n        } else {\n          this._maskCharData = clearPrev(this._maskCharData, selectionStart);\n          cursorPos = getLeftFormatIndex(this._maskCharData, selectionStart);\n        }\n      }\n    } else if (value.length > displayValue.length) {\n      // This case is if the user added characters\n      const charCount = value.length - displayValue.length,\n        startPos = selectionEnd - charCount,\n        enteredString = value.substr(startPos, charCount);\n\n      cursorPos = insertString(this._maskCharData, startPos, enteredString);\n    } else if (value.length <= displayValue.length) {\n      /**\n       * This case is reached only if the user has selected a block of 1 or more\n       * characters and input a character replacing the characters they've selected.\n       */\n      const charCount = 1,\n        selectCount = displayValue.length + charCount - value.length,\n        startPos = selectionEnd - charCount,\n        enteredString = value.substr(startPos, charCount);\n\n      // Clear the selected range\n      this._maskCharData = clearRange(this._maskCharData, startPos, selectCount);\n      // Insert the printed character\n      cursorPos = insertString(this._maskCharData, startPos, enteredString);\n    }\n\n    this._changeSelectionData = null;\n\n    this.setState({\n      displayValue: getMaskDisplay(\n        this.props.mask,\n        this._maskCharData,\n        this.props.maskChar),\n      maskCursorPosition: cursorPos\n    });\n  }\n\n  @autobind\n  private _onKeyDown(event: React.KeyboardEvent<HTMLInputElement>) {\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(event);\n    }\n\n    this._changeSelectionData = null;\n    if (this._textField.value) {\n      const {\n        keyCode,\n        ctrlKey,\n        metaKey\n      } = event;\n\n      // Ignore ctrl and meta keydown\n      if (ctrlKey || metaKey) {\n        return;\n      }\n\n      // On backspace or delete, store the selection and the keyCode\n      if (keyCode === KeyCodes.backspace || keyCode === KeyCodes.del) {\n        const selectionStart = (event.target as HTMLInputElement).selectionStart,\n          selectionEnd = (event.target as HTMLInputElement).selectionEnd;\n\n        // Check if backspace or delete press is valid.\n        if (!(keyCode === KeyCodes.backspace && selectionEnd && selectionEnd > 0)\n          && !(keyCode === KeyCodes.del && selectionStart !== null && selectionStart < this._textField.value.length)) {\n          return;\n        }\n\n        this._changeSelectionData = {\n          changeType: keyCode === KeyCodes.backspace ?\n            inputChangeType.backspace :\n            inputChangeType.delete,\n          selectionStart: selectionStart !== null ? selectionStart : -1,\n          selectionEnd: selectionEnd !== null ? selectionEnd : -1\n        };\n      }\n    }\n  }\n\n  @autobind\n  private _onPaste(event: React.ClipboardEvent<HTMLInputElement>) {\n    if (this.props.onPaste) {\n      this.props.onPaste(event);\n    }\n\n    const selectionStart = (event.target as HTMLInputElement).selectionStart,\n      selectionEnd = (event.target as HTMLInputElement).selectionEnd;\n    // Store the paste selection range\n    this._changeSelectionData = {\n      changeType: inputChangeType.textPasted,\n      selectionStart: selectionStart !== null ? selectionStart : -1,\n      selectionEnd: selectionEnd !== null ? selectionEnd : -1\n    };\n  }\n}\n"]}