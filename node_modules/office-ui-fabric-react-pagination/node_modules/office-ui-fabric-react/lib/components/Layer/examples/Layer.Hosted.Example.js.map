{"version":3,"file":"Layer.Hosted.Example.js","sourceRoot":"../src/","sources":["components/Layer/examples/Layer.Hosted.Example.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,8CAA6C;AAC7C,kCAAiC;AACjC,0CAAyC;AACzC,0CAAyC;AACzC,4CAAuD;AACvD,gCAA8B;AAC9B,yEAA2E;AAC3E,IAAM,aAAa,GAAQ,mBAAmB,CAAC;AAE/C;IAAwC,8CAItC;IAEA,4BAAY,KAAS;QAArB,YACE,kBAAM,KAAK,CAAC,SAMb;QA4EO,uBAAiB,GAAG,UAAC,EAAmD,EAAE,OAAgB;YAChG,KAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;QACxC,CAAC,CAAA;QAEO,2BAAqB,GAAG,UAAC,EAAmD,EAAE,OAAgB;YACpG,KAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,OAAO,EAAE,CAAC,CAAC;QAC5C,CAAC,CAAA;QAEO,qBAAe,GAAG,UAAC,OAAgB;YACzC,KAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;QACvC,CAAC,CAAA;QA3FC,KAAI,CAAC,KAAK,GAAG;YACX,SAAS,EAAE,KAAK;YAChB,aAAa,EAAE,KAAK;YACpB,QAAQ,EAAE,IAAI;SACf,CAAC;;IACJ,CAAC;IAEM,mCAAM,GAAb;QACQ,IAAA,eAAmD,EAAjD,wBAAS,EAAE,gCAAa,EAAE,sBAAQ,CAAgB;QAC1D,IAAM,OAAO,GAAG,CACd,6BAAK,SAAS,EAAG,uBAAuB,GAAG,6BAAmB,CAAC,YAAY,qCAErE,CACP,CAAC;QAEF,OAAO,CACL;YACE,oBAAC,eAAM,IACL,KAAK,EAAC,WAAW,EACjB,OAAO,EAAG,QAAQ,EAClB,SAAS,EAAG,IAAI,CAAC,eAAe,GAChC;YAEA,QAAQ,IAAI,CACZ,oBAAC,qBAAS,IAAC,EAAE,EAAC,YAAY,EAAC,SAAS,EAAC,yBAAyB,GAAG,CAClE;YAED,2BAAG,EAAE,EAAC,KAAK,uUAEP;YAEJ,oBAAC,mBAAQ,IACP,SAAS,EAAG,aAAa,CAAC,eAAe,EACzC,KAAK,EAAC,oEAAoE,EAC1E,OAAO,EAAG,SAAS,EACnB,QAAQ,EAAG,IAAI,CAAC,iBAAiB,GACjC;YAEA,SAAS,CAAC,CAAC,CAAC,CACZ,oBAAC,aAAK,IACJ,MAAM,EAAC,YAAY,EACnB,eAAe,EAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EACvC,kBAAkB,EAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,EAC7C,SAAS,EAAG,uBAAuB,IAEjC,OAAO,CACH,CACT,CAAC,CAAC,CAAC,OAAO;YAEX,6BAAK,SAAS,EAAC,yBAAyB,uCAAuC;YAE/E,0IAEI;YAEJ,oBAAC,mBAAQ,IACP,SAAS,EAAG,aAAa,CAAC,eAAe,EACzC,KAAK,EAAC,6FAA6F,EACnG,OAAO,EAAG,aAAa,EACvB,QAAQ,EAAG,IAAI,CAAC,qBAAqB,GACrC;YAEA,aAAa,CAAC,CAAC,CAAC,CAChB,oBAAC,aAAK,IACJ,eAAe,EAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EACvC,kBAAkB,EAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAE3C,OAAO,CACH,CACT,CAAC,CAAC,CAAC,OAAO,CAEP,CACP,CAAC;IACJ,CAAC;IAEO,iCAAI,GAAZ,UAAa,IAAY;QACvB,OAAO;YACL,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC,CAAC;IACJ,CAAC;IAaH,yBAAC;AAAD,CAAC,AApGD,CAAwC,KAAK,CAAC,SAAS,GAoGtD;AApGY,gDAAkB","sourcesContent":["import * as React from 'react';\nimport { Checkbox } from '../../../Checkbox';\nimport { Layer } from '../Layer';\nimport { LayerHost } from '../LayerHost';\nimport { Toggle } from '../../../Toggle';\nimport { AnimationClassNames } from '../../../Styling';\nimport './Layer.Example.scss';\nimport * as exampleStylesImport from '../../../common/_exampleStyles.scss';\nconst exampleStyles: any = exampleStylesImport;\n\nexport class LayerHostedExample extends React.Component<{}, {\n  showLayer: boolean;\n  showLayerNoId: boolean;\n  showHost: boolean;\n}> {\n\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      showLayer: false,\n      showLayerNoId: false,\n      showHost: true\n    };\n  }\n\n  public render(): JSX.Element {\n    const { showLayer, showLayerNoId, showHost } = this.state;\n    const content = (\n      <div className={ 'LayerExample-content ' + AnimationClassNames.scaleUpIn100 } >\n        This is example layer content.\n      </div>\n    );\n\n    return (\n      <div>\n        <Toggle\n          label='Show host'\n          checked={ showHost }\n          onChanged={ this._onChangeToggle }\n        />\n\n        { showHost && (\n          <LayerHost id='layerhost1' className='LayerExample-customHost' />\n        ) }\n\n        <p id='foo'>\n          In some cases, you may need to contain layered content within an area. Create an instance of a LayerHost along with an id, and provide a hostId on the layer to render it within the specific host. (Note that it's important that you don't include children within the LayerHost. It's meant to contain Layered content only.)\n        </p>\n\n        <Checkbox\n          className={ exampleStyles.exampleCheckbox }\n          label='Render the box below in a Layer and target it at hostId=layerhost1'\n          checked={ showLayer }\n          onChange={ this._onChangeCheckbox }\n        />\n\n        { showLayer ? (\n          <Layer\n            hostId='layerhost1'\n            onLayerDidMount={ this._log('didmount') }\n            onLayerWillUnmount={ this._log('willunmount') }\n            className={ 'exampleLayerClassName' }\n          >\n            { content }\n          </Layer>\n        ) : content }\n\n        <div className='LayerExample-nonLayered'>I am normally below the content.</div>\n\n        <p>\n          If you do not specify a hostId then the hosted layer will default to being fixed to the page by default.\n        </p>\n\n        <Checkbox\n          className={ exampleStyles.exampleCheckbox }\n          label='Render the box below in a Layer without specifying a host, fixing it to the top of the page'\n          checked={ showLayerNoId }\n          onChange={ this._onChangeCheckboxNoId }\n        />\n\n        { showLayerNoId ? (\n          <Layer\n            onLayerDidMount={ this._log('didmount') }\n            onLayerWillUnmount={ this._log('willunmount') }\n          >\n            { content }\n          </Layer>\n        ) : content }\n\n      </div>\n    );\n  }\n\n  private _log(text: string): () => void {\n    return (): void => {\n      console.log(text);\n    };\n  }\n\n  private _onChangeCheckbox = (ev: React.FormEvent<HTMLElement | HTMLInputElement>, checked: boolean): void => {\n    this.setState({ showLayer: checked });\n  }\n\n  private _onChangeCheckboxNoId = (ev: React.FormEvent<HTMLElement | HTMLInputElement>, checked: boolean): void => {\n    this.setState({ showLayerNoId: checked });\n  }\n\n  private _onChangeToggle = (checked: boolean): void => {\n    this.setState({ showHost: checked });\n  }\n}"]}