{"version":3,"file":"Image.base.js","sourceRoot":"../src/","sources":["components/Image/Image.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  classNamesFunction,\n  customizable,\n  getNativeProps,\n  imageProperties,\n  createRef\n} from '../../Utilities';\nimport {\n  IImageProps,\n  IImageStyles,\n  IImageStyleProps,\n  ImageCoverStyle,\n  ImageFit,\n  ImageLoadState\n} from './Image.types';\n\nconst getClassNames = classNamesFunction<IImageStyleProps, IImageStyles>();\n\nexport interface IImageState {\n  loadState?: ImageLoadState;\n}\n\nconst KEY_PREFIX = 'fabricImage';\n\n@customizable('Image', ['theme'])\nexport class ImageBase extends BaseComponent<IImageProps, IImageState> {\n  public static defaultProps = {\n    shouldFadeIn: true\n  };\n\n  private static _svgRegex = /\\.svg$/i;\n\n  // Make an initial assumption about the image layout until we can\n  // check the rendered element. The value here only takes effect when\n  // shouldStartVisible is true.\n  private _coverStyle: ImageCoverStyle = ImageCoverStyle.portrait;\n  private _imageElement = createRef<HTMLImageElement>();\n  private _frameElement = createRef<HTMLDivElement>();\n\n  constructor(props: IImageProps) {\n    super(props);\n\n    this.state = {\n      loadState: ImageLoadState.notLoaded\n    };\n  }\n\n  public componentWillReceiveProps(nextProps: IImageProps): void {\n    if (nextProps.src !== this.props.src) {\n      this.setState({\n        loadState: ImageLoadState.notLoaded\n      });\n    } else if (this.state.loadState === ImageLoadState.loaded) {\n      this._computeCoverStyle(nextProps);\n    }\n  }\n\n  public componentDidUpdate(prevProps: IImageProps, prevState: IImageState) {\n    this._checkImageLoaded();\n    if (this.props.onLoadingStateChange\n      && prevState.loadState !== this.state.loadState) {\n      this.props.onLoadingStateChange(this.state.loadState!);\n    }\n  }\n\n  public render(): JSX.Element {\n    const imageProps = getNativeProps(this.props, imageProperties, ['width', 'height']);\n    const {\n      src,\n      alt,\n      width,\n      height,\n      shouldFadeIn,\n      shouldStartVisible,\n      className,\n      imageFit,\n      role,\n      maximizeFrame,\n      getStyles,\n      theme\n    } = this.props;\n    const { loadState } = this.state;\n    const coverStyle = this.props.coverStyle !== undefined ? this.props.coverStyle : this._coverStyle;\n    const classNames = getClassNames(getStyles!,\n      {\n        theme: theme!,\n        className,\n        width,\n        height,\n        maximizeFrame,\n        shouldFadeIn,\n        shouldStartVisible,\n        isLoaded: loadState === ImageLoadState.loaded || (loadState === ImageLoadState.notLoaded && this.props.shouldStartVisible),\n        isLandscape: coverStyle === ImageCoverStyle.landscape,\n        isCenter: imageFit === ImageFit.center,\n        isContain: imageFit === ImageFit.contain,\n        isCover: imageFit === ImageFit.cover,\n        isNone: imageFit === ImageFit.none,\n        isError: loadState === ImageLoadState.error,\n        isNotImageFit: imageFit === undefined\n      }\n    );\n\n    // If image dimensions aren't specified, the natural size of the image is used.\n    return (\n      <div\n        className={ classNames.root }\n        style={ { width: width, height: height } }\n        ref={ this._frameElement }\n      >\n        <img\n          { ...imageProps }\n          onLoad={ this._onImageLoaded }\n          onError={ this._onImageError }\n          key={ KEY_PREFIX + this.props.src || '' }\n          className={ classNames.image }\n          ref={ this._imageElement }\n          src={ src }\n          alt={ alt }\n          role={ role }\n        />\n      </div>\n    );\n  }\n\n  private _onImageLoaded = (ev: React.SyntheticEvent<HTMLImageElement>): void => {\n    const { src, onLoad } = this.props;\n    if (onLoad) {\n      onLoad(ev);\n    }\n\n    this._computeCoverStyle(this.props);\n\n    if (src) {\n      this.setState({\n        loadState: ImageLoadState.loaded\n      });\n    }\n  }\n\n  private _checkImageLoaded(): void {\n    const { src } = this.props;\n    const { loadState } = this.state;\n\n    if (loadState === ImageLoadState.notLoaded) {\n      // testing if naturalWidth and naturalHeight are greater than zero is better than checking\n      // .complete, because .complete will also be set to true if the image breaks. However,\n      // for some browsers, SVG images do not have a naturalWidth or naturalHeight, so fall back\n      // to checking .complete for these images.\n      const isLoaded: boolean = this._imageElement.current ? src && (this._imageElement.current.naturalWidth > 0 && this._imageElement.current.naturalHeight > 0) ||\n        (this._imageElement.current.complete && ImageBase._svgRegex.test(src!)) : false;\n\n      if (isLoaded) {\n        this._computeCoverStyle(this.props);\n        this.setState({\n          loadState: ImageLoadState.loaded\n        });\n      }\n    }\n  }\n\n  private _computeCoverStyle(props: IImageProps): void {\n    const { imageFit, width, height } = props;\n\n    // Do not compute cover style if it was already specified in props\n    if ((imageFit === ImageFit.cover || imageFit === ImageFit.contain) &&\n      this.props.coverStyle === undefined &&\n      this._imageElement.current &&\n      this._frameElement.current) {\n      // Determine the desired ratio using the width and height props.\n      // If those props aren't available, measure measure the frame.\n      let desiredRatio;\n      if (!!width && !!height) {\n        desiredRatio = (width as number) / (height as number);\n      } else {\n        desiredRatio = this._frameElement.current.clientWidth / this._frameElement.current.clientHeight;\n      }\n\n      // Examine the source image to determine its original ratio.\n      const naturalRatio = this._imageElement.current.naturalWidth / this._imageElement.current.naturalHeight;\n\n      // Should we crop from the top or the sides?\n      if (naturalRatio > desiredRatio) {\n        this._coverStyle = ImageCoverStyle.landscape;\n      } else {\n        this._coverStyle = ImageCoverStyle.portrait;\n      }\n    }\n  }\n\n  private _onImageError = (ev: React.SyntheticEvent<HTMLImageElement>): void => {\n    if (this.props.onError) {\n      this.props.onError(ev);\n    }\n    this.setState({\n      loadState: ImageLoadState.error\n    });\n  }\n}\n"]}