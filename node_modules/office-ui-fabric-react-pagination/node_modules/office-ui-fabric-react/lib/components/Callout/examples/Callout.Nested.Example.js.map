{"version":3,"file":"Callout.Nested.Example.js","sourceRoot":"../src/","sources":["components/Callout/examples/Callout.Nested.Example.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,4DAAkE;AAClE,8DAA6D;AAC7D,oEAAyF;AACzF,iCAA+B;AAM/B;IAA0C,gDAExC;IAGA,8BAAmB,KAAiC;QAApD,YACE,kBAAM,KAAK,CAAC,SAOb;QALC,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QAE7C,KAAI,CAAC,KAAK,GAAG;YACX,gBAAgB,EAAE,KAAK;SACxB,CAAC;;IACJ,CAAC;IAEM,qCAAM,GAAb;QAAA,iBAwCC;QAvCS,IAAA,8CAAgB,CAAgB;QAExC,OAAO,CACL,6BAAK,SAAS,EAAC,mBAAmB;YAChC,6BAAK,SAAS,EAAC,mCAAmC,EAAC,GAAG,EAAG,UAAC,UAAU,IAAK,OAAA,KAAI,CAAC,kBAAkB,GAAG,UAAU,EAApC,CAAoC;gBAC3G,oBAAC,sBAAa,IACZ,OAAO,EAAG,IAAI,CAAC,UAAU,EACzB,IAAI,EAAG,gBAAgB,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,cAAc,GACzD,CACE;YACJ,gBAAgB,CAAC,CAAC,CAAC,CACnB;gBACE,oBAAC,iBAAO,IACN,IAAI,EAAG,aAAa,EACpB,cAAc,EAAG,iBAAiB,EAClC,SAAS,EAAC,2BAA2B,EACrC,QAAQ,EAAG,CAAC,EACZ,MAAM,EAAG,IAAI,CAAC,kBAAkB,EAChC,SAAS,EAAG,IAAI,CAAC,UAAU,EAC3B,eAAe,EAAG,IAAI;oBAEtB,6BAAK,SAAS,EAAC,0BAA0B;wBACvC,2BAAG,SAAS,EAAC,yBAAyB,EAAC,EAAE,EAAG,iBAAiB,yBAEzD,CACA;oBACN,6BAAK,SAAS,EAAC,yBAAyB;wBACtC,6BAAK,SAAS,EAAC,2BAA2B;4BACxC,2BAAG,SAAS,EAAC,2BAA2B,wHAEpC,CACA,CACF;oBACN,oBAAC,uBAAU,IAAC,KAAK,EAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAK,CACjC,CACN,CACP,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CACN,CACP,CAAC;IACJ,CAAC;IAEO,yCAAU,GAAlB,UAAmB,EAAO;QACxB,IAAI,CAAC,QAAQ,CAAC;YACZ,gBAAgB,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB;SAC/C,CAAC,CAAC;IACL,CAAC;IACH,2BAAC;AAAD,CAAC,AA9DD,CAA0C,KAAK,CAAC,SAAS,GA8DxD;AA9DY,oDAAoB","sourcesContent":["import * as React from 'react';\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport { Callout } from 'office-ui-fabric-react/lib/Callout';\nimport { CommandBar, ICommandBarItemProps } from 'office-ui-fabric-react/lib/CommandBar';\nimport './CalloutExample.scss';\n\nexport interface ICalloutNestedExampleProps {\n  items: ICommandBarItemProps[];\n}\n\nexport class CalloutNestedExample extends React.Component<ICalloutNestedExampleProps, {\n  isCalloutVisible: boolean;\n}> {\n  private _menuButtonElement: HTMLElement | null;\n\n  public constructor(props: ICalloutNestedExampleProps) {\n    super(props);\n\n    this._onDismiss = this._onDismiss.bind(this);\n\n    this.state = {\n      isCalloutVisible: false,\n    };\n  }\n\n  public render(): JSX.Element {\n    const { isCalloutVisible } = this.state;\n\n    return (\n      <div className='ms-CalloutExample'>\n        <div className='ms-CalloutBasicExample-buttonArea' ref={ (menuButton) => this._menuButtonElement = menuButton }>\n          <DefaultButton\n            onClick={ this._onDismiss }\n            text={ isCalloutVisible ? 'Hide callout' : 'Show callout' }\n          />\n        </div>\n        { isCalloutVisible ? (\n          <div>\n            <Callout\n              role={ 'alertdialog' }\n              ariaLabelledBy={ 'callout-label-2' }\n              className='ms-CalloutExample-callout'\n              gapSpace={ 0 }\n              target={ this._menuButtonElement }\n              onDismiss={ this._onDismiss }\n              setInitialFocus={ true }\n            >\n              <div className='ms-CalloutExample-header'>\n                <p className='ms-CalloutExample-title' id={ 'callout-label-2' }>\n                  Callout title here\n                </p>\n              </div>\n              <div className='ms-CalloutExample-inner'>\n                <div className='ms-CalloutExample-content'>\n                  <p className='ms-CalloutExample-subText'>\n                    Message body is optional. If help documentation is available, consider adding a link to learn more at the bottom.\n                  </p>\n                </div>\n              </div>\n              <CommandBar items={ this.props.items } />\n            </Callout>\n          </div>\n        ) : (null) }\n      </div>\n    );\n  }\n\n  private _onDismiss(ev: any): void {\n    this.setState({\n      isCalloutVisible: !this.state.isCalloutVisible\n    });\n  }\n}\n"]}