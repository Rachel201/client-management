{"version":3,"file":"shallowUntilTarget.js","sourceRoot":"../src/","sources":["common/shallowUntilTarget.ts"],"names":[],"mappings":";;AAAA,iCAAiD;AAsBjD;;;;;;;GAOG;AACH,4BACE,iBAAwC,EACxC,eAAuB,EACvB,OAGC;IAHD,wBAAA,EAAA;QACE,QAAQ,EAAE,EAAE;QACZ,cAAc,EAAE,EAAE;KACnB;IAEO,IAAA,2BAAQ,EAAE,uCAAc,CAAa;IAE7C,IAAI,IAAI,GAAG,gBAAO,CAAO,iBAAiB,EAAE,cAAc,CAAC,CAAC;IAE5D,IAAI,OAAO,IAAI,CAAC,IAAI,EAAE,KAAK,QAAQ,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE;QACvF,oBAAoB;QACpB,8CAA8C;QAC9C,qDAAqD;QACrD,OAAO,IAAI,CAAC;KACb;IAED,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,IAAI,QAAQ,EAAE,KAAK,EAAE,EAAE;QAC9C,kDAAkD;QAClD,mCAAmC;QACnC,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE;YACpD,qDAAqD;YACrD,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;SAC7C;QACD,8CAA8C;QAC9C,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;KAC7C;IAED,MAAM,IAAI,KAAK,CACb,oBAAkB,eAAe,4BAAuB,iBAAiB,6BACzD,QAAQ,WAAQ,CACjC,CAAC;AACJ,CAAC;AAlCD,gDAkCC","sourcesContent":["import { shallow, ShallowWrapper } from 'enzyme';\n\n/**\n * Duplicated enzyme's ShallowRendererProps\n *\n * @internal\n */\nexport interface IShallowRendererProps {\n  lifecycleExperimental?: boolean;\n  disableLifecycleMethods?: boolean;\n}\n\n/**\n * ShallowUntilTarget Interface\n *\n * @internal\n */\nexport interface IShallowUntilTarget {\n  maxTries: number;\n  shallowOptions: IShallowRendererProps;\n}\n\n/**\n * An extention of enzyme's shallow function which will fail to work\n * with decorated components and/or components using the styled() function.\n * This function allows you to pass a 'target' component (e.g. ComponentBase)\n * and keep running shallow on each child component till a match is found.\n *\n * @public\n */\nexport function shallowUntilTarget<P, S>(\n  componentInstance: React.ReactElement<P>,\n  TargetComponent: string,\n  options: IShallowUntilTarget = {\n    maxTries: 10,\n    shallowOptions: {}\n  }\n): ShallowWrapper {\n  const { maxTries, shallowOptions } = options;\n\n  let root = shallow<P, S>(componentInstance, shallowOptions);\n\n  if (typeof root.type() === 'string' || root.type().toString().includes(TargetComponent)) {\n    // Default shallow()\n    // If type() is a string then it's a DOM Node.\n    // If it were wrapped, it would be a React component.\n    return root;\n  }\n\n  for (let tries = 1; tries <= maxTries; tries++) {\n    // Check for target as a string to avoid conflicts\n    // with decoratored components name\n    if (root.type().toString().includes(TargetComponent)) {\n      // Now that we found the target component, render it.\n      return root.first().shallow(shallowOptions);\n    }\n    // Unwrap the next component in the hierarchy.\n    root = root.first().shallow(shallowOptions);\n  }\n\n  throw new Error(\n    `Could not find ${TargetComponent} in React instance: ${componentInstance};\n    gave up after ${maxTries} tries`\n  );\n}"]}