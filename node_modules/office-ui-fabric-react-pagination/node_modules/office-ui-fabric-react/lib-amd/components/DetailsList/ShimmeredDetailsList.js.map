{"version":3,"file":"ShimmeredDetailsList.js","sourceRoot":"../src/","sources":["components/DetailsList/ShimmeredDetailsList.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { BaseComponent, css } from '../../Utilities';\nimport { SelectionMode } from '../../utilities/selection/interfaces';\nimport { IDetailsListProps, CheckboxVisibility } from './DetailsList.types';\nimport { DetailsList } from './DetailsList';\nimport { IDetailsRowProps } from './DetailsRow';\nimport { Shimmer, ShimmerElementsGroup, ShimmerElementType, IShimmerElement } from '../Shimmer';\n\nimport * as rowStyles from './DetailsRow.scss';\nimport * as listStyles from './DetailsList.scss';\n\nexport interface IShimmeredDetailsListProps extends IDetailsListProps {\n  shimmerLines?: number;\n  onRenderCustomPlaceholder?: () => React.ReactNode;\n}\n\nconst SHIMMER_INITIAL_ITEMS = 10;\nconst DEFAULT_SHIMMER_HEIGHT = 7;\nconst SHIMMER_LINE_VS_CELL_WIDTH_RATIO = 0.95;\n\n// This values are matching values from ./DetailsRow.css\nconst DEFAULT_SIDE_PADDING = 8;\nconst DEFAULT_EXTRA_SIDE_PADDING = 24;\nconst DEFAULT_ROW_HEIGHT = 42;\nconst COMPACT_ROW_HEIGHT = 32;\n\nexport class ShimmeredDetailsList extends BaseComponent<IShimmeredDetailsListProps, {}> {\n  private _shimmerItems: null[];\n\n  constructor(props: IShimmeredDetailsListProps) {\n    super(props);\n\n    this._shimmerItems = props.shimmerLines ? new Array(props.shimmerLines) : new Array(SHIMMER_INITIAL_ITEMS);\n  }\n\n  public render(): JSX.Element {\n    const { items, listProps } = this.props;\n    const { shimmerLines, onRenderCustomPlaceholder, enableShimmer, ...detailsListProps } = this.props;\n\n    // Adds to the optional listProp classname a fading out overlay classname only when shimmer enabled.\n    const shimmeredListClassname: string = css(\n      listProps && listProps.className,\n      enableShimmer && listStyles.shimmerFadeOut\n    );\n    const newListProps = { ...listProps, className: shimmeredListClassname };\n\n    return (\n      <DetailsList\n        { ...detailsListProps }\n        items={ enableShimmer ? this._shimmerItems : items }\n        onRenderMissingItem={ this._onRenderShimmerPlaceholder }\n        listProps={ newListProps }\n      />\n    );\n  }\n\n  private _onRenderShimmerPlaceholder = (index: number, rowProps: IDetailsRowProps): React.ReactNode => {\n    const { onRenderCustomPlaceholder, compact } = this.props;\n    const { selectionMode, checkboxVisibility } = rowProps;\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n\n    const placeholderElements: React.ReactNode = onRenderCustomPlaceholder\n      ? onRenderCustomPlaceholder()\n      : this._renderDefaultShimmerPlaceholder(rowProps);\n\n    return (\n      <div className={ css(showCheckbox && rowStyles.shimmerLeftBorder, !compact && rowStyles.shimmerBottomBorder) }>\n        <Shimmer customElementsGroup={ placeholderElements } />\n      </div>\n    );\n  }\n\n  private _renderDefaultShimmerPlaceholder = (rowProps: IDetailsRowProps): React.ReactNode => {\n    const { columns, compact } = rowProps;\n    const shimmerElementsRow: JSX.Element[] = [];\n    const gapHeight: number = compact ? COMPACT_ROW_HEIGHT : DEFAULT_ROW_HEIGHT;\n\n    columns.map((column, columnIdx) => {\n      const shimmerElements: IShimmerElement[] = [];\n      const groupWidth: number =\n        DEFAULT_SIDE_PADDING * 2 +\n        column.calculatedWidth! +\n        (column.isPadded ? DEFAULT_EXTRA_SIDE_PADDING : 0);\n\n      shimmerElements.push({\n        type: ShimmerElementType.gap,\n        width: DEFAULT_SIDE_PADDING,\n        height: gapHeight\n      });\n\n      if (column.isIconOnly) {\n        shimmerElements.push({\n          type: ShimmerElementType.line,\n          width: column.calculatedWidth!,\n          height: column.calculatedWidth!\n        });\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width: DEFAULT_SIDE_PADDING,\n          height: gapHeight\n        });\n      } else {\n        shimmerElements.push({\n          type: ShimmerElementType.line,\n          width: column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO,\n          height: DEFAULT_SHIMMER_HEIGHT\n        });\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width:\n            DEFAULT_SIDE_PADDING +\n            (column.calculatedWidth! - column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO) +\n            (column.isPadded ? DEFAULT_EXTRA_SIDE_PADDING : 0),\n          height: gapHeight\n        });\n      }\n      shimmerElementsRow.push(\n        <ShimmerElementsGroup key={ columnIdx } width={ `${groupWidth}px` } shimmerElements={ shimmerElements } />\n      );\n    });\n    // When resizing the window from narrow to wider, we need to cover the exposed Shimmer wave until the column resizing logic is done.\n    shimmerElementsRow.push(\n      <ShimmerElementsGroup\n        key={ 'endGap' }\n        width={ '100%' }\n        shimmerElements={ [{ type: ShimmerElementType.gap, width: '100%', height: gapHeight }] }\n      />\n    );\n    return <div style={ { display: 'flex' } }>{ shimmerElementsRow }</div>;\n  }\n}\n"]}