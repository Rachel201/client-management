{"version":3,"file":"DetailsRowFields.js","sourceRoot":"../src/","sources":["components/DetailsList/DetailsRowFields.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IColumn } from './DetailsList.types';\nimport { BaseComponent, css } from '../../Utilities';\nimport * as stylesImport from './DetailsRow.scss';\nconst styles: any = stylesImport;\n\nconst INNER_PADDING = 16; // Account for padding around the cell.\nconst ISPADDED_WIDTH = 24;\n\nexport interface IDetailsRowFieldsProps {\n  componentRef?: () => void;\n  item: any;\n  itemIndex: number;\n  columnStartIndex: number;\n  columns: IColumn[];\n  compact?: boolean;\n  onRenderItemColumn?: (item?: any, index?: number, column?: IColumn) => any;\n  shimmer?: boolean;\n}\n\nexport interface IDetailsRowFieldsState {\n  cellContent: React.ReactNode[];\n}\n\nexport class DetailsRowFields extends BaseComponent<IDetailsRowFieldsProps, IDetailsRowFieldsState> {\n  constructor(props: IDetailsRowFieldsProps) {\n    super(props);\n\n    this.state = this._getState(props);\n  }\n\n  public componentWillReceiveProps(newProps: IDetailsRowFieldsProps): void {\n    this.setState(this._getState(newProps));\n  }\n\n  public render(): JSX.Element {\n    const { columns, columnStartIndex, shimmer } = this.props;\n    const { cellContent } = this.state;\n\n    return (\n      <div\n        className={ css('ms-DetailsRow-fields', styles.fields) }\n        data-automationid='DetailsRowFields'\n        role='presentation'\n      >\n        { columns.map((column, columnIndex) => (\n          <div\n            key={ columnIndex }\n            role={ column.isRowHeader ? 'rowheader' : 'gridcell' }\n            aria-colindex={ columnIndex + columnStartIndex + 1 }\n            className={ css('ms-DetailsRow-cell', styles.cell, column.className,\n              column.isMultiline && 'is-multiline',\n              column.isRowHeader && styles.isRowHeader,\n              column.isPadded && styles.isPadded,\n              column.isMultiline && styles.isMultiline,\n              (column.isIconOnly && shimmer) && styles.shimmerIconPlaceholder,\n              shimmer && styles.shimmer\n            ) }\n            style={ { width: column.calculatedWidth! + INNER_PADDING + (column.isPadded ? ISPADDED_WIDTH : 0) } }\n            data-automationid='DetailsRowCell'\n            data-automation-key={ column.key }\n          >\n            { cellContent[columnIndex] }\n          </div>\n        )) }\n      </div>\n    );\n  }\n\n  private _getState(props: IDetailsRowFieldsProps): IDetailsRowFieldsState {\n    const { item, itemIndex, onRenderItemColumn, shimmer } = props;\n\n    return {\n      cellContent: props.columns.map((column) => {\n        let cellContent;\n\n        try {\n          const render = column.onRender || onRenderItemColumn;\n\n          cellContent = render && !shimmer ? render(item, itemIndex, column) : this._getCellText(item, column);\n        } catch (e) { /* no-op */ }\n\n        return cellContent;\n      })\n    };\n  }\n\n  private _getCellText(item: any, column: IColumn): void {\n    let value = (item && column && column.fieldName) ? item[column.fieldName] : '';\n\n    if (value === null || value === undefined) {\n      value = '';\n    }\n\n    return value;\n  }\n}\n"]}