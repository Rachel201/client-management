{"version":3,"file":"Checkbox.base.js","sourceRoot":"../src/","sources":["components/Checkbox/Checkbox.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  getId,\n  createRef,\n  customizable\n} from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport {\n  ICheckbox,\n  ICheckboxProps,\n} from './Checkbox.types';\nimport {\n  ICheckboxClassNames,\n  getClassNames\n} from './Checkbox.classNames';\nimport { getStyles } from './Checkbox.styles';\nimport { KeytipData } from '../../KeytipData';\n\nexport interface ICheckboxState {\n  /** Is true when Uncontrolled control is checked. */\n  isChecked?: boolean;\n}\n\n@customizable('Checkbox', ['theme'])\nexport class Checkbox extends BaseComponent<ICheckboxProps, ICheckboxState> implements ICheckbox {\n  public static defaultProps: ICheckboxProps = {\n    boxSide: 'start'\n  };\n\n  private _checkBox = createRef<HTMLElement>();\n  private _id: string;\n  private _classNames: ICheckboxClassNames;\n\n  /**\n   * Initialize a new instance of the TopHeaderV2\n   * @param props Props for the component\n   * @param context Context or initial state for the base component.\n   */\n  constructor(props: ICheckboxProps, context?: any) {\n    super(props, context);\n\n    this._warnMutuallyExclusive({\n      'checked': 'defaultChecked'\n    });\n\n    this._id = getId('checkbox-');\n    this.state = {\n      isChecked: !!(props.checked !== undefined ? props.checked : props.defaultChecked)\n    };\n  }\n\n  public componentWillReceiveProps(newProps: ICheckboxProps): void {\n    if (newProps.checked !== undefined) {\n      this.setState({\n        isChecked: !!newProps.checked // convert null to false\n      });\n    }\n  }\n\n  /**\n   * Render the Checkbox based on passed props\n   */\n  public render(): JSX.Element {\n    const {\n      checked,\n      className,\n      defaultChecked,\n      disabled,\n      inputProps,\n      name,\n      boxSide,\n      theme,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaDescribedBy,\n      styles: customStyles,\n      onRenderLabel = this._onRenderLabel,\n      checkmarkIconProps,\n      ariaPositionInSet,\n      ariaSetSize,\n      keytipProps\n    } = this.props;\n\n    const isChecked = checked === undefined ? this.state.isChecked : checked;\n    const isReversed = boxSide !== 'start' ? true : false;\n\n    this._classNames = this.props.getClassNames ?\n      this.props.getClassNames(theme!, !!disabled, !!isChecked, !!isReversed, className)\n      : getClassNames(\n        getStyles(theme!, customStyles),\n        !!disabled,\n        !!isChecked,\n        !!isReversed,\n        className\n      );\n\n    return (\n      <KeytipData keytipProps={ keytipProps } disabled={ disabled }>\n        { (keytipAttributes: any): JSX.Element => (\n          <button\n            { ...inputProps }\n            data-ktp-execute-target={ keytipAttributes['data-ktp-execute-target'] }\n            { ...(checked !== undefined && { checked }) }\n            { ...(defaultChecked !== undefined && { defaultChecked }) }\n            disabled={ disabled }\n            ref={ this._checkBox }\n            name={ name }\n            id={ this._id }\n            role='checkbox'\n            type='button'\n            className={ this._classNames.root }\n            onClick={ this._onClick }\n            onFocus={ this._onFocus }\n            onBlur={ this._onBlur }\n            aria-checked={ isChecked }\n            aria-disabled={ disabled }\n            aria-label={ ariaLabel }\n            aria-labelledby={ ariaLabelledBy }\n            aria-describedby={ (ariaDescribedBy || '') + (keytipAttributes['aria-describedby'] || '') }\n            aria-posinset={ ariaPositionInSet }\n            aria-setsize={ ariaSetSize }\n          >\n            <label className={ this._classNames.label } htmlFor={ this._id } >\n              <div\n                className={ this._classNames.checkbox }\n                data-ktp-target={ keytipAttributes['data-ktp-target'] }\n              >\n                <Icon iconName='CheckMark' { ...checkmarkIconProps } className={ this._classNames.checkmark } />\n              </div>\n              { onRenderLabel(this.props, this._onRenderLabel) }\n            </label>\n          </button>\n        ) }\n      </KeytipData>\n    );\n  }\n\n  public get checked(): boolean {\n    return this.state.isChecked!;\n  }\n\n  public focus(): void {\n    if (this._checkBox.current) {\n      this._checkBox.current.focus();\n    }\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onFocus) {\n      inputProps.onFocus(ev);\n    }\n  }\n\n  private _onBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onBlur) {\n      inputProps.onBlur(ev);\n    }\n  }\n\n  private _onClick = (ev: React.FormEvent<HTMLElement>): void => {\n    const { disabled, onChange } = this.props;\n    const { isChecked } = this.state;\n    ev.preventDefault();\n    ev.stopPropagation();\n\n    if (!disabled) {\n      if (onChange) {\n        onChange(ev, !isChecked);\n      }\n\n      if (this.props.checked === undefined) {\n        this.setState({ isChecked: !isChecked });\n      }\n    }\n  }\n\n  private _onRenderLabel = (props: ICheckboxProps): JSX.Element | null => {\n    const { label } = props;\n\n    return label ? (\n      <span className={ this._classNames.text }>{ label }</span>\n    ) : (\n        null\n      );\n  }\n}\n"]}