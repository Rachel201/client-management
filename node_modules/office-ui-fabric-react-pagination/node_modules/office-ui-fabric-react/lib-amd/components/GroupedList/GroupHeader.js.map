{"version":3,"file":"GroupHeader.js","sourceRoot":"../src/","sources":["components/GroupedList/GroupHeader.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  css\n} from '../../Utilities';\nimport { IGroupDividerProps } from './GroupedList.types';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport * as stylesImport from './GroupHeader.scss';\nconst styles: any = stylesImport;\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeader extends BaseComponent<IGroupDividerProps, IGroupHeaderState> {\n  constructor(props: IGroupDividerProps) {\n    super(props);\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false\n    };\n  }\n\n  public componentWillReceiveProps(newProps: any): void {\n    if (newProps.group) {\n      const newCollapsed = newProps.group.isCollapsed;\n      const isGroupLoading = newProps.headerProps && newProps.headerProps.isGroupLoading;\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(newProps.group);\n\n      this.setState({\n        isCollapsed: newCollapsed,\n        isLoadingVisible: newLoadingVisible\n      });\n    }\n  }\n\n  public render(): JSX.Element | null {\n    let {\n      isCollapsedGroupSelectVisible\n    } = this.props;\n    const {\n      group,\n      groupLevel,\n      viewport,\n      selectionMode,\n      loadingText,\n      isSelected,\n      selected\n    } = this.props;\n    const { isCollapsed, isLoadingVisible } = this.state;\n\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    const currentlySelected = isSelected || selected;\n\n    if (!group) {\n      return null;\n    }\n    return (\n      <div\n        className={ css('ms-GroupHeader', styles.root, {\n          ['is-selected ' + styles.rootIsSelected]: currentlySelected\n        }) }\n        style={ viewport ? { minWidth: viewport.width } : {} }\n        onClick={ this._onHeaderClick }\n        aria-label={ group.ariaLabel || group.name }\n        data-is-focusable={ true }\n      >\n\n        <FocusZone className={ styles.groupHeaderContainer } direction={ FocusZoneDirection.horizontal }>\n\n          { isSelectionCheckVisible ? (\n            <button\n              type='button'\n              className={ css('ms-GroupHeader-check', styles.check) }\n              data-selection-toggle={ true }\n              onClick={ this._onToggleSelectGroupClick }\n            >\n              <Check checked={ currentlySelected } />\n            </button>\n          ) : (selectionMode !== SelectionMode.none ? GroupSpacer({ count: 1 }) : null)\n          }\n\n          { GroupSpacer({ count: groupLevel as number }) }\n\n          <div className={ css('ms-GroupHeader-dropIcon', styles.dropIcon) }>\n            <Icon iconName='Tag' />\n          </div>\n          <button\n            type='button'\n            className={ css('ms-GroupHeader-expand', styles.expand) }\n            onClick={ this._onToggleCollapse }\n          >\n            <Icon\n              className={ css(\n                isCollapsed && ('is-collapsed ' + styles.expandIsCollapsed)\n              ) }\n              iconName='ChevronDown'\n            />\n          </button>\n\n          <div className={ css('ms-GroupHeader-title', styles.title) }>\n            <span>{ group.name }</span>\n            {\n              // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\n              // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n              // so far. That's the reason we need to use \"+\" to show we might have more items than count\n              // indicates.\n            }\n            <span className={ styles.headerCount }>({ group.count }{ group.hasMoreData && '+' })</span>\n          </div>\n\n          { isLoadingVisible && (\n            <Spinner label={ loadingText } />\n          ) }\n\n        </FocusZone>\n      </div>\n    );\n  }\n\n  private _onToggleCollapse = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\n    const { isCollapsed } = this.state;\n\n    const newCollapsed = !isCollapsed;\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  }\n\n  private _onToggleSelectGroupClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onToggleSelectGroup, group } = this.props;\n\n    if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  private _onHeaderClick = (): void => {\n    const { group, onGroupHeaderClick, onToggleSelectGroup } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    } else if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n  }\n}\n"]}