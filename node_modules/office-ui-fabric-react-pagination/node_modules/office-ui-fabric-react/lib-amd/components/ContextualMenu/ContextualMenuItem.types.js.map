{"version":3,"file":"ContextualMenuItem.types.js","sourceRoot":"../src/","sources":["components/ContextualMenu/ContextualMenuItem.types.ts"],"names":[],"mappings":"","sourcesContent":["import { IContextualMenuItem } from './ContextualMenu.types';\nimport { IMenuItemClassNames } from './ContextualMenu.classNames';\n\nexport interface IContextualMenuRenderItem {\n  /**\n   * Function to open this item's subMenu, if present.\n   */\n  openSubMenu: () => void;\n\n  /**\n   * Function to close this item's subMenu, if present.\n   */\n  dismissSubMenu: () => void;\n\n  /**\n   * Dismiss the menu this item belongs to.\n   */\n  dismissMenu: (dismissAll?: boolean) => void;\n}\n\nexport interface IContextualMenuItemProps extends React.HTMLAttributes<IContextualMenuItemProps> {\n  /**\n   * Optional callback to access the IContextualMenuRenderItem interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: IContextualMenuRenderItem | null) => void;\n\n  /**\n   * The item to display\n   */\n  item: IContextualMenuItem;\n\n  /**\n   * Classnames for different aspects of a menu item\n   */\n  classNames: IMenuItemClassNames;\n\n  /**\n   * Index of the item\n   */\n  index: number;\n\n  /**\n   * If this item has icons\n   */\n  hasIcons: boolean | undefined;\n\n  /**\n   * Click handler for the checkmark\n   */\n  onCheckmarkClick?: ((item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>) => void);\n\n  /**\n   * This prop will get set by ContextualMenu and can be called to open this item's subMenu, if present.\n   */\n  openSubMenu?: (item: any, target: HTMLElement) => void;\n\n  /**\n   * This prop will get set by ContextualMenu and can be called to close this item's subMenu, if present.\n   */\n  dismissSubMenu?: () => void;\n\n  /**\n   * This prop will get set by ContextualMenu and can be called to close the menu this item belongs to.\n   * If dismissAll is true, all menus will be closed.\n   */\n  dismissMenu?: (ev?: any, dismissAll?: boolean) => void;\n\n  /**\n   * This prop will get set by the wrapping component and will return the element that wraps this ContextualMenuItem.\n   * Used for openSubMenu.\n   */\n  getSubmenuTarget?: () => HTMLElement | undefined;\n}\n"]}