{"version":3,"file":"Dialog.base.js","sourceRoot":"../src/","sources":["components/Dialog/Dialog.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  classNamesFunction,\n  customizable,\n  getId\n} from '../../Utilities';\nimport {\n  IDialogProps,\n  IDialogStyleProps,\n  IDialogStyles,\n} from './Dialog.types';\nimport { DialogType, IDialogContentProps } from './DialogContent.types';\nimport { Modal, IModalProps } from '../../Modal';\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\n\nconst getClassNames = classNamesFunction<IDialogStyleProps, IDialogStyles>();\n\nimport { DialogContent } from './DialogContent';\n\nconst DefaultModalProps: IModalProps = {\n  isDarkOverlay: false,\n  isBlocking: false,\n  className: '',\n  containerClassName: ''\n};\n\nconst DefaultDialogContentProps: IDialogContentProps = {\n  type: DialogType.normal,\n  className: '',\n  topButtonsProps: [],\n};\n\n@customizable('Dialog', ['theme'])\n@withResponsiveMode\nexport class DialogBase extends BaseComponent<IDialogProps, {}> {\n  public static defaultProps: IDialogProps = {\n    hidden: true,\n  };\n\n  private _id: string;\n  private _defaultTitleTextId: string;\n  private _defaultSubTextId: string;\n\n  constructor(props: IDialogProps) {\n    super(props);\n\n    this._id = getId('Dialog');\n    this._defaultTitleTextId = this._id + '-title';\n    this._defaultSubTextId = this._id + '-subText';\n\n    this._warnDeprecations({\n      'isOpen': 'hidden',\n      'type': 'dialogContentProps.type',\n      'subText': 'dialogContentProps.subText',\n      'contentClassName': 'dialogContentProps.className',\n      'topButtonsProps': 'dialogContentProps.topButtonsProps',\n      'className': 'modalProps.className',\n      'isDarkOverlay': 'modalProps.isDarkOverlay',\n      'isBlocking': 'modalProps.isBlocking',\n      'containerClassName': 'modalProps.containerClassName',\n      'onDismissed': 'modalProps.onDismissed',\n      'onLayerDidMount': 'modalProps.onLayerDidMount',\n      'ariaDescribedById': 'modalProps.subtitleAriaId',\n      'ariaLabelledById': 'modalProps.titleAriaId'\n    });\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      containerClassName,\n      contentClassName,\n      elementToFocusOnDismiss,\n      firstFocusableSelector,\n      forceFocusInsideTrap,\n      getStyles,\n      hidden,\n      ignoreExternalFocusing,\n      isBlocking,\n      isClickableOutsideFocusTrap,\n      isDarkOverlay,\n      isOpen,\n      onDismiss,\n      onDismissed,\n      onLayerDidMount,\n      responsiveMode,\n      subText,\n      theme,\n      title,\n      topButtonsProps,\n      type,\n    } = this.props;\n\n    const modalProps = {\n      ...DefaultModalProps,\n      ...this.props.modalProps\n    };\n\n    const dialogContentProps: IDialogContentProps = {\n      ...DefaultDialogContentProps,\n      ...this.props.dialogContentProps,\n    };\n\n    const classNames = getClassNames(getStyles!, {\n      theme: theme!,\n      className: className || modalProps!.className,\n      containerClassName: containerClassName || modalProps!.containerClassName,\n      hidden,\n    });\n\n    return (\n      <Modal\n        elementToFocusOnDismiss={ elementToFocusOnDismiss }\n        firstFocusableSelector={ firstFocusableSelector }\n        forceFocusInsideTrap={ forceFocusInsideTrap }\n        ignoreExternalFocusing={ ignoreExternalFocusing }\n        isClickableOutsideFocusTrap={ isClickableOutsideFocusTrap }\n        onDismissed={ onDismissed }\n        onLayerDidMount={ onLayerDidMount }\n        responsiveMode={ responsiveMode }\n        { ...modalProps }\n        isDarkOverlay={ isDarkOverlay !== undefined ? isDarkOverlay : modalProps!.isDarkOverlay }\n        isBlocking={ isBlocking !== undefined ? isBlocking : modalProps!.isBlocking }\n        isOpen={ isOpen !== undefined ? isOpen : !hidden }\n        className={ classNames.root }\n        containerClassName={ classNames.main }\n        onDismiss={ onDismiss ? onDismiss : modalProps!.onDismiss }\n        subtitleAriaId={ this._getSubTextId() }\n        titleAriaId={ this._getTitleTextId() }\n      >\n        <DialogContent\n          titleId={ this._defaultTitleTextId }\n          subTextId={ this._defaultSubTextId }\n          title={ title }\n          subText={ subText }\n          showCloseButton={ isBlocking !== undefined ? !isBlocking : !modalProps!.isBlocking }\n          topButtonsProps={ topButtonsProps ? topButtonsProps : dialogContentProps!.topButtonsProps }\n          type={ type !== undefined ? type : dialogContentProps!.type }\n          onDismiss={ onDismiss ? onDismiss : dialogContentProps!.onDismiss }\n          className={ contentClassName || dialogContentProps!.className }\n          { ...dialogContentProps }\n        >\n          { this.props.children }\n        </DialogContent>\n      </Modal>\n    );\n  }\n\n  private _getSubTextId = (): string | undefined => {\n    const { ariaDescribedById, modalProps, dialogContentProps, subText } = this.props;\n    let id = ariaDescribedById || (modalProps && modalProps.subtitleAriaId);\n\n    if (!id) {\n      id = (subText || (dialogContentProps && dialogContentProps.subText)) && this._defaultSubTextId;\n    }\n\n    return id;\n  }\n\n  private _getTitleTextId = (): string | undefined => {\n    const { ariaLabelledById, modalProps, dialogContentProps, title } = this.props;\n    let id = ariaLabelledById || (modalProps && modalProps.titleAriaId);\n\n    if (!id) {\n      id = (title || (dialogContentProps && dialogContentProps.title)) && this._defaultTitleTextId;\n    }\n\n    return id;\n  }\n}\n"]}