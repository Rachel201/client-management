{"version":3,"file":"DialogContent.base.js","sourceRoot":"../src/","sources":["components/Dialog/DialogContent.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  classNamesFunction,\n  customizable,\n} from '../../Utilities';\nimport {\n  DialogType,\n  IDialogContentProps,\n  IDialogContentStyleProps,\n  IDialogContentStyles,\n} from './DialogContent.types';\nimport { IconButton } from '../../Button';\nimport { DialogFooter } from './DialogFooter';\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\n\nconst getClassNames = classNamesFunction<IDialogContentStyleProps, IDialogContentStyles>();\n\n@customizable('DialogContent', ['theme'])\n@withResponsiveMode\nexport class DialogContentBase extends BaseComponent<IDialogContentProps, {}> {\n\n  public static defaultProps: IDialogContentProps = {\n    showCloseButton: false,\n    className: '',\n    topButtonsProps: [],\n    closeButtonAriaLabel: 'Close'\n  };\n\n  constructor(props: IDialogContentProps) {\n    super(props);\n  }\n\n  public render(): JSX.Element {\n    const {\n      showCloseButton,\n      className,\n      closeButtonAriaLabel,\n      onDismiss,\n      subTextId,\n      subText,\n      titleId,\n      title,\n      type,\n      getStyles,\n      theme,\n    } = this.props;\n\n    const classNames = getClassNames(getStyles!, {\n      theme: theme!,\n      className,\n      isLargeHeader: type === DialogType.largeHeader,\n      isClose: type === DialogType.close,\n    });\n\n    const groupings = this._groupChildren();\n    let subTextContent;\n    if (subText) {\n      subTextContent = <p className={ classNames.subText } id={ subTextId }>{ subText }</p>;\n    }\n\n    return (\n      <div className={ classNames.content }>\n        <div className={ classNames.header }>\n          <p className={ classNames.title } id={ titleId } role='heading'>{ title }</p>\n          <div className={ classNames.topButton }>\n            { this.props.topButtonsProps!.map((props) => (\n              <IconButton { ...props } />\n            )) }\n            { (type === DialogType.close || (showCloseButton && type !== DialogType.largeHeader)) &&\n              <IconButton\n                className={ classNames.button }\n                iconProps={ { iconName: 'Cancel' } }\n                ariaLabel={ closeButtonAriaLabel }\n                onClick={ onDismiss as any }\n              />\n            }\n          </div>\n        </div>\n        <div className={ classNames.inner }>\n          <div className={ classNames.innerContent }>\n            { subTextContent }\n            { groupings.contents }\n          </div>\n          { groupings.footers }\n        </div>\n      </div>\n    );\n  }\n\n  // @TODO - typing the footers as an array of DialogFooter is difficult because\n  // casing \"child as DialogFooter\" causes a problem because\n  // \"Neither type 'ReactElement<any>' nor type 'DialogFooter' is assignable to the other.\"\n  private _groupChildren(): { footers: any[]; contents: any[]; } {\n\n    const groupings: { footers: any[]; contents: any[]; } = {\n      footers: [],\n      contents: []\n    };\n\n    React.Children.map(this.props.children, child => {\n      if (typeof child === 'object' && child !== null && child.type === DialogFooter) {\n        groupings.footers.push(child);\n      } else {\n        groupings.contents.push(child);\n      }\n    });\n\n    return groupings;\n  }\n}\n"]}