{"version":3,"file":"BaseButton.js","sourceRoot":"../src/","sources":["components/Button/BaseButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  IRenderFunction,\n  anchorProperties,\n  assign,\n  buttonProperties,\n  getId,\n  getNativeProps,\n  KeyCodes,\n  createRef,\n  css\n} from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ContextualMenu, IContextualMenuProps } from '../../ContextualMenu';\nimport { IButtonProps, IButton } from './Button.types';\nimport { IButtonClassNames, getBaseButtonClassNames } from './BaseButton.classNames';\nimport { getClassNames as getBaseSplitButtonClassNames, ISplitButtonClassNames } from './SplitButton/SplitButton.classNames';\nimport { KeytipData } from '../../KeytipData';\n\nexport interface IBaseButtonProps extends IButtonProps {\n  baseClassName?: string;\n  variantClassName?: string;\n}\n\nexport interface IBaseButtonState {\n  menuProps?: IContextualMenuProps | null;\n}\n\nconst TouchIdleDelay = 500; /* ms */\n\nexport class BaseButton extends BaseComponent<IBaseButtonProps, IBaseButtonState> implements IButton {\n\n  private get _isSplitButton(): boolean {\n    return (!!this.props.menuProps && !!this.props.onClick) && this.props.split === true;\n  }\n\n  private get _isExpanded(): boolean {\n    if (this.props.persistMenu) {\n      return !this.state.menuProps!.hidden;\n    }\n    return !!this.state.menuProps;\n  }\n\n  public static defaultProps: Partial<IBaseButtonProps> = {\n    baseClassName: 'ms-Button',\n    styles: {},\n    split: false,\n  };\n\n  private _buttonElement = createRef<HTMLElement>();\n  private _splitButtonContainer = createRef<HTMLDivElement>();\n  private _labelId: string;\n  private _descriptionId: string;\n  private _ariaDescriptionId: string;\n  private _classNames: IButtonClassNames;\n  private _processingTouch: boolean;\n  private _lastTouchTimeoutId: number | undefined;\n\n  constructor(props: IBaseButtonProps, rootClassName: string) {\n    super(props);\n\n    this._warnConditionallyRequiredProps(\n      ['menuProps', 'onClick'],\n      'split',\n      this.props.split!\n    );\n\n    this._warnDeprecations({\n      rootProps: undefined,\n      'description': 'secondaryText'\n    });\n    this._labelId = getId();\n    this._descriptionId = getId();\n    this._ariaDescriptionId = getId();\n    let menuProps = null;\n    if (props.persistMenu && props.menuProps) {\n      menuProps = props.menuProps;\n      menuProps.hidden = true;\n    }\n    this.state = {\n      menuProps: menuProps\n    };\n  }\n\n  public render(): JSX.Element {\n    const {\n      ariaDescription,\n      ariaLabel,\n      ariaHidden,\n      className,\n      disabled,\n      primaryDisabled,\n      secondaryText = this.props.description,\n      href,\n      iconProps,\n      menuIconProps,\n      styles,\n      text,\n      checked,\n      variantClassName,\n      theme,\n      getClassNames\n    } = this.props;\n\n    const { menuProps } = this.state;\n    // Button is disabled if the whole button (in case of splitbutton is disabled) or if the primary action is disabled\n    const isPrimaryButtonDisabled = (disabled || primaryDisabled);\n\n    this._classNames = getClassNames ? getClassNames(\n      theme!,\n      className!,\n      variantClassName!,\n      iconProps && iconProps.className,\n      menuIconProps && menuIconProps.className,\n      isPrimaryButtonDisabled!,\n      checked!,\n      !!menuProps,\n      this.props.split) : getBaseButtonClassNames(styles!, className!,\n        variantClassName!,\n        iconProps && iconProps.className,\n        menuIconProps && menuIconProps.className,\n        isPrimaryButtonDisabled!,\n        checked!,\n        !!menuProps,\n        this.props.split);\n\n    const { _ariaDescriptionId, _labelId, _descriptionId } = this;\n    // Anchor tag cannot be disabled hence in disabled state rendering\n    // anchor button as normal button\n    const renderAsAnchor: boolean = !isPrimaryButtonDisabled && !!href;\n    const tag = renderAsAnchor ? 'a' : 'button';\n    const nativeProps = getNativeProps(\n      assign(\n        renderAsAnchor ? {} : { type: 'button' },\n        this.props.rootProps,\n        this.props),\n      renderAsAnchor ? anchorProperties : buttonProperties,\n      [\n        'disabled' // let disabled buttons be focused and styled as disabled.\n      ]);\n\n    // Check for ariaDescription, secondaryText or aria-describedby in the native props to determine source of aria-describedby\n    // otherwise default to null.\n    let ariaDescribedBy;\n    if (ariaDescription) {\n      ariaDescribedBy = _ariaDescriptionId;\n    } else if (secondaryText) {\n      ariaDescribedBy = _descriptionId;\n    } else if ((nativeProps as any)['aria-describedby']) {\n      ariaDescribedBy = (nativeProps as any)['aria-describedby'];\n    } else {\n      ariaDescribedBy = null;\n    }\n\n    // If an explicit ariaLabel is given, use that as the label and we're done.\n    // If an explicit aria-labelledby is given, use that and we're done.\n    // If any kind of description is given (which will end up as an aria-describedby attribute),\n    // set the labelledby element. Otherwise, the button is labeled implicitly by the descendent\n    // text on the button (if it exists). Never set both aria-label and aria-labelledby.\n    let ariaLabelledBy = null;\n    if (!ariaLabel) {\n      if ((nativeProps as any)['aria-labelledby']) {\n        ariaLabelledBy = (nativeProps as any)['aria-labelledby'];\n      } else if (ariaDescribedBy) {\n        ariaLabelledBy = text ? _labelId : null;\n      }\n    }\n\n    const buttonProps = assign(\n      nativeProps,\n      {\n        className: this._classNames.root,\n        ref: this._buttonElement,\n        'disabled': isPrimaryButtonDisabled,\n        'aria-label': ariaLabel,\n        'aria-labelledby': ariaLabelledBy,\n        'aria-describedby': ariaDescribedBy,\n        'data-is-focusable': ((this.props as any)['data-is-focusable'] === false || disabled || this._isSplitButton) ? false : true,\n        'aria-pressed': checked\n      }\n    );\n\n    if (ariaHidden) {\n      buttonProps['aria-hidden'] = true;\n    }\n\n    if (this._isSplitButton) {\n      return (\n        this._onRenderSplitButtonContent(tag, buttonProps)\n      );\n    } else if (this.props.menuProps) {\n      assign(\n        buttonProps,\n        {\n          'onKeyDown': this._onMenuKeyDown,\n          'onClick': this._onMenuClick,\n          'aria-expanded': this._isExpanded,\n          'aria-owns': this.state.menuProps ? this._labelId + '-menu' : null,\n          'aria-haspopup': true\n        }\n      );\n    }\n\n    return this._onRenderContent(tag, buttonProps);\n  }\n\n  public componentDidMount() {\n    // For split buttons, touching anywhere in the button should drop the dropdown, which should contain the primary action.\n    // This gives more hit target space for touch environments. We're setting the onpointerdown here, because React\n    // does not support Pointer events yet.\n    if (this._isSplitButton && this._splitButtonContainer.value && 'onpointerdown' in this._splitButtonContainer.value) {\n      this._events.on(this._splitButtonContainer.value, 'pointerdown', this._onPointerDown, true);\n    }\n  }\n\n  public componentDidUpdate(prevProps: IBaseButtonProps, prevState: IBaseButtonState) {\n    // If Button's menu was closed, run onAfterMenuDismiss\n    if (this.props.onAfterMenuDismiss && prevState.menuProps && !this.state.menuProps) {\n      this.props.onAfterMenuDismiss();\n    }\n  }\n\n  public focus(): void {\n    if (this._isSplitButton && this._splitButtonContainer.current) {\n      this._splitButtonContainer.current.focus();\n    } else if (this._buttonElement.current) {\n      this._buttonElement.current.focus();\n    }\n  }\n\n  public dismissMenu(): void {\n    this._dismissMenu();\n  }\n\n  public openMenu(): void {\n    this._openMenu();\n  }\n\n  private _onRenderContent(tag: any, buttonProps: IButtonProps): JSX.Element {\n    const props = this.props;\n    const Tag = tag;\n    const {\n      menuIconProps,\n      menuProps,\n      onRenderIcon = this._onRenderIcon,\n      onRenderAriaDescription = this._onRenderAriaDescription,\n      onRenderChildren = this._onRenderChildren,\n      onRenderMenu = this._onRenderMenu,\n      onRenderMenuIcon = this._onRenderMenuIcon,\n      disabled\n    } = props;\n    let { keytipProps } = props;\n    if (keytipProps && menuProps) {\n      keytipProps = {\n        ...keytipProps,\n        hasMenu: true\n      };\n    }\n\n    const Content = (\n      // If we're making a split button, we won't put the keytip here\n      <KeytipData\n        keytipProps={ !this._isSplitButton ? keytipProps : undefined }\n        ariaDescribedBy={ (buttonProps as any)['aria-describedby'] }\n        disabled={ disabled }\n      >\n        { (keytipAttributes: any): JSX.Element => (\n          <Tag { ...buttonProps } { ...keytipAttributes }>\n            <div className={ this._classNames.flexContainer } >\n              { onRenderIcon(props, this._onRenderIcon) }\n              { this._onRenderTextContents() }\n              { onRenderAriaDescription(props, this._onRenderAriaDescription) }\n              { onRenderChildren(props, this._onRenderChildren) }\n              { !this._isSplitButton && (menuProps || menuIconProps || this.props.onRenderMenuIcon) && onRenderMenuIcon(this.props, this._onRenderMenuIcon) }\n              { this.state.menuProps && !this.state.menuProps.doNotLayer && onRenderMenu(menuProps, this._onRenderMenu) }\n            </div>\n          </Tag>\n        ) }\n      </KeytipData>\n    );\n\n    if (menuProps && menuProps.doNotLayer) {\n      return (\n        <div style={ { display: 'inline-block' } }>\n          { Content }\n          { this.state.menuProps && onRenderMenu(menuProps, this._onRenderMenu) }\n        </div>\n      );\n    }\n\n    return Content;\n  }\n\n  private _onRenderIcon = (buttonProps?: IButtonProps, defaultRender?: IRenderFunction<IButtonProps>): JSX.Element | null => {\n    const {\n      iconProps\n    } = this.props;\n\n    if (iconProps) {\n      return (\n        <Icon\n          { ...iconProps }\n          className={ this._classNames.icon }\n        />\n      );\n    }\n    return null;\n  }\n\n  private _onRenderTextContents = (): JSX.Element | (JSX.Element | null)[] => {\n    const {\n      text,\n      children,\n      secondaryText = this.props.description,\n      onRenderText = this._onRenderText,\n      onRenderDescription = this._onRenderDescription\n    } = this.props;\n\n    if (text || typeof (children) === 'string' || secondaryText) {\n      return (\n        <div\n          className={ this._classNames.textContainer }\n        >\n          { onRenderText(this.props, this._onRenderText) }\n          { onRenderDescription(this.props, this._onRenderDescription) }\n        </div>\n      );\n    }\n    return ([\n      onRenderText(this.props, this._onRenderText),\n      onRenderDescription(this.props, this._onRenderDescription)\n    ]);\n  }\n\n  private _onRenderText = (): JSX.Element | null => {\n    let {\n      text\n    } = this.props;\n    const {\n      children\n    } = this.props;\n\n    // For backwards compat, we should continue to take in the text content from children.\n    if (text === undefined && typeof (children) === 'string') {\n      text = children;\n    }\n\n    if (this._hasText()) {\n      return (\n        <div\n          key={ this._labelId }\n          className={ this._classNames.label }\n          id={ this._labelId }\n        >\n          { text }\n        </div>\n      );\n    }\n\n    return null;\n  }\n\n  private _hasText(): boolean {\n    // _onRenderTextContents and _onRenderText do not perform the same checks. Below is parity with what _onRenderText used to have\n    // before the refactor that introduced this function. _onRenderTextContents does not require props.text to be undefined in order\n    // for props.children to be used as a fallback. Purely a code maintainability/reuse issue, but logged as Issue #4979\n    return this.props.text !== null && (this.props.text !== undefined || typeof (this.props.children) === 'string');\n  }\n\n  private _onRenderChildren = (): JSX.Element | null => {\n    const { children } = this.props;\n\n    // If children is just a string, either it or the text will be rendered via onRenderLabel\n    // If children is another component, it will be rendered after text\n    if (typeof (children) === 'string') {\n      return null;\n    }\n\n    return children as any;\n  }\n\n  private _onRenderDescription = (props: IButtonProps) => {\n    const {\n      secondaryText = this.props.description\n    } = props;\n\n    // ms-Button-description is only shown when the button type is compound.\n    // In other cases it will not be displayed.\n    return (secondaryText) ? (\n      <div\n        key={ this._descriptionId }\n        className={ this._classNames.description }\n        id={ this._descriptionId }\n      >\n        { secondaryText }\n      </div>\n    ) : (\n        null\n      );\n  }\n\n  private _onRenderAriaDescription = () => {\n    const {\n      ariaDescription\n    } = this.props;\n\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,\n    // otherwise it will be assigned to descriptionSpan.\n    return ariaDescription ? (\n      <span className={ this._classNames.screenReaderText } id={ this._ariaDescriptionId }>{ ariaDescription }</span>\n    ) : (\n        null\n      );\n  }\n\n  private _onRenderMenuIcon = (props: IButtonProps): JSX.Element | null => {\n    const {\n      menuIconProps\n    } = this.props;\n\n    return (\n\n      <Icon\n        iconName='ChevronDown'\n        { ...menuIconProps }\n        className={ this._classNames.menuIcon }\n      />\n\n    );\n  }\n\n  private _onRenderMenu = (menuProps: IContextualMenuProps): JSX.Element => {\n    const { onDismiss = this._dismissMenu } = menuProps;\n\n    // the accessible menu label (accessible name) has a relationship to the button.\n    // If the menu props do not specify an explicit value for aria-label or aria-labelledBy,\n    // AND the button has text, we'll set the menu aria-labelledBy to the text element id.\n    if (!menuProps.ariaLabel && !menuProps.labelElementId && this._hasText()) {\n      menuProps = { ...menuProps, labelElementId: this._labelId };\n    }\n\n    return (\n      <ContextualMenu\n        id={ this._labelId + '-menu' }\n        directionalHint={ DirectionalHint.bottomLeftEdge }\n        { ...menuProps }\n        shouldFocusOnContainer={ this.state.menuProps ? this.state.menuProps.shouldFocusOnContainer : undefined }\n        className={ css('ms-BaseButton-menuhost', menuProps.className) }\n        target={ this._isSplitButton ? this._splitButtonContainer.current : this._buttonElement.current }\n        onDismiss={ onDismiss }\n      />\n    );\n  }\n\n  private _dismissMenu = (): void => {\n    let menuProps = null;\n    if (this.props.persistMenu && this.state.menuProps) {\n      menuProps = this.state.menuProps;\n      menuProps.hidden = true;\n    }\n    this.setState({ menuProps: menuProps });\n  }\n\n  private _openMenu = (shouldFocusOnContainer?: boolean): void => {\n    if (this.props.menuProps) {\n      const menuProps = { ...this.props.menuProps, shouldFocusOnContainer: shouldFocusOnContainer };\n      if (this.props.persistMenu) {\n        menuProps.hidden = false;\n      }\n      this.setState({ menuProps: menuProps });\n    }\n  }\n\n  private _onToggleMenu = (shouldFocusOnContainer: boolean): void => {\n    if (this._splitButtonContainer.current) {\n      this._splitButtonContainer.current.focus();\n    }\n\n    const currentMenuProps = this.state.menuProps;\n    if (this.props.persistMenu) {\n      currentMenuProps && currentMenuProps.hidden ? this._openMenu(shouldFocusOnContainer) : this._dismissMenu();\n    } else {\n      currentMenuProps ? this._dismissMenu() : this._openMenu(shouldFocusOnContainer);\n    }\n  }\n\n  private _onRenderSplitButtonContent(tag: any, buttonProps: IButtonProps): JSX.Element {\n    const {\n      styles = {},\n      disabled,\n      checked,\n      getSplitButtonClassNames,\n      primaryDisabled,\n      menuProps\n    } = this.props;\n    let { keytipProps } = this.props;\n\n    const classNames = getSplitButtonClassNames ? getSplitButtonClassNames(\n      !!disabled,\n      !!this.state.menuProps,\n      !!checked) : styles && getBaseSplitButtonClassNames(\n        styles!,\n        !!disabled,\n        !!this.state.menuProps,\n        !!checked);\n\n    assign(\n      buttonProps,\n      {\n        onClick: undefined,\n        tabIndex: -1,\n        'data-is-focusable': false\n      }\n    );\n    const ariaDescribedBy = buttonProps.ariaDescription || '';\n\n    if (keytipProps && menuProps) {\n      keytipProps = {\n        ...keytipProps,\n        hasMenu: true\n      };\n    }\n\n    return (\n      <KeytipData keytipProps={ keytipProps } disabled={ disabled }>\n        { (keytipAttributes: any): JSX.Element => (\n          <div\n            data-ktp-target={ keytipAttributes['data-ktp-target'] }\n            role={ 'button' }\n            aria-labelledby={ buttonProps.ariaLabel }\n            aria-disabled={ disabled }\n            aria-haspopup={ true }\n            aria-expanded={ this._isExpanded }\n            aria-pressed={ this.props.checked }\n            aria-describedby={ ariaDescribedBy + (keytipAttributes['aria-describedby'] || '') }\n            className={ classNames && classNames.splitButtonContainer }\n            onKeyDown={ this._onSplitButtonContainerKeyDown }\n            onTouchStart={ this._onTouchStart }\n            ref={ this._splitButtonContainer }\n            data-is-focusable={ true }\n            onClick={ !disabled && !primaryDisabled ? this._onSplitButtonPrimaryClick : undefined }\n            tabIndex={ !disabled ? 0 : undefined }\n          >\n            <span\n              style={ { 'display': 'flex' } }\n            >\n              { this._onRenderContent(tag, buttonProps) }\n              { this._onRenderSplitButtonMenuButton(classNames, keytipAttributes) }\n              { this._onRenderSplitButtonDivider(classNames) }\n            </span>\n          </div>\n        ) }\n      </KeytipData>\n    );\n  }\n\n  private _onSplitButtonPrimaryClick = (ev: React.MouseEvent<HTMLDivElement>) => {\n    if (this._isExpanded) {\n      this._dismissMenu();\n    }\n\n    if (!this._processingTouch && this.props.onClick) {\n      this.props.onClick(ev);\n    } else if (this._processingTouch) {\n      this._onMenuClick(ev);\n    }\n  }\n\n  private _onRenderSplitButtonDivider(classNames: ISplitButtonClassNames | undefined): JSX.Element | null {\n    if (classNames && classNames.divider) {\n      return <span className={ classNames.divider } />;\n    }\n    return null;\n  }\n\n  private _onRenderSplitButtonMenuButton(classNames: ISplitButtonClassNames | undefined, keytipAttributes: any): JSX.Element {\n    let {\n      menuIconProps\n    } = this.props;\n\n    const {\n      splitButtonAriaLabel\n    } = this.props;\n\n    if (menuIconProps === undefined) {\n      menuIconProps = {\n        iconName: 'ChevronDown'\n      };\n    }\n\n    const splitButtonProps = {\n      'styles': classNames,\n      'checked': this.props.checked,\n      'disabled': this.props.disabled,\n      'onClick': this._onMenuClick,\n      'menuProps': undefined,\n      'iconProps': menuIconProps,\n      'ariaLabel': splitButtonAriaLabel,\n      'aria-haspopup': true,\n      'aria-expanded': this._isExpanded,\n      'data-is-focusable': false\n    };\n\n    // Add data-ktp-execute-target to the split button if the keytip is defined\n    return (\n      <BaseButton\n        { ...splitButtonProps }\n        data-ktp-execute-target={ keytipAttributes['data-ktp-execute-target'] }\n        onMouseDown={ this._onMouseDown }\n        tabIndex={ -1 }\n      />\n    );\n\n  }\n\n  private _onMouseDown = (ev: React.MouseEvent<BaseButton>) => {\n    if (this.props.onMouseDown) {\n      this.props.onMouseDown(ev);\n    }\n\n    ev.preventDefault();\n  }\n\n  private _onSplitButtonContainerKeyDown = (ev: React.KeyboardEvent<HTMLDivElement>) => {\n    if (ev.which === KeyCodes.enter) {\n      if (this._buttonElement.current) {\n        this._buttonElement.current.click();\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    } else {\n      this._onMenuKeyDown(ev);\n    }\n  }\n\n  private _onMenuKeyDown = (ev: React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement>) => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(ev);\n    }\n\n    if (!ev.defaultPrevented && this._isValidMenuOpenKey(ev)) {\n      const { onMenuClick } = this.props;\n      if (onMenuClick) {\n        onMenuClick(ev, this);\n      }\n\n      this._onToggleMenu(false);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _onTouchStart: () => void = () => {\n    if (this._isSplitButton && this._splitButtonContainer.value && !('onpointerdown' in this._splitButtonContainer.value)) {\n      this._handleTouchAndPointerEvent();\n    }\n  }\n\n  private _onPointerDown(ev: PointerEvent) {\n    if (ev.pointerType === 'touch') {\n      this._handleTouchAndPointerEvent();\n\n      ev.preventDefault();\n      ev.stopImmediatePropagation();\n    }\n  }\n\n  private _handleTouchAndPointerEvent() {\n    // If we already have an existing timeeout from a previous touch and pointer event\n    // cancel that timeout so we can set a nwe one.\n    if (this._lastTouchTimeoutId !== undefined) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n      this._lastTouchTimeoutId = undefined;\n    }\n    this._processingTouch = true;\n\n    this._lastTouchTimeoutId = this._async.setTimeout(() => {\n      this._processingTouch = false;\n      this._lastTouchTimeoutId = undefined;\n    }, TouchIdleDelay);\n  }\n\n  /**\n   * Returns if the user hits a valid keyboard key to open the menu\n   * @param ev - the keyboard event\n   * @returns True if user clicks on custom trigger key if enabled or alt + down arrow if not. False otherwise.\n   */\n  private _isValidMenuOpenKey(ev: React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement>): boolean {\n    if (this.props.menuTriggerKeyCode) {\n      return ev.which === this.props.menuTriggerKeyCode;\n    } else if (this.props.menuProps) {\n      return ev.which === KeyCodes.down && (ev.altKey || ev.metaKey);\n    }\n\n    // Note: When enter is pressed, we will let the event continue to propagate\n    // to trigger the onClick event on the button\n    return false;\n  }\n\n  private _onMenuClick = (ev: React.MouseEvent<HTMLDivElement | HTMLAnchorElement>) => {\n    const { onMenuClick } = this.props;\n    if (onMenuClick) {\n      onMenuClick(ev, this);\n    }\n\n    if (!ev.defaultPrevented) {\n      // When Edge + Narrator are used together (regardless of if the button is in a form or not), pressing\n      // \"Enter\" fires this method and not _onMenuKeyDown. Checking ev.nativeEvent.detail differentiates\n      // between a real click event and a keypress event.\n      const shouldFocusOnContainer = ev.nativeEvent.detail !== 0;\n      this._onToggleMenu(shouldFocusOnContainer);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n}\n"]}