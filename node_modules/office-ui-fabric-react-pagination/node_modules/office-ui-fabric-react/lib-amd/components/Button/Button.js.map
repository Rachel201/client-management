{"version":3,"file":"Button.js","sourceRoot":"../src/","sources":["components/Button/Button.tsx"],"names":[],"mappings":";;;IASA;;;OAGG;IACH;QAA4B,kCAA+B;QAMzD,gBAAY,KAAmB;YAA/B,YACE,kBAAM,KAAK,CAAC,SAMb;YAZD;;eAEG;YACO,+BAAyB,GAAG,KAAK,CAAC;YAK1C,gBAAI,CACF,2EAA2E;gBAC3E,gEAAgE,CACjE,CAAC;;QACJ,CAAC;QAEM,uBAAM,GAAb;YACE,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YAEzB,QAAQ,KAAK,CAAC,UAAU,EAAE;gBACxB,KAAK,yBAAU,CAAC,OAAO;oBACrB,OAAO,oBAAC,2BAAY,uBAAM,KAAK,EAAK,CAAC;gBAEvC,KAAK,yBAAU,CAAC,QAAQ;oBACtB,OAAO,oBAAC,+BAAc,uBAAM,KAAK,EAAK,CAAC;gBAEzC,KAAK,yBAAU,CAAC,IAAI;oBAClB,OAAO,oBAAC,uBAAU,uBAAM,KAAK,EAAK,CAAC;gBAErC,KAAK,yBAAU,CAAC,OAAO;oBACrB,OAAO,oBAAC,6BAAa,uBAAM,KAAK,EAAK,CAAC;gBAExC;oBACE,OAAO,oBAAC,6BAAa,uBAAM,KAAK,EAAK,CAAC;aACzC;QACH,CAAC;QACH,aAAC;IAAD,CAAC,AAnCD,CAA4B,yBAAa,GAmCxC;IAnCY,wBAAM","sourcesContent":["import * as React from 'react';\n\nimport { BaseComponent, warn } from '../../Utilities';\nimport { ButtonType, IButtonProps } from './Button.types';\nimport { DefaultButton } from './DefaultButton/DefaultButton';\nimport { ActionButton } from './ActionButton/ActionButton';\nimport { CompoundButton } from './CompoundButton/CompoundButton';\nimport { IconButton } from './IconButton/IconButton';\nimport { PrimaryButton } from './PrimaryButton/PrimaryButton';\n/**\n * This class is deprecated. Use the individual *Button components instead.\n * @deprecated\n */\nexport class Button extends BaseComponent<IButtonProps, {}> {\n  /**\n   * Set this BaseComponent._resolveComponentRef to false, bypassing resolution of componentRef.\n   */\n  protected _shouldUpdateComponentRef = false;\n\n  constructor(props: IButtonProps) {\n    super(props);\n\n    warn(\n      `The Button component has been deprecated. Use specific variants instead. ` +\n      `(PrimaryButton, DefaultButton, IconButton, ActionButton, etc.)`\n    );\n  }\n\n  public render(): JSX.Element {\n    const props = this.props;\n\n    switch (props.buttonType) {\n      case ButtonType.command:\n        return <ActionButton { ...props } />;\n\n      case ButtonType.compound:\n        return <CompoundButton { ...props } />;\n\n      case ButtonType.icon:\n        return <IconButton { ...props } />;\n\n      case ButtonType.primary:\n        return <PrimaryButton { ...props } />;\n\n      default:\n        return <DefaultButton { ...props } />;\n    }\n  }\n}\n"]}