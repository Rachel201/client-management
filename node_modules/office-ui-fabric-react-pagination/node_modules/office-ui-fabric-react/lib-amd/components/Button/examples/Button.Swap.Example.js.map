{"version":3,"file":"Button.Swap.Example.js","sourceRoot":"../src/","sources":["components/Button/examples/Button.Swap.Example.tsx"],"names":[],"mappings":";;;IAcA;QAAuC,6CAAsD;QAI3F,2BAAmB,KAAmB;YAAtC,YACE,kBAAM,KAAK,CAAC,SAOb;YAoDO,mBAAa,GAAG,UAAC,GAAQ;gBAC/B,KAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAgB,CAAC;YAC5D,CAAC,CAAA;YAEO,cAAQ,GAAG;gBACjB,kCAAkC;gBAClC,KAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,CAAC,KAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;YACtD,CAAC,CAAA;YAhEC,KAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,KAAI,CAAC,KAAK,GAAG;gBACX,SAAS,EAAE,IAAI;aAChB,CAAC;;QACJ,CAAC;QAEM,+CAAmB,GAA1B,UAA2B,SAAuB,EAAE,SAAkC;YACpF,+CAA+C;YAC/C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,aAAa,KAAK,IAAI,CAAC,SAAS,CAAC;QAC5D,CAAC;QAEM,8CAAkB,GAAzB,UAA0B,SAAuB,EAAE,SAAkC;YACnF,oDAAoD;YACpD,mEAAmE;YACnE,IAAI,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,aAAa,KAAK,IAAI,CAAC,SAAS,EAAE;gBAC9D,IAAI,CAAC,SAAU,CAAC,KAAK,EAAE,CAAC;aACzB;QACH,CAAC;QAEM,kCAAM,GAAb;YACU,IAAA,gCAAS,CAAgB;YAC3B,IAAA,eAAkC,EAAhC,sBAAQ,EAAE,oBAAO,CAAgB;YACzC,IAAM,IAAI,GAAG,MAAM,CAAC;YAEpB,mCAAmC;YACnC,IAAM,MAAM,GAAG,SAAS;gBACtB,CAAC,CAAC,CACA,oBAAC,sBAAa,IACZ,GAAG,EAAG,IAAI,CAAC,aAAa,EACxB,QAAQ,EAAG,QAAQ,EACnB,OAAO,EAAG,OAAO,EACjB,OAAO,EAAG,IAAI,CAAC,QAAQ,IAErB,IAAI,CACQ,CACjB,CAAC,CAAC,CAAC,CACF,oBAAC,sBAAa,IACZ,GAAG,EAAG,IAAI,CAAC,aAAa,EACxB,QAAQ,EAAG,QAAQ,EACnB,OAAO,EAAG,OAAO,EACjB,OAAO,EAAG,IAAI,CAAC,QAAQ,IAErB,IAAI,CACQ,CACjB,CAAC;YAEJ,IAAM,aAAa,GAAG,8BAAkB,EAA4D,CAAC;YACrG,IAAM,UAAU,GAAG,aAAa,CAAC,uCAAS,CAAC,CAAC;YAE5C,OAAO,CACL,6BAAK,SAAS,EAAG,eAAG,CAAC,UAAU,CAAC,OAAO,CAAC,IACpC,MAAM,CACJ,CACP,CAAC;QACJ,CAAC;QAUH,wBAAC;IAAD,CAAC,AAxED,CAAuC,KAAK,CAAC,SAAS,GAwErD;IAxEY,8CAAiB","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { css, classNamesFunction } from '../../../Utilities';\nimport {\n  getStyles,\n  IButtonBasicExampleStyleProps,\n  IButtonBasicExampleStyles\n} from './Button.Basic.Example.styles';\nimport { DefaultButton, PrimaryButton, IButtonProps } from 'office-ui-fabric-react/lib/Button';\n\nexport interface IButtonSwapExampleState {\n  isPrimary: boolean;\n}\n\nexport class ButtonSwapExample extends React.Component<IButtonProps, IButtonSwapExampleState> {\n  private buttonRef: HTMLElement | null;\n  private hasFocus: boolean;\n\n  public constructor(props: IButtonProps) {\n    super(props);\n\n    this.hasFocus = false;\n    this.buttonRef = null;\n    this.state = {\n      isPrimary: true\n    };\n  }\n\n  public componentWillUpdate(nextProps: IButtonProps, nextState: IButtonSwapExampleState): void {\n    // check to see if our button element has focus\n    this.hasFocus = document.activeElement === this.buttonRef;\n  }\n\n  public componentDidUpdate(prevProps: IButtonProps, prevState: IButtonSwapExampleState): void {\n    // if our button previously had focus but we lost it\n    // because we switched the control type, we need to set focus again\n    if (this.hasFocus && document.activeElement !== this.buttonRef) {\n      this.buttonRef!.focus();\n    }\n  }\n\n  public render(): JSX.Element {\n    const { isPrimary } = this.state;\n    const { disabled, checked } = this.props;\n    const text = 'Swap';\n\n    // determine which button to render\n    const button = isPrimary\n      ? (\n        <PrimaryButton\n          ref={ this._setButtonRef }\n          disabled={ disabled }\n          checked={ checked }\n          onClick={ this._onClick }\n        >\n          { text }\n        </PrimaryButton>\n      ) : (\n        <DefaultButton\n          ref={ this._setButtonRef }\n          disabled={ disabled }\n          checked={ checked }\n          onClick={ this._onClick }\n        >\n          { text }\n        </DefaultButton>\n      );\n\n    const getClassNames = classNamesFunction<IButtonBasicExampleStyleProps, IButtonBasicExampleStyles>();\n    const classNames = getClassNames(getStyles);\n\n    return (\n      <div className={ css(classNames.example) }>\n        { button }\n      </div>\n    );\n  }\n\n  private _setButtonRef = (ref: any): void => {\n    this.buttonRef = ReactDOM.findDOMNode(ref) as HTMLElement;\n  }\n\n  private _onClick = (): void => {\n    // change the button type on click\n    this.setState({ isPrimary: !this.state.isPrimary });\n  }\n}"]}