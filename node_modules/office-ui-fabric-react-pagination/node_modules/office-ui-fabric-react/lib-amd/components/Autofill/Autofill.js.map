{"version":3,"file":"Autofill.js","sourceRoot":"../src/","sources":["components/Autofill/Autofill.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IAutofillProps, IAutofill } from './Autofill.types';\nimport {\n  BaseComponent,\n  KeyCodes,\n  getNativeProps,\n  inputProperties,\n  createRef\n} from '../../Utilities';\n\nexport interface IAutofillState {\n  displayValue?: string;\n}\n\nconst SELECTION_FORWARD = 'forward';\nconst SELECTION_BACKWARD = 'backward';\n\nexport class Autofill extends BaseComponent<IAutofillProps, IAutofillState> implements IAutofill {\n\n  public static defaultProps = {\n    enableAutofillOnKeyPress: [KeyCodes.down, KeyCodes.up]\n  };\n\n  private _inputElement = createRef<HTMLInputElement>();\n  private _autoFillEnabled = true;\n  private _value: string;\n\n  constructor(props: IAutofillProps) {\n    super(props);\n    this._value = props.defaultVisibleValue || '';\n    this.state = {\n      displayValue: props.defaultVisibleValue || ''\n    };\n  }\n\n  public get cursorLocation(): number | null {\n    if (this._inputElement.current) {\n      const inputElement = this._inputElement.current;\n      if (inputElement.selectionDirection !== SELECTION_FORWARD) {\n        return inputElement.selectionEnd;\n      } else {\n        return inputElement.selectionStart;\n      }\n    } else {\n      return -1;\n    }\n  }\n\n  public get isValueSelected(): boolean {\n    return Boolean(this.inputElement && (this.inputElement.selectionStart !== this.inputElement.selectionEnd));\n  }\n\n  public get value(): string {\n    return this._value;\n  }\n\n  public get selectionStart(): number | null {\n    return this._inputElement.current ? this._inputElement.current.selectionStart : -1;\n  }\n\n  public get selectionEnd(): number | null {\n    return this._inputElement.current ? this._inputElement.current.selectionEnd : -1;\n  }\n\n  public get inputElement(): HTMLInputElement | null {\n    return this._inputElement.current;\n  }\n\n  public componentWillReceiveProps(nextProps: IAutofillProps): void {\n    let newValue;\n\n    if (this.props.updateValueInWillReceiveProps) {\n      newValue = this.props.updateValueInWillReceiveProps();\n    }\n\n    newValue = this._getDisplayValue(newValue ? newValue : this._value, nextProps.suggestedDisplayValue);\n\n    if (typeof newValue === 'string') {\n      this.setState({ displayValue: newValue });\n    }\n  }\n\n  public componentDidUpdate() {\n    const value = this._value;\n    const {\n      suggestedDisplayValue,\n      shouldSelectFullInputValueInComponentDidUpdate\n    } = this.props;\n    let differenceIndex = 0;\n\n    if (this._autoFillEnabled && value && suggestedDisplayValue && this._doesTextStartWith(suggestedDisplayValue, value)) {\n      let shouldSelectFullRange = false;\n\n      if (shouldSelectFullInputValueInComponentDidUpdate) {\n        shouldSelectFullRange = shouldSelectFullInputValueInComponentDidUpdate();\n      }\n\n      if (shouldSelectFullRange && this._inputElement.current) {\n        this._inputElement.current.setSelectionRange(0, suggestedDisplayValue.length, SELECTION_BACKWARD);\n      } else {\n        while (differenceIndex < value.length && value[differenceIndex].toLocaleLowerCase() === suggestedDisplayValue[differenceIndex].toLocaleLowerCase()) {\n          differenceIndex++;\n        }\n        if (differenceIndex > 0 && this._inputElement.current) {\n          this._inputElement.current.setSelectionRange(differenceIndex, suggestedDisplayValue.length, SELECTION_BACKWARD);\n        }\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      displayValue\n    } = this.state;\n\n    const nativeProps = getNativeProps(this.props, inputProperties);\n    return (\n      <input\n        { ...nativeProps }\n        ref={ this._inputElement }\n        value={ displayValue }\n        autoCapitalize={ 'off' }\n        autoComplete={ 'off' }\n        onCompositionStart={ this._onCompositionStart }\n        onCompositionEnd={ this._onCompositionEnd }\n        onChange={ this._onChanged }\n        onInput={ this._onInputChanged }\n        onKeyDown={ this._onKeyDown }\n        onClick={ this.props.onClick ? this.props.onClick : this._onClick }\n        data-lpignore={ true }\n      />\n    );\n  }\n\n  public focus() {\n    this._inputElement.current && this._inputElement.current.focus();\n  }\n\n  public clear() {\n    this._autoFillEnabled = true;\n    this._updateValue('');\n    this._inputElement.current && this._inputElement.current.setSelectionRange(0, 0);\n  }\n\n  // Composition events are used when the character/text requires several keystrokes to be completed.\n  // Some examples of this are mobile text input and langauges like Japanese or Arabic.\n  // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart\n  private _onCompositionStart = (ev: React.CompositionEvent<HTMLInputElement>) => {\n    this._autoFillEnabled = false;\n  }\n\n  // Composition events are used when the character/text requires several keystrokes to be completed.\n  // Some examples of this are mobile text input and langauges like Japanese or Arabic.\n  // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart\n  private _onCompositionEnd = (ev: React.CompositionEvent<HTMLInputElement>) => {\n    const inputValue = this._getCurrentInputValue();\n    this._tryEnableAutofill(inputValue, this.value, false, true);\n    // Due to timing, this needs to be async, otherwise no text will be selected.\n    this._async.setTimeout(() => this._updateValue(inputValue), 0);\n  }\n\n  private _onClick = () => {\n    if (this._value && this._value !== '' && this._autoFillEnabled) {\n      this._autoFillEnabled = false;\n    }\n  }\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(ev);\n    }\n\n    // If the event is actively being composed, then don't alert autofill.\n    // Right now typing does not have isComposing, once that has been fixed any should be removed.\n    if (!(ev.nativeEvent as any).isComposing) {\n      switch (ev.which) {\n        case KeyCodes.backspace:\n          this._autoFillEnabled = false;\n          break;\n        case KeyCodes.left:\n        case KeyCodes.right:\n          if (this._autoFillEnabled) {\n            this._value = this.state.displayValue!;\n            this._autoFillEnabled = false;\n          }\n          break;\n        default:\n          if (!this._autoFillEnabled) {\n            if (this.props.enableAutofillOnKeyPress!.indexOf(ev.which) !== -1) {\n              this._autoFillEnabled = true;\n            }\n          }\n          break;\n      }\n    }\n  }\n\n  private _onInputChanged = (ev: React.FormEvent<HTMLElement>) => {\n    const value: string = this._getCurrentInputValue(ev);\n\n    // Right now typing does not have isComposing, once that has been fixed any should be removed.\n    this._tryEnableAutofill(value, this._value, (ev.nativeEvent as any).isComposing);\n    this._updateValue(value);\n  }\n\n  private _onChanged = (): void => {\n    // Swallow this event, we don't care about it\n    // We must provide it because React PropTypes marks it as required, but onInput serves the correct purpose\n    return;\n  }\n\n  private _getCurrentInputValue(ev?: React.FormEvent<HTMLElement>): string {\n    if (ev && ev.target && (ev.target as any).value) {\n      return (ev.target as any).value;\n    } else if (this.inputElement && this.inputElement.value) {\n      return this.inputElement.value;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Attempts to enable autofill. Whether or not autofill is enabled depends on the input value,\n   * whether or not any text is selected, and only if the new input value is longer than the old input value.\n   * Autofill should never be set to true if the value is composing. Once compositionEnd is called, then\n   * it should be completed.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent for more information on composition.\n   * @param newValue\n   * @param oldValue\n   * @param isComposing if true then the text is actively being composed and it has not completed.\n   * @param isComposed if the text is a composed text value.\n   */\n  private _tryEnableAutofill(newValue: string, oldValue: string, isComposing?: boolean, isComposed?: boolean): void {\n    if (!isComposing\n      && newValue\n      && this._inputElement.current\n      && this._inputElement.current.selectionStart === newValue.length\n      && !this._autoFillEnabled\n      && (newValue.length > oldValue.length || isComposed)) {\n      this._autoFillEnabled = true;\n    }\n  }\n\n  private _notifyInputChange(newValue: string): void {\n    if (this.props.onInputValueChange) {\n      this.props.onInputValueChange(newValue);\n    }\n  }\n\n  /**\n   * Updates the current input value as well as getting a new display value.\n   * @param newValue The new value from the input\n   */\n  private _updateValue = (newValue: string) => {\n    this._value = this.props.onInputChange ? this.props.onInputChange(newValue) : newValue;\n    this.setState({\n      displayValue: this._getDisplayValue(this._value, this.props.suggestedDisplayValue)\n    }, () => this._notifyInputChange(this._value));\n  }\n\n  /**\n   * Returns a string that should be used as the display value.\n   * It evaluates this based on whether or not the suggested value starts with the input value\n   * and whether or not autofill is enabled.\n   * @param inputValue the value that the input currently has.\n   * @param suggestedDisplayValue the possible full value\n   */\n  private _getDisplayValue(inputValue: string, suggestedDisplayValue?: string): string {\n    let displayValue = inputValue;\n    if (suggestedDisplayValue\n      && inputValue\n      && this._doesTextStartWith(suggestedDisplayValue, displayValue)\n      && this._autoFillEnabled) {\n      displayValue = suggestedDisplayValue;\n    }\n    return displayValue;\n  }\n\n  private _doesTextStartWith(text: string, startWith: string): boolean {\n    if (!text || !startWith) {\n      return false;\n    }\n    return text.toLocaleLowerCase().indexOf(startWith.toLocaleLowerCase()) === 0;\n  }\n}\n\n/**\n *  Legacy, @deprecated, do not use.\n */\nexport class BaseAutoFill extends Autofill {\n\n}"]}