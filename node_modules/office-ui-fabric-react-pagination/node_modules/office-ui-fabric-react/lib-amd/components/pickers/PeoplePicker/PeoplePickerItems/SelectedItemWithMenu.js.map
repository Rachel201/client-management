{"version":3,"file":"SelectedItemWithMenu.js","sourceRoot":"../src/","sources":["components/pickers/PeoplePicker/PeoplePickerItems/SelectedItemWithMenu.tsx"],"names":[],"mappings":";;;IAUA,IAAM,MAAM,GAAQ,YAAY,CAAC;IAMjC;QAA0C,gDAAqE;QAO7G,8BAAY,KAAqC;YAAjD,YACE,kBAAM,KAAK,CAAC,SAEb;YALO,kBAAY,GAAG,qBAAS,EAAkB,CAAC;YAiD3C,uBAAiB,GAAG,UAAC,EAAQ;gBACnC,KAAI,CAAC,QAAQ,CAAC,EAAE,qBAAqB,EAAE,IAAI,EAAE,CAAC,CAAC;YACjD,CAAC,CAAA;YAEO,4BAAsB,GAAG,UAAC,EAAS;gBACzC,KAAI,CAAC,QAAQ,CAAC,EAAE,qBAAqB,EAAE,KAAK,EAAE,CAAC,CAAC;YAClD,CAAC,CAAA;YAnDC,KAAI,CAAC,KAAK,GAAG,EAAE,qBAAqB,EAAE,KAAK,EAAE,CAAC;;QAChD,CAAC;QAEM,qCAAM,GAAb;YACQ,IAAA,eAIQ,EAHZ,cAAI,EACJ,8BAAY,EACZ,gDAAqB,CACR;YACf,OAAO,CACL,kDAAyB,IAAI,EAAG,SAAS,EAAG,eAAG,CAAC,yBAAyB,EAAE,MAAM,CAAC,aAAa,CAAC;gBAC9F,oBAAC,qBAAS,IAAC,SAAS,EAAG,eAAG,CAAC,4BAA4B,EAAE,MAAM,CAAC,gBAAgB,CAAC;oBAC/E,6BAAK,SAAS,EAAG,eAAG,CAAC,uBAAuB,EAAE,MAAM,CAAC,WAAW,CAAC;wBAC/D,oBAAC,iBAAO,uBACD,IAAW,IAChB,QAAQ,EAAG,IAAI,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,yBAAe,CAAC,IAAI,IAC7E,CACE;oBACN,6BAAK,GAAG,EAAG,IAAI,CAAC,YAAY,EAAG,SAAS,EAAG,eAAG,CAAC,uBAAuB,EAAE,MAAM,CAAC,WAAW,CAAC;wBACzF,oBAAC,mBAAU,IACT,SAAS,EAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,EAChC,OAAO,EAAG,IAAI,CAAC,iBAAiB,GAChC,CACE;oBACN,6BAAK,SAAS,EAAG,eAAG,CAAC,uBAAuB,EAAE,MAAM,CAAC,WAAW,CAAC;wBAC/D,oBAAC,mBAAU,IACT,SAAS,EAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAClC,OAAO,EAAG,YAAY,EACtB,SAAS,EAAG,qBAAqB,GACjC,CACE;oBACJ,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC,CACnC,oBAAC,+BAAc,IACb,KAAK,EAAG,IAAI,CAAC,SAAU,EACvB,kBAAkB,EAAG,IAAI,EACzB,MAAM,EAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAClC,SAAS,EAAG,IAAI,CAAC,sBAAsB,EACvC,eAAe,2BACf,CAAC;wBACH,CAAC,CAAC,IAAI,CACE,CACR,CACP,CAAC;QACJ,CAAC;QASH,2BAAC;IAAD,CAAC,AA7DD,CAA0C,yBAAa,GA6DtD;IA7DY,oDAAoB","sourcesContent":["/* tslint:disable */\nimport * as React from 'react';\n/* tslint:enable */\nimport { BaseComponent, css, createRef } from '../../../../Utilities';\nimport { IPeoplePickerItemWithMenuProps } from './PeoplePickerItem.types';\nimport { Persona, PersonaPresence } from '../../../../Persona';\nimport { ContextualMenu, DirectionalHint } from '../../../../ContextualMenu';\nimport { IconButton } from '../../../../Button';\nimport { FocusZone } from '../../../../FocusZone';\nimport * as stylesImport from './PickerItemsDefault.scss';\nconst styles: any = stylesImport;\n\nexport interface IPeoplePickerItemState {\n  contextualMenuVisible: boolean;\n}\n\nexport class SelectedItemWithMenu extends BaseComponent<IPeoplePickerItemWithMenuProps, IPeoplePickerItemState> {\n  public refs: {\n    [key: string]: any,\n  };\n\n  private _ellipsisRef = createRef<HTMLDivElement>();\n\n  constructor(props: IPeoplePickerItemWithMenuProps) {\n    super(props);\n    this.state = { contextualMenuVisible: false };\n  }\n\n  public render(): JSX.Element {\n    const {\n      item,\n      onRemoveItem,\n      removeButtonAriaLabel\n    } = this.props;\n    return (\n      <div data-is-focusable={ true } className={ css('ms-PickerItem-container', styles.itemContainer) }>\n        <FocusZone className={ css('ms-PickerPersona-container', styles.personaContainer) } >\n          <div className={ css('ms-PickerItem-content', styles.itemContent) }>\n            <Persona\n              { ...item as any }\n              presence={ item.presence !== undefined ? item.presence : PersonaPresence.none }\n            />\n          </div>\n          <div ref={ this._ellipsisRef } className={ css('ms-PickerItem-content', styles.itemContent) }>\n            <IconButton\n              iconProps={ { iconName: 'More' } }\n              onClick={ this._onContextualMenu }\n            />\n          </div>\n          <div className={ css('ms-PickerItem-content', styles.itemContent) }>\n            <IconButton\n              iconProps={ { iconName: 'Cancel' } }\n              onClick={ onRemoveItem }\n              ariaLabel={ removeButtonAriaLabel }\n            />\n          </div>\n          { this.state.contextualMenuVisible ? (\n            <ContextualMenu\n              items={ item.menuItems! }\n              shouldFocusOnMount={ true }\n              target={ this._ellipsisRef.current }\n              onDismiss={ this._onCloseContextualMenu }\n              directionalHint={ DirectionalHint.bottomAutoEdge }\n            />)\n            : null }\n        </FocusZone>\n      </div>\n    );\n  }\n\n  private _onContextualMenu = (ev?: any): void => {\n    this.setState({ contextualMenuVisible: true });\n  }\n\n  private _onCloseContextualMenu = (ev: Event) => {\n    this.setState({ contextualMenuVisible: false });\n  }\n}\n"]}