{"version":3,"file":"CommandBar.Customization.Example.js","sourceRoot":"../src/","sources":["components/CommandBar/examples/CommandBar.Customization.Example.tsx"],"names":[],"mappings":";;;IAWA;QAAoD,0DAA8C;QAGhG,wCAAY,KAAS;YAArB,YACE,kBAAM,KAAK,CAAC,SAEb;YAsCO,gCAA0B,GAAG,UAAC,IAAyB;gBAC7D,IAAM,QAAQ,GAAG,KAAI,CAAC,KAAK,CAAC,kBAAkB,IAAI,MAAM,CAAC,QAAQ,CAAC;gBAElE,IAAM,mBAAmB,GAAG,eAAG,CAC7B,MAAM,CAAC,MAAM,EACb,QAAQ,CACT,CAAC;gBACF,IAAM,gBAAgB,GAAG,eAAG,CAC1B,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,2BAA2B,CAAC,EAC3C,MAAM,CAAC,MAAM,EACb,QAAQ,CACT,CAAC;gBAEF,OAAO,CACL;oBACE,6BACE,SAAS,EAAG,eAAG,CACb,MAAM,CAAC,qBAAqB,EAC5B,QAAQ,CACT,EACD,GAAG,EAAG,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,SAAS,GAAG,GAAI,EAArB,CAAqB;wBAElC,oBAAC,sBAAa,IACZ,SAAS,EAAG,gBAAgB,EAC5B,SAAS,EAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,EAC/B,IAAI,EAAC,KAAK,GACV;wBACF,8BAAM,SAAS,EAAG,MAAM,CAAC,QAAQ,QAAW;wBAC5C,oBAAC,sBAAa,IACZ,OAAO,EAAG,KAAI,CAAC,eAAe,EAC9B,SAAS,EAAG,mBAAmB,EAC/B,SAAS,EAAG;gCACV,SAAS,EAAE,eAAG,CAAC,wBAAwB,CAAC;gCACxC,KAAK,EAAE,IAAI,CAAC,YAAa,CAAC,KAAK;6BAChC,GACD,CACE,CACD,CACR,CAAC;YACJ,CAAC,CAAA;YAEO,qBAAe,GAAG,UAAC,EAAO;gBAChC,EAAE,CAAC,eAAe,EAAE,CAAC;gBACrB,KAAI,CAAC,wBAAwB,CAAC,EAAE,CAAC,CAAC;YACpC,CAAC,CAAA;YAEO,8BAAwB,GAAG,UAAC,EAAO;gBACzC,KAAI,CAAC,QAAQ,CAAC;oBACZ,kBAAkB,EAAE,CAAC,KAAI,CAAC,KAAK,CAAC,kBAAkB;iBACnD,CAAC,CAAC;YACL,CAAC,CAAA;YAzFC,KAAI,CAAC,KAAK,GAAG,EAAE,kBAAkB,EAAE,KAAK,EAAE,CAAC;;QAC7C,CAAC;QAEM,+CAAM,GAAb;YACE,OAAO,CACL;gBACE,oBAAC,uBAAU,IACT,kBAAkB,EAAG,KAAK,EAC1B,KAAK,EACH;wBACE;4BACE,GAAG,EAAE,KAAK;4BACV,IAAI,EAAE,KAAK;4BACX,QAAQ,EAAE,IAAI,CAAC,0BAA0B;4BACzC,SAAS,EAAE,mBAAmB;4BAC9B,YAAY,EAAE;gCACZ,KAAK,EAAE;;4CAEH,GAAG,EAAE,cAAc;4CACnB,IAAI,EAAE,eAAe;4CACrB,IAAI,EAAE,MAAM;;wCACZ,GAAC,oBAAoB,IAAG,gBAAgB;;;4CAGxC,GAAG,EAAE,eAAe;4CACpB,IAAI,EAAE,gBAAgB;4CACtB,IAAI,EAAE,UAAU;;wCAChB,GAAC,oBAAoB,IAAG,mBAAmB;;iCAE9C;6BACF;yBACF;qBACF,GAEH,CACE,CACP,CAAC;;QACJ,CAAC;QAqDH,qCAAC;IAAD,CAAC,AA/FD,CAAoD,KAAK,CAAC,SAAS,GA+FlE;IA/FY,wEAA8B","sourcesContent":["import * as React from 'react';\nimport { CommandButton } from 'office-ui-fabric-react/lib/Button';\nimport { CommandBar } from 'office-ui-fabric-react/lib/CommandBar';\nimport { css } from 'office-ui-fabric-react/lib/Utilities';\nimport * as styles from './CommandBar.Example.scss';\nimport { IContextualMenuItem } from '../../ContextualMenu';\n\nexport interface ISplitDropDownButtonState {\n  isContextMenuShown: boolean;\n}\n\nexport class CommandBarCustomizationExample extends React.Component<{}, ISplitDropDownButtonState> {\n  private container: HTMLElement;\n\n  constructor(props: {}) {\n    super(props);\n    this.state = { isContextMenuShown: false };\n  }\n\n  public render(): JSX.Element {\n    return (\n      <div>\n        <CommandBar\n          isSearchBoxVisible={ false }\n          items={\n            [\n              {\n                key: 'new',\n                name: 'Add',\n                onRender: this._renderSplitButtonMenuItem,\n                className: 'ms-CommandBarItem',\n                subMenuProps: {\n                  items: [\n                    {\n                      key: 'emailMessage',\n                      name: 'Email message',\n                      icon: 'Mail',\n                      ['data-automation-id']: 'newEmailButton'\n                    },\n                    {\n                      key: 'calendarEvent',\n                      name: 'Calendar event',\n                      icon: 'Calendar',\n                      ['data-automation-id']: 'newCalendarButton'\n                    }\n                  ],\n                },\n              },\n            ]\n          }\n        />\n      </div>\n    );\n  }\n\n  private _renderSplitButtonMenuItem = (item: IContextualMenuItem): JSX.Element => {\n    const darkerBG = this.state.isContextMenuShown && styles.darkerBG;\n\n    const dropDownButtonClass = css(\n      styles.button,\n      darkerBG\n    );\n    const mainBtnClassName = css(\n      !item.name && ('ms-CommandBarItem--noName'),\n      styles.button,\n      darkerBG\n    );\n\n    return (\n      <div>\n        <div\n          className={ css(\n            styles.customButtonContainer,\n            darkerBG\n          ) }\n          ref={ ref => this.container = ref! }\n        >\n          <CommandButton\n            className={ mainBtnClassName }\n            iconProps={ { iconName: 'Add' } }\n            text='New'\n          />\n          <span className={ styles.splitter }>|</span>\n          <CommandButton\n            onClick={ this._onClickChevron }\n            className={ dropDownButtonClass }\n            menuProps={ {\n              className: css('ms-CommandBar-menuHost'),\n              items: item.subMenuProps!.items\n            } }\n          />\n        </div>\n      </div >\n    );\n  }\n\n  private _onClickChevron = (ev: any): void => {\n    ev.stopPropagation();\n    this._toggleDropDownMenuShown(ev);\n  }\n\n  private _toggleDropDownMenuShown = (ev: any): void => {\n    this.setState({\n      isContextMenuShown: !this.state.isContextMenuShown\n    });\n  }\n}\n"]}