{"version":3,"file":"Modal.js","sourceRoot":"../src/","sources":["components/Modal/Modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  css,\n  getId,\n  createRef\n} from '../../Utilities';\nimport { FocusTrapZone, IFocusTrapZone } from '../FocusTrapZone/index';\nimport { IModalProps, IModal } from './Modal.types';\nimport { Overlay } from '../../Overlay';\nimport { Layer } from '../../Layer';\nimport { Popup } from '../Popup/index';\nimport { withResponsiveMode, ResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\nimport * as stylesImport from './Modal.scss';\nconst styles: any = stylesImport;\n\n// @TODO - need to change this to a panel whenever the breakpoint is under medium (verify the spec)\n\nexport interface IDialogState {\n  isOpen?: boolean;\n  isVisible?: boolean;\n  isVisibleClose?: boolean;\n  id?: string;\n}\n\n@withResponsiveMode\nexport class Modal extends BaseComponent<IModalProps, IDialogState> implements IModal {\n\n  public static defaultProps: IModalProps = {\n    isOpen: false,\n    isDarkOverlay: true,\n    isBlocking: false,\n    className: '',\n    containerClassName: '',\n  };\n\n  private _onModalCloseTimer: number;\n  private _focusTrapZone = createRef<IFocusTrapZone>();\n\n  constructor(props: IModalProps) {\n    super(props);\n    this.state = {\n      id: getId('Modal'),\n      isOpen: props.isOpen,\n      isVisible: props.isOpen,\n    };\n  }\n\n  public componentWillReceiveProps(newProps: IModalProps): void {\n    clearTimeout(this._onModalCloseTimer);\n\n    // Opening the dialog\n    if (newProps.isOpen) {\n      if (!this.state.isOpen) {\n        // First Open\n        this.setState({\n          isOpen: true\n        });\n      } else {\n        // Reopen during closing\n        this.setState({\n          isVisible: true\n        });\n      }\n    }\n\n    // Closing the dialog\n    if (!newProps.isOpen && this.state.isOpen) {\n      this._onModalCloseTimer = this._async.setTimeout(this._onModalClose, parseFloat(styles.duration) * 1000);\n      this.setState({\n        isVisible: false\n      });\n    }\n  }\n\n  public componentDidUpdate(prevProps: IModalProps, prevState: IDialogState) {\n    if (!prevProps.isOpen && !prevState.isVisible) {\n      this.setState({\n        isVisible: true\n      });\n    }\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      elementToFocusOnDismiss,\n      firstFocusableSelector,\n      forceFocusInsideTrap,\n      ignoreExternalFocusing,\n      isBlocking,\n      isClickableOutsideFocusTrap,\n      isDarkOverlay,\n      onDismiss,\n      onLayerDidMount,\n      responsiveMode,\n      titleAriaId,\n      subtitleAriaId,\n    } = this.props;\n    const { isOpen, isVisible } = this.state;\n\n    const modalClassName = css(\n      'ms-Modal',\n      styles.root,\n      this.props.className,\n      !!isOpen && 'is-open',\n      !!isVisible && styles.rootIsVisible\n    );\n\n    if (!isOpen) {\n      return null;\n    }\n\n    // @temp tuatology - Will adjust this to be a panel at certain breakpoints\n    if (responsiveMode! >= ResponsiveMode.small) {\n      return (\n        <Layer onLayerDidMount={ onLayerDidMount }>\n          <Popup\n            role={ isBlocking ? 'alertdialog' : 'dialog' }\n            ariaLabelledBy={ titleAriaId }\n            ariaDescribedBy={ subtitleAriaId }\n            onDismiss={ onDismiss }\n          >\n            <div className={ modalClassName }>\n              <Overlay isDarkThemed={ isDarkOverlay } onClick={ isBlocking ? undefined : (onDismiss as any) } />\n              <FocusTrapZone\n                componentRef={ this._focusTrapZone }\n                className={ css('ms-Dialog-main', styles.main, this.props.containerClassName) }\n                elementToFocusOnDismiss={ elementToFocusOnDismiss }\n                isClickableOutsideFocusTrap={ isClickableOutsideFocusTrap ? isClickableOutsideFocusTrap : !isBlocking }\n                ignoreExternalFocusing={ ignoreExternalFocusing }\n                forceFocusInsideTrap={ forceFocusInsideTrap }\n                firstFocusableSelector={ firstFocusableSelector }\n              >\n                { this.props.children }\n              </FocusTrapZone>\n            </div>\n          </Popup>\n        </Layer>\n      );\n    }\n    return null;\n  }\n\n  public focus() {\n    if (this._focusTrapZone.current) {\n      this._focusTrapZone.current.focus();\n    }\n  }\n\n  // Watch for completed animations and set the state\n  private _onModalClose(): void {\n    this.setState({\n      isOpen: false\n    });\n\n    // Call the onDismiss callback\n    if (this.props.onDismissed) {\n      this.props.onDismissed();\n    }\n  }\n}\n"]}