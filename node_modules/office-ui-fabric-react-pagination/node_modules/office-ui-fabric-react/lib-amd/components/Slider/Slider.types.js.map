{"version":3,"file":"Slider.types.js","sourceRoot":"../src/","sources":["components/Slider/Slider.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { SliderBase } from './Slider.base';\nimport { IStyle, ITheme } from '../../Styling';\nimport { IStyleFunction } from '../../Utilities';\n\nexport interface ISlider {\n  value: number | undefined;\n\n  focus: () => void;\n}\n\nexport interface ISliderProps extends React.Props<SliderBase> {\n  /**\n   * Optional callback to access the ISlider interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: ISlider | null) => void;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  getStyles?: IStyleFunction<ISliderStyleProps, ISliderStyles>;\n\n  /**\n   * Theme provided by High-Order Component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Description label of the Slider\n   */\n  label?: string;\n\n  /**\n   * The initial value of the Slider. Use this if you intend for the Slider to be an uncontrolled component.\n   * This value is mutually exclusive to value. Use one or the other.\n   */\n  defaultValue?: number;\n\n  /**\n   * The initial value of the Slider. Use this if you intend to pass in a new value as a result of onChange events.\n   * This value is mutually exclusive to defaultValue. Use one or the other.\n   */\n  value?: number;\n\n  /**\n   * The min value of the Slider\n   * @default 0\n   */\n  min?: number;\n\n  /**\n   * The max value of the Slider\n   * @default 10\n   */\n  max?: number;\n\n  /**\n   * The difference between the two adjacent values of the Slider\n   * @default 1\n   */\n  step?: number;\n\n  /**\n   * Whether to show the value on the right of the Slider.\n   * @default true\n   */\n  showValue?: boolean;\n\n  /**\n   * Callback when the value has been changed\n   */\n  onChange?: (value: number) => void;\n\n  /**\n   * A description of the Slider for the benefit of screen readers.\n   */\n  ariaLabel?: string;\n\n  /**\n   * A text description of the Slider number value for the benefit of screen readers. This should be used when the Slider number value is not accurately represented by a number.\n   */\n  ariaValueText?: (value: number) => string;\n  /**\n   * Optional flag to render the slider vertically. Defaults to rendering horizontal.\n   */\n  vertical?: boolean;\n\n  /**\n   * Optional flag to render the Slider as disabled.\n   */\n  disabled?: boolean;\n\n  /**\n  * Optional className to attach to the slider root element.\n  */\n  className?: string;\n\n  /**\n   * Optional mixin for additional props on the thumb button within the slider.\n   */\n  buttonProps?: React.HTMLAttributes<HTMLButtonElement>;\n}\n\nexport interface ISliderStyleProps {\n  /**\n   * Theme provided by High-Order Component.\n   */\n  theme: ITheme;\n  /**\n   * Accept custom classNames.\n   */\n  className?: string;\n  titleLabel?: string;\n  rootIsEnabled?: boolean;\n  rootIsDisabled?: boolean;\n  rootIsHorizontal?: boolean;\n  rootIsVertical?: boolean;\n  showTransitions?: boolean;\n}\n\nexport interface ISliderStyles {\n  root: IStyle;\n  container: IStyle;\n  slideBox: IStyle;\n  line: IStyle;\n  thumb: IStyle;\n  lineContainer: IStyle;\n  activeSection: IStyle;\n  inactiveSection: IStyle;\n  valueLabel: IStyle;\n}"]}