{"version":3,"file":"TooltipHost.js","sourceRoot":"../src/","sources":["components/Tooltip/TooltipHost.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  css,\n  divProperties,\n  getNativeProps,\n  getId,\n  assign,\n  hasOverflow,\n  createRef\n} from '../../Utilities';\nimport { ITooltipHostProps, TooltipOverflowMode } from './TooltipHost.types';\nimport { Tooltip } from './Tooltip';\nimport { TooltipDelay } from './Tooltip.types';\n\nimport * as stylesImport from './TooltipHost.scss';\nconst styles: any = stylesImport;\n\nexport interface ITooltipHostState {\n  isTooltipVisible: boolean;\n}\n\nexport class TooltipHost extends BaseComponent<ITooltipHostProps, ITooltipHostState> {\n  public static defaultProps = {\n    delay: TooltipDelay.medium\n  };\n\n  // The wrapping div that gets the hover events\n  private _tooltipHost = createRef<HTMLDivElement>();\n\n  // The ID of the setTimeout that will eventually close the tooltip if the\n  // the tooltip isn't hovered over.\n  private _closingTimer = -1;\n\n  // Constructor\n  constructor(props: ITooltipHostProps) {\n    super(props);\n\n    this.state = {\n      isTooltipVisible: false\n    };\n  }\n\n  // Render\n  public render(): JSX.Element {\n    const {\n      calloutProps,\n      children,\n      content,\n      delay,\n      directionalHint,\n      directionalHintForRTL,\n      hostClassName,\n      id,\n      setAriaDescribedBy = true,\n      tooltipProps\n    } = this.props;\n    const { isTooltipVisible } = this.state;\n    const tooltipId = id || getId('tooltip');\n    const isContentPresent = !!(content || (tooltipProps && tooltipProps.onRenderContent && tooltipProps.onRenderContent()));\n    const showTooltip = isTooltipVisible && isContentPresent;\n\n    return (\n      <div\n        className={ css('ms-TooltipHost',\n          styles.host,\n          hostClassName\n        ) }\n        ref={ this._tooltipHost }\n        { ...{ onFocusCapture: this._onTooltipMouseEnter } }\n        { ...{ onBlurCapture: this._hideTooltip } }\n        onMouseEnter={ this._onTooltipMouseEnter }\n        onMouseLeave={ this._onTooltipMouseLeave }\n        aria-describedby={ setAriaDescribedBy && isTooltipVisible && content ? tooltipId : undefined }\n      >\n        { children }\n        { showTooltip && (\n          <Tooltip\n            id={ tooltipId }\n            delay={ delay }\n            content={ content }\n            targetElement={ this._getTargetElement() }\n            directionalHint={ directionalHint }\n            directionalHintForRTL={ directionalHintForRTL }\n            calloutProps={ assign({},\n              calloutProps, {\n                onMouseEnter: this._onTooltipMouseEnter,\n                onMouseLeave: this._onTooltipMouseLeave\n              }) }\n            onMouseEnter={ this._onTooltipMouseEnter }\n            onMouseLeave={ this._onTooltipMouseLeave }\n            { ...getNativeProps(this.props, divProperties) }\n            { ...tooltipProps }\n          />\n        ) }\n      </div>\n    );\n  }\n\n  private _getTargetElement(): HTMLElement | undefined {\n    if (!this._tooltipHost.current) {\n      return undefined;\n    }\n\n    const { overflowMode } = this.props;\n\n    // Select target element based on overflow mode. For parent mode, you want to position the tooltip relative\n    // to the parent element, otherwise it might look off.\n    if (overflowMode !== undefined) {\n      switch (overflowMode) {\n        case TooltipOverflowMode.Parent:\n          return this._tooltipHost.current.parentElement!;\n\n        case TooltipOverflowMode.Self:\n          return this._tooltipHost.current;\n      }\n    }\n\n    return this._tooltipHost.current;\n  }\n\n  // Show Tooltip\n  private _onTooltipMouseEnter = (ev: any): void => {\n    const { overflowMode } = this.props;\n\n    if (overflowMode !== undefined) {\n      const overflowElement = this._getTargetElement();\n      if (overflowElement && !hasOverflow(overflowElement)) {\n        return;\n      }\n    }\n\n    this._toggleTooltip(true);\n    this._clearDismissTimer();\n  }\n\n  // Hide Tooltip\n  private _onTooltipMouseLeave = (ev: any): void => {\n    if (this.props.closeDelay) {\n      this._clearDismissTimer();\n\n      this._closingTimer = this._async.setTimeout(() => {\n        this._toggleTooltip(false);\n      }, this.props.closeDelay);\n    } else {\n      this._toggleTooltip(false);\n    }\n  }\n\n  private _clearDismissTimer = (): void => {\n    this._async.clearTimeout(this._closingTimer);\n  }\n\n  // Hide Tooltip\n  private _hideTooltip = (): void => {\n    this._toggleTooltip(false);\n  }\n\n  private _toggleTooltip(isTooltipVisible: boolean): void {\n    if (this.state.isTooltipVisible !== isTooltipVisible) {\n      this.setState(\n        { isTooltipVisible },\n        () => this.props.onTooltipToggle &&\n          this.props.onTooltipToggle(this.state.isTooltipVisible));\n    }\n  }\n}\n"]}