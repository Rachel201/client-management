{"version":3,"file":"Link.types.js","sourceRoot":"../src/","sources":["components/Link/Link.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { LinkBase } from './Link.base';\n\nimport {\n  IStyle,\n  ITheme\n} from '../../Styling';\nimport { IStyleFunction } from '../../Utilities';\nimport { IKeytipProps } from '../../Keytip';\n\nexport interface ILink {\n  /** Sets focus to the link. */\n  focus(): void;\n}\n\nexport interface ILinkProps extends React.AllHTMLAttributes<HTMLAnchorElement | HTMLButtonElement | HTMLElement | LinkBase> {\n  /**\n   * Optional callback to access the ILink interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: ILink | null) => void;\n\n  /**\n   * Whether the link is disabled\n   */\n  disabled?: boolean;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  getStyles?: IStyleFunction<ILinkStyleProps, ILinkStyles>;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Optional keytip for this Link\n   */\n  keytipProps?: IKeytipProps;\n}\n\nexport interface ILinkStyleProps {\n  className?: string;\n  isButton?: boolean;\n  isDisabled?: boolean;\n  theme: ITheme;\n}\n\nexport interface ILinkStyles {\n  root: IStyle;\n}"]}