{"version":3,"file":"Link.base.js","sourceRoot":"../src/","sources":["components/Link/Link.base.tsx"],"names":[],"mappings":";;;IAkBA,IAAM,aAAa,GAAG,8BAAkB,EAAgC,CAAC;IAGzE;QAA8B,oCAA8B;QAD5D;YAAA,qEA8EC;YA5ES,WAAK,GAAG,qBAAS,EAAgD,CAAC;YAmElE,cAAQ,GAAG,UAAC,EAA2D;gBACvE,IAAA,gBAAkC,EAAhC,oBAAO,EAAE,sBAAQ,CAAgB;gBAEzC,IAAI,QAAQ,EAAE;oBACZ,EAAE,CAAC,cAAc,EAAE,CAAC;iBACrB;qBAAM,IAAI,OAAO,EAAE;oBAClB,OAAO,CAAC,EAAE,CAAC,CAAC;iBACb;YACH,CAAC,CAAA;;QACH,CAAC;QA1EQ,yBAAM,GAAb;YAAA,iBAyDC;YAxDO,IAAA,eAAmF,EAAjF,sBAAQ,EAAE,sBAAQ,EAAE,wBAAS,EAAE,cAAI,EAAE,gBAAK,EAAE,wBAAS,EAAE,4BAAW,CAAgB;YAE1F,IAAM,UAAU,GAAG,aAAa,CAAC,SAAU,EAAE;gBAC3C,SAAS,WAAA;gBACT,QAAQ,EAAE,CAAC,IAAI;gBACf,UAAU,EAAE,QAAQ;gBACpB,KAAK,EAAE,KAAM;aACd,CAAC,CAAC;YAEH,IAAM,iBAAiB,GAAG,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,4BAAgB,CAAC,CAAC;YACvE,IAAM,iBAAiB,GAAG,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,4BAAgB,CAAC,CAAC;YAEvE,IAAM,aAAa,GAAgB,CACjC,oBAAC,uBAAU,IACT,WAAW,EAAG,WAAW,EACzB,eAAe,EAAI,iBAAyB,CAAC,kBAAkB,CAAC,EAChE,QAAQ,EAAG,QAAQ,IAEjB,UAAC,gBAAqB,IAAkB,OAAA,CACxC,8CACO,iBAAiB,EACjB,gBAAgB,IACrB,SAAS,EAAG,UAAU,CAAC,IAAI,EAC3B,OAAO,EAAG,KAAI,CAAC,QAAQ,EACvB,GAAG,EAAG,KAAI,CAAC,KAAK,EAChB,MAAM,EAAG,KAAI,CAAC,KAAK,CAAC,MAAM,mBACV,QAAQ,KAEtB,QAAQ,CACR,CACL,EAZyC,CAYzC,CACU,CACd,CAAC;YAEF,IAAM,aAAa,GAAgB,CACjC,oBAAC,uBAAU,IACT,WAAW,EAAG,WAAW,EACzB,eAAe,EAAI,iBAAyB,CAAC,kBAAkB,CAAC,EAChE,QAAQ,EAAG,QAAQ,IAEjB,UAAC,gBAAqB,IAAkB,OAAA,CACxC,mDACO,iBAAiB,EACjB,gBAAgB,IACrB,SAAS,EAAG,UAAU,CAAC,IAAI,EAC3B,OAAO,EAAG,KAAI,CAAC,QAAQ,EACvB,GAAG,EAAG,KAAI,CAAC,KAAK,mBACA,QAAQ,KAEtB,QAAQ,CACH,CACV,EAXyC,CAWzC,CACU,CACd,CAAC;YAEF,OAAO,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC;QAC9C,CAAC;QAEM,wBAAK,GAAZ;YACE,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;gBACtB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;aAC5B;QACH,CAAC;QAlEU,QAAQ;YADpB,wBAAY,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;WAChC,QAAQ,CA6EpB;QAAD,eAAC;KAAA,AA7ED,CAA8B,yBAAa,GA6E1C;IA7EY,4BAAQ","sourcesContent":["import * as React from 'react';\nimport {\n  anchorProperties,\n  BaseComponent,\n  buttonProperties,\n  classNamesFunction,\n  customizable,\n  getNativeProps,\n  createRef\n} from '../../Utilities';\nimport {\n  ILink,\n  ILinkProps,\n  ILinkStyleProps,\n  ILinkStyles\n} from './Link.types';\nimport { KeytipData } from '../../KeytipData';\n\nconst getClassNames = classNamesFunction<ILinkStyleProps, ILinkStyles>();\n\n@customizable('Link', ['theme', 'getStyles'])\nexport class LinkBase extends BaseComponent<ILinkProps, any> implements ILink {\n  private _link = createRef<HTMLAnchorElement | HTMLButtonElement | null>();\n\n  public render(): JSX.Element {\n    const { disabled, children, className, href, theme, getStyles, keytipProps } = this.props;\n\n    const classNames = getClassNames(getStyles!, {\n      className,\n      isButton: !href,\n      isDisabled: disabled,\n      theme: theme!\n    });\n\n    const anchorNativeProps = getNativeProps(this.props, anchorProperties);\n    const buttonNativeProps = getNativeProps(this.props, buttonProperties);\n\n    const anchorElement: JSX.Element = (\n      <KeytipData\n        keytipProps={ keytipProps }\n        ariaDescribedBy={ (anchorNativeProps as any)['aria-describedby'] }\n        disabled={ disabled }\n      >\n        { (keytipAttributes: any): JSX.Element => (\n          <a\n            { ...anchorNativeProps }\n            { ...keytipAttributes }\n            className={ classNames.root }\n            onClick={ this._onClick }\n            ref={ this._link }\n            target={ this.props.target }\n            aria-disabled={ disabled }\n          >\n            { children }\n          </a>\n        ) }\n      </KeytipData>\n    );\n\n    const buttonElement: JSX.Element = (\n      <KeytipData\n        keytipProps={ keytipProps }\n        ariaDescribedBy={ (buttonNativeProps as any)['aria-describedby'] }\n        disabled={ disabled }\n      >\n        { (keytipAttributes: any): JSX.Element => (\n          <button\n            { ...buttonNativeProps }\n            { ...keytipAttributes }\n            className={ classNames.root }\n            onClick={ this._onClick }\n            ref={ this._link }\n            aria-disabled={ disabled }\n          >\n            { children }\n          </button>\n        ) }\n      </KeytipData>\n    );\n\n    return href ? anchorElement : buttonElement;\n  }\n\n  public focus() {\n    if (this._link.current) {\n      this._link.current.focus();\n    }\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    const { onClick, disabled } = this.props;\n\n    if (disabled) {\n      ev.preventDefault();\n    } else if (onClick) {\n      onClick(ev);\n    }\n  }\n}\n"]}