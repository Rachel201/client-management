{"version":3,"file":"Popup.js","sourceRoot":"../src/","sources":["components/Popup/Popup.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  KeyCodes,\n  divProperties,\n  doesElementContainFocus,\n  getDocument,\n  getNativeProps,\n  createRef\n} from '../../Utilities';\nimport { IPopupProps } from './Popup.types';\n\nexport interface IPopupState {\n  needsVerticalScrollBar?: boolean;\n}\n\n/**\n * This adds accessibility to Dialog and Panel controls\n */\nexport class Popup extends BaseComponent<IPopupProps, IPopupState> {\n\n  public static defaultProps: IPopupProps = {\n    shouldRestoreFocus: true\n  };\n\n  public _root = createRef<HTMLDivElement>();\n\n  private _originalFocusedElement: HTMLElement;\n  private _containsFocus: boolean;\n\n  public constructor(props: IPopupProps) {\n    super(props);\n    this.state = { needsVerticalScrollBar: false };\n  }\n\n  public componentWillMount(): void {\n    this._originalFocusedElement = getDocument()!.activeElement as HTMLElement;\n  }\n\n  public componentDidMount(): void {\n    if (!this._root.current) {\n      return;\n    }\n\n    this._events.on(this._root.current, 'focus', this._onFocus, true);\n    this._events.on(this._root.current, 'blur', this._onBlur, true);\n\n    if (doesElementContainFocus(this._root.current)) {\n      this._containsFocus = true;\n    }\n\n    this._updateScrollBarAsync();\n  }\n\n  public componentDidUpdate() {\n    this._updateScrollBarAsync();\n  }\n\n  public componentWillUnmount(): void {\n    if (\n      this.props.shouldRestoreFocus &&\n      this._originalFocusedElement &&\n      this._containsFocus &&\n      this._originalFocusedElement as any !== window) {\n      // This slight delay is required so that we can unwind the stack, let react try to mess with focus, and then\n      // apply the correct focus. Without the setTimeout, we end up focusing the correct thing, and then React wants\n      // to reset the focus back to the thing it thinks should have been focused.\n      if (this._originalFocusedElement) {\n        this._originalFocusedElement.focus();\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const { role, className, ariaLabel, ariaLabelledBy, ariaDescribedBy, style } = this.props;\n\n    return (\n      <div\n        ref={ this._root }\n        { ...getNativeProps(this.props, divProperties) }\n        className={ className }\n        role={ role }\n        aria-label={ ariaLabel }\n        aria-labelledby={ ariaLabelledBy }\n        aria-describedby={ ariaDescribedBy }\n        onKeyDown={ this._onKeyDown }\n        style={ { overflowY: this.state.needsVerticalScrollBar ? 'scroll' : undefined, ...style } }\n      >\n        { this.props.children }\n      </div>\n    );\n  }\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    switch (ev.which) {\n      case KeyCodes.escape:\n\n        if (this.props.onDismiss) {\n          this.props.onDismiss(ev);\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n\n        break;\n    }\n  }\n\n  private _updateScrollBarAsync(): void {\n    this._async.requestAnimationFrame(() => {\n      this._getScrollBar();\n    });\n  }\n\n  private _getScrollBar(): void {\n    // If overflowY is overriden, don't waste time calculating whether the scrollbar is necessary.\n    if (this.props.style && this.props.style.overflowY) {\n      return;\n    }\n\n    let needsVerticalScrollBar = false;\n    if (this._root && this._root.current && this._root.current.firstElementChild) {\n      // ClientHeight returns the client height of an element rounded to an\n      // integer. On some browsers at different zoom levels this rounding\n      // can generate different results for the root container and child even\n      // though they are the same height. This causes us to show a scroll bar\n      // when not needed. Ideally we would use BoundingClientRect().height\n      // instead however seems that the API is 90% slower than using ClientHeight.\n      // Therefore instead we will calculate the difference between heights and\n      // allow for a 1px difference to still be considered ok and not show the\n      // scroll bar.\n      const rootHeight = this._root.current.clientHeight;\n      const firstChildHeight = this._root.current.firstElementChild.clientHeight;\n      if (rootHeight > 0 && firstChildHeight > rootHeight) {\n        needsVerticalScrollBar = (firstChildHeight - rootHeight) > 1;\n      }\n    }\n    if (this.state.needsVerticalScrollBar !== needsVerticalScrollBar) {\n      this.setState({\n        needsVerticalScrollBar: needsVerticalScrollBar\n      });\n    }\n  }\n\n  private _onFocus(): void {\n    this._containsFocus = true;\n  }\n\n  private _onBlur(ev: React.FocusEvent<HTMLElement>): void {\n    if (this._root.value && this._root.value.contains(ev.relatedTarget as HTMLElement)) {\n      this._containsFocus = false;\n    }\n  }\n}\n"]}