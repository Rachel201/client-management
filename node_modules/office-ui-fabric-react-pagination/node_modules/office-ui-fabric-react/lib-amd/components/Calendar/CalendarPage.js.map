{"version":3,"file":"CalendarPage.js","sourceRoot":"../src/","sources":["components/Calendar/CalendarPage.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ComponentPage,\n  ExampleCard,\n  IComponentDemoPageProps,\n  PropertiesTableSet,\n  PageMarkdown,\n} from '@uifabric/example-app-base';\nimport { DateRangeType, DayOfWeek } from 'office-ui-fabric-react/lib/Calendar';\nimport { CalendarButtonExample } from './examples/Calendar.Button.Example';\nimport { CalendarInlineExample } from './examples/Calendar.Inline.Example';\nimport { ComponentStatus } from '../../demo/ComponentStatus/ComponentStatus';\nimport { CalendarStatus } from './Calendar.checklist';\nimport { addMonths, addYears } from '../../utilities/dateMath/DateMath';\n\nconst CalendarButtonExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Calendar/examples/Calendar.Button.Example.tsx') as string;\nconst CalendarInlineExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Calendar/examples/Calendar.Inline.Example.tsx') as string;\n\nexport class CalendarPage extends React.Component<IComponentDemoPageProps, any> {\n  public render(): JSX.Element {\n    const today = new Date(Date.now());\n    return (\n      <ComponentPage\n        title='Calendar'\n        componentName='CalendarExample'\n        componentUrl='https://github.com/OfficeDev/office-ui-fabric-react/tree/master/packages/office-ui-fabric-react/src/components/Calendar'\n        exampleCards={\n          <div>\n            <ExampleCard title='Inline Calendar' code={ CalendarInlineExampleCode }>\n              <CalendarInlineExample\n                isMonthPickerVisible={ false }\n                dateRangeType={ DateRangeType.Day }\n                autoNavigateOnSelection={ false }\n                showGoToToday={ true }\n              />\n            </ExampleCard>\n            <ExampleCard\n              title='Inline Calendar with overlayed month picker when header is clicked'\n              code={ CalendarInlineExampleCode }\n            >\n              <CalendarInlineExample\n                showMonthPickerAsOverlay={ true }\n                highlightCurrentMonth={ false }\n                highlightSelectedMonth={ true }\n                dateRangeType={ DateRangeType.Day }\n                autoNavigateOnSelection={ false }\n                showGoToToday={ false }\n              />\n            </ExampleCard>\n            <ExampleCard\n              title='Inline Calendar with month picker'\n              code={ CalendarInlineExampleCode }\n            >\n              <CalendarInlineExample\n                dateRangeType={ DateRangeType.Day }\n                autoNavigateOnSelection={ false }\n                highlightCurrentMonth={ false }\n                highlightSelectedMonth={ true }\n                showGoToToday={ true }\n              />\n            </ExampleCard>\n            <ExampleCard\n              title='Inline Calendar with week selection'\n              code={ CalendarInlineExampleCode }\n            >\n              <CalendarInlineExample\n                dateRangeType={ DateRangeType.Week }\n                autoNavigateOnSelection={ true }\n                highlightCurrentMonth={ false }\n                highlightSelectedMonth={ true }\n                showGoToToday={ true }\n                showNavigateButtons={ true }\n              />\n            </ExampleCard>\n            <ExampleCard\n              title='Inline Calendar with month selection'\n              code={ CalendarInlineExampleCode }\n            >\n              <CalendarInlineExample\n                dateRangeType={ DateRangeType.Month }\n                autoNavigateOnSelection={ true }\n                highlightCurrentMonth={ false }\n                highlightSelectedMonth={ true }\n                showGoToToday={ true }\n                showNavigateButtons={ true }\n              />\n            </ExampleCard>\n            <ExampleCard title='Inline Calendar with week numbers' code={ CalendarInlineExampleCode }>\n              <CalendarInlineExample\n                isMonthPickerVisible={ false }\n                dateRangeType={ DateRangeType.Day }\n                autoNavigateOnSelection={ false }\n                showGoToToday={ true }\n                showWeekNumbers={ true }\n              />\n            </ExampleCard>\n            <ExampleCard title='Inline Calendar with 6 weeks display by default' code={ CalendarInlineExampleCode }>\n              <CalendarInlineExample\n                isMonthPickerVisible={ false }\n                dateRangeType={ DateRangeType.Day }\n                autoNavigateOnSelection={ false }\n                showGoToToday={ true }\n                showSixWeeksByDefault={ true }\n              />\n            </ExampleCard>\n            <ExampleCard title='Inline Calendar with month picker and no day picker' code={ CalendarInlineExampleCode }>\n              <CalendarInlineExample\n                dateRangeType={ DateRangeType.Month }\n                autoNavigateOnSelection={ false }\n                showGoToToday={ true }\n                highlightCurrentMonth={ false }\n                highlightSelectedMonth={ true }\n                isDayPickerVisible={ false }\n              />\n            </ExampleCard>\n            <ExampleCard\n              title='Inline Calendar with date boundary (minDate, maxDate)'\n              code={ CalendarInlineExampleCode }\n            >\n              <CalendarInlineExample\n                dateRangeType={ DateRangeType.Day }\n                autoNavigateOnSelection={ true }\n                highlightCurrentMonth={ false }\n                highlightSelectedMonth={ true }\n                showGoToToday={ false }\n                minDate={ addMonths(today, -1) }\n                maxDate={ addYears(today, 1) }\n              />\n            </ExampleCard>\n            <ExampleCard\n              title='Calendar with selectableDays = [Tuesday, Wednesday, Friday, Saturday] provided, first day of week = Monday'\n              code={ CalendarButtonExampleCode }\n            >\n              <CalendarInlineExample\n                dateRangeType={ DateRangeType.WorkWeek }\n                firstDayOfWeek={ DayOfWeek.Monday }\n                autoNavigateOnSelection={ true }\n                highlightCurrentMonth={ false }\n                highlightSelectedMonth={ true }\n                showGoToToday={ true }\n                workWeekDays={ [DayOfWeek.Tuesday, DayOfWeek.Saturday, DayOfWeek.Wednesday, DayOfWeek.Friday] }\n              />\n            </ExampleCard>\n            <ExampleCard\n              title='Calendar launched from a button'\n              code={ CalendarButtonExampleCode }\n            >\n              <CalendarButtonExample\n                highlightCurrentMonth={ true }\n              />\n            </ExampleCard>\n            <ExampleCard\n              title='Month picker launched from a button'\n              code={ CalendarButtonExampleCode }\n            >\n              <CalendarButtonExample\n                isDayPickerVisible={ false }\n                highlightCurrentMonth={ false }\n                highlightSelectedMonth={ true }\n                buttonString={ 'Click for Month Picker' }\n              />\n            </ExampleCard>\n            <ExampleCard\n              title='Calendar with overlayed month picker launched from a button'\n              code={ CalendarButtonExampleCode }\n            >\n              <CalendarButtonExample\n                showMonthPickerAsOverlay={ true }\n                highlightCurrentMonth={ false }\n                highlightSelectedMonth={ true }\n                buttonString={ 'Click for Overlayed Day Picker and Month Picker' }\n              />\n            </ExampleCard>\n          </div>\n        }\n        propertiesTables={\n          <PropertiesTableSet\n            sources={ [\n              require<string>('!raw-loader!office-ui-fabric-react/src/components/Calendar/Calendar.types.ts')\n            ] }\n          />\n        }\n        overview={\n          <PageMarkdown>\n            { require<string>('!raw-loader!office-ui-fabric-react/src/components/Calendar/docs/CalendarOverview.md') }\n          </PageMarkdown>\n        }\n        bestPractices={\n          <div />\n        }\n        dos={\n          <PageMarkdown>\n            { require<string>('!raw-loader!office-ui-fabric-react/src/components/Calendar/docs/CalendarDos.md') }\n          </PageMarkdown>\n        }\n        donts={\n          <PageMarkdown>\n            { require<string>('!raw-loader!office-ui-fabric-react/src/components/Calendar/docs/CalendarDonts.md') }\n          </PageMarkdown>\n        }\n        isHeaderVisible={ this.props.isHeaderVisible }\n        componentStatus={\n          <ComponentStatus\n            { ...CalendarStatus }\n          />\n        }\n      />\n    );\n  }\n\n}\n"]}