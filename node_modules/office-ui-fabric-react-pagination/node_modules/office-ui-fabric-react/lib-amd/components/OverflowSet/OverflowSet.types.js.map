{"version":3,"file":"OverflowSet.types.js","sourceRoot":"../src/","sources":["components/OverflowSet/OverflowSet.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { OverflowSet } from './OverflowSet';\nimport { IRenderFunction } from '../../Utilities';\nimport { IFocusZoneProps } from '../../FocusZone';\nimport { IKeytipProps } from '../../Keytip';\n\nexport interface IOverflowSet {\n  /**\n   * Sets focus to the first tabbable item in the zone.\n   * @param {boolean} forceIntoFirstElement If true, focus will be forced into the first element, even if focus is already in the focus zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  focus(forceIntoFirstElement?: boolean): boolean;\n\n  /**\n   * Sets focus to a specific child element within the zone. This can be used in conjunction with\n   * onBeforeFocus to created delayed focus scenarios (like animate the scroll position to the correct\n   * location and then focus.)\n   * @param {HTMLElement} childElement The child element within the zone to focus.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  focusElement(childElement?: HTMLElement): boolean;\n}\n\nexport interface IOverflowSetProps extends React.Props<OverflowSet> {\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: (ref?: IOverflowSet | null) => void;\n\n  /**\n   * Class name\n   */\n  className?: string;\n\n  /**\n   * An array of items to be rendered by your onRenderItem function in the primary content area\n  */\n  items?: IOverflowSetItemProps[];\n\n  /**\n   * Change item layout direction to vertical/stacked.\n   * @default false\n  */\n  vertical?: boolean;\n\n  /**\n   * An array of items to be passed to overflow contextual menu\n  */\n  overflowItems?: IOverflowSetItemProps[];\n\n  /**\n   * Method to call when trying to render an item.\n  */\n  onRenderItem: (item: IOverflowSetItemProps) => any;\n\n  /**\n   * Rendering method for overflow button and contextual menu. The argument to the function is\n   * the overflowItems passed in as props to this function.\n  */\n  onRenderOverflowButton: IRenderFunction<any[]>;\n\n  /**\n   * Custom properties for OverflowSet's FocusZone.\n   * If doNotContainWithinFocusZone is set to true focusZoneProps will be ignored.\n   * Use one or the other.\n   */\n  focusZoneProps?: IFocusZoneProps;\n\n  /**\n   * If true do not contain the OverflowSet inside of a FocusZone,\n   * otherwise the OverflowSet will contain a FocusZone.\n   * If this is set to true focusZoneProps will be ignored.\n   * Use one or the other.\n   */\n  doNotContainWithinFocusZone?: boolean;\n\n  /**\n   * The role for the OverflowSet.\n   * @default 'menubar'\n   */\n  role?: string;\n\n  /**\n   * Optional full keytip sequence for the overflow button, if it will have a keytip.\n   */\n  keytipSequences?: string[];\n\n  /**\n   * Function that will take in an IOverflowSetItemProps and return the subMenu for that item.\n   * If not provided, will use 'item.subMenuProps.items' by default.\n   * This is only used if your overflow set has keytips.\n   */\n  itemSubMenuProvider?: (item: IOverflowSetItemProps) => any[] | undefined;\n}\n\nexport interface IOverflowSetItemProps {\n  /**\n   * Unique id to identify the item.\n   */\n  key: string;\n\n  /**\n   * Optional keytip for the overflowSetItem.\n   */\n  keytipProps?: IKeytipProps;\n\n  /**\n   * Any additional properties to use when custom rendering menu items.\n   */\n  [propertyName: string]: any;\n}"]}