{"version":3,"file":"OverflowSet.js","sourceRoot":"../src/","sources":["components/OverflowSet/OverflowSet.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  css,\n  BaseComponent,\n  createRef,\n  getNativeProps,\n  divProperties,\n  focusFirstChild,\n  elementContains\n} from '../../Utilities';\nimport { mergeStyles } from '../../Styling';\nimport { IOverflowSet, IOverflowSetProps, IOverflowSetItemProps } from './OverflowSet.types';\nimport { IFocusZone, FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nimport { IKeytipProps } from '../../Keytip';\nimport * as stylesImport from './OverflowSet.scss';\n\nconst styles: any = stylesImport;\n\nexport class OverflowSet extends BaseComponent<IOverflowSetProps, {}> implements IOverflowSet {\n\n  private _focusZone = createRef<IFocusZone>();\n  private _persistedKeytips: { [uniqueID: string]: IKeytipProps } = {};\n  private _keytipManager: KeytipManager = KeytipManager.getInstance();\n  private _divContainer = createRef<HTMLDivElement>();\n\n  constructor(props: IOverflowSetProps) {\n    super(props);\n\n    if (props.doNotContainWithinFocusZone) {\n      this._warnMutuallyExclusive({\n        'doNotContainWithinFocusZone': 'focusZoneProps'\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      items,\n      overflowItems,\n      className,\n      focusZoneProps,\n      vertical = false,\n      role = 'menubar',\n      doNotContainWithinFocusZone\n    } = this.props;\n\n    let Tag;\n    let uniqueComponentProps;\n\n    if (doNotContainWithinFocusZone) {\n      Tag = 'div';\n      uniqueComponentProps = {\n        ...getNativeProps(this.props, divProperties),\n        ref: this._divContainer\n      };\n    } else {\n      Tag = FocusZone;\n      uniqueComponentProps = {\n        ...getNativeProps(this.props, divProperties),\n        ...focusZoneProps,\n        componentRef: this._focusZone,\n        direction: vertical ? FocusZoneDirection.vertical : FocusZoneDirection.horizontal\n      };\n    }\n\n    return (\n      <Tag\n        { ...uniqueComponentProps }\n        className={ mergeStyles(\n          'ms-OverflowSet',\n          styles.root,\n          vertical && styles.rootVertical,\n          className\n        ) }\n        role={ role }\n      >\n        { items && this._onRenderItems(items) }\n        { overflowItems && overflowItems.length > 0 && this._onRenderOverflowButtonWrapper(overflowItems) }\n      </Tag>\n    );\n  }\n\n  /**\n   * Sets focus to the first tabbable item in the OverflowSet.\n   * @param {boolean} forceIntoFirstElement If true, focus will be forced into the first element,\n   * even if focus is already in theOverflowSet\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  public focus(forceIntoFirstElement?: boolean): boolean {\n    let focusSucceeded = false;\n\n    if (this.props.doNotContainWithinFocusZone) {\n      if (this._divContainer.current) {\n        focusSucceeded = focusFirstChild(this._divContainer.current);\n      }\n    } else if (this._focusZone.current) {\n      focusSucceeded = this._focusZone.current.focus(forceIntoFirstElement);\n    }\n\n    return focusSucceeded;\n  }\n\n  /**\n   * Sets focus to a specific child element within the OverflowSet.\n   * @param {HTMLElement} childElement The child element within the zone to focus.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  public focusElement(childElement?: HTMLElement): boolean {\n    let focusSucceeded = false;\n\n    if (!childElement) {\n      return false;\n    }\n\n    if (this.props.doNotContainWithinFocusZone) {\n      if (this._divContainer.current && elementContains(this._divContainer.current, childElement)) {\n        childElement.focus();\n        focusSucceeded = document.activeElement === childElement;\n      }\n    } else if (this._focusZone.current) {\n      focusSucceeded = this._focusZone.current.focusElement(childElement);\n    }\n\n    return focusSucceeded;\n  }\n\n  // Add keytip register/unregister handlers to lifecycle functions to correctly manage persisted keytips\n  public componentDidMount() {\n    this._registerPersistedKeytips();\n  }\n\n  public componentWillUnmount() {\n    this._unregisterPersistedKeytips();\n  }\n\n  public componentWillUpdate() {\n    this._unregisterPersistedKeytips();\n  }\n\n  public componentDidUpdate() {\n    this._registerPersistedKeytips();\n  }\n\n  private _registerPersistedKeytips() {\n    Object.keys(this._persistedKeytips).forEach((key: string) => {\n      const keytip = this._persistedKeytips[key];\n      const uniqueID = this._keytipManager.register(keytip, true);\n      // Update map\n      this._persistedKeytips[uniqueID] = keytip;\n      delete this._persistedKeytips[key];\n    });\n  }\n\n  private _unregisterPersistedKeytips() {\n    // Delete all persisted keytips saved\n    Object.keys(this._persistedKeytips).forEach((uniqueID: string) => {\n      this._keytipManager.unregister(this._persistedKeytips[uniqueID], uniqueID, true);\n    });\n    this._persistedKeytips = {};\n  }\n\n  private _onRenderItems = (items: IOverflowSetItemProps[]): JSX.Element[] => {\n    return items.map((item, i) => {\n      const wrapperDivProps: React.HTMLProps<HTMLDivElement> = { className: css('ms-OverflowSet-item', styles.item) };\n      return (\n        <div key={ item.key } { ...wrapperDivProps }>\n          { this.props.onRenderItem(item) }\n        </div>\n      );\n    });\n  }\n\n  private _onRenderOverflowButtonWrapper = (items: any[]): JSX.Element => {\n    const wrapperDivProps: React.HTMLProps<HTMLDivElement> = { className: css('ms-OverflowSet-overflowButton', styles.item) };\n    const overflowKeytipSequences = this.props.keytipSequences;\n    let newOverflowItems: any[] = [];\n\n    if (overflowKeytipSequences) {\n      items.forEach((overflowItem) => {\n        const keytip = (overflowItem as IOverflowSetItemProps).keytipProps;\n        if (keytip) {\n          // Create persisted keytip\n          const persistedKeytip: IKeytipProps = {\n            content: keytip.content,\n            keySequences: keytip.keySequences,\n            disabled: keytip.disabled || !!(overflowItem.disabled || overflowItem.isDisabled)\n          };\n\n          if (keytip.hasDynamicChildren || this._getSubMenuForItem(overflowItem)) {\n            // If the keytip has a submenu or children nodes, change onExecute to persistedKeytipExecute\n            persistedKeytip.onExecute = this._keytipManager.menuExecute.bind(this._keytipManager, overflowKeytipSequences, overflowItem.keytipProps.keySequences);\n          } else {\n            // If the keytip doesn't have a submenu, just execute the original function\n            persistedKeytip.onExecute = keytip.onExecute;\n          }\n\n          // Add this persisted keytip to our internal list, use a temporary uniqueID (its content)\n          // uniqueID will get updated on register\n          this._persistedKeytips[persistedKeytip.content] = persistedKeytip;\n\n          // Add the overflow sequence to this item\n          const newOverflowItem = {\n            ...overflowItem,\n            keytipProps: {\n              ...keytip,\n              overflowSetSequence: overflowKeytipSequences\n            }\n          };\n          newOverflowItems.push(newOverflowItem);\n        } else {\n          // Nothing to change, add overflowItem to list\n          newOverflowItems.push(overflowItem);\n        }\n      });\n    } else {\n      newOverflowItems = items;\n    }\n    return (\n      <div { ...wrapperDivProps }>\n        { this.props.onRenderOverflowButton(newOverflowItems) }\n      </div>\n    );\n  }\n\n  /**\n   * Gets the subMenu for an overflow item\n   * Checks if itemSubMenuProvider has been defined, if not defaults to subMenuProps\n   */\n  private _getSubMenuForItem(item: any): any[] | undefined {\n    if (this.props.itemSubMenuProvider) {\n      return this.props.itemSubMenuProvider(item);\n    }\n    if (item.subMenuProps) {\n      return item.subMenuProps.items;\n    }\n    return undefined;\n  }\n}\n"]}