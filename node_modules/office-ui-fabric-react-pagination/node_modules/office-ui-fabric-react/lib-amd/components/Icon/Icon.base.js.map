{"version":3,"file":"Icon.base.js","sourceRoot":"../src/","sources":["components/Icon/Icon.base.tsx"],"names":[],"mappings":";;;IAkBA,IAAM,aAAa,GAAG,8BAAkB,EAAgC,CAAC;IAEzE;QAA8B,oCAAqC;QACjE,kBAAY,KAAiB;YAA7B,YACE,kBAAM,KAAK,CAAC,SAIb;YAqDO,+BAAyB,GAAG,UAAC,KAAqB;gBACxD,IAAI,KAAI,CAAC,KAAK,CAAC,UAAU,IAAI,KAAI,CAAC,KAAK,CAAC,UAAU,CAAC,oBAAoB,EAAE;oBACvE,KAAI,CAAC,KAAK,CAAC,UAAU,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;iBACnD;gBACD,IAAI,KAAK,KAAK,4BAAc,CAAC,KAAK,EAAE;oBAClC,KAAI,CAAC,QAAQ,CAAC,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC;iBACzC;YACH,CAAC,CAAA;YA/DC,KAAI,CAAC,KAAK,GAAG;gBACX,cAAc,EAAE,KAAK;aACtB,CAAC;;QACJ,CAAC;QAEM,yBAAM,GAAb;YACQ,IAAA,eAOQ,EANZ,wBAAS,EACT,wBAAS,EACT,wBAAS,EACT,sBAAQ,EACR,8BAAY,EACZ,kBAAM,CACO;YACf,IAAM,aAAa,GAAG,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC;YAC5E,IAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,qBAAQ,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,qBAAQ,CAAC,KAAK,CAAC;YAC3F,IAAA,mCAA4D,EAA1D,gCAAa,EAAE,sBAAQ,CAAoC;YAEnE,IAAM,UAAU,GAAG,aAAa,CAAC,SAAS,EAAE;gBAC1C,SAAS,WAAA;gBACT,aAAa,eAAA;gBACb,OAAO,SAAA;gBACP,aAAa,eAAA;gBACb,MAAM,QAAA;aACP,CAAC,CAAC;YAEH,IAAM,cAAc,GAAG,SAAS,CAAC,CAAC;gBAChC;oBACE,YAAY,EAAE,SAAS;iBACxB,CAAC,CAAC,CAAC;gBACF,IAAI,EAAE,cAAc;gBACpB,aAAa,EAAE,IAAI;aACpB,CAAC;YAEJ,IAAM,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;YACvC,IAAM,WAAW,GAAG,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,iCAAqB,CAAC,CAAC;YAC9D,IAAA,0CAAc,CAAgB;YACtC,IAAM,UAAU,wBAAQ,IAAI,CAAC,KAAK,CAAC,UAAU,IAAE,oBAAoB,EAAE,IAAI,CAAC,yBAAyB,GAAE,CAAC;YACtG,IAAM,SAAS,GAAG,cAAc,IAAI,YAAY,IAAI,aAAK,CAAC;YAE1D,OAAO,CACL,oBAAC,QAAQ,uCACU,QAAQ,IACpB,WAAW,EACX,cAAc,IACnB,SAAS,EAAG,UAAU,CAAC,IAAI,KAEzB,OAAO,CAAC,CAAC,CAAC,CACV,oBAAC,SAAS,uBAAM,UAAU,EAAK,CAChC,CAAC,CAAC,CAAC,CACA,QAAQ,CACT,CACM,CACZ,CAAC;QACJ,CAAC;QAWO,kCAAe,GAAvB,UAAwB,IAAa;YACnC,IAAM,cAAc,GAAG,iBAAO,CAAC,IAAI,CAAC,IAAI;gBACtC,MAAM,EAAE;oBACN,SAAS,EAAE,SAAS;iBACrB;gBACD,IAAI,EAAE,SAAS;aAChB,CAAC;YAEF,OAAO;gBACL,QAAQ,EAAE,cAAc,CAAC,IAAI;gBAC7B,aAAa,EAAE,cAAc,CAAC,MAAM,CAAC,SAAS;aAC/C,CAAC;QACJ,CAAC;QACH,eAAC;IAAD,CAAC,AAjFD,CAA8B,yBAAa,GAiF1C;IAjFY,4BAAQ","sourcesContent":["/* tslint:disable */\nimport * as React from 'react';\n/* tslint:enable */\nimport { IIconProps, IconType, IIconStyleProps, IIconStyles } from './Icon.types';\nimport { Image } from '../Image/Image';\nimport { ImageLoadState } from '../Image/Image.types';\nimport {\n  getNativeProps,\n  htmlElementProperties,\n  BaseComponent,\n  classNamesFunction\n} from '../../Utilities';\nimport { getIcon } from '../../Styling';\n\nexport interface IIconState {\n  imageLoadError: boolean;\n}\n\nconst getClassNames = classNamesFunction<IIconStyleProps, IIconStyles>();\n\nexport class IconBase extends BaseComponent<IIconProps, IIconState> {\n  constructor(props: IIconProps) {\n    super(props);\n    this.state = {\n      imageLoadError: false,\n    };\n  }\n\n  public render() {\n    const {\n      ariaLabel,\n      className,\n      getStyles,\n      iconName,\n      imageErrorAs,\n      styles,\n    } = this.props;\n    const isPlaceholder = typeof iconName === 'string' && iconName.length === 0;\n    const isImage = this.props.iconType === IconType.image || this.props.iconType === IconType.Image;\n    const { iconClassName, children } = this._getIconContent(iconName);\n\n    const classNames = getClassNames(getStyles, {\n      className,\n      iconClassName,\n      isImage,\n      isPlaceholder,\n      styles\n    });\n\n    const containerProps = ariaLabel ?\n      {\n        'aria-label': ariaLabel,\n      } : {\n        role: 'presentation',\n        'aria-hidden': true,\n      };\n\n    const RootType = isImage ? 'div' : 'i';\n    const nativeProps = getNativeProps(this.props, htmlElementProperties);\n    const { imageLoadError } = this.state;\n    const imageProps = { ...this.props.imageProps, onLoadingStateChange: this.onImageLoadingStateChange };\n    const ImageType = imageLoadError && imageErrorAs || Image;\n\n    return (\n      <RootType\n        data-icon-name={ iconName }\n        { ...nativeProps }\n        { ...containerProps }\n        className={ classNames.root }\n      >\n        { isImage ? (\n          <ImageType { ...imageProps } />\n        ) : (\n            children\n          ) }\n      </RootType>\n    );\n  }\n\n  private onImageLoadingStateChange = (state: ImageLoadState): void => {\n    if (this.props.imageProps && this.props.imageProps.onLoadingStateChange) {\n      this.props.imageProps.onLoadingStateChange(state);\n    }\n    if (state === ImageLoadState.error) {\n      this.setState({ imageLoadError: true });\n    }\n  }\n\n  private _getIconContent(name?: string) {\n    const iconDefinition = getIcon(name) || {\n      subset: {\n        className: undefined\n      },\n      code: undefined\n    };\n\n    return {\n      children: iconDefinition.code,\n      iconClassName: iconDefinition.subset.className\n    };\n  }\n}\n"]}