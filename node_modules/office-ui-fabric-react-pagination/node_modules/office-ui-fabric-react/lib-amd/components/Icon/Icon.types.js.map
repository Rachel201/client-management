{"version":3,"file":"Icon.types.js","sourceRoot":"../src/","sources":["components/Icon/Icon.types.ts"],"names":[],"mappings":";;;IAKA,2BAA2B;IAC3B,IAAY,QAuBX;IAvBD,WAAY,QAAQ;QAElB;;WAEG;QACH,6CAAW,CAAA;QAEX;;WAEG;QACH,yCAAS,CAAA;QAET;;;WAGG;QACH,kDAAgB,CAAA;QAEhB;;;WAGG;QACH,8CAAc,CAAA;IAChB,CAAC,EAvBW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAuBnB","sourcesContent":["import * as React from 'react';\nimport { IImageProps } from '../Image/Image.types';\nimport { IStyle } from '../../Styling';\nimport { IBaseProps, IStyleFunction } from '../../Utilities';\n\n// Please keep alphabetized\nexport enum IconType {\n\n  /**\n   * Render using the fabric icon font.\n   */\n  default = 0,\n\n  /**\n   * Render using an image, where imageProps would be used.\n   */\n  image = 1,\n\n  /**\n   * Deprecated, use default.\n   * @deprecated\n   */\n  Default = 100000,\n\n  /**\n   * Deprecated, use image.\n   * @deprecated\n   */\n  Image = 100001\n}\n\nexport interface IIconProps extends IBaseProps, React.HTMLAttributes<HTMLElement> {\n  /**\n   * The name of the icon to use from the icon font. If string is empty, a placeholder icon will be rendered the same width as an icon\n   */\n  iconName?: string;\n\n  /**\n   * The aria label of the button for the benefit of screen readers.\n   */\n  ariaLabel?: string;\n\n  /**\n   * The type of icon to render (image or icon font).\n   *\n   * @type {IconType}\n   * @memberOf IIconProps\n   */\n  iconType?: IconType;\n\n  /**\n   * If rendering an image icon, these props will be passed to the Image component.\n   *\n   * @type {IImageProps}\n   * @memberOf IIconProps\n   */\n  imageProps?: IImageProps;\n\n  /**\n   * If rendering an image icon, this function callback will be invoked in the event loading the image errors.\n   */\n  imageErrorAs?: React.StatelessComponent<IImageProps> | React.ComponentClass<IImageProps>;\n\n  /**\n   * Gets the styles for an Icon.\n   */\n  getStyles?: IStyleFunction<IIconStyleProps, IIconStyles>;\n\n  /**\n   * Deprecated: use getStyles.\n   * @deprecated\n   */\n  styles?: IIconStyles;\n}\n\nexport interface IIconStyleProps {\n  className?: string;\n  iconClassName?: string;\n  isPlaceholder: boolean;\n  isImage: boolean;\n  styles?: Partial<IIconStyles>;\n}\n\nexport interface IIconStyles {\n  root?: IStyle;\n\n  /**\n   * Deprecated. Use 'root'.\n   * @deprecated\n   */\n  imageContainer?: IStyle;\n}\n"]}