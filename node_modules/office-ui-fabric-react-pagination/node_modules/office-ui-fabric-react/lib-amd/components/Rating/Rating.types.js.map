{"version":3,"file":"Rating.types.js","sourceRoot":"../src/","sources":["components/Rating/Rating.types.ts"],"names":[],"mappings":";;;IA2FA,IAAY,UAGX;IAHD,WAAY,UAAU;QACpB,6CAAS,CAAA;QACT,6CAAS,CAAA;IACX,CAAC,EAHW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAGrB","sourcesContent":["import * as React from 'react';\nimport {\n  IStyle,\n  ITheme\n} from '../../Styling';\nimport { IStyleFunction } from '../../Utilities';\n\nexport interface IRating {\n\n}\n\n/**\n * Rating component props.\n */\nexport interface IRatingProps extends React.AllHTMLAttributes<HTMLElement> {\n  /**\n   * Optional callback to access the IRating interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: IRating | null) => void;\n\n  /**\n   * Selected rating, has to be an integer between min and max\n   */\n  rating?: number;\n\n  /**\n   * Minimum rating, defaults to 1, has to be >= 0\n   * @deprecated\n   */\n  min?: number;\n\n  /**\n   * Maximum rating, defaults to 5, has to be >= min\n   */\n  max?: number;\n\n  /**\n   * Allow the rating value to be set to 0 instead of a minimum of 1.\n   */\n  allowZeroStars?: boolean;\n\n  /**\n   * Custom icon, defaults to FavoriteStar\n   */\n  icon?: string;\n\n  /**\n   * Size of rating, defaults to small\n   */\n  size?: RatingSize;\n\n  /**\n   * Callback when the rating has changed\n   */\n  onChanged?: (rating: number) => void;\n\n  /**\n   * Optional label format for star ratings, will be read by screen readers, defaults to ''.\n   * Can be used like \"{0} of {1} stars selected\".\n   * Where {0} will be subsituted by the current rating and {1} will be subsituted by the max rating.\n   */\n  ariaLabelFormat?: string;\n\n  /**\n   * Deprecated: Optional id of label describing this instance of Rating. Instead of this use getArialabel\n   * @deprecated\n   */\n  ariaLabelId?: string;\n\n  /**\n   * Optional flag to mark rating control as readOnly\n   */\n  readOnly?: boolean;\n\n  /*\n  * Optional callback to set the arialabel for rating control.\n  */\n  getAriaLabel?: (rating: number, max: number) => string;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  getStyles?: IStyleFunction<IRatingStyleProps, IRatingStyles>;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n}\n\nexport enum RatingSize {\n  Small = 0,\n  Large = 1\n}\n\nexport interface IRatingStyleProps {\n  disabled?: boolean;\n  readOnly?: boolean;\n  theme: ITheme;\n}\n\nexport interface IRatingStyles {\n  root: IStyle;\n  ratingStar: IStyle;\n  ratingStarBack: IStyle;\n  ratingStarFront: IStyle;\n  ratingButton: IStyle;\n  ratingStarIsSmall: IStyle;\n  ratingStarIsLarge: IStyle;\n  rootIsSmall: IStyle;\n  rootIsLarge: IStyle;\n  labelText: IStyle;\n  ratingFocusZone: IStyle;\n}"]}