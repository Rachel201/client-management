{"version":3,"file":"VirtualizedComboBox.js","sourceRoot":"../src/","sources":["components/ComboBox/VirtualizedComboBox.tsx"],"names":[],"mappings":";;;IAOA;QAAyC,+CAAiC;QAA1E;YAAA,qEAoDC;YAnDC,4BAA4B;YACpB,eAAS,GAAG,qBAAS,EAAa,CAAC;YAC3C,mCAAmC;YAC3B,WAAK,GAAG,qBAAS,EAAS,CAAC;YA4BzB,mBAAa,GAAG,UAAC,KAAqB;gBAE5C,IAAA,iCAAY,CACJ;gBAEV,0BAA0B;gBAC1B,OAAO,CACL,oBAAC,WAAI,IACH,YAAY,EAAG,KAAI,CAAC,KAAK,EACzB,IAAI,EAAC,SAAS,EACd,KAAK,EAAG,KAAK,CAAC,OAAO,EACrB,YAAY,EAAG,YAAY,CAAC,CAAC,CAAC,UAAC,IAAuB,IAAK,OAAA,YAAY,CAAC,IAAI,CAAC,EAAlB,CAAkB,CAAC,CAAC,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,GAC1F,CACH,CAAC;YACJ,CAAC,CAAA;YAES,qBAAe,GAAG,UAAC,SAAiB;gBAC5C,sDAAsD;gBACtD,KAAI,CAAC,KAAK,CAAC,OAAO,IAAI,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YACpE,CAAC,CAAA;;QACH,CAAC;QA9CQ,yCAAW,GAAlB;YACE,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;gBAC1B,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;aAC7C;QACH,CAAC;QAEM,mCAAK,GAAZ;YACE,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;gBAC1B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;gBAC/B,OAAO,IAAI,CAAC;aACb;YAED,OAAO,KAAK,CAAC;QACf,CAAC;QAEM,oCAAM,GAAb;YACE,OAAO,CACL,oBAAC,mBAAQ,uBACF,IAAI,CAAC,KAAK,IACf,YAAY,EAAG,IAAI,CAAC,SAAS,EAC7B,YAAY,EAAG,IAAI,CAAC,aAAa,EACjC,cAAc,EAAG,IAAI,CAAC,eAAe,IACrC,CACH,CAAC;QACJ,CAAC;QAsBH,0BAAC;IAAD,CAAC,AApDD,CAAyC,yBAAa,GAoDrD;IApDY,kDAAmB","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, createRef } from '../../Utilities';\nimport { ComboBox } from './ComboBox';\nimport { IComboBoxProps, IComboBox } from './ComboBox.types';\nimport { IList, List } from '../../List';\nimport { ISelectableOption } from '../../utilities/selectableOption/SelectableOption.types';\n\nexport class VirtualizedComboBox extends BaseComponent<IComboBoxProps, {}> implements IComboBox {\n  /** The combo box element */\n  private _comboBox = createRef<IComboBox>();\n  /** The virtualized list element */\n  private _list = createRef<IList>();\n\n  public dismissMenu(): void {\n    if (this._comboBox.current) {\n      return this._comboBox.current.dismissMenu();\n    }\n  }\n\n  public focus() {\n    if (this._comboBox.current) {\n      this._comboBox.current.focus();\n      return true;\n    }\n\n    return false;\n  }\n\n  public render(): JSX.Element {\n    return (\n      <ComboBox\n        { ...this.props }\n        componentRef={ this._comboBox }\n        onRenderList={ this._onRenderList }\n        onScrollToItem={ this._onScrollToItem }\n      />\n    );\n  }\n\n  protected _onRenderList = (props: IComboBoxProps): JSX.Element => {\n    const {\n      onRenderItem\n    } = props;\n\n    // Render virtualized list\n    return (\n      <List\n        componentRef={ this._list }\n        role='listbox'\n        items={ props.options }\n        onRenderCell={ onRenderItem ? (item: ISelectableOption) => onRenderItem(item) : () => null }\n      />\n    );\n  }\n\n  protected _onScrollToItem = (itemIndex: number): void => {\n    // We are using the List component, call scrollToIndex\n    this._list.current && this._list.current.scrollToIndex(itemIndex);\n  }\n}"]}