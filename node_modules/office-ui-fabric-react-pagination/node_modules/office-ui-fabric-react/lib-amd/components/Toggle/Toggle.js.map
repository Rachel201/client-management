{"version":3,"file":"Toggle.js","sourceRoot":"../src/","sources":["components/Toggle/Toggle.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  getId,\n  inputProperties,\n  getNativeProps,\n  createRef\n} from '../../Utilities';\nimport {\n  IToggleProps,\n  IToggle\n} from './Toggle.types';\nimport { Label } from '../../Label';\nimport {\n  customizable\n} from '../../Utilities';\nimport { getClassNames } from './Toggle.classNames';\nimport { KeytipData } from '../../KeytipData';\n\nexport interface IToggleState {\n  isChecked: boolean;\n}\n\n@customizable('Toggle', ['theme'])\nexport class Toggle extends BaseComponent<IToggleProps, IToggleState> implements IToggle {\n\n  private _id: string;\n  private _toggleButton = createRef<HTMLButtonElement>();\n\n  constructor(props: IToggleProps) {\n    super(props);\n\n    this._warnMutuallyExclusive({\n      checked: 'defaultChecked'\n    });\n\n    this.state = {\n      isChecked: !!(props.checked || props.defaultChecked)\n    };\n    this._id = props.id || getId('Toggle');\n  }\n\n  /**\n   * Gets the current checked state of the toggle.\n   */\n  public get checked(): boolean {\n    return this.state.isChecked;\n  }\n\n  public componentWillReceiveProps(newProps: IToggleProps): void {\n    if (newProps.checked !== undefined) {\n      this.setState({\n        isChecked: !!newProps.checked // convert null to false\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    // This control is using an input element for more universal accessibility support.\n    // Previously a button and the aria-pressed attribute were used. This technique works well with Narrator + Edge and NVDA + FireFox.\n    // However, JAWS and VoiceOver did not announce anything when the toggle was checked or unchecked.\n    // In the future when more screenreaders support aria-pressed it would be a good idea to change this control back to using it as it is\n    // more semantically correct.\n\n    const {\n      className,\n      theme,\n      styles: customStyles,\n      disabled,\n      label,\n      offAriaLabel,\n      offText,\n      onAriaLabel,\n      onText,\n      keytipProps\n    } = this.props;\n    const { isChecked } = this.state;\n    const stateText = isChecked ? onText : offText;\n    const ariaLabel = isChecked ? onAriaLabel : offAriaLabel;\n    const toggleNativeProps = getNativeProps(this.props, inputProperties, ['defaultChecked']);\n    const classNames = getClassNames(\n      theme!,\n      customStyles!,\n      className!,\n      disabled!,\n      isChecked\n    );\n\n    return (\n      <div className={ classNames.root }>\n\n        { label && (\n          <Label htmlFor={ this._id } className={ classNames.label }>{ label }</Label>\n        ) }\n\n        <div className={ classNames.container } >\n          <KeytipData\n            keytipProps={ keytipProps }\n            ariaDescribedBy={ (toggleNativeProps as any)['aria-describedby'] }\n            disabled={ disabled }\n          >\n            { (keytipAttributes: any): JSX.Element => (\n              <button\n                { ...toggleNativeProps }\n                { ...keytipAttributes }\n                className={ classNames.pill }\n                disabled={ disabled }\n                id={ this._id }\n                type='button'\n                ref={ this._toggleButton }\n                aria-disabled={ disabled }\n                aria-pressed={ isChecked }\n                aria-label={ ariaLabel ? ariaLabel : label }\n                data-is-focusable={ true }\n                onChange={ this._noop }\n                onClick={ this._onClick }\n              >\n                <div className={ classNames.thumb } />\n              </button>\n            ) }\n          </KeytipData>\n          { stateText && (\n            <Label htmlFor={ this._id } className={ classNames.text }>{ stateText }</Label>\n          ) }\n        </div>\n      </div >\n    );\n  }\n\n  public focus() {\n    if (this._toggleButton.current) {\n      this._toggleButton.current.focus();\n    }\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>) => {\n    const { disabled, checked, onChanged, onClick } = this.props;\n    const { isChecked } = this.state;\n\n    if (!disabled) {\n      // Only update the state if the user hasn't provided it.\n      if (checked === undefined) {\n        this.setState({\n          isChecked: !isChecked\n        });\n      }\n\n      if (onChanged) {\n        onChanged(!isChecked);\n      }\n\n      if (onClick) {\n        onClick(ev);\n      }\n    }\n  }\n\n  private _noop(): void {\n    /* no-op */\n  }\n\n}\n"]}