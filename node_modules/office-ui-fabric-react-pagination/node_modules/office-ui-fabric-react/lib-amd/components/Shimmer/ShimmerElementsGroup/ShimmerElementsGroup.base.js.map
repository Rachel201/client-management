{"version":3,"file":"ShimmerElementsGroup.base.js","sourceRoot":"../src/","sources":["components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, classNamesFunction, customizable } from '../../../Utilities';\nimport {\n  IShimmerElementsGroupProps,\n  IShimmerElementsGroupStyleProps,\n  IShimmerElementsGroupStyles\n} from './ShimmerElementsGroup.types';\nimport { IStyleSet } from '../../../Styling';\nimport { ShimmerElementType, ShimmerElementsDefaultHeights, IShimmerElement } from '../Shimmer.types';\nimport { ShimmerLine } from '../ShimmerLine/ShimmerLine';\nimport { IShimmerLineStyles, IShimmerLineStyleProps } from '../ShimmerLine/ShimmerLine.types';\nimport { ShimmerGap } from '../ShimmerGap/ShimmerGap';\nimport { IShimmerGapStyles, IShimmerGapStyleProps } from '../ShimmerGap/ShimmerGap.types';\nimport { ShimmerCircle } from '../ShimmerCircle/ShimmerCircle';\nimport { IShimmerCircleStyles, IShimmerCircleStyleProps } from '../ShimmerCircle/ShimmerCircle.types';\n\nconst getClassNames = classNamesFunction<IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles>();\n\n@customizable('ShimmerElementsGroup', ['theme'])\nexport class ShimmerElementsGroupBase extends BaseComponent<IShimmerElementsGroupProps, {}> {\n  public static defaultProps: IShimmerElementsGroupProps = {\n    flexWrap: false\n  };\n\n  private _classNames: { [key in keyof IShimmerElementsGroupStyles]: string };\n\n  constructor(props: IShimmerElementsGroupProps) {\n    super(props);\n  }\n\n  public render(): JSX.Element {\n    const { getStyles, width, shimmerElements, rowHeight, flexWrap, theme } = this.props;\n\n    this._classNames = getClassNames(getStyles!, {\n      theme: theme!,\n      flexWrap\n    });\n\n    const height = rowHeight ? rowHeight : this._findMaxElementHeight(shimmerElements ? shimmerElements : []);\n\n    return (\n      // tslint:disable-next-line:jsx-ban-props\n      <div style={ { width: width ? width : 'auto' } } className={ this._classNames.root }>\n        { this._getRenderedElements(shimmerElements, height) }\n      </div>\n    );\n  }\n\n  private _getRenderedElements = (shimmerElements?: IShimmerElement[], rowHeight?: number): React.ReactNode => {\n    const renderedElements: React.ReactNode = shimmerElements ? (\n      shimmerElements.map(\n        (elem: IShimmerElement, index: number): JSX.Element => {\n          const { type, ...filteredElem } = elem;\n          switch (elem.type) {\n            case ShimmerElementType.circle:\n              return <ShimmerCircle key={ index } { ...filteredElem } getStyles={ this._getBorderStyles(elem, rowHeight) } />;\n            case ShimmerElementType.gap:\n              return <ShimmerGap key={ index } { ...filteredElem } getStyles={ this._getBorderStyles(elem, rowHeight) } />;\n            case ShimmerElementType.line:\n              return <ShimmerLine key={ index } { ...filteredElem } getStyles={ this._getBorderStyles(elem, rowHeight) } />;\n          }\n        }\n      )\n    ) : (\n        <ShimmerLine height={ ShimmerElementsDefaultHeights.line } getStyles={ this._getDefaultLineStyle } />\n      );\n\n    return renderedElements;\n  }\n\n  private _getBorderStyles = (\n    elem: IShimmerElement,\n    rowHeight?: number\n  ): (props: IShimmerCircleStyleProps | IShimmerGapStyleProps | IShimmerLineStyleProps) => IShimmerCircleStyles | IShimmerGapStyles | IShimmerLineStyles => {\n    return (props: IShimmerCircleStyleProps | IShimmerGapStyleProps | IShimmerLineStyleProps): IShimmerCircleStyles | IShimmerGapStyles | IShimmerLineStyles => {\n      const elemHeight: number | undefined = elem.height;\n      const dif: number = rowHeight && elemHeight ? rowHeight - elemHeight : 0;\n\n      let borderStyle: IStyleSet | undefined;\n\n      if (!elem.verticalAlign || elem.verticalAlign === 'center') {\n        borderStyle = {\n          borderBottomWidth: `${dif ? Math.floor(dif / 2) : 0}px`,\n          borderTopWidth: `${dif ? Math.ceil(dif / 2) : 0}px`\n        };\n      } else if (elem.verticalAlign && elem.verticalAlign === 'top') {\n        borderStyle = {\n          borderBottomWidth: `${dif ? dif : 0}px`,\n          borderTopWidth: `0px`\n        };\n      } else if (elem.verticalAlign && elem.verticalAlign === 'bottom') {\n        borderStyle = {\n          borderBottomWidth: `0px`,\n          borderTopWidth: `${dif ? dif : 0}px`\n        };\n      }\n\n      return {\n        root: [{ ...borderStyle }]\n      };\n    };\n  }\n\n  /**\n   * User should not worry to provide which of the elements is the highest, we do the calculation for him.\n   * Plus if user forgot to specify the height we assign their defaults.\n   */\n  private _findMaxElementHeight = (elements: IShimmerElement[]): number => {\n    const itemsDefaulted: IShimmerElement[] = elements.map(\n      (elem: IShimmerElement): IShimmerElement => {\n        switch (elem.type) {\n          case ShimmerElementType.circle:\n            if (!elem.height) {\n              elem.height = ShimmerElementsDefaultHeights.circle;\n            }\n          case ShimmerElementType.line:\n            if (!elem.height) {\n              elem.height = ShimmerElementsDefaultHeights.line;\n            }\n          case ShimmerElementType.gap:\n            if (!elem.height) {\n              elem.height = ShimmerElementsDefaultHeights.gap;\n            }\n        }\n        return elem;\n      }\n    );\n\n    const rowHeight = itemsDefaulted.reduce((acc: number, next: IShimmerElement): number => {\n      return next.height ? (next.height > acc ? next.height : acc) : acc;\n    }, 0);\n\n    return rowHeight;\n  }\n\n  private _getDefaultLineStyle = (props: IShimmerLineStyleProps): IShimmerLineStyles => {\n    return { root: [{ borderWidth: '0px' }] };\n  }\n}\n"]}