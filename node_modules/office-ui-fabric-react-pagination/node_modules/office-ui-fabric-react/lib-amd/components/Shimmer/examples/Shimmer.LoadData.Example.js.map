{"version":3,"file":"Shimmer.LoadData.Example.js","sourceRoot":"../src/","sources":["components/Shimmer/examples/Shimmer.LoadData.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Shimmer, ShimmerElementsGroup, ShimmerElementType as ElemType } from 'office-ui-fabric-react/lib/Shimmer';\nimport { Persona, PersonaSize, PersonaPresence, IPersonaProps } from 'office-ui-fabric-react/lib/Persona';\nimport { Toggle } from 'office-ui-fabric-react/lib/Toggle';\nimport { PersonaDetails } from './ExampleHelper';\n\nimport * as ShimmerExampleStyles from './Shimmer.Example.scss';\n\nexport interface IShimmerLoadDataExampleState {\n  isDataLoadedOne?: boolean;\n  isDataLoadedTwo?: boolean;\n  contentOne?: string;\n  examplePersona?: IPersonaProps;\n}\n\nexport class ShimmerLoadDataExample extends React.Component<{}, IShimmerLoadDataExampleState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      isDataLoadedOne: false,\n      isDataLoadedTwo: false,\n      contentOne: '',\n      examplePersona: {}\n    };\n  }\n\n  public render(): JSX.Element {\n    const { isDataLoadedOne, isDataLoadedTwo, contentOne, examplePersona } = this.state;\n\n    return (\n      <div className={ ShimmerExampleStyles.shimmerExampleContainer }>\n        <Toggle\n          checked={ isDataLoadedOne }\n          onChanged={ this._getContentOne }\n          onText='Toggle to show shimmer'\n          offText='Toggle to load content'\n        />\n        <Shimmer isDataLoaded={ isDataLoadedOne } ariaLabel={ 'Loading content' }>\n          <div\n            // tslint:disable-next-line:jsx-ban-props\n            style={ {\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              whiteSpace: 'nowrap',\n              lineHeight: '1',\n              minHeight: '16px' // Default height of Shimmer when no elements being provided.\n            } }\n          >\n            { contentOne }\n            { contentOne }\n            { contentOne }\n          </div>\n        </Shimmer>\n        <Toggle\n          checked={ isDataLoadedTwo }\n          onChanged={ this._getContentTwo }\n          onText='Toggle to show shimmer'\n          offText='Toggle to load content'\n        />\n        <Shimmer customElementsGroup={ this._getCustomElements() } width={ 300 } isDataLoaded={ isDataLoadedTwo }>\n          <Persona { ...examplePersona } size={ PersonaSize.size40 } presence={ PersonaPresence.away } />\n        </Shimmer>\n      </div>\n    );\n  }\n\n  private _getContentOne = (checked: boolean): void => {\n    const { isDataLoadedOne } = this.state;\n    this.setState({\n      isDataLoadedOne: checked,\n      contentOne: !isDataLoadedOne ? 'Congratulations!!! You have successfully loaded the content. ' : ''\n    });\n  }\n\n  private _getContentTwo = (checked: boolean): void => {\n    const { isDataLoadedTwo } = this.state;\n    this.setState({\n      isDataLoadedTwo: checked,\n      examplePersona: !isDataLoadedTwo ? { ...PersonaDetails } : {}\n    });\n  }\n\n  private _getCustomElements = (): JSX.Element => {\n    return (\n      <div\n        // tslint:disable-next-line:jsx-ban-props\n        style={ { display: 'flex' } }\n      >\n        <ShimmerElementsGroup\n          shimmerElements={ [{ type: ElemType.circle, height: 40 }, { type: ElemType.gap, width: 16, height: 40 }] }\n        />\n        <ShimmerElementsGroup\n          flexWrap={ true }\n          width={ '100%' }\n          shimmerElements={ [\n            { type: ElemType.line, width: '100%', height: 10, verticalAlign: 'bottom' },\n            { type: ElemType.line, width: '90%', height: 8 },\n            { type: ElemType.gap, width: '10%', height: 20 }\n          ] }\n        />\n      </div>\n    );\n  }\n}\n"]}