{"version":3,"file":"ColorPickerGridCell.base.js","sourceRoot":"../src/","sources":["components/SwatchColorPicker/ColorPickerGridCell.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { customizable } from '../../Utilities';\nimport {\n  IColorCellProps,\n  IColorPickerGridCellProps,\n  IColorPickerGridCellStyleProps,\n  IColorPickerGridCellStyles\n} from './ColorPickerGridCell.types';\nimport { getColorFromString } from '../../utilities/color/colors';\nimport { GridCell } from '../../utilities/grid/GridCell';\nimport { IGridCellProps } from '../../utilities/grid/GridCell.types';\nimport { IButtonClassNames } from '../Button/BaseButton.classNames';\nimport { getStyles as getActionButtonStyles } from '../Button/ActionButton/ActionButton.styles';\nimport { mergeStyleSets, ITheme } from '../../Styling';\nimport { classNamesFunction } from '../../Utilities';\n\nconst getClassNames = classNamesFunction<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>();\n\nclass ColorCell extends GridCell<IColorCellProps, IGridCellProps<IColorCellProps>> {\n}\n\n@customizable('ColorPickerGridCell', ['theme'])\nexport class ColorPickerGridCellBase extends React.Component<IColorPickerGridCellProps, {}> {\n\n  public static defaultProps = {\n    circle: true,\n    disabled: false,\n    selected: false,\n  } as IColorPickerGridCellProps;\n\n  private _classNames: {[key in keyof IColorPickerGridCellStyles]: string };\n\n  public render(): JSX.Element {\n    const {\n      item,\n      id,\n      selected,\n      disabled,\n      getStyles,\n      theme,\n      circle,\n      color,\n      onClick,\n      onHover,\n      onFocus,\n      onMouseEnter,\n      onMouseMove,\n      onMouseLeave,\n      onWheel,\n      onKeyDown\n    } = this.props;\n\n    this._classNames = getClassNames(\n      getStyles!,\n      {\n        theme: theme!,\n        disabled,\n        selected,\n        circle,\n        isWhite: this._isWhiteCell(color)\n      }\n    );\n\n    return (\n      <ColorCell\n        item={ item }\n        id={ `${id}-${item.id}-${item.index}` }\n        key={ item.id }\n        disabled={ disabled }\n        role={ 'gridcell' }\n        onRenderItem={ this._onRenderColorOption }\n        selected={ selected }\n        onClick={ onClick }\n        onHover={ onHover }\n        onFocus={ onFocus }\n        label={ item.label }\n        className={ this._classNames.colorCell }\n        getClassNames={ this._getClassNames }\n        index={ item.index }\n        onMouseEnter={ onMouseEnter }\n        onMouseMove={ onMouseMove }\n        onMouseLeave={ onMouseLeave }\n        onWheel={ onWheel }\n        onKeyDown={ onKeyDown }\n      />\n    );\n  }\n\n  /**\n * Render the core of a color cell\n * @returns {JSX.Element} - Element representing the core of the item\n */\n  private _onRenderColorOption = (colorOption: IColorCellProps): JSX.Element => {\n    // Build an SVG for the cell with the given shape and color properties\n    return (\n      <svg className={ this._classNames.svg } viewBox='0 0 20 20' fill={ getColorFromString(colorOption.color as string)!.str } >\n        {\n          this.props.circle ?\n            <circle cx='50%' cy='50%' r='50%' /> :\n            <rect width='100%' height='100%' />\n        }\n      </svg>\n    );\n  }\n\n  /**\n   * Validate if the cell's color is white or not to apply whiteCell style\n   * @param inputColor - The color of the current cell\n   * @returns - Whether the cell's color is white or not.\n   */\n  private _isWhiteCell(inputColor: string | undefined): boolean {\n    return inputColor!.toLocaleLowerCase() === '#ffffff';\n  }\n\n  /**\n   * Method to override the getClassNames func in a button.\n   */\n  private _getClassNames = (\n    theme: ITheme,\n    className: string,\n    variantClassName: string,\n    iconClassName: string | undefined,\n    menuIconClassName: string | undefined,\n    disabled: boolean,\n    checked: boolean,\n    expanded: boolean,\n    isSplit: boolean | undefined): IButtonClassNames => {\n    const styles = getActionButtonStyles(theme);\n    return mergeStyleSets(this._classNames as {}, {\n      root: [\n        'ms-Button',\n        styles.root,\n        variantClassName,\n        className,\n        checked && [\n          'is-checked',\n          styles.rootChecked\n        ],\n        disabled && [\n          'is-disabled',\n          styles.rootDisabled\n        ],\n        !disabled && !checked && {\n          selectors: {\n            ':hover': styles.rootHovered,\n            ':focus': styles.rootFocused,\n            ':active': styles.rootPressed,\n          }\n        },\n        disabled && checked && [\n          styles.rootCheckedDisabled\n        ],\n        !disabled && checked && {\n          selectors: {\n            ':hover': styles.rootCheckedHovered,\n            ':active': styles.rootCheckedPressed\n          }\n        }\n      ],\n      flexContainer: [\n        'ms-Button-flexContainer',\n        styles.flexContainer\n      ]\n    });\n  }\n\n}"]}