{"version":3,"file":"testUtilities.js","sourceRoot":"../src/","sources":["common/testUtilities.ts"],"names":[],"mappings":";;;IAEa,QAAA,SAAS,GAAG,UAAC,OAA+B,EAAE,SAAiB,IAA6B,OAAA,CACvG,OAAO;SACJ,IAAI,CAAC,SAAS,CAAC;SACf,WAAW,CAAC,CAAC,UAAC,IAA4B,IAAK,OAAA,OAAO,IAAI,CAAC,IAAI,EAAE,KAAK,QAAQ,EAA/B,CAA+B,CAAC,CAAC,CACpF,EAJwG,CAIxG,CAAC;IAEW,QAAA,WAAW,GAAG,UAAC,OAA+B,EAAE,SAAiB,EAAE,CAAS,IAAW,OAAA,CAClG,MAAM,CAAC,iBAAS,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CACxD,EAFmG,CAEnG,CAAC;IAEW,QAAA,SAAS,GAAG,UAAC,OAA+B,EAAE,SAAiB,IAAW,OAAA,CACrF,mBAAW,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,CACnC,EAFsF,CAEtF,CAAC;IAEW,QAAA,aAAa,GAAG,UAAC,OAA+B,EAAE,SAAiB,IAAW,OAAA,CACzF,mBAAW,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,CACnC,EAF0F,CAE1F,CAAC","sourcesContent":["import { ReactWrapper } from 'enzyme';\n\nexport const findNodes = (wrapper: ReactWrapper<any, any>, className: string): ReactWrapper<any, any> => (\n  wrapper\n    .find(className)\n    .filterWhere(((node: ReactWrapper<any, any>) => typeof node.type() === 'string'))\n);\n\nexport const expectNodes = (wrapper: ReactWrapper<any, any>, className: string, n: number): void => (\n  expect(findNodes(wrapper, className).length).toEqual(n)\n);\n\nexport const expectOne = (wrapper: ReactWrapper<any, any>, className: string): void => (\n  expectNodes(wrapper, className, 1)\n);\n\nexport const expectMissing = (wrapper: ReactWrapper<any, any>, className: string): void => (\n  expectNodes(wrapper, className, 0)\n);\n"]}