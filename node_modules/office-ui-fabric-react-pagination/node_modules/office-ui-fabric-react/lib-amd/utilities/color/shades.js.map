{"version":3,"file":"shades.js","sourceRoot":"../src/","sources":["utilities/color/shades.ts"],"names":[],"mappings":"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","sourcesContent":["// Technically this should be shades and tints, but for simplicity we'll call everything a shade.\n/* This utility module is used with theming. Given a color to shade, whether the theme is inverted (i.e. is a dark color),\n * and the desired shade enum, this will return an appropriate shade of that color.\n */\nimport {\n  IHSV,\n  IColor,\n  MAX_COLOR_RGBA\n} from './colors';\nimport * as Colors from './colors';\nimport { assign } from '../../Utilities';\n\n// Soften: to get closer to the background color's luminance (softening with a white background would be lightening, with black it'd be darkening)\n// Strongen: opposite of soften\n\n// Luminance multiplier constants for generating shades of a given color\nconst WhiteShadeTableBG = [.027, .043, .082, .145, .184, .216, .349, .537]; // white bg\nconst BlackTintTableBG = [.537, .45, .349, .216, .184, .145, .082, .043]; // black bg\nconst WhiteShadeTable = [.537, .349, .216, .184, .145, .082, .043, .027]; // white fg\nconst BlackTintTable = [.537, .45, .349, .216, .184, .145, .082, .043]; // black fg\nconst LumTintTable = [.88, .77, .66, .55, .44, .33, .22, .11]; // light (strongen all)\nconst LumShadeTable = [.11, .22, .33, .44, .55, .66, .77, .88]; // dark (soften all)\nconst ColorTintTable = [.960, .840, .700, .400, .120]; // default soften\nconst ColorShadeTable = [.100, .240, .440]; // default strongen\n\n// If the given shade's luminance is below/above these values, we'll swap to using the White/Black tables above\nconst LowLuminanceThreshold = 0.2;\nconst HighLuminanceThreshold = 0.8;\n\n/** Shades of a given color, from softest to strongest. */\nexport enum Shade {\n  Unshaded = 0,\n  Shade1 = 1,\n  Shade2 = 2,\n  Shade3 = 3,\n  Shade4 = 4,\n  Shade5 = 5,\n  Shade6 = 6,\n  Shade7 = 7,\n  Shade8 = 8,\n  // remember to update isValidShade()!\n}\n\n/**\n * Returns true if the argument is a valid Shade value\n * @param {Shade} shade The Shade value to validate.\n */\nexport function isValidShade(shade?: Shade): boolean {\n  'use strict';\n  return (typeof shade === 'number') && (shade >= Shade.Unshaded) && (shade <= Shade.Shade8);\n}\n\nfunction _isBlack(color: IColor): boolean {\n  return color.r === 0 && color.g === 0 && color.b === 0;\n}\n\nfunction _isWhite(color: IColor): boolean {\n  return color.r === MAX_COLOR_RGBA && color.g === MAX_COLOR_RGBA && color.b === MAX_COLOR_RGBA;\n}\n\nfunction _darken(hsv: IHSV, factor: number): IHSV {\n  return {\n    h: hsv.h,\n    s: hsv.s,\n    v: _clamp(hsv.v - (hsv.v * factor), 0, 100)\n  };\n}\n\nfunction _lighten(hsv: IHSV, factor: number): IHSV {\n  return {\n    h: hsv.h,\n    s: _clamp(hsv.s - (hsv.s * factor), 0, 100),\n    v: _clamp(hsv.v + ((100 - hsv.v) * factor), 0, 100)\n  };\n}\n\nfunction _clamp(n: number, min: number, max: number) {\n  return n; // Math.max(min, Math.min(n, max));\n}\n\nexport function isDark(color: IColor): boolean {\n  return Colors.hsv2hsl(color.h, color.s, color.v).l < 50;\n}\n\n/**\n * Given a color and a shade specification, generates the requested shade of the color.\n * Logic:\n * if white\n *  darken via tables defined above\n * if black\n *  lighten\n * if light\n *  strongen\n * if dark\n *  soften\n * else default\n *  soften or strongen depending on shade#\n * @param {IColor} color The base color whose shade is to be computed\n * @param {Shade} shade The shade of the base color to compute\n * @param {Boolean} isInverted Default false. Whether the given theme is inverted (reverse strongen/soften logic)\n */\nexport function getShade(color: IColor, shade: Shade, isInverted: boolean = false): IColor | null {\n  'use strict';\n  if (!color) {\n    return null;\n  }\n\n  if (shade === Shade.Unshaded || !isValidShade(shade)) {\n    return color;\n  }\n\n  const hsl = Colors.hsv2hsl(color.h, color.s, color.v);\n  let hsv = { h: color.h, s: color.s, v: color.v };\n  const tableIndex = shade - 1;\n  let _soften = _lighten;\n  let _strongen = _darken;\n  if (isInverted) {\n    _soften = _darken;\n    _strongen = _lighten;\n  }\n  if (_isWhite(color)) { // white\n    hsv = _darken(hsv, WhiteShadeTable[tableIndex]);\n  } else if (_isBlack(color)) { // black\n    hsv = _lighten(hsv, BlackTintTable[tableIndex]);\n  } else if (hsl.l / 100 > HighLuminanceThreshold) { // light\n    hsv = _strongen(hsv, LumShadeTable[tableIndex]);\n  } else if (hsl.l / 100 < LowLuminanceThreshold) { // dark\n    hsv = _soften(hsv, LumTintTable[tableIndex]);\n  } else { // default\n    if (tableIndex < ColorTintTable.length) {\n      hsv = _soften(hsv, ColorTintTable[tableIndex]);\n    } else {\n      hsv = _strongen(hsv, ColorShadeTable[tableIndex - ColorTintTable.length]);\n    }\n  }\n\n  return Colors.getColorFromRGBA(assign(Colors.hsv2rgb(hsv.h, hsv.s, hsv.v), { a: color.a }));\n}\n\n// Background shades/tints are generated differently. The provided color will be guaranteed\n//   to be the darkest or lightest one. If it is <50% luminance, it will always be the darkest,\n//   otherwise it will always be the lightest.\nexport function getBackgroundShade(color: IColor, shade: Shade, isInverted: boolean = false): IColor | null {\n  'use strict';\n  if (!color) {\n    return null;\n  }\n\n  if (shade === Shade.Unshaded || !isValidShade(shade)) {\n    return color;\n  }\n\n  let hsv = { h: color.h, s: color.s, v: color.v };\n  const tableIndex = shade - 1;\n  if (!isInverted) { // lightish\n    hsv = _darken(hsv, WhiteShadeTableBG[tableIndex]);\n  } else { // default: if (hsl.l / 100 < .5) { // darkish\n    hsv = _lighten(hsv, BlackTintTableBG[BlackTintTable.length - 1 - tableIndex]);\n  }\n\n  return Colors.getColorFromRGBA(assign(Colors.hsv2rgb(hsv.h, hsv.s, hsv.v), { a: color.a }));\n}\n\n/* Calculates the contrast ratio between two colors. Used for verifying\n * color pairs meet minimum accessibility requirements.\n * See: https://www.w3.org/TR/WCAG20/ section 1.4.3\n */\nexport function getContrastRatio(color1: IColor, color2: IColor): number {\n  // Formula defined by: http://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html#contrast-ratiodef\n  // relative luminance: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n\n  /* calculate the intermediate value needed to calculating relative luminance */\n  function _getThing(x: number): number {\n    if (x <= .03928) {\n      return x / 12.92;\n    } else {\n      return Math.pow((x + .055) / 1.055, 2.4);\n    }\n  }\n\n  const r1 = _getThing(color1.r / MAX_COLOR_RGBA);\n  const g1 = _getThing(color1.g / MAX_COLOR_RGBA);\n  const b1 = _getThing(color1.b / MAX_COLOR_RGBA);\n  let L1 = (.2126 * r1) + (.7152 * g1) + (.0722 * b1); // relative luminance of first color\n  L1 += .05;\n\n  const r2 = _getThing(color2.r / MAX_COLOR_RGBA);\n  const g2 = _getThing(color2.g / MAX_COLOR_RGBA);\n  const b2 = _getThing(color2.b / MAX_COLOR_RGBA);\n  let L2 = (.2126 * r2) + (.7152 * g2) + (.0722 * b2); // relative luminance of second color\n  L2 += .05;\n\n  // return the lighter color divided by darker\n  return L1 / L2 > 1 ?\n    L1 / L2 : L2 / L1;\n}\n"]}