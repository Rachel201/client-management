{"version":3,"file":"List.types.js","sourceRoot":"../src/","sources":["components/List/List.types.ts"],"names":[],"mappings":"AAIA,MAAM,CAAN,IAAkB,YAiBjB;AAjBD,WAAkB,YAAY;IAC5B;;OAEG;IACH,+CAAI,CAAA;IACJ;;OAEG;IACH,6CAAG,CAAA;IACH;;OAEG;IACH,mDAAM,CAAA;IACN;;OAEG;IACH,mDAAM,CAAA;AACR,CAAC,EAjBiB,YAAY,KAAZ,YAAY,QAiB7B","sourcesContent":["import * as React from 'react';\nimport { IRectangle, IRenderFunction } from '../../Utilities';\nimport { List } from './List';\n\nexport const enum ScrollToMode {\n  /**\n   * Does not make any consideration to where in the viewport the item should align to.\n   */\n  auto,\n  /**\n   * Attempts to scroll the list so the top of the desired item is aligned with the top of the viewport.\n   */\n  top,\n  /**\n   * Attempts to scroll the list so the bottom of the desired item is aligned with the bottom of the viewport.\n   */\n  bottom,\n  /**\n   * Attempts to scroll the list so the desired item is in the exact center of the viewport.\n   */\n  center\n}\n\nexport interface IList {\n  /**\n   * Force the component to update.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index Index of item to scroll to\n   * @param measureItem Optional callback to measure the height of an individual item\n   * @param scrollToMode Optional defines the behavior of the scrolling alignment. Defaults to auto.\n   *  Note: The scrollToMode requires the measureItem callback is provided to function.\n   */\n  scrollToIndex: (index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode) => void;\n}\n\nexport interface IListProps extends React.HTMLAttributes<List | HTMLDivElement> {\n  /**\n   * Optional callback to access the IList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: IList | null) => void;\n\n  /** Optional classname to append to root list. */\n  className?: string;\n\n  /** Items to render. */\n  items?: any[];\n\n  /**\n   * Method to call when trying to render an item.\n   * @param {any} item - The the data associated with the cell that is being rendered.\n   * @param {number} index - The index of the cell being rendered.\n   * @param {boolean} isScrolling - True if the list is being scrolled. May be useful for rendering a placeholder if your cells are complex.\n   */\n  onRenderCell?: (item?: any, index?: number, isScrolling?: boolean) => React.ReactNode;\n\n  /**\n   * Optional callback invoked when List rendering completed.\n   * This can be on initial mount or on re-render due to scrolling.\n   * This method will be called as a result of changes in List pages (added or removed),\n   * and after ALL the changes complete.\n   * To track individual page Add / Remove use onPageAdded / onPageRemoved instead.\n   * @param {IPage[]} pages - The current array of pages in the List.\n   */\n  onPagesUpdated?: (pages: IPage[]) => void;\n\n  /** Optional callback for monitoring when a page is added. */\n  onPageAdded?: (page: IPage) => void;\n\n  /** Optional callback for monitoring when a page is removed. */\n  onPageRemoved?: (page: IPage) => void;\n\n  /** Optional callback to get the item key, to be used on render. */\n  getKey?: (item: any, index?: number) => string;\n\n  /**\n   * Called by the list to get the specification for a page.\n   * Use this method to provide an allocation of items per page,\n   * as well as an estimated rendered height for the page.\n   * The list will use this to optimize virtualization.\n   */\n  getPageSpecification?: (itemIndex?: number, visibleRect?: IRectangle) => IPageSpecification;\n\n  /**\n   * Method called by the list to get how many items to render per page from specified index.\n   * In general, use `getPageSpecification` instead.\n   */\n  getItemCountForPage?: (itemIndex?: number, visibleRect?: IRectangle) => number;\n\n  /**\n   * Method called by the list to get the pixel height for a given page. By default, we measure the first\n   * page's height and default all other pages to that height when calculating the surface space. It is\n   * ideal to be able to adequately predict page heights in order to keep the surface space from jumping\n   * in pixels, which has been seen to cause browser performance issues.\n   * In general, use `getPageSpecification` instead.\n   */\n  getPageHeight?: (itemIndex?: number, visibleRect?: IRectangle) => number;\n\n  /**\n   * Method called by the list to derive the page style object. For spacer pages, the list will derive\n   * the height and passed in heights will be ignored.\n   */\n  getPageStyle?: (page: IPage) => any;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render ahead.\n   * @default 2\n   */\n  renderedWindowsAhead?: number;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render behind.\n   * @default 2\n   */\n  renderedWindowsBehind?: number;\n\n  /** Index in items array to start rendering from. Defaults to 0. */\n  startIndex?: number;\n\n  /** Number of items to render. Defaults to items.length. */\n  renderCount?: number;\n\n  /**\n  * Boolean value to enable render page caching. This is an experimental performance optimization\n  * that is off by default.\n  * @defaultValue false\n  */\n  usePageCache?: boolean;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /**\n   * The role to assign to the list root element.\n   * Use this to override the default assignment of 'list' to the root and 'listitem' to the cells.\n   */\n  role?: string;\n\n  /**\n   * Called when the List will render a page.\n   * Override this to control how cells are rendered within a page.\n   */\n  onRenderPage?: (pageProps: IPageProps, defaultRender?: IRenderFunction<IPageProps>) => React.ReactNode;\n}\n\nexport interface IPage {\n  key: string;\n  items: any[] | undefined;\n  startIndex: number;\n  itemCount: number;\n  style: any;\n  top: number;\n  height: number;\n  data?: any;\n}\n\nexport interface IPageProps extends React.HTMLAttributes<HTMLDivElement>, React.Props<HTMLDivElement> {\n  /**\n   * The role being assigned to the rendered page element by the list.\n   */\n  role?: string;\n  /**\n   * The allocation data for the page.\n   */\n  page: IPage;\n}\n\nexport interface IPageSpecification {\n  /**\n   * The number of items to allocate to the page.\n   */\n  itemCount?: number;\n  /**\n   * The estimated pixel height of the page.\n   */\n  height?: number;\n  /**\n   * Data to pass through to the page when rendering.\n   */\n  data?: any;\n  /**\n   * The key to use when creating the page.\n   */\n  key?: string;\n}\n"]}