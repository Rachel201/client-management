{"version":3,"file":"Keytip.js","sourceRoot":"../src/","sources":["components/Keytip/Keytip.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,cAAc,EAAE,sBAAsB,EAAE,MAAM,qCAAqC,CAAC;AAC7F,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAGxC,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,gBAAgB,EAAE,sBAAsB,EAAE,MAAM,iBAAiB,CAAC;AAE3E;;;;;;GAMG;AACH;IAA4B,kCAA+B;IAA3D;;IAmDA,CAAC;IAlDQ,uBAAM,GAAb;QACQ,IAAA,eAIQ,EAHZ,8BAAY,EACZ,kBAAM,EACN,4CAAmB,CACN;QAEb,IAAA,sCAAY,CACC;QAEf,IAAI,YAAoB,CAAC;QACzB,gDAAgD;QAChD,IAAI,mBAAmB,EAAE;YACvB,YAAY,GAAG,sBAAsB,CAAC,cAAc,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC,CAAC;SAC1F;aAAM;YACL,YAAY,GAAG,sBAAsB,CAAC,YAAY,CAAC,CAAC;SACrD;QAED,IAAI,MAAM,EAAE;YACV,gEAAgE;YAChE,yBAAyB;YACzB,YAAY,wBACP,YAAY,IACf,WAAW,EAAE,IAAI,EACjB,eAAe,wBAChB,CAAC;SACH;QAED,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,eAAe,KAAK,SAAS,EAAE;YAC/D,mDAAmD;YACnD,YAAY,wBACP,YAAY,IACf,eAAe,yBAChB,CAAC;SACH;QAED,OAAO,CACL,oBAAC,OAAO,uBACD,YAAY,IACjB,aAAa,EAAG,KAAK,EACrB,UAAU,EAAG,IAAI,EACjB,cAAc,EAAG,CAAC,EAClB,SAAS,EAAG,MAAM,CAAC,CAAC,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,gBAAgB,EACtE,sBAAsB,EAAG,IAAI,EAC7B,MAAM,EAAG,YAAY;YAErB,oBAAC,aAAa,uBAAM,IAAI,CAAC,KAAK,EAAK,CAC3B,CACX,CAAC;IACJ,CAAC;IACH,aAAC;AAAD,CAAC,AAnDD,CAA4B,aAAa,GAmDxC","sourcesContent":["import * as React from 'react';\nimport { BaseComponent } from '../../Utilities';\nimport { mergeOverflows, ktpTargetFromSequences } from '../../utilities/keytips/KeytipUtils';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../ContextualMenu';\nimport { IKeytip, IKeytipProps } from './Keytip.types';\nimport { KeytipContent } from './KeytipContent';\nimport { getCalloutStyles, getCalloutOffsetStyles } from './Keytip.styles';\n\n/**\n * A callout corresponding to another Fabric component to describe a key sequence that will activate that component\n *\n * @export\n * @class Keytip\n * @extends {BaseComponent<IKeytipProps, {}}>}\n */\nexport class Keytip extends BaseComponent<IKeytipProps, {}> implements IKeytip {\n  public render(): JSX.Element {\n    const {\n      keySequences,\n      offset,\n      overflowSetSequence\n    } = this.props;\n    let {\n      calloutProps\n    } = this.props;\n\n    let keytipTarget: string;\n    // Take into consideration the overflow sequence\n    if (overflowSetSequence) {\n      keytipTarget = ktpTargetFromSequences(mergeOverflows(keySequences, overflowSetSequence));\n    } else {\n      keytipTarget = ktpTargetFromSequences(keySequences);\n    }\n\n    if (offset) {\n      // Set callout to top-left corner, will be further positioned in\n      // getCalloutOffsetStyles\n      calloutProps = {\n        ...calloutProps,\n        coverTarget: true,\n        directionalHint: DirectionalHint.topLeftEdge\n      };\n    }\n\n    if (!calloutProps || calloutProps.directionalHint === undefined) {\n      // Default callout directional hint to BottomCenter\n      calloutProps = {\n        ...calloutProps,\n        directionalHint: DirectionalHint.bottomCenter\n      };\n    }\n\n    return (\n      <Callout\n        { ...calloutProps }\n        isBeakVisible={ false }\n        doNotLayer={ true }\n        minPagePadding={ 0 }\n        getStyles={ offset ? getCalloutOffsetStyles(offset) : getCalloutStyles }\n        preventDismissOnScroll={ true }\n        target={ keytipTarget }\n      >\n        <KeytipContent { ...this.props } />\n      </Callout>\n    );\n  }\n}"]}