{"version":3,"file":"Tooltip.Overflow.Example.js","sourceRoot":"../src/","sources":["components/Tooltip/examples/Tooltip.Overflow.Example.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,MAAM,sCAAsC,CAAC;AAC5E,OAAO,EAAE,aAAa,EAAE,MAAM,mCAAmC,CAAC;AAClE,OAAO,EACL,WAAW,EACX,mBAAmB,EACpB,MAAM,oCAAoC,CAAC;AAO5C;IAA4C,kDAA+C;IAGzF,gCAAY,KAAU;QAAtB,YACE,kBAAM,KAAK,CAAC,SAMb;QATgB,eAAS,GAAG,KAAK,CAAC,cAAc,CAAC,CAAC;QAKjD,KAAI,CAAC,KAAK,GAAG;YACX,QAAQ,EAAE,KAAK;YACf,gBAAgB,EAAE,KAAK;SACxB,CAAC;;IACJ,CAAC;IAED,+BAA+B;IACxB,uCAAM,GAAb;QAAA,iBA+BC;QA9BC,OAAO,CACL;YACE,oBAAC,aAAa,IAAC,OAAO,EAAG,cAAM,OAAA,KAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,CAAC,KAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAjD,CAAiD,8BAA0C;YAE1H,6BACE,KAAK,EAAG;oBACN,SAAS,EAAE,MAAM;iBAClB;gBAED,6BACE,KAAK,EAAG;wBACN,QAAQ,EAAE,QAAQ;wBAClB,YAAY,EAAE,UAAU;wBACxB,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS;wBACtD,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM;wBAC7C,MAAM,EAAE,iBAAiB;qBAC1B;oBAED,oBAAC,WAAW,IACV,OAAO,EAAC,qBAAqB,EAC7B,EAAE,EAAG,IAAI,CAAC,SAAS,EACnB,YAAY,EAAG,mBAAmB,CAAC,MAAM,EACzC,eAAe,EAAG,UAAC,gBAAyB,IAAK,OAAA,KAAI,CAAC,QAAQ,CAAC,EAAE,gBAAgB,kBAAA,EAAE,CAAC,EAAnC,CAAmC;wBAEpF,kDAAyB,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,iMAAoM,CACzQ,CACV,CACF,CACF,CACP,CAAC;IACJ,CAAC;IACH,6BAAC;AAAD,CAAC,AA7CD,CAA4C,aAAa,GA6CxD","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, getId } from 'office-ui-fabric-react/lib/Utilities';\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport {\n  TooltipHost,\n  TooltipOverflowMode\n} from 'office-ui-fabric-react/lib/Tooltip';\n\nexport interface ITooltipOverflowExampleState {\n  overflow: boolean;\n  isTooltipVisible: boolean;\n}\n\nexport class TooltipOverflowExample extends BaseComponent<{}, ITooltipOverflowExampleState> {\n  private readonly tooltipId = getId('text-tooltip');\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      overflow: false,\n      isTooltipVisible: false,\n    };\n  }\n\n  // tslint:disable:jsx-no-lambda\n  public render(): JSX.Element {\n    return (\n      <div>\n        <DefaultButton onClick={ () => this.setState({ overflow: !this.state.overflow }) }>Toggle showing overflow</DefaultButton>\n\n        <div\n          style={ {\n            marginTop: '40px'\n          } }\n        >\n          <div\n            style={ {\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              whiteSpace: this.state.overflow ? 'nowrap' : 'inherit',\n              width: this.state.overflow ? '200px' : 'auto',\n              border: '1px solid black'\n            } }\n          >\n            <TooltipHost\n              content='This is the tooltip'\n              id={ this.tooltipId }\n              overflowMode={ TooltipOverflowMode.Parent }\n              onTooltipToggle={ (isTooltipVisible: boolean) => this.setState({ isTooltipVisible }) }\n            >\n              <span aria-describedby={ this.state.isTooltipVisible ? this.tooltipId : undefined }>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec volutpat lectus ut magna sodales, sit amet accumsan arcu accumsan. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\n            </TooltipHost>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]}