{"version":3,"file":"Spinner.base.js","sourceRoot":"../src/","sources":["components/Spinner/Spinner.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAqD,WAAW,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAC9G,OAAO,EACL,aAAa,EACb,YAAY,EACZ,kBAAkB,EAClB,aAAa,EACb,cAAc,EACd,aAAa,EACd,MAAM,iBAAiB,CAAC;AAEzB,IAAM,aAAa,GAAG,kBAAkB,EAAsC,CAAC;AAG/E;IAAiC,uCAAiC;IAAlE;;IAoDA,CAAC;IA7CQ,4BAAM,GAAb;QACQ,IAAA,eASQ,EARZ,cAAI,EACJ,cAAI,EACJ,wBAAS,EACT,sBAAQ,EACR,wBAAS,EACT,gBAAK,EACL,gBAAK,EACL,wBAAS,CACI;QACf,IAAM,aAAa,GAAG,SAAS,IAAI,KAAK,CAAC;QACzC,IAAM,WAAW,GAAG,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,aAAa,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QAExE,uIAAuI;QACvI,kIAAkI;QAClI,IAAI,SAAS,GAAG,IAAI,CAAC;QACrB,IAAI,SAAS,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS,EAAE;YACjD,SAAS,GAAG,IAAI,KAAK,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC;SACjF;QAED,IAAM,UAAU,GAAG,aAAa,CAAC,SAAU,EAAE;YAC3C,KAAK,EAAE,KAAM;YACb,IAAI,EAAE,SAAS;YACf,SAAS,WAAA;SACV,CAAC,CAAC;QAEH,OAAO,CACL,gDAAU,WAAW,IAAG,SAAS,EAAG,UAAU,CAAC,IAAI;YACjD,6BAAK,SAAS,EAAG,UAAU,CAAC,MAAM,GAAK;YAErC,KAAK,IAAI,6BAAK,SAAS,EAAG,UAAU,CAAC,KAAK,IAAK,KAAK,CAAQ;YAG5D,aAAa;gBACb,6BAAK,IAAI,EAAC,QAAQ,eAAa,QAAQ;oBACrC,oBAAC,aAAa;wBACZ,6BAAK,SAAS,EAAG,UAAU,CAAC,gBAAgB,IAAK,aAAa,CAAQ,CACxD,CACZ,CAEJ,CACP,CAAC;IACJ,CAAC;IAhDa,wBAAY,GAAkB;QAC1C,IAAI,EAAE,WAAW,CAAC,MAAM;QACxB,QAAQ,EAAE,QAAQ;KACnB,CAAC;IALS,WAAW;QADvB,YAAY,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC;OACtB,WAAW,CAoDvB;IAAD,kBAAC;CAAA,AApDD,CAAiC,aAAa,GAoD7C;SApDY,WAAW","sourcesContent":["import * as React from 'react';\nimport { ISpinnerProps, ISpinnerStyleProps, ISpinnerStyles, SpinnerType, SpinnerSize } from './Spinner.types';\nimport {\n  BaseComponent,\n  customizable,\n  classNamesFunction,\n  DelayedRender,\n  getNativeProps,\n  divProperties\n} from '../../Utilities';\n\nconst getClassNames = classNamesFunction<ISpinnerStyleProps, ISpinnerStyles>();\n\n@customizable('Spinner', ['theme'])\nexport class SpinnerBase extends BaseComponent<ISpinnerProps, any> {\n\n  public static defaultProps: ISpinnerProps = {\n    size: SpinnerSize.medium,\n    ariaLive: 'polite'\n  };\n\n  public render() {\n    const {\n      type,\n      size,\n      ariaLabel,\n      ariaLive,\n      getStyles,\n      label,\n      theme,\n      className\n    } = this.props;\n    const statusMessage = ariaLabel || label;\n    const nativeProps = getNativeProps(this.props, divProperties, ['size']);\n\n    // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the ISpinnerStyleProps,\n    // we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType finally goes away we should delete this.\n    let styleSize = size;\n    if (styleSize === undefined && type !== undefined) {\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n    }\n\n    const classNames = getClassNames(getStyles!, {\n      theme: theme!,\n      size: styleSize,\n      className\n    });\n\n    return (\n      <div { ...nativeProps } className={ classNames.root }>\n        <div className={ classNames.circle } />\n        {\n          label && <div className={ classNames.label }>{ label }</div>\n        }\n        {\n          statusMessage &&\n          <div role='status' aria-live={ ariaLive }>\n            <DelayedRender>\n              <div className={ classNames.screenReaderText }>{ statusMessage }</div>\n            </DelayedRender>\n          </div>\n        }\n      </div>\n    );\n  }\n\n}"]}