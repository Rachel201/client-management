{"version":3,"file":"TextField.CustomRender.Example.js","sourceRoot":"../src/","sources":["components/TextField/examples/TextField.CustomRender.Example.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,SAAS,EAAmB,MAAM,sCAAsC,CAAC;AAClF,OAAO,EAAE,UAAU,EAAE,MAAM,mCAAmC,CAAC;AAC/D,OAAO,EAAE,OAAO,EAAE,MAAM,oCAAoC,CAAC;AAC7D,OAAO,2BAA2B,CAAC;AAEnC;IAAkD,wDAEhD;IAIA,sCAAY,KAAS;QAArB,YACE,kBAAM,KAAK,CAAC,SAKb;QAUO,oBAAc,GAAG,UAAC,KAAsB;YAEtC,IAAA,+CAAgB,CAAgB;YACxC,OAAO,CACL,6BAAK,SAAS,EAAC,wBAAwB,EAAC,KAAK,EAAG,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE;gBACvF,uEAA+C;gBAC/C,8BAAM,SAAS,EAAC,sCAAsC,EAAC,GAAG,EAAG,UAAC,UAAU,IAAK,OAAA,KAAI,CAAC,kBAAkB,GAAG,UAAW,EAArC,CAAqC;oBAChH,oBAAC,UAAU,IACT,SAAS,EAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,EAChC,KAAK,EAAC,MAAM,EACZ,SAAS,EAAC,MAAM,EAChB,OAAO,EAAG,KAAI,CAAC,QAAQ,GACvB,CACG;gBACL,gBAAgB,IAAI,CACpB,oBAAC,OAAO,IACN,SAAS,EAAC,gCAAgC,EAC1C,MAAM,EAAG,KAAI,CAAC,kBAAkB,EAChC,SAAS,EAAG,KAAI,CAAC,UAAU;oBAE3B,oJAA4H,CACpH,CACX,CACG,CACP,CAAC;QAEJ,CAAC,CAAA;QAEO,cAAQ,GAAG;YACjB,KAAI,CAAC,QAAQ,CAAC;gBACZ,gBAAgB,EAAE,CAAC,KAAI,CAAC,KAAK,CAAC,gBAAgB;aAC/C,CAAC,CAAC;QACL,CAAC,CAAA;QAEO,gBAAU,GAAG;YACnB,KAAI,CAAC,QAAQ,CAAC;gBACZ,gBAAgB,EAAE,KAAK;aACxB,CAAC,CAAC;QACL,CAAC,CAAA;QAnDC,KAAI,CAAC,KAAK,GAAG;YACX,gBAAgB,EAAE,KAAK;SACxB,CAAC;;IACJ,CAAC;IAEM,6CAAM,GAAb;QACE,OAAO,CACL,6BAAK,SAAS,EAAC,uBAAuB;YACpC,oBAAC,SAAS,IAAC,aAAa,EAAG,IAAI,CAAC,cAAc,GAAK,CAC/C,CACP,CAAC;IACJ,CAAC;IAyCH,mCAAC;AAAD,CAAC,AA7DD,CAAkD,KAAK,CAAC,SAAS,GA6DhE","sourcesContent":["import * as React from 'react';\nimport { TextField, ITextFieldProps } from 'office-ui-fabric-react/lib/TextField';\nimport { IconButton } from 'office-ui-fabric-react/lib/Button';\nimport { Callout } from 'office-ui-fabric-react/lib/Callout';\nimport './TextField.Examples.scss';\n\nexport class TextFieldCustomRenderExample extends React.Component<{}, {\n  isCalloutVisible: boolean;\n}> {\n\n  private _iconButtonElement: HTMLElement;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      isCalloutVisible: false\n    };\n  }\n\n  public render(): JSX.Element {\n    return (\n      <div className='docs-TextFieldExample'>\n        <TextField onRenderLabel={ this._onRenderLabel } />\n      </div>\n    );\n  }\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element => {\n\n    const { isCalloutVisible } = this.state;\n    return (\n      <div className='ms-CustomRenderExample' style={ { display: 'flex', alignItems: 'center' } }>\n        <span>TextField with custom label render</span>\n        <span className='ms-CustomRenderExample-labelIconArea' ref={ (menuButton) => this._iconButtonElement = menuButton! }>\n          <IconButton\n            iconProps={ { iconName: 'Info' } }\n            title='Info'\n            ariaLabel='Info'\n            onClick={ this._onClick }\n          />\n        </span>\n        { isCalloutVisible && (\n          <Callout\n            className='ms-CustomRenderExample-callout'\n            target={ this._iconButtonElement }\n            onDismiss={ this._onDismiss }\n          >\n            <text> In additon to the label itself, this label includes an iconbutton which pops out more information in a callout</text>\n          </Callout>\n        ) }\n      </div>\n    );\n\n  }\n\n  private _onClick = (): void => {\n    this.setState({\n      isCalloutVisible: !this.state.isCalloutVisible\n    });\n  }\n\n  private _onDismiss = (): void => {\n    this.setState({\n      isCalloutVisible: false\n    });\n  }\n}\n"]}