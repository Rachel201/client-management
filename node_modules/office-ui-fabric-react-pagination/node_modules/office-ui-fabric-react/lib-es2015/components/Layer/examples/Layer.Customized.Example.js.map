{"version":3,"file":"Layer.Customized.Example.js","sourceRoot":"../src/","sources":["components/Layer/examples/Layer.Customized.Example.tsx"],"names":[],"mappings":";AACA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AACjD,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AACvC,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAOzC;IAA4C,kDAAiD;IAC3F,gCAAY,KAAS;QAArB,YACE,kBAAM,KAAK,CAAC,SAMb;QAuDO,qBAAe,GAAG;YACxB,KAAI,CAAC,QAAQ,CAAC;gBACZ,SAAS,EAAE,KAAK;aACjB,CAAC,CAAC;QACL,CAAC,CAAA;QAEO,wBAAkB,GAAG,UAAC,KAAsD,EAAE,OAAiB;YACrG,KAAI,CAAC,QAAQ,CAAC;gBACZ,SAAS,EAAE,CAAC,CAAC,OAAO;aACrB,CAAC,CAAC;QACL,CAAC,CAAA;QAEO,wBAAkB,GAAG,UAAC,KAAsD,EAAE,OAAiB;YACrG,KAAI,CAAC,QAAQ,CAAC;gBACZ,SAAS,EAAE,CAAC,CAAC,OAAO;aACrB,CAAC,CAAC;QACL,CAAC,CAAA;QA3EC,KAAI,CAAC,KAAK,GAAG;YACX,SAAS,EAAE,IAAI;YACf,SAAS,EAAE,IAAI;SAChB,CAAC;;IACJ,CAAC;IAEM,uCAAM,GAAb;QACE,OAAO,CACL;YACE;;gBACI,0CAAkB;iMAGlB;YACJ,oBAAC,QAAQ,IAAC,KAAK,EAAC,YAAY,EAAC,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAG,QAAQ,EAAG,IAAI,CAAC,kBAAkB,GAAK;YACrG,oBAAC,QAAQ,IAAC,KAAK,EAAC,YAAY,EAAC,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAG,QAAQ,EAAG,IAAI,CAAC,kBAAkB,GAAK;YACrG,oBAAC,UAAU,IACT,cAAc,EACZ,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;oBACrB,KAAK,EAAE;wBACL,MAAM,EAAE,MAAM;qBACf;iBACF,CAAC,CAAC,CAAC,EAAE,IAIN,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBACpB,CACE,oBAAC,KAAK,IACJ,MAAM,EAAG,IAAI,EACb,cAAc,EAAG,IAAI,EACrB,UAAU,EAAC,MAAM,EACjB,kBAAkB,EAChB;wBACE,2BAA2B,EAAE,IAAI;wBACjC,oBAAoB,EAAE,KAAK;qBAC5B,EAEH,WAAW,EAAG,IAAI,CAAC,eAAe,GAClC,CACH,CAAC,CAAC,CAAC,CACF,gCAAO,CACR,CAEM;YACb,oBAAC,SAAS,IACR,EAAE,EAAC,MAAM,EACT,KAAK,EACH;oBACE,QAAQ,EAAE,UAAU;oBACpB,MAAM,EAAE,OAAO;oBACf,QAAQ,EAAE,QAAQ;iBACnB,GAEH,CACE,CACP,CAAC;IACJ,CAAC;IAmBH,6BAAC;AAAD,CAAC,AAhFD,CAA4C,KAAK,CAAC,SAAS,GAgF1D","sourcesContent":["\nimport * as React from 'react';\nimport { Customizer } from '@uifabric/utilities';\nimport { Panel } from '../../../Panel';\nimport { Checkbox } from '../../../Checkbox';\nimport { LayerHost } from '../LayerHost';\n\nexport interface ILayerCustomizedExampleState {\n  showPanel: boolean;\n  trapPanel: boolean;\n}\n\nexport class LayerCustomizedExample extends React.Component<{}, ILayerCustomizedExampleState> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      showPanel: true,\n      trapPanel: true\n    };\n  }\n\n  public render(): JSX.Element {\n    return (\n      <div>\n        <p>\n          A <code>Panel</code> is rendered, trapped in a specified container.\n          Use 'Show panel' to show/hide the panel (or click the X to dismiss it).\n          Use 'Trap panel' to release the panel from its bounds.\n        </p>\n        <Checkbox label='Show panel' checked={ this.state.showPanel } onChange={ this._onShowPanelChange } />\n        <Checkbox label='Trap panel' checked={ this.state.trapPanel } onChange={ this._onTrapPanelChange } />\n        <Customizer\n          scopedSettings={\n            this.state.trapPanel ? {\n              Layer: {\n                hostId: 'test'\n              }\n            } : {}\n          }\n        >\n          {\n            this.state.showPanel ?\n              (\n                <Panel\n                  isOpen={ true }\n                  hasCloseButton={ true }\n                  headerText='Test'\n                  focusTrapZoneProps={\n                    {\n                      isClickableOutsideFocusTrap: true,\n                      forceFocusInsideTrap: false\n                    }\n                  }\n                  onDismissed={ this._onDismissPanel }\n                />\n              ) : (\n                <div />\n              )\n          }\n        </Customizer>\n        <LayerHost\n          id='test'\n          style={\n            {\n              position: 'relative',\n              height: '400px',\n              overflow: 'hidden'\n            }\n          }\n        />\n      </div>\n    );\n  }\n\n  private _onDismissPanel = (): void => {\n    this.setState({\n      showPanel: false\n    });\n  }\n\n  private _onShowPanelChange = (event: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean): void => {\n    this.setState({\n      showPanel: !!checked\n    });\n  }\n\n  private _onTrapPanelChange = (event: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean): void => {\n    this.setState({\n      trapPanel: !!checked\n    });\n  }\n}\n"]}