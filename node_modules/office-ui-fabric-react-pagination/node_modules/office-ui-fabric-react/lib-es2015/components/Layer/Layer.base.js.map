{"version":3,"file":"Layer.base.js","sourceRoot":"../src/","sources":["components/Layer/Layer.base.tsx"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,QAAQ,MAAM,WAAW,CAAC;AACtC,sCAAsC;AAEtC,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AAMtC,OAAO,EACL,aAAa,EACb,kBAAkB,EAClB,YAAY,EACZ,WAAW,EACX,gBAAgB,EAChB,SAAS,EACV,MAAM,iBAAiB,CAAC;AAEzB,IAAM,eAAe,GAAsC,EAAE,CAAC;AAC9D,IAAI,oBAAwC,CAAC;AAE7C,IAAM,aAAa,GAAG,kBAAkB,EAAkC,CAAC;AAG3E;IAA+B,qCAA8B;IAiC3D,mBAAY,KAAkB;QAA9B,YACE,kBAAM,KAAK,CAAC,SAab;QAxCO,kBAAY,GAAG,SAAS,EAAkB,CAAC;QA6BjD,KAAI,CAAC,iBAAiB,CAAC;YACrB,cAAc,EAAE,iBAAiB;SAClC,CAAC,CAAC;QAEH,IAAI,KAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACrB,IAAI,CAAC,eAAe,CAAC,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;gBACvC,eAAe,CAAC,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;aACzC;YAED,eAAe,CAAC,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;SAC/C;;IACH,CAAC;IApCD;;;OAGG;IACW,2BAAiB,GAA/B,UAAgC,EAAU;QACxC,IAAI,eAAe,CAAC,EAAE,CAAC,EAAE;YACvB,eAAe,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,WAAW,EAAE,EAAnB,CAAmB,CAAC,CAAC;SAC3D;IACH,CAAC;IAED;;;;;;;OAOG;IACW,0BAAgB,GAA9B,UAA+B,QAAiB;QAC9C,oBAAoB,GAAG,QAAQ,CAAC;IAClC,CAAC;IAkBM,qCAAiB,GAAxB;QACE,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAEM,wCAAoB,GAA3B;QAAA,iBASC;QARC,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAE3B,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACrB,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,KAAK,KAAI,EAAd,CAAc,CAAC,CAAC;YACxG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE;gBAC9C,OAAO,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;aAC3C;SACF;IACH,CAAC;IAEM,sCAAkB,GAAzB;QAAA,iBAwDC;QAvDC,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAEvB,IAAA,eAA4C,EAA1C,wBAAS,EAAE,wBAAS,EAAE,gBAAK,CAAgB;QACnD,IAAM,UAAU,GAAG,aAAa,CAAC,SAAU,EACzC;YACE,KAAK,EAAE,KAAM;YACb,SAAS,WAAA;YACT,SAAS,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM;SAC9B,CACF,CAAC;QAEF,IAAI,IAAI,KAAK,IAAI,CAAC,KAAK,EAAE;YACvB,IAAI,CAAC,mBAAmB,EAAE,CAAC;SAC5B;QAED,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAElB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;gBACvB,IAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;gBAC9C,IAAM,GAAG,GAAG,WAAW,CAAC,WAAW,CAAC,CAAC;gBAErC,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE;oBACxB,OAAO;iBACR;gBAED,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC9C,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,UAAU,CAAC,IAAK,CAAC;gBAEhD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBACrC,gBAAgB,CAAC,IAAI,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;aACnD;YAED,kGAAkG;YAClG,QAAQ,CAAC,mCAAmC,CAC1C,IAAI,EACJ,CACE,oBAAC,MAAM,IAAC,SAAS,EAAG,UAAU,CAAC,OAAO,IAClC,IAAI,CAAC,KAAK,CAAC,QAAQ,CACd,CACV,EACD,IAAI,CAAC,aAAa,EAClB;gBACE,IAAI,CAAC,KAAI,CAAC,WAAW,EAAE;oBACrB,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;oBAExB,sCAAsC;oBACtC,IAAI,KAAI,CAAC,KAAK,CAAC,cAAc,EAAE;wBAC7B,KAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;qBAC7B;oBAED,KAAI,CAAC,KAAK,CAAC,eAAgB,EAAE,CAAC;iBAC/B;YACH,CAAC,CAAC,CAAC;SACN;IACH,CAAC;IAEM,0BAAM,GAAb;QACE,OAAO,CACL,8BACE,SAAS,EAAC,UAAU,EACpB,GAAG,EAAG,IAAI,CAAC,YAAY,GACvB,CACH,CAAC;IACJ,CAAC;IAEO,uCAAmB,GAA3B;QACE,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,IAAI,CAAC,KAAK,CAAC,kBAAmB,EAAE,CAAC;YAEjC,QAAQ,CAAC,sBAAsB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACpD,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC;YACjD,IAAI,UAAU,EAAE;gBACd,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAC5C;YACD,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;YAC/B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;SAC1B;IACH,CAAC;IAEO,4BAAQ,GAAhB;QACU,IAAA,0BAAM,CAAgB;QAC9B,IAAM,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QAEnD,IAAI,CAAC,GAAG,EAAE;YACR,OAAO,SAAS,CAAC;SAClB;QAED,IAAI,MAAM,EAAE;YACV,OAAO,GAAG,CAAC,cAAc,CAAC,MAAM,CAAS,CAAC;SAC3C;aAAM;YACL,OAAO,oBAAoB,CAAC,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,oBAAoB,CAAS,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC;SAC1F;IACH,CAAC;IA5Ja,sBAAY,GAAgB;QACxC,eAAe,EAAE,cAAM,OAAA,SAAS,EAAT,CAAS;QAChC,kBAAkB,EAAE,cAAM,OAAA,SAAS,EAAT,CAAS;KACpC,CAAC;IALS,SAAS;QADrB,YAAY,CAAC,OAAO,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;OAC9B,SAAS,CAgKrB;IAAD,gBAAC;CAAA,AAhKD,CAA+B,aAAa,GAgK3C;SAhKY,SAAS","sourcesContent":["/* tslint:disable:no-unused-variable */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n/* tslint:enable:no-unused-variable */\n\nimport { Fabric } from '../../Fabric';\nimport {\n  ILayerProps,\n  ILayerStyleProps,\n  ILayerStyles,\n} from './Layer.types';\nimport {\n  BaseComponent,\n  classNamesFunction,\n  customizable,\n  getDocument,\n  setVirtualParent,\n  createRef\n} from '../../Utilities';\n\nconst _layersByHostId: { [hostId: string]: LayerBase[] } = {};\nlet _defaultHostSelector: string | undefined;\n\nconst getClassNames = classNamesFunction<ILayerStyleProps, ILayerStyles>();\n\n@customizable('Layer', ['theme', 'hostId'])\nexport class LayerBase extends BaseComponent<ILayerProps, {}> {\n\n  public static defaultProps: ILayerProps = {\n    onLayerDidMount: () => undefined,\n    onLayerWillUnmount: () => undefined\n  };\n\n  private _rootElement = createRef<HTMLDivElement>();\n  private _host: Node;\n  private _layerElement: HTMLElement | undefined;\n  private _hasMounted: boolean;\n  /**\n   * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\n   * care about the specific host.\n   */\n  public static notifyHostChanged(id: string) {\n    if (_layersByHostId[id]) {\n      _layersByHostId[id].forEach(layer => layer.forceUpdate());\n    }\n  }\n\n  /**\n   * Sets the default target selector to use when determining the host in which\n   * Layered content will be injected into. If not provided, an element will be\n   * created at the end of the document body.\n   *\n   * Passing in a falsey value will clear the default target and reset back to\n   * using a created element at the end of document body.\n   */\n  public static setDefaultTarget(selector?: string) {\n    _defaultHostSelector = selector;\n  }\n\n  constructor(props: ILayerProps) {\n    super(props);\n\n    this._warnDeprecations({\n      onLayerMounted: 'onLayerDidMount'\n    });\n\n    if (this.props.hostId) {\n      if (!_layersByHostId[this.props.hostId]) {\n        _layersByHostId[this.props.hostId] = [];\n      }\n\n      _layersByHostId[this.props.hostId].push(this);\n    }\n  }\n\n  public componentDidMount(): void {\n    this.componentDidUpdate();\n  }\n\n  public componentWillUnmount(): void {\n    this._removeLayerElement();\n\n    if (this.props.hostId) {\n      _layersByHostId[this.props.hostId] = _layersByHostId[this.props.hostId].filter(layer => layer !== this);\n      if (!_layersByHostId[this.props.hostId].length) {\n        delete _layersByHostId[this.props.hostId];\n      }\n    }\n  }\n\n  public componentDidUpdate(): void {\n    const host = this._getHost();\n\n    const { className, getStyles, theme } = this.props;\n    const classNames = getClassNames(getStyles!,\n      {\n        theme: theme!,\n        className,\n        isNotHost: !this.props.hostId\n      }\n    );\n\n    if (host !== this._host) {\n      this._removeLayerElement();\n    }\n\n    if (host) {\n      this._host = host;\n\n      if (!this._layerElement) {\n        const rootElement = this._rootElement.current;\n        const doc = getDocument(rootElement);\n\n        if (!doc || !rootElement) {\n          return;\n        }\n\n        this._layerElement = doc.createElement('div');\n        this._layerElement.className = classNames.root!;\n\n        host.appendChild(this._layerElement);\n        setVirtualParent(this._layerElement, rootElement);\n      }\n\n      // Using this 'unstable' method allows us to retain the React context across the layer projection.\n      ReactDOM.unstable_renderSubtreeIntoContainer(\n        this,\n        (\n          <Fabric className={ classNames.content }>\n            { this.props.children }\n          </Fabric>\n        ),\n        this._layerElement,\n        () => {\n          if (!this._hasMounted) {\n            this._hasMounted = true;\n\n            // TODO: @deprecated cleanup required.\n            if (this.props.onLayerMounted) {\n              this.props.onLayerMounted();\n            }\n\n            this.props.onLayerDidMount!();\n          }\n        });\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <span\n        className='ms-Layer'\n        ref={ this._rootElement }\n      />\n    );\n  }\n\n  private _removeLayerElement(): void {\n    if (this._layerElement) {\n      this.props.onLayerWillUnmount!();\n\n      ReactDOM.unmountComponentAtNode(this._layerElement);\n      const parentNode = this._layerElement.parentNode;\n      if (parentNode) {\n        parentNode.removeChild(this._layerElement);\n      }\n      this._layerElement = undefined;\n      this._hasMounted = false;\n    }\n  }\n\n  private _getHost(): Node | undefined {\n    const { hostId } = this.props;\n    const doc = getDocument(this._rootElement.current);\n\n    if (!doc) {\n      return undefined;\n    }\n\n    if (hostId) {\n      return doc.getElementById(hostId) as Node;\n    } else {\n      return _defaultHostSelector ? doc.querySelector(_defaultHostSelector) as Node : doc.body;\n    }\n  }\n\n}\n"]}