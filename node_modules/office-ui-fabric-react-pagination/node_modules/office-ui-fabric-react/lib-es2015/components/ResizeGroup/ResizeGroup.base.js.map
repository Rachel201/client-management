{"version":3,"file":"ResizeGroup.base.js","sourceRoot":"../src/","sources":["components/ResizeGroup/ResizeGroup.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  BaseComponent,\n  classNamesFunction,\n  customizable,\n  divProperties,\n  getNativeProps,\n  provideContext,\n  createRef\n} from '../../Utilities';\nimport {\n  IResizeGroupProps,\n  IResizeGroupStyles,\n  IResizeGroupStyleProps\n} from './ResizeGroup.types';\n\nconst RESIZE_DELAY = 16;\n\nexport interface IResizeGroupState {\n\n  /**\n   * Final data used to render proper sized component\n  */\n  renderedData?: any;\n\n  /**\n   * Data to render in a hidden div for measurement\n   */\n  dataToMeasure?: any;\n\n  /**\n   * Set to true when the content container might have new dimensions and should\n   * be remeasured.\n   */\n  measureContainer?: boolean;\n\n  /**\n   * Are we resizing to accommodate having more or less available space?\n   * The 'grow' direction is when the container may have more room than the last render,\n   * such as when a window resize occurs. This means we will try to fit more content in the window.\n   * The 'shrink' direction is when the contents don't fit in the container and we need\n   * to find a transformation of the data that makes everything fit.\n   */\n  resizeDirection?: 'grow' | 'shrink';\n}\n\n/**\n * Returns a simple object is able to store measurements with a given key.\n */\nexport const getMeasurementCache = () => {\n  const measurementsCache: { [key: string]: number } = {};\n\n  return {\n    /**\n     * Checks if the provided data has a cacheKey. If it has a cacheKey and there is a\n     * corresponding entry in the measurementsCache, then it will return that value.\n     * Returns undefined otherwise.\n     */\n    getCachedMeasurement: (data: any): number | undefined => {\n      if (data && data.cacheKey && measurementsCache.hasOwnProperty(data.cacheKey)) {\n        return measurementsCache[data.cacheKey];\n      }\n\n      return undefined;\n    },\n    /**\n     * Should be called whenever there is a new measurement associated with a given data object.\n     * If the data has a cacheKey, store that measurement in the measurementsCache.\n     */\n    addMeasurementToCache: (data: any, measurement: number): void => {\n      if (data.cacheKey) {\n        measurementsCache[data.cacheKey] = measurement;\n      }\n    }\n  };\n};\n\n/**\n * Returns a function that is able to compute the next state for the ResizeGroup given the current\n * state and any measurement updates.\n */\nexport const getNextResizeGroupStateProvider = (measurementCache = getMeasurementCache()) => {\n  const _measurementCache = measurementCache;\n  let _containerWidth: number | undefined;\n\n  /**\n   * Gets the width of the data rendered in a hidden div.\n   * @param measuredData - The data corresponding to the measurement we wish to take.\n   * @param getElementToMeasureWidth - A function that returns the measurement of the rendered data. Only called when the measurement\n   * is not in the cache.\n   */\n  function _getMeasuredWidth(measuredData: any, getElementToMeasureWidth: () => number): number {\n    const cachedWidth = _measurementCache.getCachedMeasurement(measuredData);\n    if (cachedWidth !== undefined) {\n      return cachedWidth;\n    }\n\n    const measuredWidth = getElementToMeasureWidth();\n    _measurementCache.addMeasurementToCache(measuredData, measuredWidth);\n    return measuredWidth;\n  }\n\n  /**\n   * Will get the next IResizeGroupState based on the current data while trying to shrink contents\n   * to fit in the container.\n   * @param data - The initial data point to start measuring.\n   * @param onReduceData - Function that transforms the data into something that should render with less width.\n   * @param getElementToMeasureWidth - A function that returns the measurement of the rendered data. Only called when the measurement\n   * is not in the cache.\n   */\n  function _shrinkContentsUntilTheyFit(data: any,\n    onReduceData: (prevData: any) => any,\n    getElementToMeasureWidth: () => number): IResizeGroupState {\n    let dataToMeasure = data;\n    let measuredWidth: number | undefined = _getMeasuredWidth(data, getElementToMeasureWidth);\n\n    while (measuredWidth > _containerWidth!) {\n      const nextMeasuredData = onReduceData(dataToMeasure);\n\n      // We don't want to get stuck in an infinite render loop when there are no more\n      // scaling steps, so implementations of onReduceData should return undefined when\n      // there are no more scaling states to apply.\n      if (nextMeasuredData === undefined) {\n        return {\n          renderedData: dataToMeasure,\n          resizeDirection: undefined,\n          dataToMeasure: undefined\n        };\n      }\n\n      measuredWidth = _measurementCache.getCachedMeasurement(nextMeasuredData);\n\n      // If the measurement isn't in the cache, we need to rerender with some data in a hidden div\n      if (measuredWidth === undefined) {\n        return {\n          dataToMeasure: nextMeasuredData,\n          resizeDirection: 'shrink'\n        };\n      }\n\n      dataToMeasure = nextMeasuredData;\n    }\n\n    return {\n      renderedData: dataToMeasure,\n      resizeDirection: undefined,\n      dataToMeasure: undefined\n    };\n  }\n\n  /**\n   * This function should be called when the state changes in a manner that might allow for more content to fit\n   * on the screen, such as the window width growing.\n   * @param data - The initial data point to start measuring.\n   * @param onGrowData - Function that transforms the data into something that may take up more space when rendering.\n   * @param getElementToMeasureWidth - A function that returns the measurement of the rendered data. Only called when the measurement\n   * is not in the cache.\n   */\n  function _growDataUntilItDoesNotFit(data: any,\n    onGrowData: (prevData: any) => any,\n    getElementToMeasureWidth: () => number): IResizeGroupState {\n    let dataToMeasure = data;\n    let measuredWidth: number | undefined = _getMeasuredWidth(data, getElementToMeasureWidth);\n\n    while (measuredWidth < _containerWidth!) {\n      const nextMeasuredData = onGrowData(dataToMeasure);\n\n      // We don't want to get stuck in an infinite render loop when there are no more\n      // scaling steps, so implementations of onGrowData should return undefined when\n      // there are no more scaling states to apply.\n      if (nextMeasuredData === undefined) {\n        return {\n          renderedData: dataToMeasure,\n          resizeDirection: undefined,\n          dataToMeasure: undefined\n        };\n      }\n\n      measuredWidth = _measurementCache.getCachedMeasurement(nextMeasuredData);\n      // If the measurement isn't in the cache, we need to rerender with some data in a hidden div\n      if (measuredWidth === undefined) {\n        return {\n          dataToMeasure: nextMeasuredData\n        };\n      }\n\n      dataToMeasure = nextMeasuredData;\n    }\n\n    // Once the loop is done, we should now shrink until the contents fit.\n    return {\n      dataToMeasure,\n      resizeDirection: 'shrink'\n    };\n  }\n\n  /**\n   * Handles an update to the container width. Should only be called when we knew the previous container width.\n   * @param newWidth - The new width of the container.\n   * @param fullWidthData - The initial data passed in as a prop to resizeGroup.\n   * @param renderedData - The data that was rendered prior to the container size changing.\n   * @param onGrowData - Set to true if the Resize group has an onGrowData function.\n   */\n  function _updateContainerWidth(newWidth: number, fullWidthData: any, renderedData: any, onGrowData?: (prevData: any) => any): IResizeGroupState {\n    let nextState: IResizeGroupState;\n    if (newWidth > _containerWidth!) {\n      if (onGrowData) {\n        nextState = {\n          resizeDirection: 'grow',\n          dataToMeasure: onGrowData(renderedData)\n        };\n      } else {\n        nextState = {\n          resizeDirection: 'shrink',\n          dataToMeasure: fullWidthData\n        };\n      }\n    } else {\n      nextState = {\n        resizeDirection: 'shrink',\n        dataToMeasure: renderedData\n      };\n    }\n    _containerWidth = newWidth;\n    return { ...nextState, measureContainer: false };\n  }\n\n  function getNextState(props: IResizeGroupProps,\n    currentState: IResizeGroupState,\n    getElementToMeasureWidth: () => number,\n    newContainerWidth?: number): IResizeGroupState | undefined {\n    // If there is no new container width or data to measure, there is no need for a new state update\n    if (newContainerWidth === undefined && currentState.dataToMeasure === undefined) {\n      return undefined;\n    }\n\n    if (newContainerWidth) {\n      // If we know what the last container size was and we rendered data at that width, we can do an optimized render\n      if (_containerWidth && currentState.renderedData && !currentState.dataToMeasure) {\n        return { ...currentState, ..._updateContainerWidth(newContainerWidth, props.data, currentState.renderedData, props.onGrowData) };\n      }\n\n      // If we are just setting the container width for the first time, we can't do any optimizations\n      _containerWidth = newContainerWidth;\n    }\n\n    let nextState: IResizeGroupState = {\n      ...currentState,\n      measureContainer: false\n    };\n\n    if (currentState.dataToMeasure) {\n      if (currentState.resizeDirection === 'grow' && props.onGrowData) {\n        nextState = {\n          ...nextState,\n          ..._growDataUntilItDoesNotFit(currentState.dataToMeasure, props.onGrowData, getElementToMeasureWidth)\n        };\n      } else {\n        nextState = {\n          ...nextState,\n          ..._shrinkContentsUntilTheyFit(currentState.dataToMeasure, props.onReduceData, getElementToMeasureWidth)\n        };\n      }\n    }\n\n    return nextState;\n  }\n\n  function shouldRenderDataToMeasureInHiddenDiv(dataToMeasure: any | undefined): boolean {\n    if (!dataToMeasure || _measurementCache.getCachedMeasurement(dataToMeasure) !== undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return {\n    getNextState,\n    shouldRenderDataToMeasureInHiddenDiv\n  };\n};\n\n// Provides a context property that (if true) tells any child components that\n// they are only being used for measurement purposes and will not be visible.\nconst MeasuredContext = provideContext({\n  isMeasured: PropTypes.bool\n}, () => {\n  return { isMeasured: true };\n});\n\nconst getClassNames = classNamesFunction<IResizeGroupStyleProps, IResizeGroupStyles>();\n\n@customizable('ResizeGroup', ['theme'])\nexport class ResizeGroupBase extends BaseComponent<IResizeGroupProps, IResizeGroupState> {\n  private _nextResizeGroupStateProvider = getNextResizeGroupStateProvider();\n  private _root = createRef<HTMLDivElement>();\n  private _measured = createRef<HTMLDivElement>();\n\n  constructor(props: IResizeGroupProps) {\n    super(props);\n    this.state = {\n      dataToMeasure: { ...this.props.data },\n      resizeDirection: 'grow',\n      measureContainer: true,\n    };\n  }\n\n  public render(): JSX.Element {\n    const { onRenderData, className, getStyles, theme } = this.props;\n    const { dataToMeasure, renderedData } = this.state;\n    const divProps = getNativeProps(this.props, divProperties, ['data']);\n    const classNames = getClassNames(getStyles!, { theme: theme!, className });\n\n    return (\n      <div { ...divProps } className={ classNames.root } ref={ this._root }>\n        { this._nextResizeGroupStateProvider.shouldRenderDataToMeasureInHiddenDiv(dataToMeasure) && (\n          <div\n            style={ { position: 'fixed', visibility: 'hidden' } }\n            ref={ this._measured }\n          >\n            <MeasuredContext>{ onRenderData(dataToMeasure) }</MeasuredContext>\n          </div>\n        ) }\n\n        { renderedData && onRenderData(renderedData) }\n      </div>\n    );\n  }\n\n  public componentDidMount(): void {\n    this._afterComponentRendered();\n    this._events.on(window, 'resize', this._async.debounce(this._onResize, RESIZE_DELAY, { leading: true }));\n  }\n\n  public componentWillReceiveProps(nextProps: IResizeGroupProps): void {\n    this.setState({\n      dataToMeasure: { ...nextProps.data },\n      resizeDirection: 'grow',\n      measureContainer: true // Receiving new props means the parent might rerender and the root width might change\n    });\n  }\n\n  public componentDidUpdate(prevProps: IResizeGroupProps) {\n    if (this.state.renderedData) {\n      if (this.props.dataDidRender) {\n        this.props.dataDidRender(this.state.renderedData);\n      }\n    }\n    this._afterComponentRendered();\n  }\n\n  public remeasure(): void {\n    if (this._root.current) {\n      this.setState({ measureContainer: true });\n    }\n  }\n\n  private _afterComponentRendered(): void {\n    this._async.requestAnimationFrame(() => {\n      let containerWidth = undefined;\n      if (this.state.measureContainer && this._root.current) {\n        containerWidth = this._root.current.getBoundingClientRect().width;\n      }\n      const nextState = this._nextResizeGroupStateProvider.getNextState(this.props,\n        this.state,\n        () => this._measured.current ? this._measured.current.scrollWidth : 0,\n        containerWidth);\n\n      if (nextState) {\n        this.setState(nextState);\n      }\n    });\n  }\n\n  private _onResize(): void {\n    if (this._root.current) {\n      this.setState({ measureContainer: true });\n    }\n  }\n}"]}