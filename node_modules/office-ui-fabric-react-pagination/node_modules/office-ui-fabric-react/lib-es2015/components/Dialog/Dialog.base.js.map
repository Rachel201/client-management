{"version":3,"file":"Dialog.base.js","sourceRoot":"../src/","sources":["components/Dialog/Dialog.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  classNamesFunction,\n  customizable,\n  getId\n} from '../../Utilities';\nimport {\n  IDialogProps,\n  IDialogStyleProps,\n  IDialogStyles,\n} from './Dialog.types';\nimport { DialogType, IDialogContentProps } from './DialogContent.types';\nimport { Modal, IModalProps } from '../../Modal';\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\n\nconst getClassNames = classNamesFunction<IDialogStyleProps, IDialogStyles>();\n\nimport { DialogContent } from './DialogContent';\n\nconst DefaultModalProps: IModalProps = {\n  isDarkOverlay: false,\n  isBlocking: false,\n  className: '',\n  containerClassName: ''\n};\n\nconst DefaultDialogContentProps: IDialogContentProps = {\n  type: DialogType.normal,\n  className: '',\n  topButtonsProps: [],\n};\n\n@customizable('Dialog', ['theme'])\n@withResponsiveMode\nexport class DialogBase extends BaseComponent<IDialogProps, {}> {\n  public static defaultProps: IDialogProps = {\n    hidden: true,\n  };\n\n  private _id: string;\n  private _defaultTitleTextId: string;\n  private _defaultSubTextId: string;\n\n  constructor(props: IDialogProps) {\n    super(props);\n\n    this._id = getId('Dialog');\n    this._defaultTitleTextId = this._id + '-title';\n    this._defaultSubTextId = this._id + '-subText';\n\n    this._warnDeprecations({\n      'isOpen': 'hidden',\n      'type': 'dialogContentProps.type',\n      'subText': 'dialogContentProps.subText',\n      'contentClassName': 'dialogContentProps.className',\n      'topButtonsProps': 'dialogContentProps.topButtonsProps',\n      'className': 'modalProps.className',\n      'isDarkOverlay': 'modalProps.isDarkOverlay',\n      'isBlocking': 'modalProps.isBlocking',\n      'containerClassName': 'modalProps.containerClassName',\n      'onDismissed': 'modalProps.onDismissed',\n      'onLayerDidMount': 'modalProps.onLayerDidMount',\n      'ariaDescribedById': 'modalProps.subtitleAriaId',\n      'ariaLabelledById': 'modalProps.titleAriaId'\n    });\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      containerClassName,\n      contentClassName,\n      elementToFocusOnDismiss,\n      firstFocusableSelector,\n      forceFocusInsideTrap,\n      getStyles,\n      hidden,\n      ignoreExternalFocusing,\n      isBlocking,\n      isClickableOutsideFocusTrap,\n      isDarkOverlay,\n      isOpen,\n      onDismiss,\n      onDismissed,\n      onLayerDidMount,\n      responsiveMode,\n      subText,\n      theme,\n      title,\n      topButtonsProps,\n      type,\n    } = this.props;\n\n    const modalProps = {\n      ...DefaultModalProps,\n      ...this.props.modalProps\n    };\n\n    const dialogContentProps: IDialogContentProps = {\n      ...DefaultDialogContentProps,\n      ...this.props.dialogContentProps,\n    };\n\n    const classNames = getClassNames(getStyles!, {\n      theme: theme!,\n      className: className || modalProps!.className,\n      containerClassName: containerClassName || modalProps!.containerClassName,\n      hidden,\n    });\n\n    return (\n      <Modal\n        elementToFocusOnDismiss={ elementToFocusOnDismiss }\n        firstFocusableSelector={ firstFocusableSelector }\n        forceFocusInsideTrap={ forceFocusInsideTrap }\n        ignoreExternalFocusing={ ignoreExternalFocusing }\n        isClickableOutsideFocusTrap={ isClickableOutsideFocusTrap }\n        onDismissed={ onDismissed }\n        onLayerDidMount={ onLayerDidMount }\n        responsiveMode={ responsiveMode }\n        { ...modalProps }\n        isDarkOverlay={ isDarkOverlay !== undefined ? isDarkOverlay : modalProps!.isDarkOverlay }\n        isBlocking={ isBlocking !== undefined ? isBlocking : modalProps!.isBlocking }\n        isOpen={ isOpen !== undefined ? isOpen : !hidden }\n        className={ classNames.root }\n        containerClassName={ classNames.main }\n        onDismiss={ onDismiss ? onDismiss : modalProps!.onDismiss }\n        subtitleAriaId={ this._getSubTextId() }\n        titleAriaId={ this._getTitleTextId() }\n      >\n        <DialogContent\n          titleId={ this._defaultTitleTextId }\n          subTextId={ this._defaultSubTextId }\n          title={ title }\n          subText={ subText }\n          showCloseButton={ isBlocking !== undefined ? !isBlocking : !modalProps!.isBlocking }\n          topButtonsProps={ topButtonsProps ? topButtonsProps : dialogContentProps!.topButtonsProps }\n          type={ type !== undefined ? type : dialogContentProps!.type }\n          onDismiss={ onDismiss ? onDismiss : dialogContentProps!.onDismiss }\n          className={ contentClassName || dialogContentProps!.className }\n          { ...dialogContentProps }\n        >\n          { this.props.children }\n        </DialogContent>\n      </Modal>\n    );\n  }\n\n  private _getSubTextId = (): string | undefined => {\n    const { ariaDescribedById, modalProps, dialogContentProps, subText } = this.props;\n    let id = ariaDescribedById || (modalProps && modalProps.subtitleAriaId);\n\n    if (!id) {\n      id = (subText || (dialogContentProps && dialogContentProps.subText)) && this._defaultSubTextId;\n    }\n\n    return id;\n  }\n\n  private _getTitleTextId = (): string | undefined => {\n    const { ariaLabelledById, modalProps, dialogContentProps, title } = this.props;\n    let id = ariaLabelledById || (modalProps && modalProps.titleAriaId);\n\n    if (!id) {\n      id = (title || (dialogContentProps && dialogContentProps.title)) && this._defaultTitleTextId;\n    }\n\n    return id;\n  }\n}\n"]}