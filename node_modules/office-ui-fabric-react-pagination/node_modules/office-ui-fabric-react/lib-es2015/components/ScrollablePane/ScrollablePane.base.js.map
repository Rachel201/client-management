{"version":3,"file":"ScrollablePane.base.js","sourceRoot":"../src/","sources":["components/ScrollablePane/ScrollablePane.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  BaseComponent,\n  classNamesFunction,\n  customizable,\n  divProperties,\n  getNativeProps,\n  createRef\n} from '../../Utilities';\nimport {\n  IScrollablePane,\n  IScrollablePaneProps,\n  IScrollablePaneStyles,\n  IScrollablePaneStyleProps\n} from './ScrollablePane.types';\nimport { Sticky } from '../../Sticky';\n\nexport interface IScrollablePaneContext {\n  scrollablePane: PropTypes.Requireable<object>;\n}\n\nexport interface IScrollablePaneState {\n  stickyTopHeight: number;\n  stickyBottomHeight: number;\n}\n\nconst getClassNames = classNamesFunction<IScrollablePaneStyleProps, IScrollablePaneStyles>();\n\n@customizable('ScrollablePane', ['theme'])\nexport class ScrollablePaneBase extends BaseComponent<IScrollablePaneProps, IScrollablePaneState> implements IScrollablePane {\n  public static childContextTypes: React.ValidationMap<IScrollablePaneContext> = {\n    scrollablePane: PropTypes.object\n  };\n\n  private _root = createRef<HTMLDivElement>();\n  private _stickyAboveRef = createRef<HTMLDivElement>();\n  private _stickyBelowRef = createRef<HTMLDivElement>();\n  private _contentContainer = createRef<HTMLDivElement>();\n  private _subscribers: Set<Function>;\n  private _stickies: Set<Sticky>;\n  private _mutationObserver: MutationObserver;\n\n  constructor(props: IScrollablePaneProps) {\n    super(props);\n    this._subscribers = new Set<Function>();\n    this._stickies = new Set<Sticky>();\n\n    this.state = {\n      stickyTopHeight: 0,\n      stickyBottomHeight: 0\n    };\n  }\n\n  public get root(): HTMLDivElement | null {\n    return this._root.current;\n  }\n\n  public get stickyAbove(): HTMLDivElement | null {\n    return this._stickyAboveRef.current;\n  }\n\n  public get stickyBelow(): HTMLDivElement | null {\n    return this._stickyBelowRef.current;\n  }\n\n  public get contentContainer(): HTMLDivElement | null {\n    return this._contentContainer.current;\n  }\n\n  public getChildContext() {\n    return {\n      scrollablePane: {\n        subscribe: this.subscribe,\n        unsubscribe: this.unsubscribe,\n        addSticky: this.addSticky,\n        removeSticky: this.removeSticky,\n        updateStickyRefHeights: this.updateStickyRefHeights,\n        sortSticky: this.sortSticky,\n        notifySubscribers: this.notifySubscribers\n      }\n    };\n  }\n\n  public componentDidMount() {\n    const { initialScrollPosition } = this.props;\n    this._events.on(this.contentContainer, 'scroll', this._async.throttle(this.notifySubscribers, 50));\n    this._events.on(window, 'resize', this._onWindowResize);\n    if (this.contentContainer && initialScrollPosition) {\n      this.contentContainer.scrollTop = initialScrollPosition;\n    }\n\n    // Set sticky distances from top property, then sort in correct order and notify subscribers\n    this.setStickiesDistanceFromTop();\n    this._stickies.forEach((sticky) => {\n      this.sortSticky(sticky);\n    });\n    this.notifySubscribers();\n\n    if ('MutationObserver' in window) {\n      this._mutationObserver = new MutationObserver(mutation => {\n        // Function to check if mutation is occuring in stickyAbove or stickyBelow\n        function checkIfMutationIsSticky(mutationRecord: MutationRecord): boolean {\n          if (this.stickyAbove !== null && this.stickyBelow !== null) {\n            return this.stickyAbove.contains(mutationRecord.target) || this.stickyBelow.contains(mutationRecord.target);\n          }\n          return false;\n        }\n\n        // If mutation occurs in sticky header or footer, then update sticky top/bottom heights\n        if (mutation.some(checkIfMutationIsSticky.bind(this))) {\n          this.updateStickyRefHeights();\n        } else {\n          // Else if mutation occurs in scrollable region, then find sticky it belongs to and force update\n          const stickyList: Sticky[] = [];\n          this._stickies.forEach((sticky) => {\n            if (sticky.root && sticky.root.contains(mutation[0].target)) {\n              stickyList.push(sticky);\n            }\n          });\n          if (stickyList.length) {\n            stickyList.forEach((sticky) => {\n              sticky.forceUpdate();\n            });\n          }\n        }\n      });\n\n      if (this.root) {\n        this._mutationObserver.observe(this.root, {\n          childList: true,\n          attributes: true,\n          subtree: true,\n          characterData: true\n        });\n      }\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.off(this.contentContainer);\n    this._events.off(window);\n    this._mutationObserver.disconnect();\n  }\n\n  // Only updates if props/state change, just to prevent excessive setState with updateStickyRefHeights\n  public shouldComponentUpdate(nextProps: IScrollablePaneProps, nextState: IScrollablePaneState): boolean {\n    return this.props.children !== nextProps.children ||\n      this.props.initialScrollPosition !== nextProps.initialScrollPosition ||\n      this.props.className !== nextProps.className ||\n      this.state.stickyTopHeight !== nextState.stickyTopHeight ||\n      this.state.stickyBottomHeight !== nextState.stickyBottomHeight;\n  }\n\n  public componentDidUpdate(prevProps: IScrollablePaneProps, prevState: IScrollablePaneState) {\n    const initialScrollPosition = this.props.initialScrollPosition;\n    if (this.contentContainer && initialScrollPosition && prevProps.initialScrollPosition !== initialScrollPosition) {\n      this.contentContainer.scrollTop = initialScrollPosition;\n    }\n\n    // Update subscribers when stickyTopHeight/stickyBottomHeight changes\n    if (prevState.stickyTopHeight !== this.state.stickyTopHeight || prevState.stickyBottomHeight !== this.state.stickyBottomHeight) {\n      this.notifySubscribers();\n    }\n  }\n\n  public render(): JSX.Element {\n    const { className, theme, getStyles } = this.props;\n    const { stickyTopHeight, stickyBottomHeight } = this.state;\n    const classNames = getClassNames(getStyles!,\n      {\n        theme: theme!,\n        className\n      }\n    );\n\n    return (\n      <div\n        { ...getNativeProps(this.props, divProperties) }\n        ref={ this._root }\n        className={ classNames.root }\n      >\n        <div\n          ref={ this._contentContainer }\n          className={ classNames.contentContainer }\n          data-is-scrollable={ true }\n        >\n          { this.props.children }\n        </div>\n        <div\n          ref={ this._stickyAboveRef }\n          className={ classNames.stickyAbove }\n          style={ this._getStickyContainerStyle(stickyTopHeight) }\n        />\n        <div\n          className={ classNames.stickyBelow }\n          style={ this._getStickyContainerStyle(stickyBottomHeight) }\n        >\n          <div\n            ref={ this._stickyBelowRef }\n            className={ classNames.stickyBelowItems }\n          />\n        </div>\n      </div>\n    );\n  }\n\n  public setStickiesDistanceFromTop(): void {\n    if (this.contentContainer) {\n      this._stickies.forEach((sticky) => {\n        sticky.setDistanceFromTop(this.contentContainer as HTMLDivElement);\n      });\n    }\n  }\n\n  public forceLayoutUpdate() {\n    this._onWindowResize();\n  }\n\n  public subscribe = (handler: Function): void => {\n    this._subscribers.add(handler);\n  }\n\n  public unsubscribe = (handler: Function): void => {\n    this._subscribers.delete(handler);\n  }\n\n  public addSticky = (sticky: Sticky): void => {\n    this._stickies.add(sticky);\n\n    // If ScrollablePane is mounted, then sort sticky in correct place\n    if (this.contentContainer) {\n      sticky.setDistanceFromTop(this.contentContainer);\n      this.sortSticky(sticky);\n    }\n    this.notifySubscribers();\n  }\n\n  public removeSticky = (sticky: Sticky): void => {\n    this._stickies.delete(sticky);\n    this._removeStickyFromContainers(sticky);\n    this.notifySubscribers();\n  }\n\n  public sortSticky = (sticky: Sticky): void => {\n    if (this.stickyAbove && this.stickyBelow) {\n      if (sticky.canStickyTop && sticky.stickyContentTop) {\n        this._addToStickyContainer(sticky, this.stickyAbove, sticky.stickyContentTop);\n      }\n\n      if (sticky.canStickyBottom && sticky.stickyContentBottom) {\n        this._addToStickyContainer(sticky, this.stickyBelow, sticky.stickyContentBottom);\n      }\n    }\n  }\n\n  public updateStickyRefHeights = (): void => {\n    const stickyItems = this._stickies;\n\n    let stickyTopHeight = 0;\n    let stickyBottomHeight = 0;\n\n    stickyItems.forEach((sticky: Sticky) => {\n      const { isStickyTop, isStickyBottom } = sticky.state;\n      if (sticky.nonStickyContent) {\n        if (isStickyTop) {\n          stickyTopHeight += sticky.nonStickyContent.offsetHeight;\n        }\n        if (isStickyBottom) {\n          stickyBottomHeight += sticky.nonStickyContent.offsetHeight;\n        }\n        this._checkStickyStatus(sticky);\n      }\n    });\n\n    this.setState({\n      stickyTopHeight: stickyTopHeight,\n      stickyBottomHeight: stickyBottomHeight\n    });\n  }\n\n  public notifySubscribers = (): void => {\n    if (this.contentContainer) {\n      this._subscribers.forEach((handle) => {\n        // this.stickyBelow is passed in for calculating distance to determine Sticky status\n        handle(this.contentContainer, this.stickyBelow);\n      });\n    }\n  }\n\n  public getScrollPosition = (): number => {\n    if (this.contentContainer) {\n      return this.contentContainer.scrollTop;\n    }\n\n    return 0;\n  }\n\n  private _checkStickyStatus(sticky: Sticky): void {\n    if (this.stickyAbove && this.stickyBelow && this.contentContainer && sticky.nonStickyContent) {\n      // If sticky is sticky, then append content to appropriate container\n      if (sticky.state.isStickyTop || sticky.state.isStickyBottom) {\n        if (sticky.state.isStickyTop && !this.stickyAbove.contains(sticky.nonStickyContent) && sticky.stickyContentTop) {\n          sticky.addSticky(sticky.stickyContentTop);\n        }\n\n        if (sticky.state.isStickyBottom && !this.stickyBelow.contains(sticky.nonStickyContent) && sticky.stickyContentBottom) {\n          sticky.addSticky(sticky.stickyContentBottom);\n        }\n      } else if (!this.contentContainer.contains(sticky.nonStickyContent)) {\n        // Reset sticky if it's not sticky and not in the contentContainer element\n        sticky.resetSticky();\n      }\n    }\n  }\n\n  private _addToStickyContainer = (sticky: Sticky, stickyContainer: HTMLDivElement, stickyContentToAdd: HTMLDivElement): void => {\n    // If there's no children, append child to list, otherwise, sort though array and append at correct position\n    if (!stickyContainer.children.length) {\n      stickyContainer.appendChild(stickyContentToAdd);\n    } else {\n      // If stickyContentToAdd isn't a child element of target container, then append\n      if (!stickyContainer.contains(stickyContentToAdd)) {\n        const stickyChildrenElements: Element[] = [].slice.call(stickyContainer.children);\n\n        const stickyList: Sticky[] = [];\n        // Get stickies.  Filter by canStickyTop/Bottom, then sort by distance from top, and then\n        // filter by elements that are in the stickyContainer already.\n        this._stickies.forEach((stickyItem) => {\n          if (stickyContainer === this.stickyAbove && sticky.canStickyTop) {\n            stickyList.push(stickyItem);\n          } else if (sticky.canStickyBottom) {\n            stickyList.push(stickyItem);\n          }\n        });\n\n        const stickyListSorted = stickyList.sort((a, b) => {\n          return a.distanceFromTop - b.distanceFromTop;\n        }).filter((item) => {\n          const stickyContent = (stickyContainer === this.stickyAbove) ? item.stickyContentTop : item.stickyContentBottom;\n          if (stickyContent) {\n            return stickyChildrenElements.indexOf(stickyContent) > -1;\n          }\n        });\n\n        // Get first element that has a distance from top that is further than our sticky that is being added\n        let targetStickyToAppendBefore: Sticky | undefined = undefined;\n        for (const i in stickyListSorted) {\n          if (stickyListSorted[i].distanceFromTop >= sticky.distanceFromTop) {\n            targetStickyToAppendBefore = stickyListSorted[i];\n            break;\n          }\n        }\n\n        // If target element to append before is known, then grab respective stickyContentTop/Bottom element and insert before\n        let targetContainer: HTMLDivElement | null = null;\n        if (targetStickyToAppendBefore) {\n          targetContainer = stickyContainer === this.stickyAbove ?\n            targetStickyToAppendBefore.stickyContentTop :\n            targetStickyToAppendBefore.stickyContentBottom;\n        }\n        stickyContainer.insertBefore(stickyContentToAdd, targetContainer);\n      }\n    }\n  }\n\n  private _removeStickyFromContainers = (sticky: Sticky): void => {\n    if (this.stickyAbove && sticky.stickyContentTop) {\n      this.stickyAbove.removeChild(sticky.stickyContentTop);\n    }\n    if (this.stickyBelow && sticky.stickyContentBottom) {\n      this.stickyBelow.removeChild(sticky.stickyContentBottom);\n    }\n  }\n\n  private _onWindowResize = (): void => {\n    this._async.setTimeout(() => {\n      this.notifySubscribers();\n    }, 5);\n  }\n\n  private _getStickyContainerStyle = (height: number): React.CSSProperties => {\n    return {\n      height: height,\n      width: this.contentContainer ? this.contentContainer.clientWidth : '100%'\n    };\n  }\n}\n"]}