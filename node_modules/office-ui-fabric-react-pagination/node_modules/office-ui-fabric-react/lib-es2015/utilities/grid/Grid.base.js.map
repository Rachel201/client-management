{"version":3,"file":"Grid.base.js","sourceRoot":"../src/","sources":["utilities/grid/Grid.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EACL,aAAa,EACb,KAAK,EACL,QAAQ,EACR,kBAAkB,EAClB,cAAc,EACd,qBAAqB,EACtB,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAG5C,IAAM,aAAa,GAAG,kBAAkB,EAAgC,CAAC;AAEzE;IAA8B,oCAA6B;IAIzD,kBAAY,KAAiB;QAA7B,YACE,kBAAM,KAAK,CAAC,SAEb;QADC,KAAI,CAAC,GAAG,GAAG,KAAK,EAAE,CAAC;;IACrB,CAAC;IAEM,yBAAM,GAAb;QAAA,iBAgEC;QA/DO,IAAA,eAOQ,EANZ,gBAAK,EACL,4BAAW,EACX,8BAAY,EACZ,gCAAa,EACb,oBAAO,EACP,wBAAS,CACI;QAEf,IAAM,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,qBAAqB,EAAE,CAAC,qCAAqC,CAAC,CAAC,CAAC;QAE7G,IAAM,UAAU,GAAG,aAAa,CAAC,SAAU,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAM,EAAE,CAAC,CAAC;QAE3E,oDAAoD;QACpD,IAAM,WAAW,GAAY,QAAQ,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;QAE1D,IAAM,OAAO,GAAG,CACd,kDACO,SAAS,qBACE,aAAa,kBACd,OAAO,EACtB,EAAE,EAAG,IAAI,CAAC,GAAG,EACb,IAAI,EAAG,MAAM,EACb,SAAS,EAAG,UAAU,CAAC,IAAI;YAE3B,mCAEI,WAAW,CAAC,GAAG,CAAC,UAAC,IAAW,EAAE,QAAgB;gBAC5C,OAAO,CACL,4BACE,IAAI,EAAG,KAAK,EACZ,GAAG,EAAG,KAAI,CAAC,GAAG,GAAG,GAAG,GAAG,QAAQ,GAAG,MAAM,IAEtC,IAAI,CAAC,GAAG,CAAC,UAAC,IAAS,EAAE,SAAiB;oBACtC,OAAO,CACL,4BACE,IAAI,EAAG,cAAc,EACrB,GAAG,EAAG,KAAI,CAAC,GAAG,GAAG,GAAG,GAAG,SAAS,GAAG,OAAO,EAC1C,SAAS,EAAG,UAAU,CAAC,SAAS,IAE9B,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,CAC5B,CACN,CAAC;gBACJ,CAAC,CAAC,CACC,CACN,CAAC;YACJ,CAAC,CAAC,CAEE,CACD,CACV,CAAC;QAEF,wBAAwB;QACxB,OAAO,CACL,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CACjD,oBAAC,SAAS,IACR,oBAAoB,EAAG,IAAI,CAAC,KAAK,CAAC,2BAA2B,EAC7D,SAAS,EAAG,UAAU,CAAC,gBAAgB,EACvC,MAAM,EAAG,IAAI,CAAC,KAAK,CAAC,MAAM,IAExB,OAAO,CACC,CACb,CAAC,CAAC;IACP,CAAC;IACH,eAAC;AAAD,CAAC,AA1ED,CAA8B,aAAa,GA0E1C","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  getId,\n  toMatrix,\n  classNamesFunction,\n  getNativeProps,\n  htmlElementProperties\n} from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nimport { IGrid, IGridProps, IGridStyleProps, IGridStyles } from './Grid.types';\n\nconst getClassNames = classNamesFunction<IGridStyleProps, IGridStyles>();\n\nexport class GridBase extends BaseComponent<IGridProps, {}> implements IGrid {\n\n  private _id: string;\n\n  constructor(props: IGridProps) {\n    super(props);\n    this._id = getId();\n  }\n\n  public render(): JSX.Element {\n    const {\n      items,\n      columnCount,\n      onRenderItem,\n      positionInSet,\n      setSize,\n      getStyles\n    } = this.props;\n\n    const htmlProps = getNativeProps(this.props, htmlElementProperties, ['onBlur, aria-posinset, aria-setsize']);\n\n    const classNames = getClassNames(getStyles!, { theme: this.props.theme! });\n\n    // Array to store the cells in the correct row index\n    const rowsOfItems: any[][] = toMatrix(items, columnCount);\n\n    const content = (\n      <table\n        { ...htmlProps }\n        aria-posinset={ positionInSet }\n        aria-setsize={ setSize }\n        id={ this._id }\n        role={ 'grid' }\n        className={ classNames.root }\n      >\n        <tbody>\n          {\n            rowsOfItems.map((rows: any[], rowIndex: number) => {\n              return (\n                <tr\n                  role={ 'row' }\n                  key={ this._id + '-' + rowIndex + '-row' }\n                >\n                  { rows.map((cell: any, cellIndex: number) => {\n                    return (\n                      <td\n                        role={ 'presentation' }\n                        key={ this._id + '-' + cellIndex + '-cell' }\n                        className={ classNames.tableCell }\n                      >\n                        { onRenderItem(cell, cellIndex) }\n                      </td>\n                    );\n                  }) }\n                </tr>\n              );\n            })\n          }\n        </tbody>\n      </table >\n    );\n\n    // Create the table/grid\n    return (\n      this.props.doNotContainWithinFocusZone ? content : (\n        <FocusZone\n          isCircularNavigation={ this.props.shouldFocusCircularNavigate }\n          className={ classNames.focusedContainer }\n          onBlur={ this.props.onBlur }\n        >\n          { content }\n        </FocusZone>\n      ));\n  }\n}"]}